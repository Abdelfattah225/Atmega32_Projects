
MCU3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000440a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014a  00800060  0000440a  0000449e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008001aa  008001aa  000045e8  2**0
                  ALLOC
  3 .stab         00003204  00000000  00000000  000045e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fdc  00000000  00000000  000077ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000087c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000aafc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000bbfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000cb80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000cd00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000cfc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d850  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__vector_1>
       8:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__vector_2>
       c:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9b 14 	call	0x2936	; 0x2936 <main>
      8a:	0c 94 03 22 	jmp	0x4406	; 0x4406 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 87 21 	jmp	0x430e	; 0x430e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e9       	ldi	r26, 0x9F	; 159
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a3 21 	jmp	0x4346	; 0x4346 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 93 21 	jmp	0x4326	; 0x4326 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 af 21 	jmp	0x435e	; 0x435e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 93 21 	jmp	0x4326	; 0x4326 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 af 21 	jmp	0x435e	; 0x435e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 87 21 	jmp	0x430e	; 0x430e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e9       	ldi	r24, 0x9F	; 159
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a3 21 	jmp	0x4346	; 0x4346 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8f 21 	jmp	0x431e	; 0x431e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e9       	ldi	r22, 0x9F	; 159
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ab 21 	jmp	0x4356	; 0x4356 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 93 21 	jmp	0x4326	; 0x4326 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 af 21 	jmp	0x435e	; 0x435e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 93 21 	jmp	0x4326	; 0x4326 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 af 21 	jmp	0x435e	; 0x435e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 93 21 	jmp	0x4326	; 0x4326 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 af 21 	jmp	0x435e	; 0x435e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 97 21 	jmp	0x432e	; 0x432e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b3 21 	jmp	0x4366	; 0x4366 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_void_Init>:
#include"ADC_interface.h"
#include"ADC_config.h"
#include"ADC_private.h"

void ADC_void_Init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	// ADC enable
	Set_Bit(ADC_U8_ADCSRA,DIO_U8_PIN7);
     ca6:	a6 e2       	ldi	r26, 0x26	; 38
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e6 e2       	ldi	r30, 0x26	; 38
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 68       	ori	r24, 0x80	; 128
     cb2:	8c 93       	st	X, r24
	// PRESCALER = 128
	Assign_Bit(ADC_U8_ADCSRA,DIO_U8_PIN0 ,PRESCALER_U8_ADPS0);
     cb4:	a6 e2       	ldi	r26, 0x26	; 38
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e6 e2       	ldi	r30, 0x26	; 38
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8e 7f       	andi	r24, 0xFE	; 254
     cc0:	8c 93       	st	X, r24
	Assign_Bit(ADC_U8_ADCSRA,DIO_U8_PIN1 ,PRESCALER_U8_ADPS1);
     cc2:	a6 e2       	ldi	r26, 0x26	; 38
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e6 e2       	ldi	r30, 0x26	; 38
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	82 60       	ori	r24, 0x02	; 2
     cce:	8c 93       	st	X, r24
	Assign_Bit(ADC_U8_ADCSRA,DIO_U8_PIN2 ,PRESCALER_U8_ADPS2);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	84 60       	ori	r24, 0x04	; 4
     cdc:	8c 93       	st	X, r24
    //REF. VOLATAGE -->5v
	Assign_Bit(ADC_U8_ADMUX,DIO_U8_PIN6,REF_VOLTAGE_REFS0);
     cde:	a7 e2       	ldi	r26, 0x27	; 39
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e7 e2       	ldi	r30, 0x27	; 39
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 64       	ori	r24, 0x40	; 64
     cea:	8c 93       	st	X, r24
	Assign_Bit(ADC_U8_ADMUX,DIO_U8_PIN7,REF_VOLTAGE_REFS1);
     cec:	a7 e2       	ldi	r26, 0x27	; 39
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e7 e2       	ldi	r30, 0x27	; 39
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	80 68       	ori	r24, 0x80	; 128
     cf8:	8c 93       	st	X, r24
	// LEFT ADUSTMENT
	Assign_Bit(ADC_U8_ADMUX,DIO_U8_PIN5 ,ADMUX_U8_ADLAR);
     cfa:	a7 e2       	ldi	r26, 0x27	; 39
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e7 e2       	ldi	r30, 0x27	; 39
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 62       	ori	r24, 0x20	; 32
     d06:	8c 93       	st	X, r24

}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <ADC_U16_Read>:

u16 ADC_U16_Read(u8 channel)
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <ADC_U16_Read+0x6>
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	8b 83       	std	Y+3, r24	; 0x03
	// choose channel
	ADC_U8_ADMUX &=0b11100000;
     d1c:	a7 e2       	ldi	r26, 0x27	; 39
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e7 e2       	ldi	r30, 0x27	; 39
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	80 7e       	andi	r24, 0xE0	; 224
     d28:	8c 93       	st	X, r24
	ADC_U8_ADMUX |=channel;
     d2a:	a7 e2       	ldi	r26, 0x27	; 39
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e7 e2       	ldi	r30, 0x27	; 39
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	90 81       	ld	r25, Z
     d34:	8b 81       	ldd	r24, Y+3	; 0x03
     d36:	89 2b       	or	r24, r25
     d38:	8c 93       	st	X, r24
	// Start conversion
	Set_Bit(ADC_U8_ADCSRA, DIO_U8_PIN6);
     d3a:	a6 e2       	ldi	r26, 0x26	; 38
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e6 e2       	ldi	r30, 0x26	; 38
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	80 64       	ori	r24, 0x40	; 64
     d46:	8c 93       	st	X, r24
	while(Get_Bit(ADC_U8_ADCSRA,DIO_U8_PIN4)!=1);
     d48:	e6 e2       	ldi	r30, 0x26	; 38
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	82 95       	swap	r24
     d50:	8f 70       	andi	r24, 0x0F	; 15
     d52:	88 2f       	mov	r24, r24
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	81 70       	andi	r24, 0x01	; 1
     d58:	90 70       	andi	r25, 0x00	; 0
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	a9 f3       	breq	.-22     	; 0xd48 <ADC_U16_Read+0x3a>
	Set_Bit(ADC_U8_ADCSRA,DIO_U8_PIN4);
     d5e:	a6 e2       	ldi	r26, 0x26	; 38
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e6 e2       	ldi	r30, 0x26	; 38
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	80 61       	ori	r24, 0x10	; 16
     d6a:	8c 93       	st	X, r24

	u16 result = (ADC_U8_ADCL>>6);
     d6c:	e4 e2       	ldi	r30, 0x24	; 36
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	82 95       	swap	r24
     d74:	86 95       	lsr	r24
     d76:	86 95       	lsr	r24
     d78:	83 70       	andi	r24, 0x03	; 3
     d7a:	88 2f       	mov	r24, r24
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	9a 83       	std	Y+2, r25	; 0x02
     d80:	89 83       	std	Y+1, r24	; 0x01
	result|=((u16)(ADC_U8_ADCH<<2));
     d82:	e5 e2       	ldi	r30, 0x25	; 37
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	88 2f       	mov	r24, r24
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	9c 01       	movw	r18, r24
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	82 2b       	or	r24, r18
     d9c:	93 2b       	or	r25, r19
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	return result;
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
}
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	08 95       	ret

00000db2 <INTIAL_DIR>:
/*****************************************************************************/
/***********************************fucntion**********************************/
/********************************************************************************/

u8 INTIAL_DIR(u8 p0 , u8 p1 , u8 p2 , u8 p3 , u8 p4 , u8 p5 , u8 p6 , u8 p7)
{
     db2:	af 92       	push	r10
     db4:	cf 92       	push	r12
     db6:	ef 92       	push	r14
     db8:	0f 93       	push	r16
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	29 97       	sbiw	r28, 0x09	; 9
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	f8 94       	cli
     dc8:	de bf       	out	0x3e, r29	; 62
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	cd bf       	out	0x3d, r28	; 61
     dce:	8a 83       	std	Y+2, r24	; 0x02
     dd0:	6b 83       	std	Y+3, r22	; 0x03
     dd2:	4c 83       	std	Y+4, r20	; 0x04
     dd4:	2d 83       	std	Y+5, r18	; 0x05
     dd6:	0e 83       	std	Y+6, r16	; 0x06
     dd8:	ef 82       	std	Y+7, r14	; 0x07
     dda:	c8 86       	std	Y+8, r12	; 0x08
     ddc:	a9 86       	std	Y+9, r10	; 0x09
	u8 port = 0x00 ;
     dde:	19 82       	std	Y+1, r1	; 0x01
	Assign_Bit(port,DIO_U8_PIN0,p0);
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	81 30       	cpi	r24, 0x01	; 1
     de4:	21 f4       	brne	.+8      	; 0xdee <INTIAL_DIR+0x3c>
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	81 60       	ori	r24, 0x01	; 1
     dea:	89 83       	std	Y+1, r24	; 0x01
     dec:	03 c0       	rjmp	.+6      	; 0xdf4 <INTIAL_DIR+0x42>
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	8e 7f       	andi	r24, 0xFE	; 254
     df2:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN1,p1);
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	21 f4       	brne	.+8      	; 0xe02 <INTIAL_DIR+0x50>
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	82 60       	ori	r24, 0x02	; 2
     dfe:	89 83       	std	Y+1, r24	; 0x01
     e00:	03 c0       	rjmp	.+6      	; 0xe08 <INTIAL_DIR+0x56>
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	8d 7f       	andi	r24, 0xFD	; 253
     e06:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN2,p2);
     e08:	8c 81       	ldd	r24, Y+4	; 0x04
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	21 f4       	brne	.+8      	; 0xe16 <INTIAL_DIR+0x64>
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	84 60       	ori	r24, 0x04	; 4
     e12:	89 83       	std	Y+1, r24	; 0x01
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <INTIAL_DIR+0x6a>
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	8b 7f       	andi	r24, 0xFB	; 251
     e1a:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN3,p3);
     e1c:	8d 81       	ldd	r24, Y+5	; 0x05
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	21 f4       	brne	.+8      	; 0xe2a <INTIAL_DIR+0x78>
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	88 60       	ori	r24, 0x08	; 8
     e26:	89 83       	std	Y+1, r24	; 0x01
     e28:	03 c0       	rjmp	.+6      	; 0xe30 <INTIAL_DIR+0x7e>
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	87 7f       	andi	r24, 0xF7	; 247
     e2e:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN4,p4);
     e30:	8e 81       	ldd	r24, Y+6	; 0x06
     e32:	81 30       	cpi	r24, 0x01	; 1
     e34:	21 f4       	brne	.+8      	; 0xe3e <INTIAL_DIR+0x8c>
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	80 61       	ori	r24, 0x10	; 16
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <INTIAL_DIR+0x92>
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	8f 7e       	andi	r24, 0xEF	; 239
     e42:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN5,p5);
     e44:	8f 81       	ldd	r24, Y+7	; 0x07
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	21 f4       	brne	.+8      	; 0xe52 <INTIAL_DIR+0xa0>
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	80 62       	ori	r24, 0x20	; 32
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	03 c0       	rjmp	.+6      	; 0xe58 <INTIAL_DIR+0xa6>
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	8f 7d       	andi	r24, 0xDF	; 223
     e56:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN6,p6);
     e58:	88 85       	ldd	r24, Y+8	; 0x08
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	21 f4       	brne	.+8      	; 0xe66 <INTIAL_DIR+0xb4>
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	80 64       	ori	r24, 0x40	; 64
     e62:	89 83       	std	Y+1, r24	; 0x01
     e64:	03 c0       	rjmp	.+6      	; 0xe6c <INTIAL_DIR+0xba>
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	8f 7b       	andi	r24, 0xBF	; 191
     e6a:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN7,p7);
     e6c:	89 85       	ldd	r24, Y+9	; 0x09
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	21 f4       	brne	.+8      	; 0xe7a <INTIAL_DIR+0xc8>
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	80 68       	ori	r24, 0x80	; 128
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	03 c0       	rjmp	.+6      	; 0xe80 <INTIAL_DIR+0xce>
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	8f 77       	andi	r24, 0x7F	; 127
     e7e:	89 83       	std	Y+1, r24	; 0x01
	return port;
     e80:	89 81       	ldd	r24, Y+1	; 0x01

}
     e82:	29 96       	adiw	r28, 0x09	; 9
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	0f 91       	pop	r16
     e94:	ef 90       	pop	r14
     e96:	cf 90       	pop	r12
     e98:	af 90       	pop	r10
     e9a:	08 95       	ret

00000e9c <DIO_void_Init>:


void DIO_void_Init(void)
{
     e9c:	8f 92       	push	r8
     e9e:	9f 92       	push	r9
     ea0:	af 92       	push	r10
     ea2:	cf 92       	push	r12
     ea4:	ef 92       	push	r14
     ea6:	0f 93       	push	r16
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
	/*direction*/
	DIO_U8_DDRA =INTIAL_DIR(DIO_u8_PA0_INTIAL_DIR,DIO_u8_PA1_INTIAL_DIR,DIO_u8_PA2_INTIAL_DIR,DIO_u8_PA3_INTIAL_DIR,DIO_u8_PA4_INTIAL_DIR,DIO_u8_PA5_INTIAL_DIR,DIO_u8_PA6_INTIAL_DIR,DIO_u8_PA7_INTIAL_DIR);
     eb0:	0f 2e       	mov	r0, r31
     eb2:	fa e3       	ldi	r31, 0x3A	; 58
     eb4:	8f 2e       	mov	r8, r31
     eb6:	99 24       	eor	r9, r9
     eb8:	f0 2d       	mov	r31, r0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	61 e0       	ldi	r22, 0x01	; 1
     ebe:	41 e0       	ldi	r20, 0x01	; 1
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	00 e0       	ldi	r16, 0x00	; 0
     ec4:	ee 24       	eor	r14, r14
     ec6:	cc 24       	eor	r12, r12
     ec8:	aa 24       	eor	r10, r10
     eca:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <INTIAL_DIR>
     ece:	f4 01       	movw	r30, r8
     ed0:	80 83       	st	Z, r24
	DIO_U8_DDRB =INTIAL_DIR(DIO_u8_PB0_INTIAL_DIR,DIO_u8_PB1_INTIAL_DIR,DIO_u8_PB2_INTIAL_DIR,DIO_u8_PB3_INTIAL_DIR,DIO_u8_PB4_INTIAL_DIR,DIO_u8_PB5_INTIAL_DIR,DIO_u8_PB6_INTIAL_DIR,DIO_u8_PB7_INTIAL_DIR);
     ed2:	0f 2e       	mov	r0, r31
     ed4:	f7 e3       	ldi	r31, 0x37	; 55
     ed6:	8f 2e       	mov	r8, r31
     ed8:	99 24       	eor	r9, r9
     eda:	f0 2d       	mov	r31, r0
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	40 e0       	ldi	r20, 0x00	; 0
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	00 e0       	ldi	r16, 0x00	; 0
     ee6:	ee 24       	eor	r14, r14
     ee8:	cc 24       	eor	r12, r12
     eea:	c3 94       	inc	r12
     eec:	aa 24       	eor	r10, r10
     eee:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <INTIAL_DIR>
     ef2:	f4 01       	movw	r30, r8
     ef4:	80 83       	st	Z, r24
	DIO_U8_DDRC =INTIAL_DIR(DIO_u8_PC0_INTIAL_DIR,DIO_u8_PC1_INTIAL_DIR,DIO_u8_PC2_INTIAL_DIR,DIO_u8_PC3_INTIAL_DIR,DIO_u8_PC4_INTIAL_DIR,DIO_u8_PC5_INTIAL_DIR,DIO_u8_PC6_INTIAL_DIR,DIO_u8_PC7_INTIAL_DIR);
     ef6:	0f 2e       	mov	r0, r31
     ef8:	f4 e3       	ldi	r31, 0x34	; 52
     efa:	8f 2e       	mov	r8, r31
     efc:	99 24       	eor	r9, r9
     efe:	f0 2d       	mov	r31, r0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	61 e0       	ldi	r22, 0x01	; 1
     f04:	41 e0       	ldi	r20, 0x01	; 1
     f06:	21 e0       	ldi	r18, 0x01	; 1
     f08:	01 e0       	ldi	r16, 0x01	; 1
     f0a:	ee 24       	eor	r14, r14
     f0c:	e3 94       	inc	r14
     f0e:	cc 24       	eor	r12, r12
     f10:	c3 94       	inc	r12
     f12:	aa 24       	eor	r10, r10
     f14:	a3 94       	inc	r10
     f16:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <INTIAL_DIR>
     f1a:	f4 01       	movw	r30, r8
     f1c:	80 83       	st	Z, r24
	DIO_U8_DDRD =INTIAL_DIR(DIO_u8_PD0_INTIAL_DIR,DIO_u8_PD1_INTIAL_DIR,DIO_u8_PD2_INTIAL_DIR,DIO_u8_PD3_INTIAL_DIR,DIO_u8_PD4_INTIAL_DIR,DIO_u8_PD5_INTIAL_DIR,DIO_u8_PD6_INTIAL_DIR,DIO_u8_PD7_INTIAL_DIR);
     f1e:	0f 2e       	mov	r0, r31
     f20:	f1 e3       	ldi	r31, 0x31	; 49
     f22:	8f 2e       	mov	r8, r31
     f24:	99 24       	eor	r9, r9
     f26:	f0 2d       	mov	r31, r0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	01 e0       	ldi	r16, 0x01	; 1
     f32:	ee 24       	eor	r14, r14
     f34:	e3 94       	inc	r14
     f36:	cc 24       	eor	r12, r12
     f38:	c3 94       	inc	r12
     f3a:	aa 24       	eor	r10, r10
     f3c:	a3 94       	inc	r10
     f3e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <INTIAL_DIR>
     f42:	f4 01       	movw	r30, r8
     f44:	80 83       	st	Z, r24
}
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	0f 91       	pop	r16
     f4c:	ef 90       	pop	r14
     f4e:	cf 90       	pop	r12
     f50:	af 90       	pop	r10
     f52:	9f 90       	pop	r9
     f54:	8f 90       	pop	r8
     f56:	08 95       	ret

00000f58 <DIO_U8_Set_Pin_Dir>:

u8 DIO_U8_Set_Pin_Dir(u8 Copy_U8_Port_ID , u8 Copy_U8_Pin_ID , u8 Copy_U8_Pin_Dir)
{
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <DIO_U8_Set_Pin_Dir+0x6>
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <DIO_U8_Set_Pin_Dir+0x8>
     f60:	00 d0       	rcall	.+0      	; 0xf62 <DIO_U8_Set_Pin_Dir+0xa>
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	6a 83       	std	Y+2, r22	; 0x02
     f6a:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	84 30       	cpi	r24, 0x04	; 4
     f70:	08 f0       	brcs	.+2      	; 0xf74 <DIO_U8_Set_Pin_Dir+0x1c>
     f72:	e4 c0       	rjmp	.+456    	; 0x113c <DIO_U8_Set_Pin_Dir+0x1e4>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	88 30       	cpi	r24, 0x08	; 8
     f78:	08 f0       	brcs	.+2      	; 0xf7c <DIO_U8_Set_Pin_Dir+0x24>
     f7a:	dd c0       	rjmp	.+442    	; 0x1136 <DIO_U8_Set_Pin_Dir+0x1de>
		{
			if((Copy_U8_Pin_Dir==PIN_INPUT)||(Copy_U8_Pin_Dir==PIN_OUTPUT))
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	88 23       	and	r24, r24
     f80:	21 f0       	breq	.+8      	; 0xf8a <DIO_U8_Set_Pin_Dir+0x32>
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	09 f0       	breq	.+2      	; 0xf8a <DIO_U8_Set_Pin_Dir+0x32>
     f88:	d4 c0       	rjmp	.+424    	; 0x1132 <DIO_U8_Set_Pin_Dir+0x1da>
			{
				switch(Copy_U8_Port_ID)
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	3e 83       	std	Y+6, r19	; 0x06
     f92:	2d 83       	std	Y+5, r18	; 0x05
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	9e 81       	ldd	r25, Y+6	; 0x06
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	91 05       	cpc	r25, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <DIO_U8_Set_Pin_Dir+0x48>
     f9e:	43 c0       	rjmp	.+134    	; 0x1026 <DIO_U8_Set_Pin_Dir+0xce>
     fa0:	2d 81       	ldd	r18, Y+5	; 0x05
     fa2:	3e 81       	ldd	r19, Y+6	; 0x06
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	31 05       	cpc	r19, r1
     fa8:	2c f4       	brge	.+10     	; 0xfb4 <DIO_U8_Set_Pin_Dir+0x5c>
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	9e 81       	ldd	r25, Y+6	; 0x06
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	71 f0       	breq	.+28     	; 0xfce <DIO_U8_Set_Pin_Dir+0x76>
     fb2:	bc c0       	rjmp	.+376    	; 0x112c <DIO_U8_Set_Pin_Dir+0x1d4>
     fb4:	2d 81       	ldd	r18, Y+5	; 0x05
     fb6:	3e 81       	ldd	r19, Y+6	; 0x06
     fb8:	22 30       	cpi	r18, 0x02	; 2
     fba:	31 05       	cpc	r19, r1
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <DIO_U8_Set_Pin_Dir+0x68>
     fbe:	5f c0       	rjmp	.+190    	; 0x107e <DIO_U8_Set_Pin_Dir+0x126>
     fc0:	8d 81       	ldd	r24, Y+5	; 0x05
     fc2:	9e 81       	ldd	r25, Y+6	; 0x06
     fc4:	83 30       	cpi	r24, 0x03	; 3
     fc6:	91 05       	cpc	r25, r1
     fc8:	09 f4       	brne	.+2      	; 0xfcc <DIO_U8_Set_Pin_Dir+0x74>
     fca:	85 c0       	rjmp	.+266    	; 0x10d6 <DIO_U8_Set_Pin_Dir+0x17e>
     fcc:	af c0       	rjmp	.+350    	; 0x112c <DIO_U8_Set_Pin_Dir+0x1d4>
				{
				case PORTA_ID:
					Assign_Bit(DIO_U8_DDRA,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	a1 f4       	brne	.+40     	; 0xffc <DIO_U8_Set_Pin_Dir+0xa4>
     fd4:	aa e3       	ldi	r26, 0x3A	; 58
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	ea e3       	ldi	r30, 0x3A	; 58
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_U8_Set_Pin_Dir+0x9a>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <DIO_U8_Set_Pin_Dir+0x96>
     ff6:	84 2b       	or	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	98 c0       	rjmp	.+304    	; 0x112c <DIO_U8_Set_Pin_Dir+0x1d4>
     ffc:	aa e3       	ldi	r26, 0x3A	; 58
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	ea e3       	ldi	r30, 0x3A	; 58
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <DIO_U8_Set_Pin_Dir+0xc2>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <DIO_U8_Set_Pin_Dir+0xbe>
    101e:	80 95       	com	r24
    1020:	84 23       	and	r24, r20
    1022:	8c 93       	st	X, r24
    1024:	83 c0       	rjmp	.+262    	; 0x112c <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTB_ID:
					Assign_Bit(DIO_U8_DDRB,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	a1 f4       	brne	.+40     	; 0x1054 <DIO_U8_Set_Pin_Dir+0xfc>
    102c:	a7 e3       	ldi	r26, 0x37	; 55
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e7 e3       	ldi	r30, 0x37	; 55
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	48 2f       	mov	r20, r24
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	02 2e       	mov	r0, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <DIO_U8_Set_Pin_Dir+0xf2>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	0a 94       	dec	r0
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <DIO_U8_Set_Pin_Dir+0xee>
    104e:	84 2b       	or	r24, r20
    1050:	8c 93       	st	X, r24
    1052:	6c c0       	rjmp	.+216    	; 0x112c <DIO_U8_Set_Pin_Dir+0x1d4>
    1054:	a7 e3       	ldi	r26, 0x37	; 55
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e7 e3       	ldi	r30, 0x37	; 55
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 2e       	mov	r0, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <DIO_U8_Set_Pin_Dir+0x11a>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <DIO_U8_Set_Pin_Dir+0x116>
    1076:	80 95       	com	r24
    1078:	84 23       	and	r24, r20
    107a:	8c 93       	st	X, r24
    107c:	57 c0       	rjmp	.+174    	; 0x112c <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTC_ID:
					Assign_Bit(DIO_U8_DDRC,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	a1 f4       	brne	.+40     	; 0x10ac <DIO_U8_Set_Pin_Dir+0x154>
    1084:	a4 e3       	ldi	r26, 0x34	; 52
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e4 e3       	ldi	r30, 0x34	; 52
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <DIO_U8_Set_Pin_Dir+0x14a>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <DIO_U8_Set_Pin_Dir+0x146>
    10a6:	84 2b       	or	r24, r20
    10a8:	8c 93       	st	X, r24
    10aa:	40 c0       	rjmp	.+128    	; 0x112c <DIO_U8_Set_Pin_Dir+0x1d4>
    10ac:	a4 e3       	ldi	r26, 0x34	; 52
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e4 e3       	ldi	r30, 0x34	; 52
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_U8_Set_Pin_Dir+0x172>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_U8_Set_Pin_Dir+0x16e>
    10ce:	80 95       	com	r24
    10d0:	84 23       	and	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	2b c0       	rjmp	.+86     	; 0x112c <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTD_ID:
					Assign_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	a1 f4       	brne	.+40     	; 0x1104 <DIO_U8_Set_Pin_Dir+0x1ac>
    10dc:	a1 e3       	ldi	r26, 0x31	; 49
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e1 e3       	ldi	r30, 0x31	; 49
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <DIO_U8_Set_Pin_Dir+0x1a2>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <DIO_U8_Set_Pin_Dir+0x19e>
    10fe:	84 2b       	or	r24, r20
    1100:	8c 93       	st	X, r24
    1102:	14 c0       	rjmp	.+40     	; 0x112c <DIO_U8_Set_Pin_Dir+0x1d4>
    1104:	a1 e3       	ldi	r26, 0x31	; 49
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e1 e3       	ldi	r30, 0x31	; 49
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <DIO_U8_Set_Pin_Dir+0x1ca>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <DIO_U8_Set_Pin_Dir+0x1c6>
    1126:	80 95       	com	r24
    1128:	84 23       	and	r24, r20
    112a:	8c 93       	st	X, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    112c:	93 e0       	ldi	r25, 0x03	; 3
    112e:	9c 83       	std	Y+4, r25	; 0x04
    1130:	07 c0       	rjmp	.+14     	; 0x1140 <DIO_U8_Set_Pin_Dir+0x1e8>

				}
			}
			else
			{
				return WRONG_PIN_DIR;
    1132:	1c 82       	std	Y+4, r1	; 0x04
    1134:	05 c0       	rjmp	.+10     	; 0x1140 <DIO_U8_Set_Pin_Dir+0x1e8>
			}
		}
		else{
			return WRONG_PIN;
    1136:	21 e0       	ldi	r18, 0x01	; 1
    1138:	2c 83       	std	Y+4, r18	; 0x04
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_U8_Set_Pin_Dir+0x1e8>


	}
	else
	{
		return WRONG_PORT;
    113c:	32 e0       	ldi	r19, 0x02	; 2
    113e:	3c 83       	std	Y+4, r19	; 0x04
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    1142:	26 96       	adiw	r28, 0x06	; 6
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	08 95       	ret

00001154 <DIO_U8_Set_Port_Dir>:




u8 DIO_U8_Set_Port_Dir(u8 Copy_U8_Port_ID  , u16 Copy_U8_PORT_Dir)
{
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	00 d0       	rcall	.+0      	; 0x115a <DIO_U8_Set_Port_Dir+0x6>
    115a:	00 d0       	rcall	.+0      	; 0x115c <DIO_U8_Set_Port_Dir+0x8>
    115c:	00 d0       	rcall	.+0      	; 0x115e <DIO_U8_Set_Port_Dir+0xa>
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	89 83       	std	Y+1, r24	; 0x01
    1164:	7b 83       	std	Y+3, r23	; 0x03
    1166:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	84 30       	cpi	r24, 0x04	; 4
    116c:	08 f0       	brcs	.+2      	; 0x1170 <DIO_U8_Set_Port_Dir+0x1c>
    116e:	3d c0       	rjmp	.+122    	; 0x11ea <DIO_U8_Set_Port_Dir+0x96>
	{
		if((Copy_U8_PORT_Dir)>=MIN_DIR_OR_VALUE&&(Copy_U8_PORT_Dir)<=MAX_DIR_OR_VALUE)
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	9b 81       	ldd	r25, Y+3	; 0x03
    1174:	8f 3f       	cpi	r24, 0xFF	; 255
    1176:	91 05       	cpc	r25, r1
    1178:	09 f0       	breq	.+2      	; 0x117c <DIO_U8_Set_Port_Dir+0x28>
    117a:	a8 f5       	brcc	.+106    	; 0x11e6 <DIO_U8_Set_Port_Dir+0x92>
		{
				switch(Copy_U8_Port_ID)
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	3e 83       	std	Y+6, r19	; 0x06
    1184:	2d 83       	std	Y+5, r18	; 0x05
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	9e 81       	ldd	r25, Y+6	; 0x06
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	91 05       	cpc	r25, r1
    118e:	d1 f0       	breq	.+52     	; 0x11c4 <DIO_U8_Set_Port_Dir+0x70>
    1190:	2d 81       	ldd	r18, Y+5	; 0x05
    1192:	3e 81       	ldd	r19, Y+6	; 0x06
    1194:	22 30       	cpi	r18, 0x02	; 2
    1196:	31 05       	cpc	r19, r1
    1198:	2c f4       	brge	.+10     	; 0x11a4 <DIO_U8_Set_Port_Dir+0x50>
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	9e 81       	ldd	r25, Y+6	; 0x06
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	61 f0       	breq	.+24     	; 0x11ba <DIO_U8_Set_Port_Dir+0x66>
    11a2:	1e c0       	rjmp	.+60     	; 0x11e0 <DIO_U8_Set_Port_Dir+0x8c>
    11a4:	2d 81       	ldd	r18, Y+5	; 0x05
    11a6:	3e 81       	ldd	r19, Y+6	; 0x06
    11a8:	22 30       	cpi	r18, 0x02	; 2
    11aa:	31 05       	cpc	r19, r1
    11ac:	81 f0       	breq	.+32     	; 0x11ce <DIO_U8_Set_Port_Dir+0x7a>
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	83 30       	cpi	r24, 0x03	; 3
    11b4:	91 05       	cpc	r25, r1
    11b6:	81 f0       	breq	.+32     	; 0x11d8 <DIO_U8_Set_Port_Dir+0x84>
    11b8:	13 c0       	rjmp	.+38     	; 0x11e0 <DIO_U8_Set_Port_Dir+0x8c>
				{
				case PORTA_ID:
					DIO_U8_DDRA=Copy_U8_PORT_Dir;
    11ba:	ea e3       	ldi	r30, 0x3A	; 58
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	80 83       	st	Z, r24
    11c2:	0e c0       	rjmp	.+28     	; 0x11e0 <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTB_ID:
					DIO_U8_DDRB=Copy_U8_PORT_Dir;
    11c4:	e7 e3       	ldi	r30, 0x37	; 55
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	80 83       	st	Z, r24
    11cc:	09 c0       	rjmp	.+18     	; 0x11e0 <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTC_ID:
					DIO_U8_DDRC=Copy_U8_PORT_Dir;
    11ce:	e4 e3       	ldi	r30, 0x34	; 52
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	80 83       	st	Z, r24
    11d6:	04 c0       	rjmp	.+8      	; 0x11e0 <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTD_ID:
					DIO_U8_DDRD=Copy_U8_PORT_Dir;
    11d8:	e1 e3       	ldi	r30, 0x31	; 49
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	80 83       	st	Z, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    11e0:	93 e0       	ldi	r25, 0x03	; 3
    11e2:	9c 83       	std	Y+4, r25	; 0x04
    11e4:	04 c0       	rjmp	.+8      	; 0x11ee <DIO_U8_Set_Port_Dir+0x9a>

				}
		}
		else
		{
			return WRONG_PORT_DIR;
    11e6:	1c 82       	std	Y+4, r1	; 0x04
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <DIO_U8_Set_Port_Dir+0x9a>
		}

	}
	else
	{
		return WRONG_PORT;
    11ea:	22 e0       	ldi	r18, 0x02	; 2
    11ec:	2c 83       	std	Y+4, r18	; 0x04
    11ee:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    11f0:	26 96       	adiw	r28, 0x06	; 6
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <DIO_U8_Set_Pin_value>:




u8 DIO_U8_Set_Pin_value(u8 Copy_U8_Port_ID , u8 Copy_U8_Pin_ID , u8 Copy_U8_Pin_value)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	00 d0       	rcall	.+0      	; 0x1208 <DIO_U8_Set_Pin_value+0x6>
    1208:	00 d0       	rcall	.+0      	; 0x120a <DIO_U8_Set_Pin_value+0x8>
    120a:	00 d0       	rcall	.+0      	; 0x120c <DIO_U8_Set_Pin_value+0xa>
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	6a 83       	std	Y+2, r22	; 0x02
    1214:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	84 30       	cpi	r24, 0x04	; 4
    121a:	08 f0       	brcs	.+2      	; 0x121e <DIO_U8_Set_Pin_value+0x1c>
    121c:	e4 c0       	rjmp	.+456    	; 0x13e6 <DIO_U8_Set_Pin_value+0x1e4>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	88 30       	cpi	r24, 0x08	; 8
    1222:	08 f0       	brcs	.+2      	; 0x1226 <DIO_U8_Set_Pin_value+0x24>
    1224:	dd c0       	rjmp	.+442    	; 0x13e0 <DIO_U8_Set_Pin_value+0x1de>
		{
			if((Copy_U8_Pin_value==PIN_LOW)||(Copy_U8_Pin_value==PIN_HIGH))
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	88 23       	and	r24, r24
    122a:	21 f0       	breq	.+8      	; 0x1234 <DIO_U8_Set_Pin_value+0x32>
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	09 f0       	breq	.+2      	; 0x1234 <DIO_U8_Set_Pin_value+0x32>
    1232:	d4 c0       	rjmp	.+424    	; 0x13dc <DIO_U8_Set_Pin_value+0x1da>
			{
				switch(Copy_U8_Port_ID)
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	3e 83       	std	Y+6, r19	; 0x06
    123c:	2d 83       	std	Y+5, r18	; 0x05
    123e:	8d 81       	ldd	r24, Y+5	; 0x05
    1240:	9e 81       	ldd	r25, Y+6	; 0x06
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	09 f4       	brne	.+2      	; 0x124a <DIO_U8_Set_Pin_value+0x48>
    1248:	43 c0       	rjmp	.+134    	; 0x12d0 <DIO_U8_Set_Pin_value+0xce>
    124a:	2d 81       	ldd	r18, Y+5	; 0x05
    124c:	3e 81       	ldd	r19, Y+6	; 0x06
    124e:	22 30       	cpi	r18, 0x02	; 2
    1250:	31 05       	cpc	r19, r1
    1252:	2c f4       	brge	.+10     	; 0x125e <DIO_U8_Set_Pin_value+0x5c>
    1254:	8d 81       	ldd	r24, Y+5	; 0x05
    1256:	9e 81       	ldd	r25, Y+6	; 0x06
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	71 f0       	breq	.+28     	; 0x1278 <DIO_U8_Set_Pin_value+0x76>
    125c:	bc c0       	rjmp	.+376    	; 0x13d6 <DIO_U8_Set_Pin_value+0x1d4>
    125e:	2d 81       	ldd	r18, Y+5	; 0x05
    1260:	3e 81       	ldd	r19, Y+6	; 0x06
    1262:	22 30       	cpi	r18, 0x02	; 2
    1264:	31 05       	cpc	r19, r1
    1266:	09 f4       	brne	.+2      	; 0x126a <DIO_U8_Set_Pin_value+0x68>
    1268:	5f c0       	rjmp	.+190    	; 0x1328 <DIO_U8_Set_Pin_value+0x126>
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	9e 81       	ldd	r25, Y+6	; 0x06
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	91 05       	cpc	r25, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <DIO_U8_Set_Pin_value+0x74>
    1274:	85 c0       	rjmp	.+266    	; 0x1380 <DIO_U8_Set_Pin_value+0x17e>
    1276:	af c0       	rjmp	.+350    	; 0x13d6 <DIO_U8_Set_Pin_value+0x1d4>
				{
				case PORTA_ID:
					Assign_Bit(DIO_U8_PORTA,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	a1 f4       	brne	.+40     	; 0x12a6 <DIO_U8_Set_Pin_value+0xa4>
    127e:	ab e3       	ldi	r26, 0x3B	; 59
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	eb e3       	ldi	r30, 0x3B	; 59
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <DIO_U8_Set_Pin_value+0x9a>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <DIO_U8_Set_Pin_value+0x96>
    12a0:	84 2b       	or	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	98 c0       	rjmp	.+304    	; 0x13d6 <DIO_U8_Set_Pin_value+0x1d4>
    12a6:	ab e3       	ldi	r26, 0x3B	; 59
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	eb e3       	ldi	r30, 0x3B	; 59
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <DIO_U8_Set_Pin_value+0xc2>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <DIO_U8_Set_Pin_value+0xbe>
    12c8:	80 95       	com	r24
    12ca:	84 23       	and	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	83 c0       	rjmp	.+262    	; 0x13d6 <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTB_ID:
					Assign_Bit(DIO_U8_PORTB,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	a1 f4       	brne	.+40     	; 0x12fe <DIO_U8_Set_Pin_value+0xfc>
    12d6:	a8 e3       	ldi	r26, 0x38	; 56
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e8 e3       	ldi	r30, 0x38	; 56
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <DIO_U8_Set_Pin_value+0xf2>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <DIO_U8_Set_Pin_value+0xee>
    12f8:	84 2b       	or	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	6c c0       	rjmp	.+216    	; 0x13d6 <DIO_U8_Set_Pin_value+0x1d4>
    12fe:	a8 e3       	ldi	r26, 0x38	; 56
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e8 e3       	ldi	r30, 0x38	; 56
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_U8_Set_Pin_value+0x11a>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_U8_Set_Pin_value+0x116>
    1320:	80 95       	com	r24
    1322:	84 23       	and	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	57 c0       	rjmp	.+174    	; 0x13d6 <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTC_ID:
					Assign_Bit(DIO_U8_PORTC,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	a1 f4       	brne	.+40     	; 0x1356 <DIO_U8_Set_Pin_value+0x154>
    132e:	a5 e3       	ldi	r26, 0x35	; 53
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e5 e3       	ldi	r30, 0x35	; 53
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 2e       	mov	r0, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <DIO_U8_Set_Pin_value+0x14a>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	0a 94       	dec	r0
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <DIO_U8_Set_Pin_value+0x146>
    1350:	84 2b       	or	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	40 c0       	rjmp	.+128    	; 0x13d6 <DIO_U8_Set_Pin_value+0x1d4>
    1356:	a5 e3       	ldi	r26, 0x35	; 53
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e5 e3       	ldi	r30, 0x35	; 53
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <DIO_U8_Set_Pin_value+0x172>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <DIO_U8_Set_Pin_value+0x16e>
    1378:	80 95       	com	r24
    137a:	84 23       	and	r24, r20
    137c:	8c 93       	st	X, r24
    137e:	2b c0       	rjmp	.+86     	; 0x13d6 <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTD_ID:
					Assign_Bit(DIO_U8_PORTD,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	a1 f4       	brne	.+40     	; 0x13ae <DIO_U8_Set_Pin_value+0x1ac>
    1386:	a2 e3       	ldi	r26, 0x32	; 50
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e2 e3       	ldi	r30, 0x32	; 50
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	48 2f       	mov	r20, r24
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_U8_Set_Pin_value+0x1a2>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIO_U8_Set_Pin_value+0x19e>
    13a8:	84 2b       	or	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	14 c0       	rjmp	.+40     	; 0x13d6 <DIO_U8_Set_Pin_value+0x1d4>
    13ae:	a2 e3       	ldi	r26, 0x32	; 50
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e2 e3       	ldi	r30, 0x32	; 50
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_U8_Set_Pin_value+0x1ca>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_U8_Set_Pin_value+0x1c6>
    13d0:	80 95       	com	r24
    13d2:	84 23       	and	r24, r20
    13d4:	8c 93       	st	X, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    13d6:	93 e0       	ldi	r25, 0x03	; 3
    13d8:	9c 83       	std	Y+4, r25	; 0x04
    13da:	07 c0       	rjmp	.+14     	; 0x13ea <DIO_U8_Set_Pin_value+0x1e8>

				}
			}
			else
			{
				return WRONG_PIN_value;
    13dc:	1c 82       	std	Y+4, r1	; 0x04
    13de:	05 c0       	rjmp	.+10     	; 0x13ea <DIO_U8_Set_Pin_value+0x1e8>
			}
		}
		else{
			return WRONG_PIN;
    13e0:	21 e0       	ldi	r18, 0x01	; 1
    13e2:	2c 83       	std	Y+4, r18	; 0x04
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_U8_Set_Pin_value+0x1e8>


	}
	else
	{
		return WRONG_PORT;
    13e6:	32 e0       	ldi	r19, 0x02	; 2
    13e8:	3c 83       	std	Y+4, r19	; 0x04
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    13ec:	26 96       	adiw	r28, 0x06	; 6
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <DIO_U8_Set_Port_Value>:




u8 DIO_U8_Set_Port_Value(u8 Copy_U8_Port_ID  , u16 Copy_U8_PORT_value)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	00 d0       	rcall	.+0      	; 0x1404 <DIO_U8_Set_Port_Value+0x6>
    1404:	00 d0       	rcall	.+0      	; 0x1406 <DIO_U8_Set_Port_Value+0x8>
    1406:	00 d0       	rcall	.+0      	; 0x1408 <DIO_U8_Set_Port_Value+0xa>
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	7b 83       	std	Y+3, r23	; 0x03
    1410:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_PORT_value>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_PORT_value<=DIO_MAX_U8_PROT_ID))
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	9b 81       	ldd	r25, Y+3	; 0x03
    1416:	84 30       	cpi	r24, 0x04	; 4
    1418:	91 05       	cpc	r25, r1
    141a:	08 f0       	brcs	.+2      	; 0x141e <DIO_U8_Set_Port_Value+0x20>
    141c:	3d c0       	rjmp	.+122    	; 0x1498 <DIO_U8_Set_Port_Value+0x9a>
	{
			if((Copy_U8_PORT_value)>=MIN_DIR_OR_VALUE&&(Copy_U8_PORT_value)<=MAX_DIR_OR_VALUE)
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	9b 81       	ldd	r25, Y+3	; 0x03
    1422:	8f 3f       	cpi	r24, 0xFF	; 255
    1424:	91 05       	cpc	r25, r1
    1426:	09 f0       	breq	.+2      	; 0x142a <DIO_U8_Set_Port_Value+0x2c>
    1428:	a8 f5       	brcc	.+106    	; 0x1494 <DIO_U8_Set_Port_Value+0x96>
			{
				switch(Copy_U8_Port_ID)
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	3e 83       	std	Y+6, r19	; 0x06
    1432:	2d 83       	std	Y+5, r18	; 0x05
    1434:	8d 81       	ldd	r24, Y+5	; 0x05
    1436:	9e 81       	ldd	r25, Y+6	; 0x06
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	91 05       	cpc	r25, r1
    143c:	d1 f0       	breq	.+52     	; 0x1472 <DIO_U8_Set_Port_Value+0x74>
    143e:	2d 81       	ldd	r18, Y+5	; 0x05
    1440:	3e 81       	ldd	r19, Y+6	; 0x06
    1442:	22 30       	cpi	r18, 0x02	; 2
    1444:	31 05       	cpc	r19, r1
    1446:	2c f4       	brge	.+10     	; 0x1452 <DIO_U8_Set_Port_Value+0x54>
    1448:	8d 81       	ldd	r24, Y+5	; 0x05
    144a:	9e 81       	ldd	r25, Y+6	; 0x06
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	61 f0       	breq	.+24     	; 0x1468 <DIO_U8_Set_Port_Value+0x6a>
    1450:	1e c0       	rjmp	.+60     	; 0x148e <DIO_U8_Set_Port_Value+0x90>
    1452:	2d 81       	ldd	r18, Y+5	; 0x05
    1454:	3e 81       	ldd	r19, Y+6	; 0x06
    1456:	22 30       	cpi	r18, 0x02	; 2
    1458:	31 05       	cpc	r19, r1
    145a:	81 f0       	breq	.+32     	; 0x147c <DIO_U8_Set_Port_Value+0x7e>
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	91 05       	cpc	r25, r1
    1464:	81 f0       	breq	.+32     	; 0x1486 <DIO_U8_Set_Port_Value+0x88>
    1466:	13 c0       	rjmp	.+38     	; 0x148e <DIO_U8_Set_Port_Value+0x90>
				{
				case PORTA_ID:
					DIO_U8_PORTA=Copy_U8_PORT_value;
    1468:	eb e3       	ldi	r30, 0x3B	; 59
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	80 83       	st	Z, r24
    1470:	0e c0       	rjmp	.+28     	; 0x148e <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTB_ID:
					DIO_U8_PORTB=Copy_U8_PORT_value;
    1472:	e8 e3       	ldi	r30, 0x38	; 56
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	80 83       	st	Z, r24
    147a:	09 c0       	rjmp	.+18     	; 0x148e <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTC_ID:
					DIO_U8_PORTC=Copy_U8_PORT_value;
    147c:	e5 e3       	ldi	r30, 0x35	; 53
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	80 83       	st	Z, r24
    1484:	04 c0       	rjmp	.+8      	; 0x148e <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTD_ID:
					DIO_U8_PORTD=Copy_U8_PORT_value;
    1486:	e2 e3       	ldi	r30, 0x32	; 50
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	80 83       	st	Z, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    148e:	93 e0       	ldi	r25, 0x03	; 3
    1490:	9c 83       	std	Y+4, r25	; 0x04
    1492:	04 c0       	rjmp	.+8      	; 0x149c <DIO_U8_Set_Port_Value+0x9e>

				}
			}
			else
			{
				return WRONG_PORT_VALUE;
    1494:	1c 82       	std	Y+4, r1	; 0x04
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_U8_Set_Port_Value+0x9e>


	}
	else
	{
		return WRONG_PORT;
    1498:	22 e0       	ldi	r18, 0x02	; 2
    149a:	2c 83       	std	Y+4, r18	; 0x04
    149c:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    149e:	26 96       	adiw	r28, 0x06	; 6
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <DIO_U8_Get_pin_value>:




u8 DIO_U8_Get_pin_value(u8 Copy_U8_Port_ID,u8 Copy_U8_Pin_ID , u8 *Copy_U8_Pin_Value)
{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	28 97       	sbiw	r28, 0x08	; 8
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	cd bf       	out	0x3d, r28	; 61
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	6a 83       	std	Y+2, r22	; 0x02
    14c8:	5c 83       	std	Y+4, r21	; 0x04
    14ca:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	84 30       	cpi	r24, 0x04	; 4
    14d0:	08 f0       	brcs	.+2      	; 0x14d4 <DIO_U8_Get_pin_value+0x24>
    14d2:	78 c0       	rjmp	.+240    	; 0x15c4 <DIO_U8_Get_pin_value+0x114>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	88 30       	cpi	r24, 0x08	; 8
    14d8:	08 f0       	brcs	.+2      	; 0x14dc <DIO_U8_Get_pin_value+0x2c>
    14da:	71 c0       	rjmp	.+226    	; 0x15be <DIO_U8_Get_pin_value+0x10e>
		{

			switch(Copy_U8_Port_ID)
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	3f 83       	std	Y+7, r19	; 0x07
    14e4:	2e 83       	std	Y+6, r18	; 0x06
    14e6:	4e 81       	ldd	r20, Y+6	; 0x06
    14e8:	5f 81       	ldd	r21, Y+7	; 0x07
    14ea:	41 30       	cpi	r20, 0x01	; 1
    14ec:	51 05       	cpc	r21, r1
    14ee:	59 f1       	breq	.+86     	; 0x1546 <DIO_U8_Get_pin_value+0x96>
    14f0:	8e 81       	ldd	r24, Y+6	; 0x06
    14f2:	9f 81       	ldd	r25, Y+7	; 0x07
    14f4:	82 30       	cpi	r24, 0x02	; 2
    14f6:	91 05       	cpc	r25, r1
    14f8:	34 f4       	brge	.+12     	; 0x1506 <DIO_U8_Get_pin_value+0x56>
    14fa:	2e 81       	ldd	r18, Y+6	; 0x06
    14fc:	3f 81       	ldd	r19, Y+7	; 0x07
    14fe:	21 15       	cp	r18, r1
    1500:	31 05       	cpc	r19, r1
    1502:	69 f0       	breq	.+26     	; 0x151e <DIO_U8_Get_pin_value+0x6e>
    1504:	5b c0       	rjmp	.+182    	; 0x15bc <DIO_U8_Get_pin_value+0x10c>
    1506:	4e 81       	ldd	r20, Y+6	; 0x06
    1508:	5f 81       	ldd	r21, Y+7	; 0x07
    150a:	42 30       	cpi	r20, 0x02	; 2
    150c:	51 05       	cpc	r21, r1
    150e:	79 f1       	breq	.+94     	; 0x156e <DIO_U8_Get_pin_value+0xbe>
    1510:	8e 81       	ldd	r24, Y+6	; 0x06
    1512:	9f 81       	ldd	r25, Y+7	; 0x07
    1514:	83 30       	cpi	r24, 0x03	; 3
    1516:	91 05       	cpc	r25, r1
    1518:	09 f4       	brne	.+2      	; 0x151c <DIO_U8_Get_pin_value+0x6c>
    151a:	3d c0       	rjmp	.+122    	; 0x1596 <DIO_U8_Get_pin_value+0xe6>
    151c:	4f c0       	rjmp	.+158    	; 0x15bc <DIO_U8_Get_pin_value+0x10c>
							{
				case PORTA_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINA,Copy_U8_Pin_ID);
    151e:	e9 e3       	ldi	r30, 0x39	; 57
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	88 2f       	mov	r24, r24
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	a9 01       	movw	r20, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <DIO_U8_Get_pin_value+0x86>
    1532:	55 95       	asr	r21
    1534:	47 95       	ror	r20
    1536:	8a 95       	dec	r24
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <DIO_U8_Get_pin_value+0x82>
    153a:	ca 01       	movw	r24, r20
    153c:	81 70       	andi	r24, 0x01	; 1
    153e:	eb 81       	ldd	r30, Y+3	; 0x03
    1540:	fc 81       	ldd	r31, Y+4	; 0x04
    1542:	80 83       	st	Z, r24
    1544:	3b c0       	rjmp	.+118    	; 0x15bc <DIO_U8_Get_pin_value+0x10c>
					break;
				case PORTB_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINB,Copy_U8_Pin_ID);
    1546:	e6 e3       	ldi	r30, 0x36	; 54
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	88 2f       	mov	r24, r24
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a9 01       	movw	r20, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <DIO_U8_Get_pin_value+0xae>
    155a:	55 95       	asr	r21
    155c:	47 95       	ror	r20
    155e:	8a 95       	dec	r24
    1560:	e2 f7       	brpl	.-8      	; 0x155a <DIO_U8_Get_pin_value+0xaa>
    1562:	ca 01       	movw	r24, r20
    1564:	81 70       	andi	r24, 0x01	; 1
    1566:	eb 81       	ldd	r30, Y+3	; 0x03
    1568:	fc 81       	ldd	r31, Y+4	; 0x04
    156a:	80 83       	st	Z, r24
    156c:	27 c0       	rjmp	.+78     	; 0x15bc <DIO_U8_Get_pin_value+0x10c>
					break;
				case PORTC_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINC,Copy_U8_Pin_ID);
    156e:	e3 e3       	ldi	r30, 0x33	; 51
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	88 2f       	mov	r24, r24
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a9 01       	movw	r20, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_U8_Get_pin_value+0xd6>
    1582:	55 95       	asr	r21
    1584:	47 95       	ror	r20
    1586:	8a 95       	dec	r24
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <DIO_U8_Get_pin_value+0xd2>
    158a:	ca 01       	movw	r24, r20
    158c:	81 70       	andi	r24, 0x01	; 1
    158e:	eb 81       	ldd	r30, Y+3	; 0x03
    1590:	fc 81       	ldd	r31, Y+4	; 0x04
    1592:	80 83       	st	Z, r24
    1594:	13 c0       	rjmp	.+38     	; 0x15bc <DIO_U8_Get_pin_value+0x10c>
					break;
				case PORTD_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
    1596:	e0 e3       	ldi	r30, 0x30	; 48
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	88 2f       	mov	r24, r24
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	a9 01       	movw	r20, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <DIO_U8_Get_pin_value+0xfe>
    15aa:	55 95       	asr	r21
    15ac:	47 95       	ror	r20
    15ae:	8a 95       	dec	r24
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <DIO_U8_Get_pin_value+0xfa>
    15b2:	ca 01       	movw	r24, r20
    15b4:	81 70       	andi	r24, 0x01	; 1
    15b6:	eb 81       	ldd	r30, Y+3	; 0x03
    15b8:	fc 81       	ldd	r31, Y+4	; 0x04
    15ba:	80 83       	st	Z, r24
    15bc:	07 c0       	rjmp	.+14     	; 0x15cc <DIO_U8_Get_pin_value+0x11c>
					break;
							}
		}
		else
		{
			return WRONG_PIN;
    15be:	51 e0       	ldi	r21, 0x01	; 1
    15c0:	5d 83       	std	Y+5, r21	; 0x05
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <DIO_U8_Get_pin_value+0x118>
		}
	}
	else
	{
		return WRONG_PORT;
    15c4:	82 e0       	ldi	r24, 0x02	; 2
    15c6:	8d 83       	std	Y+5, r24	; 0x05
    15c8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ca:	98 87       	std	Y+8, r25	; 0x08
	}
}
    15cc:	88 85       	ldd	r24, Y+8	; 0x08
    15ce:	28 96       	adiw	r28, 0x08	; 8
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <__vector_1>:

void (*Avoid_CallBack[3])(void);


void __vector_1(void)
{
    15e0:	1f 92       	push	r1
    15e2:	0f 92       	push	r0
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	0f 92       	push	r0
    15e8:	11 24       	eor	r1, r1
    15ea:	2f 93       	push	r18
    15ec:	3f 93       	push	r19
    15ee:	4f 93       	push	r20
    15f0:	5f 93       	push	r21
    15f2:	6f 93       	push	r22
    15f4:	7f 93       	push	r23
    15f6:	8f 93       	push	r24
    15f8:	9f 93       	push	r25
    15fa:	af 93       	push	r26
    15fc:	bf 93       	push	r27
    15fe:	ef 93       	push	r30
    1600:	ff 93       	push	r31
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
	Avoid_CallBack[0]();
    160a:	e0 91 aa 01 	lds	r30, 0x01AA
    160e:	f0 91 ab 01 	lds	r31, 0x01AB
    1612:	09 95       	icall
}
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	ff 91       	pop	r31
    161a:	ef 91       	pop	r30
    161c:	bf 91       	pop	r27
    161e:	af 91       	pop	r26
    1620:	9f 91       	pop	r25
    1622:	8f 91       	pop	r24
    1624:	7f 91       	pop	r23
    1626:	6f 91       	pop	r22
    1628:	5f 91       	pop	r21
    162a:	4f 91       	pop	r20
    162c:	3f 91       	pop	r19
    162e:	2f 91       	pop	r18
    1630:	0f 90       	pop	r0
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	0f 90       	pop	r0
    1636:	1f 90       	pop	r1
    1638:	18 95       	reti

0000163a <__vector_2>:

void __vector_2(void)
{
    163a:	1f 92       	push	r1
    163c:	0f 92       	push	r0
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	0f 92       	push	r0
    1642:	11 24       	eor	r1, r1
    1644:	2f 93       	push	r18
    1646:	3f 93       	push	r19
    1648:	4f 93       	push	r20
    164a:	5f 93       	push	r21
    164c:	6f 93       	push	r22
    164e:	7f 93       	push	r23
    1650:	8f 93       	push	r24
    1652:	9f 93       	push	r25
    1654:	af 93       	push	r26
    1656:	bf 93       	push	r27
    1658:	ef 93       	push	r30
    165a:	ff 93       	push	r31
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
	Avoid_CallBack[1]();
    1664:	e0 91 ac 01 	lds	r30, 0x01AC
    1668:	f0 91 ad 01 	lds	r31, 0x01AD
    166c:	09 95       	icall
}
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	ff 91       	pop	r31
    1674:	ef 91       	pop	r30
    1676:	bf 91       	pop	r27
    1678:	af 91       	pop	r26
    167a:	9f 91       	pop	r25
    167c:	8f 91       	pop	r24
    167e:	7f 91       	pop	r23
    1680:	6f 91       	pop	r22
    1682:	5f 91       	pop	r21
    1684:	4f 91       	pop	r20
    1686:	3f 91       	pop	r19
    1688:	2f 91       	pop	r18
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	0f 90       	pop	r0
    1690:	1f 90       	pop	r1
    1692:	18 95       	reti

00001694 <__vector_3>:

void __vector_3(void)
{
    1694:	1f 92       	push	r1
    1696:	0f 92       	push	r0
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	0f 92       	push	r0
    169c:	11 24       	eor	r1, r1
    169e:	2f 93       	push	r18
    16a0:	3f 93       	push	r19
    16a2:	4f 93       	push	r20
    16a4:	5f 93       	push	r21
    16a6:	6f 93       	push	r22
    16a8:	7f 93       	push	r23
    16aa:	8f 93       	push	r24
    16ac:	9f 93       	push	r25
    16ae:	af 93       	push	r26
    16b0:	bf 93       	push	r27
    16b2:	ef 93       	push	r30
    16b4:	ff 93       	push	r31
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	Avoid_CallBack[2]();
    16be:	e0 91 ae 01 	lds	r30, 0x01AE
    16c2:	f0 91 af 01 	lds	r31, 0x01AF
    16c6:	09 95       	icall
}
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	ff 91       	pop	r31
    16ce:	ef 91       	pop	r30
    16d0:	bf 91       	pop	r27
    16d2:	af 91       	pop	r26
    16d4:	9f 91       	pop	r25
    16d6:	8f 91       	pop	r24
    16d8:	7f 91       	pop	r23
    16da:	6f 91       	pop	r22
    16dc:	5f 91       	pop	r21
    16de:	4f 91       	pop	r20
    16e0:	3f 91       	pop	r19
    16e2:	2f 91       	pop	r18
    16e4:	0f 90       	pop	r0
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	0f 90       	pop	r0
    16ea:	1f 90       	pop	r1
    16ec:	18 95       	reti

000016ee <EXTI_void_Eable>:
/******************************************< Functinos >************************************/
/*******************************************************************************************/

void EXTI_void_Eable(u8 Copy_U8_INT_Index)
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <EXTI_void_Eable+0x6>
    16f4:	0f 92       	push	r0
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_INT_Index)
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	3b 83       	std	Y+3, r19	; 0x03
    1704:	2a 83       	std	Y+2, r18	; 0x02
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	9b 81       	ldd	r25, Y+3	; 0x03
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	91 05       	cpc	r25, r1
    170e:	89 f0       	breq	.+34     	; 0x1732 <EXTI_void_Eable+0x44>
    1710:	2a 81       	ldd	r18, Y+2	; 0x02
    1712:	3b 81       	ldd	r19, Y+3	; 0x03
    1714:	22 30       	cpi	r18, 0x02	; 2
    1716:	31 05       	cpc	r19, r1
    1718:	a1 f0       	breq	.+40     	; 0x1742 <EXTI_void_Eable+0x54>
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	9b 81       	ldd	r25, Y+3	; 0x03
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	b9 f4       	brne	.+46     	; 0x1750 <EXTI_void_Eable+0x62>
	{
	case EXTI_U8_INT0:
		Set_Bit(EXTI_U8_GICR,DIO_U8_PIN6);
    1722:	ab e5       	ldi	r26, 0x5B	; 91
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	eb e5       	ldi	r30, 0x5B	; 91
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	80 64       	ori	r24, 0x40	; 64
    172e:	8c 93       	st	X, r24
    1730:	0f c0       	rjmp	.+30     	; 0x1750 <EXTI_void_Eable+0x62>
		break;
	case EXTI_U8_INT1:
			Set_Bit(EXTI_U8_GICR,DIO_U8_PIN7);
    1732:	ab e5       	ldi	r26, 0x5B	; 91
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	eb e5       	ldi	r30, 0x5B	; 91
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	80 68       	ori	r24, 0x80	; 128
    173e:	8c 93       	st	X, r24
    1740:	07 c0       	rjmp	.+14     	; 0x1750 <EXTI_void_Eable+0x62>
			break;
	case EXTI_U8_INT2:
			Set_Bit(EXTI_U8_GICR,DIO_U8_PIN5);
    1742:	ab e5       	ldi	r26, 0x5B	; 91
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	eb e5       	ldi	r30, 0x5B	; 91
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	80 62       	ori	r24, 0x20	; 32
    174e:	8c 93       	st	X, r24
			break;


	}
}
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <EXTI_void_Disable>:


void EXTI_void_Disable(u8 Copy_U8_INT_Index)
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	00 d0       	rcall	.+0      	; 0x1762 <EXTI_void_Disable+0x6>
    1762:	0f 92       	push	r0
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_INT_Index)
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	3b 83       	std	Y+3, r19	; 0x03
    1772:	2a 83       	std	Y+2, r18	; 0x02
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	9b 81       	ldd	r25, Y+3	; 0x03
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	91 05       	cpc	r25, r1
    177c:	89 f0       	breq	.+34     	; 0x17a0 <EXTI_void_Disable+0x44>
    177e:	2a 81       	ldd	r18, Y+2	; 0x02
    1780:	3b 81       	ldd	r19, Y+3	; 0x03
    1782:	22 30       	cpi	r18, 0x02	; 2
    1784:	31 05       	cpc	r19, r1
    1786:	a1 f0       	breq	.+40     	; 0x17b0 <EXTI_void_Disable+0x54>
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	9b 81       	ldd	r25, Y+3	; 0x03
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	b9 f4       	brne	.+46     	; 0x17be <EXTI_void_Disable+0x62>
	{
	case EXTI_U8_INT0:
		Clear_Bit(EXTI_U8_GICR,DIO_U8_PIN6);
    1790:	ab e5       	ldi	r26, 0x5B	; 91
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	eb e5       	ldi	r30, 0x5B	; 91
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	8f 7b       	andi	r24, 0xBF	; 191
    179c:	8c 93       	st	X, r24
    179e:	0f c0       	rjmp	.+30     	; 0x17be <EXTI_void_Disable+0x62>
		break;
	case EXTI_U8_INT1:
		Clear_Bit(EXTI_U8_GICR,DIO_U8_PIN7);
    17a0:	ab e5       	ldi	r26, 0x5B	; 91
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	eb e5       	ldi	r30, 0x5B	; 91
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	8f 77       	andi	r24, 0x7F	; 127
    17ac:	8c 93       	st	X, r24
    17ae:	07 c0       	rjmp	.+14     	; 0x17be <EXTI_void_Disable+0x62>
		break;
	case EXTI_U8_INT2:
		Clear_Bit(EXTI_U8_GICR,DIO_U8_PIN5);
    17b0:	ab e5       	ldi	r26, 0x5B	; 91
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	eb e5       	ldi	r30, 0x5B	; 91
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	8f 7d       	andi	r24, 0xDF	; 223
    17bc:	8c 93       	st	X, r24
		break;
	}
}
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <EXTI_void_Set_Level>:

void EXTI_void_Set_Level(u8 Copy_U8_INT_Index , u8 Copy_U8_Level_Index)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <EXTI_void_Set_Level+0x6>
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <EXTI_void_Set_Level+0x8>
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8_INT_Index)
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	3c 83       	std	Y+4, r19	; 0x04
    17e2:	2b 83       	std	Y+3, r18	; 0x03
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	9c 81       	ldd	r25, Y+4	; 0x04
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	91 05       	cpc	r25, r1
    17ec:	c9 f1       	breq	.+114    	; 0x1860 <EXTI_void_Set_Level+0x96>
    17ee:	2b 81       	ldd	r18, Y+3	; 0x03
    17f0:	3c 81       	ldd	r19, Y+4	; 0x04
    17f2:	22 30       	cpi	r18, 0x02	; 2
    17f4:	31 05       	cpc	r19, r1
    17f6:	09 f4       	brne	.+2      	; 0x17fa <EXTI_void_Set_Level+0x30>
    17f8:	61 c0       	rjmp	.+194    	; 0x18bc <EXTI_void_Set_Level+0xf2>
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	9c 81       	ldd	r25, Y+4	; 0x04
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	09 f0       	breq	.+2      	; 0x1804 <EXTI_void_Set_Level+0x3a>
    1802:	6e c0       	rjmp	.+220    	; 0x18e0 <EXTI_void_Set_Level+0x116>
	{
		case EXTI_U8_INT0:
			Assign_Bit(EXTI_U8_MCUCR, DIO_U8_PIN0 , Get_Bit(Copy_U8_Level_Index,0));
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	88 2f       	mov	r24, r24
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	81 70       	andi	r24, 0x01	; 1
    180c:	90 70       	andi	r25, 0x00	; 0
    180e:	88 23       	and	r24, r24
    1810:	41 f0       	breq	.+16     	; 0x1822 <EXTI_void_Set_Level+0x58>
    1812:	a5 e5       	ldi	r26, 0x55	; 85
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e5 e5       	ldi	r30, 0x55	; 85
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	81 60       	ori	r24, 0x01	; 1
    181e:	8c 93       	st	X, r24
    1820:	07 c0       	rjmp	.+14     	; 0x1830 <EXTI_void_Set_Level+0x66>
    1822:	a5 e5       	ldi	r26, 0x55	; 85
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e5 e5       	ldi	r30, 0x55	; 85
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	8e 7f       	andi	r24, 0xFE	; 254
    182e:	8c 93       	st	X, r24
			Assign_Bit(EXTI_U8_MCUCR, DIO_U8_PIN1 , Get_Bit(Copy_U8_Level_Index,1));
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	86 95       	lsr	r24
    1834:	88 2f       	mov	r24, r24
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	81 70       	andi	r24, 0x01	; 1
    183a:	90 70       	andi	r25, 0x00	; 0
    183c:	88 23       	and	r24, r24
    183e:	41 f0       	breq	.+16     	; 0x1850 <EXTI_void_Set_Level+0x86>
    1840:	a5 e5       	ldi	r26, 0x55	; 85
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e5 e5       	ldi	r30, 0x55	; 85
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	82 60       	ori	r24, 0x02	; 2
    184c:	8c 93       	st	X, r24
    184e:	48 c0       	rjmp	.+144    	; 0x18e0 <EXTI_void_Set_Level+0x116>
    1850:	a5 e5       	ldi	r26, 0x55	; 85
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e5 e5       	ldi	r30, 0x55	; 85
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	8d 7f       	andi	r24, 0xFD	; 253
    185c:	8c 93       	st	X, r24
    185e:	40 c0       	rjmp	.+128    	; 0x18e0 <EXTI_void_Set_Level+0x116>
			break;
		case EXTI_U8_INT1:
			Assign_Bit(EXTI_U8_MCUCR, DIO_U8_PIN2 , Get_Bit(Copy_U8_Level_Index,0));
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	88 2f       	mov	r24, r24
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	81 70       	andi	r24, 0x01	; 1
    1868:	90 70       	andi	r25, 0x00	; 0
    186a:	88 23       	and	r24, r24
    186c:	41 f0       	breq	.+16     	; 0x187e <EXTI_void_Set_Level+0xb4>
    186e:	a5 e5       	ldi	r26, 0x55	; 85
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e5 e5       	ldi	r30, 0x55	; 85
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	84 60       	ori	r24, 0x04	; 4
    187a:	8c 93       	st	X, r24
    187c:	07 c0       	rjmp	.+14     	; 0x188c <EXTI_void_Set_Level+0xc2>
    187e:	a5 e5       	ldi	r26, 0x55	; 85
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e5 e5       	ldi	r30, 0x55	; 85
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	8b 7f       	andi	r24, 0xFB	; 251
    188a:	8c 93       	st	X, r24
			Assign_Bit(EXTI_U8_MCUCR, DIO_U8_PIN3 , Get_Bit(Copy_U8_Level_Index,1));
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	86 95       	lsr	r24
    1890:	88 2f       	mov	r24, r24
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	81 70       	andi	r24, 0x01	; 1
    1896:	90 70       	andi	r25, 0x00	; 0
    1898:	88 23       	and	r24, r24
    189a:	41 f0       	breq	.+16     	; 0x18ac <EXTI_void_Set_Level+0xe2>
    189c:	a5 e5       	ldi	r26, 0x55	; 85
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e5 e5       	ldi	r30, 0x55	; 85
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	88 60       	ori	r24, 0x08	; 8
    18a8:	8c 93       	st	X, r24
    18aa:	1a c0       	rjmp	.+52     	; 0x18e0 <EXTI_void_Set_Level+0x116>
    18ac:	a5 e5       	ldi	r26, 0x55	; 85
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e5 e5       	ldi	r30, 0x55	; 85
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	87 7f       	andi	r24, 0xF7	; 247
    18b8:	8c 93       	st	X, r24
    18ba:	12 c0       	rjmp	.+36     	; 0x18e0 <EXTI_void_Set_Level+0x116>
			break;
		case EXTI_U8_INT2:
			Assign_Bit(EXTI_U8_MCUCSR, DIO_U8_PIN6 , Copy_U8_Level_Index );
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	41 f4       	brne	.+16     	; 0x18d2 <EXTI_void_Set_Level+0x108>
    18c2:	a4 e5       	ldi	r26, 0x54	; 84
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e4 e5       	ldi	r30, 0x54	; 84
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	80 64       	ori	r24, 0x40	; 64
    18ce:	8c 93       	st	X, r24
    18d0:	07 c0       	rjmp	.+14     	; 0x18e0 <EXTI_void_Set_Level+0x116>
    18d2:	a4 e5       	ldi	r26, 0x54	; 84
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e4 e5       	ldi	r30, 0x54	; 84
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	8f 7b       	andi	r24, 0xBF	; 191
    18de:	8c 93       	st	X, r24

			break;
		}
}
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <EXTI_void_Global_EN_DIS>:
void EXTI_void_Global_EN_DIS(u8 Copy_U8_Assign_Value)
{
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	0f 92       	push	r0
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(EXTI_U8_SREG, DIO_U8_PIN7 , Copy_U8_Assign_Value);
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	41 f4       	brne	.+16     	; 0x1910 <EXTI_void_Global_EN_DIS+0x22>
    1900:	af e5       	ldi	r26, 0x5F	; 95
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	ef e5       	ldi	r30, 0x5F	; 95
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	80 68       	ori	r24, 0x80	; 128
    190c:	8c 93       	st	X, r24
    190e:	07 c0       	rjmp	.+14     	; 0x191e <EXTI_void_Global_EN_DIS+0x30>
    1910:	af e5       	ldi	r26, 0x5F	; 95
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	ef e5       	ldi	r30, 0x5F	; 95
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	8f 77       	andi	r24, 0x7F	; 127
    191c:	8c 93       	st	X, r24
}
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <EXTI_void_Set_CallBack>:

void EXTI_void_Set_CallBack(u8 Copy_U8_INT_Index , void (*pvoidCallBack)(void))
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	00 d0       	rcall	.+0      	; 0x192c <EXTI_void_Set_CallBack+0x6>
    192c:	0f 92       	push	r0
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	7b 83       	std	Y+3, r23	; 0x03
    1936:	6a 83       	std	Y+2, r22	; 0x02
	Avoid_CallBack[Copy_U8_INT_Index]= pvoidCallBack ;
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	88 2f       	mov	r24, r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	fc 01       	movw	r30, r24
    1944:	e6 55       	subi	r30, 0x56	; 86
    1946:	fe 4f       	sbci	r31, 0xFE	; 254
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	9b 81       	ldd	r25, Y+3	; 0x03
    194c:	91 83       	std	Z+1, r25	; 0x01
    194e:	80 83       	st	Z, r24
}
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <LCD_void_Init>:
#include"LCD_private.h"




void LCD_void_Init(void){
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	cc 54       	subi	r28, 0x4C	; 76
    196a:	d0 40       	sbci	r29, 0x00	; 0
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	fe 01       	movw	r30, r28
    1978:	e7 5b       	subi	r30, 0xB7	; 183
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	ac e0       	ldi	r26, 0x0C	; 12
    1982:	b2 e4       	ldi	r27, 0x42	; 66
    1984:	80 83       	st	Z, r24
    1986:	91 83       	std	Z+1, r25	; 0x01
    1988:	a2 83       	std	Z+2, r26	; 0x02
    198a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198c:	8e 01       	movw	r16, r28
    198e:	0b 5b       	subi	r16, 0xBB	; 187
    1990:	1f 4f       	sbci	r17, 0xFF	; 255
    1992:	fe 01       	movw	r30, r28
    1994:	e7 5b       	subi	r30, 0xB7	; 183
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	60 81       	ld	r22, Z
    199a:	71 81       	ldd	r23, Z+1	; 0x01
    199c:	82 81       	ldd	r24, Z+2	; 0x02
    199e:	93 81       	ldd	r25, Z+3	; 0x03
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	4a ef       	ldi	r20, 0xFA	; 250
    19a6:	54 e4       	ldi	r21, 0x44	; 68
    19a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	f8 01       	movw	r30, r16
    19b2:	80 83       	st	Z, r24
    19b4:	91 83       	std	Z+1, r25	; 0x01
    19b6:	a2 83       	std	Z+2, r26	; 0x02
    19b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19ba:	fe 01       	movw	r30, r28
    19bc:	eb 5b       	subi	r30, 0xBB	; 187
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	60 81       	ld	r22, Z
    19c2:	71 81       	ldd	r23, Z+1	; 0x01
    19c4:	82 81       	ldd	r24, Z+2	; 0x02
    19c6:	93 81       	ldd	r25, Z+3	; 0x03
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e8       	ldi	r20, 0x80	; 128
    19ce:	5f e3       	ldi	r21, 0x3F	; 63
    19d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19d4:	88 23       	and	r24, r24
    19d6:	44 f4       	brge	.+16     	; 0x19e8 <LCD_void_Init+0x8c>
		__ticks = 1;
    19d8:	fe 01       	movw	r30, r28
    19da:	ed 5b       	subi	r30, 0xBD	; 189
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	91 83       	std	Z+1, r25	; 0x01
    19e4:	80 83       	st	Z, r24
    19e6:	64 c0       	rjmp	.+200    	; 0x1ab0 <LCD_void_Init+0x154>
	else if (__tmp > 65535)
    19e8:	fe 01       	movw	r30, r28
    19ea:	eb 5b       	subi	r30, 0xBB	; 187
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	60 81       	ld	r22, Z
    19f0:	71 81       	ldd	r23, Z+1	; 0x01
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	93 81       	ldd	r25, Z+3	; 0x03
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	3f ef       	ldi	r19, 0xFF	; 255
    19fa:	4f e7       	ldi	r20, 0x7F	; 127
    19fc:	57 e4       	ldi	r21, 0x47	; 71
    19fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a02:	18 16       	cp	r1, r24
    1a04:	0c f0       	brlt	.+2      	; 0x1a08 <LCD_void_Init+0xac>
    1a06:	43 c0       	rjmp	.+134    	; 0x1a8e <LCD_void_Init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e7 5b       	subi	r30, 0xB7	; 183
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	60 81       	ld	r22, Z
    1a10:	71 81       	ldd	r23, Z+1	; 0x01
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e2       	ldi	r20, 0x20	; 32
    1a1c:	51 e4       	ldi	r21, 0x41	; 65
    1a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	8e 01       	movw	r16, r28
    1a28:	0d 5b       	subi	r16, 0xBD	; 189
    1a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	f8 01       	movw	r30, r16
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	80 83       	st	Z, r24
    1a3e:	1f c0       	rjmp	.+62     	; 0x1a7e <LCD_void_Init+0x122>
    1a40:	fe 01       	movw	r30, r28
    1a42:	ef 5b       	subi	r30, 0xBF	; 191
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	88 ec       	ldi	r24, 0xC8	; 200
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a4e:	fe 01       	movw	r30, r28
    1a50:	ef 5b       	subi	r30, 0xBF	; 191
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	80 81       	ld	r24, Z
    1a56:	91 81       	ldd	r25, Z+1	; 0x01
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <LCD_void_Init+0xfc>
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	ef 5b       	subi	r30, 0xBF	; 191
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a66:	de 01       	movw	r26, r28
    1a68:	ad 5b       	subi	r26, 0xBD	; 189
    1a6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	ed 5b       	subi	r30, 0xBD	; 189
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 81       	ld	r24, Z
    1a74:	91 81       	ldd	r25, Z+1	; 0x01
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	11 96       	adiw	r26, 0x01	; 1
    1a7a:	9c 93       	st	X, r25
    1a7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a7e:	fe 01       	movw	r30, r28
    1a80:	ed 5b       	subi	r30, 0xBD	; 189
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	80 81       	ld	r24, Z
    1a86:	91 81       	ldd	r25, Z+1	; 0x01
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	d1 f6       	brne	.-76     	; 0x1a40 <LCD_void_Init+0xe4>
    1a8c:	24 c0       	rjmp	.+72     	; 0x1ad6 <LCD_void_Init+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8e:	8e 01       	movw	r16, r28
    1a90:	0d 5b       	subi	r16, 0xBD	; 189
    1a92:	1f 4f       	sbci	r17, 0xFF	; 255
    1a94:	fe 01       	movw	r30, r28
    1a96:	eb 5b       	subi	r30, 0xBB	; 187
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	60 81       	ld	r22, Z
    1a9c:	71 81       	ldd	r23, Z+1	; 0x01
    1a9e:	82 81       	ldd	r24, Z+2	; 0x02
    1aa0:	93 81       	ldd	r25, Z+3	; 0x03
    1aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	f8 01       	movw	r30, r16
    1aac:	91 83       	std	Z+1, r25	; 0x01
    1aae:	80 83       	st	Z, r24
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	ed 5b       	subi	r30, 0xBD	; 189
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	80 81       	ld	r24, Z
    1ab8:	91 81       	ldd	r25, Z+1	; 0x01
    1aba:	fe 01       	movw	r30, r28
    1abc:	ff 96       	adiw	r30, 0x3f	; 63
    1abe:	91 83       	std	Z+1, r25	; 0x01
    1ac0:	80 83       	st	Z, r24
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	ff 96       	adiw	r30, 0x3f	; 63
    1ac6:	80 81       	ld	r24, Z
    1ac8:	91 81       	ldd	r25, Z+1	; 0x01
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <LCD_void_Init+0x16e>
    1ace:	fe 01       	movw	r30, r28
    1ad0:	ff 96       	adiw	r30, 0x3f	; 63
    1ad2:	91 83       	std	Z+1, r25	; 0x01
    1ad4:	80 83       	st	Z, r24
#if LCD_U8_MODE==LCD_U8_8_BIT_MODE
		/*delay more than 30ms*/
		_delay_ms(35);
		/*send function set */
		LCD_void_Write_CMD(LCD_Function_set_8_bit_2_line_mode);
    1ad6:	88 e3       	ldi	r24, 0x38	; 56
    1ad8:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <LCD_void_Write_CMD>
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	a0 e2       	ldi	r26, 0x20	; 32
    1ae2:	b2 e4       	ldi	r27, 0x42	; 66
    1ae4:	8b af       	std	Y+59, r24	; 0x3b
    1ae6:	9c af       	std	Y+60, r25	; 0x3c
    1ae8:	ad af       	std	Y+61, r26	; 0x3d
    1aea:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1aec:	6b ad       	ldd	r22, Y+59	; 0x3b
    1aee:	7c ad       	ldd	r23, Y+60	; 0x3c
    1af0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1af2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1af4:	2b ea       	ldi	r18, 0xAB	; 171
    1af6:	3a ea       	ldi	r19, 0xAA	; 170
    1af8:	4a e2       	ldi	r20, 0x2A	; 42
    1afa:	50 e4       	ldi	r21, 0x40	; 64
    1afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	8f ab       	std	Y+55, r24	; 0x37
    1b06:	98 af       	std	Y+56, r25	; 0x38
    1b08:	a9 af       	std	Y+57, r26	; 0x39
    1b0a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1b0c:	6f a9       	ldd	r22, Y+55	; 0x37
    1b0e:	78 ad       	ldd	r23, Y+56	; 0x38
    1b10:	89 ad       	ldd	r24, Y+57	; 0x39
    1b12:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e8       	ldi	r20, 0x80	; 128
    1b1a:	5f e3       	ldi	r21, 0x3F	; 63
    1b1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b20:	88 23       	and	r24, r24
    1b22:	1c f4       	brge	.+6      	; 0x1b2a <LCD_void_Init+0x1ce>
		__ticks = 1;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	8e ab       	std	Y+54, r24	; 0x36
    1b28:	91 c0       	rjmp	.+290    	; 0x1c4c <LCD_void_Init+0x2f0>
	else if (__tmp > 255)
    1b2a:	6f a9       	ldd	r22, Y+55	; 0x37
    1b2c:	78 ad       	ldd	r23, Y+56	; 0x38
    1b2e:	89 ad       	ldd	r24, Y+57	; 0x39
    1b30:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	4f e7       	ldi	r20, 0x7F	; 127
    1b38:	53 e4       	ldi	r21, 0x43	; 67
    1b3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b3e:	18 16       	cp	r1, r24
    1b40:	0c f0       	brlt	.+2      	; 0x1b44 <LCD_void_Init+0x1e8>
    1b42:	7b c0       	rjmp	.+246    	; 0x1c3a <LCD_void_Init+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1b44:	6b ad       	ldd	r22, Y+59	; 0x3b
    1b46:	7c ad       	ldd	r23, Y+60	; 0x3c
    1b48:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	4a e7       	ldi	r20, 0x7A	; 122
    1b52:	54 e4       	ldi	r21, 0x44	; 68
    1b54:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	8a ab       	std	Y+50, r24	; 0x32
    1b5e:	9b ab       	std	Y+51, r25	; 0x33
    1b60:	ac ab       	std	Y+52, r26	; 0x34
    1b62:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b64:	6a a9       	ldd	r22, Y+50	; 0x32
    1b66:	7b a9       	ldd	r23, Y+51	; 0x33
    1b68:	8c a9       	ldd	r24, Y+52	; 0x34
    1b6a:	9d a9       	ldd	r25, Y+53	; 0x35
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	4a ef       	ldi	r20, 0xFA	; 250
    1b72:	54 e4       	ldi	r21, 0x44	; 68
    1b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	8e a7       	std	Y+46, r24	; 0x2e
    1b7e:	9f a7       	std	Y+47, r25	; 0x2f
    1b80:	a8 ab       	std	Y+48, r26	; 0x30
    1b82:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1b84:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b86:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b88:	88 a9       	ldd	r24, Y+48	; 0x30
    1b8a:	99 a9       	ldd	r25, Y+49	; 0x31
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e8       	ldi	r20, 0x80	; 128
    1b92:	5f e3       	ldi	r21, 0x3F	; 63
    1b94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b98:	88 23       	and	r24, r24
    1b9a:	2c f4       	brge	.+10     	; 0x1ba6 <LCD_void_Init+0x24a>
		__ticks = 1;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9d a7       	std	Y+45, r25	; 0x2d
    1ba2:	8c a7       	std	Y+44, r24	; 0x2c
    1ba4:	3f c0       	rjmp	.+126    	; 0x1c24 <LCD_void_Init+0x2c8>
	else if (__tmp > 65535)
    1ba6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ba8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1baa:	88 a9       	ldd	r24, Y+48	; 0x30
    1bac:	99 a9       	ldd	r25, Y+49	; 0x31
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	3f ef       	ldi	r19, 0xFF	; 255
    1bb2:	4f e7       	ldi	r20, 0x7F	; 127
    1bb4:	57 e4       	ldi	r21, 0x47	; 71
    1bb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bba:	18 16       	cp	r1, r24
    1bbc:	4c f5       	brge	.+82     	; 0x1c10 <LCD_void_Init+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbe:	6a a9       	ldd	r22, Y+50	; 0x32
    1bc0:	7b a9       	ldd	r23, Y+51	; 0x33
    1bc2:	8c a9       	ldd	r24, Y+52	; 0x34
    1bc4:	9d a9       	ldd	r25, Y+53	; 0x35
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e2       	ldi	r20, 0x20	; 32
    1bcc:	51 e4       	ldi	r21, 0x41	; 65
    1bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	bc 01       	movw	r22, r24
    1bd8:	cd 01       	movw	r24, r26
    1bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	9d a7       	std	Y+45, r25	; 0x2d
    1be4:	8c a7       	std	Y+44, r24	; 0x2c
    1be6:	0f c0       	rjmp	.+30     	; 0x1c06 <LCD_void_Init+0x2aa>
    1be8:	88 ec       	ldi	r24, 0xC8	; 200
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	9b a7       	std	Y+43, r25	; 0x2b
    1bee:	8a a7       	std	Y+42, r24	; 0x2a
    1bf0:	8a a5       	ldd	r24, Y+42	; 0x2a
    1bf2:	9b a5       	ldd	r25, Y+43	; 0x2b
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <LCD_void_Init+0x298>
    1bf8:	9b a7       	std	Y+43, r25	; 0x2b
    1bfa:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfc:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bfe:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	9d a7       	std	Y+45, r25	; 0x2d
    1c04:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c06:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c08:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	69 f7       	brne	.-38     	; 0x1be8 <LCD_void_Init+0x28c>
    1c0e:	24 c0       	rjmp	.+72     	; 0x1c58 <LCD_void_Init+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c10:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c12:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c14:	88 a9       	ldd	r24, Y+48	; 0x30
    1c16:	99 a9       	ldd	r25, Y+49	; 0x31
    1c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	9d a7       	std	Y+45, r25	; 0x2d
    1c22:	8c a7       	std	Y+44, r24	; 0x2c
    1c24:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c26:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c28:	99 a7       	std	Y+41, r25	; 0x29
    1c2a:	88 a7       	std	Y+40, r24	; 0x28
    1c2c:	88 a5       	ldd	r24, Y+40	; 0x28
    1c2e:	99 a5       	ldd	r25, Y+41	; 0x29
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <LCD_void_Init+0x2d4>
    1c34:	99 a7       	std	Y+41, r25	; 0x29
    1c36:	88 a7       	std	Y+40, r24	; 0x28
    1c38:	0f c0       	rjmp	.+30     	; 0x1c58 <LCD_void_Init+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c3a:	6f a9       	ldd	r22, Y+55	; 0x37
    1c3c:	78 ad       	ldd	r23, Y+56	; 0x38
    1c3e:	89 ad       	ldd	r24, Y+57	; 0x39
    1c40:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	8e ab       	std	Y+54, r24	; 0x36
    1c4c:	8e a9       	ldd	r24, Y+54	; 0x36
    1c4e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c50:	8f a1       	ldd	r24, Y+39	; 0x27
    1c52:	8a 95       	dec	r24
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <LCD_void_Init+0x2f6>
    1c56:	8f a3       	std	Y+39, r24	; 0x27
		/*delay more than 39us*/
		_delay_us(40);
		/*send cursor mode */
		LCD_void_Write_CMD(LCD_Cursor_OFF);
    1c58:	8c e0       	ldi	r24, 0x0C	; 12
    1c5a:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <LCD_void_Write_CMD>
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	a0 e2       	ldi	r26, 0x20	; 32
    1c64:	b2 e4       	ldi	r27, 0x42	; 66
    1c66:	8b a3       	std	Y+35, r24	; 0x23
    1c68:	9c a3       	std	Y+36, r25	; 0x24
    1c6a:	ad a3       	std	Y+37, r26	; 0x25
    1c6c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c70:	7c a1       	ldd	r23, Y+36	; 0x24
    1c72:	8d a1       	ldd	r24, Y+37	; 0x25
    1c74:	9e a1       	ldd	r25, Y+38	; 0x26
    1c76:	2b ea       	ldi	r18, 0xAB	; 171
    1c78:	3a ea       	ldi	r19, 0xAA	; 170
    1c7a:	4a e2       	ldi	r20, 0x2A	; 42
    1c7c:	50 e4       	ldi	r21, 0x40	; 64
    1c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	8f 8f       	std	Y+31, r24	; 0x1f
    1c88:	98 a3       	std	Y+32, r25	; 0x20
    1c8a:	a9 a3       	std	Y+33, r26	; 0x21
    1c8c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1c8e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c90:	78 a1       	ldd	r23, Y+32	; 0x20
    1c92:	89 a1       	ldd	r24, Y+33	; 0x21
    1c94:	9a a1       	ldd	r25, Y+34	; 0x22
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e8       	ldi	r20, 0x80	; 128
    1c9c:	5f e3       	ldi	r21, 0x3F	; 63
    1c9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca2:	88 23       	and	r24, r24
    1ca4:	1c f4       	brge	.+6      	; 0x1cac <LCD_void_Init+0x350>
		__ticks = 1;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	8e 8f       	std	Y+30, r24	; 0x1e
    1caa:	91 c0       	rjmp	.+290    	; 0x1dce <LCD_void_Init+0x472>
	else if (__tmp > 255)
    1cac:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1cae:	78 a1       	ldd	r23, Y+32	; 0x20
    1cb0:	89 a1       	ldd	r24, Y+33	; 0x21
    1cb2:	9a a1       	ldd	r25, Y+34	; 0x22
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	4f e7       	ldi	r20, 0x7F	; 127
    1cba:	53 e4       	ldi	r21, 0x43	; 67
    1cbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc0:	18 16       	cp	r1, r24
    1cc2:	0c f0       	brlt	.+2      	; 0x1cc6 <LCD_void_Init+0x36a>
    1cc4:	7b c0       	rjmp	.+246    	; 0x1dbc <LCD_void_Init+0x460>
	{
		_delay_ms(__us / 1000.0);
    1cc6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cc8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cca:	8d a1       	ldd	r24, Y+37	; 0x25
    1ccc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	4a e7       	ldi	r20, 0x7A	; 122
    1cd4:	54 e4       	ldi	r21, 0x44	; 68
    1cd6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	8a 8f       	std	Y+26, r24	; 0x1a
    1ce0:	9b 8f       	std	Y+27, r25	; 0x1b
    1ce2:	ac 8f       	std	Y+28, r26	; 0x1c
    1ce4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ce8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1cea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	4a ef       	ldi	r20, 0xFA	; 250
    1cf4:	54 e4       	ldi	r21, 0x44	; 68
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8e 8b       	std	Y+22, r24	; 0x16
    1d00:	9f 8b       	std	Y+23, r25	; 0x17
    1d02:	a8 8f       	std	Y+24, r26	; 0x18
    1d04:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1d06:	6e 89       	ldd	r22, Y+22	; 0x16
    1d08:	7f 89       	ldd	r23, Y+23	; 0x17
    1d0a:	88 8d       	ldd	r24, Y+24	; 0x18
    1d0c:	99 8d       	ldd	r25, Y+25	; 0x19
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e8       	ldi	r20, 0x80	; 128
    1d14:	5f e3       	ldi	r21, 0x3F	; 63
    1d16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d1a:	88 23       	and	r24, r24
    1d1c:	2c f4       	brge	.+10     	; 0x1d28 <LCD_void_Init+0x3cc>
		__ticks = 1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9d 8b       	std	Y+21, r25	; 0x15
    1d24:	8c 8b       	std	Y+20, r24	; 0x14
    1d26:	3f c0       	rjmp	.+126    	; 0x1da6 <LCD_void_Init+0x44a>
	else if (__tmp > 65535)
    1d28:	6e 89       	ldd	r22, Y+22	; 0x16
    1d2a:	7f 89       	ldd	r23, Y+23	; 0x17
    1d2c:	88 8d       	ldd	r24, Y+24	; 0x18
    1d2e:	99 8d       	ldd	r25, Y+25	; 0x19
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	3f ef       	ldi	r19, 0xFF	; 255
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	57 e4       	ldi	r21, 0x47	; 71
    1d38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d3c:	18 16       	cp	r1, r24
    1d3e:	4c f5       	brge	.+82     	; 0x1d92 <LCD_void_Init+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d40:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1d42:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1d44:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d46:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e2       	ldi	r20, 0x20	; 32
    1d4e:	51 e4       	ldi	r21, 0x41	; 65
    1d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	9d 8b       	std	Y+21, r25	; 0x15
    1d66:	8c 8b       	std	Y+20, r24	; 0x14
    1d68:	0f c0       	rjmp	.+30     	; 0x1d88 <LCD_void_Init+0x42c>
    1d6a:	88 ec       	ldi	r24, 0xC8	; 200
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9b 8b       	std	Y+19, r25	; 0x13
    1d70:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d72:	8a 89       	ldd	r24, Y+18	; 0x12
    1d74:	9b 89       	ldd	r25, Y+19	; 0x13
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <LCD_void_Init+0x41a>
    1d7a:	9b 8b       	std	Y+19, r25	; 0x13
    1d7c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7e:	8c 89       	ldd	r24, Y+20	; 0x14
    1d80:	9d 89       	ldd	r25, Y+21	; 0x15
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	9d 8b       	std	Y+21, r25	; 0x15
    1d86:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d88:	8c 89       	ldd	r24, Y+20	; 0x14
    1d8a:	9d 89       	ldd	r25, Y+21	; 0x15
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	69 f7       	brne	.-38     	; 0x1d6a <LCD_void_Init+0x40e>
    1d90:	24 c0       	rjmp	.+72     	; 0x1dda <LCD_void_Init+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d92:	6e 89       	ldd	r22, Y+22	; 0x16
    1d94:	7f 89       	ldd	r23, Y+23	; 0x17
    1d96:	88 8d       	ldd	r24, Y+24	; 0x18
    1d98:	99 8d       	ldd	r25, Y+25	; 0x19
    1d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	9d 8b       	std	Y+21, r25	; 0x15
    1da4:	8c 8b       	std	Y+20, r24	; 0x14
    1da6:	8c 89       	ldd	r24, Y+20	; 0x14
    1da8:	9d 89       	ldd	r25, Y+21	; 0x15
    1daa:	99 8b       	std	Y+17, r25	; 0x11
    1dac:	88 8b       	std	Y+16, r24	; 0x10
    1dae:	88 89       	ldd	r24, Y+16	; 0x10
    1db0:	99 89       	ldd	r25, Y+17	; 0x11
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <LCD_void_Init+0x456>
    1db6:	99 8b       	std	Y+17, r25	; 0x11
    1db8:	88 8b       	std	Y+16, r24	; 0x10
    1dba:	0f c0       	rjmp	.+30     	; 0x1dda <LCD_void_Init+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dbc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1dbe:	78 a1       	ldd	r23, Y+32	; 0x20
    1dc0:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc2:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	8e 8f       	std	Y+30, r24	; 0x1e
    1dce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dd0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd4:	8a 95       	dec	r24
    1dd6:	f1 f7       	brne	.-4      	; 0x1dd4 <LCD_void_Init+0x478>
    1dd8:	8f 87       	std	Y+15, r24	; 0x0f
		/*delay more than 39us*/
		_delay_us(40);
		/*send command clear display*/
		LCD_void_Write_CMD(LCD_Clear_Display_Screen);
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <LCD_void_Write_CMD>
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	a0 e0       	ldi	r26, 0x00	; 0
    1de6:	b0 e4       	ldi	r27, 0x40	; 64
    1de8:	8b 87       	std	Y+11, r24	; 0x0b
    1dea:	9c 87       	std	Y+12, r25	; 0x0c
    1dec:	ad 87       	std	Y+13, r26	; 0x0d
    1dee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	4a ef       	ldi	r20, 0xFA	; 250
    1dfe:	54 e4       	ldi	r21, 0x44	; 68
    1e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	8f 83       	std	Y+7, r24	; 0x07
    1e0a:	98 87       	std	Y+8, r25	; 0x08
    1e0c:	a9 87       	std	Y+9, r26	; 0x09
    1e0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e10:	6f 81       	ldd	r22, Y+7	; 0x07
    1e12:	78 85       	ldd	r23, Y+8	; 0x08
    1e14:	89 85       	ldd	r24, Y+9	; 0x09
    1e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e8       	ldi	r20, 0x80	; 128
    1e1e:	5f e3       	ldi	r21, 0x3F	; 63
    1e20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e24:	88 23       	and	r24, r24
    1e26:	2c f4       	brge	.+10     	; 0x1e32 <LCD_void_Init+0x4d6>
		__ticks = 1;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	9e 83       	std	Y+6, r25	; 0x06
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
    1e30:	3f c0       	rjmp	.+126    	; 0x1eb0 <LCD_void_Init+0x554>
	else if (__tmp > 65535)
    1e32:	6f 81       	ldd	r22, Y+7	; 0x07
    1e34:	78 85       	ldd	r23, Y+8	; 0x08
    1e36:	89 85       	ldd	r24, Y+9	; 0x09
    1e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	3f ef       	ldi	r19, 0xFF	; 255
    1e3e:	4f e7       	ldi	r20, 0x7F	; 127
    1e40:	57 e4       	ldi	r21, 0x47	; 71
    1e42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e46:	18 16       	cp	r1, r24
    1e48:	4c f5       	brge	.+82     	; 0x1e9c <LCD_void_Init+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	40 e2       	ldi	r20, 0x20	; 32
    1e58:	51 e4       	ldi	r21, 0x41	; 65
    1e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	bc 01       	movw	r22, r24
    1e64:	cd 01       	movw	r24, r26
    1e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9e 83       	std	Y+6, r25	; 0x06
    1e70:	8d 83       	std	Y+5, r24	; 0x05
    1e72:	0f c0       	rjmp	.+30     	; 0x1e92 <LCD_void_Init+0x536>
    1e74:	88 ec       	ldi	r24, 0xC8	; 200
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9c 83       	std	Y+4, r25	; 0x04
    1e7a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <LCD_void_Init+0x524>
    1e84:	9c 83       	std	Y+4, r25	; 0x04
    1e86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e88:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	9e 83       	std	Y+6, r25	; 0x06
    1e90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e92:	8d 81       	ldd	r24, Y+5	; 0x05
    1e94:	9e 81       	ldd	r25, Y+6	; 0x06
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	69 f7       	brne	.-38     	; 0x1e74 <LCD_void_Init+0x518>
    1e9a:	14 c0       	rjmp	.+40     	; 0x1ec4 <LCD_void_Init+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ea0:	89 85       	ldd	r24, Y+9	; 0x09
    1ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	9e 83       	std	Y+6, r25	; 0x06
    1eae:	8d 83       	std	Y+5, r24	; 0x05
    1eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb4:	9a 83       	std	Y+2, r25	; 0x02
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	f1 f7       	brne	.-4      	; 0x1ebc <LCD_void_Init+0x560>
    1ec0:	9a 83       	std	Y+2, r25	; 0x02
    1ec2:	89 83       	std	Y+1, r24	; 0x01
		/*delay more than 1.53ms*/
		_delay_ms(2);
		/*increment cursor*/
		LCD_void_Write_CMD(LCD_Cursor_Increment);
    1ec4:	86 e0       	ldi	r24, 0x06	; 6
    1ec6:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <LCD_void_Write_CMD>
#endif




}
    1eca:	c4 5b       	subi	r28, 0xB4	; 180
    1ecc:	df 4f       	sbci	r29, 0xFF	; 255
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	de bf       	out	0x3e, r29	; 62
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	cd bf       	out	0x3d, r28	; 61
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
    1ee0:	08 95       	ret

00001ee2 <LCD_void_Write_CMD>:

void LCD_void_Write_CMD(u8 Copy_u8_CMD){
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	0f 92       	push	r0
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	89 83       	std	Y+1, r24	; 0x01
	/*RW=0*/
	/*write a command*/
	/*E=1*/
	/*E=0*/
//	DIO_U8_Set_Pin_Dir(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_OUTPUT);
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_LOW);
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>

	LCD_void_Write(Copy_u8_CMD);
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_void_Write>

}
    1efe:	0f 90       	pop	r0
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <LCD_void_Write>:



void LCD_void_Write(u8 Copy_u8_val){
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	69 97       	sbiw	r28, 0x19	; 25
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	89 8f       	std	Y+25, r24	; 0x19

	/*RW=0*/
		DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,PIN_LOW);
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	61 e0       	ldi	r22, 0x01	; 1
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>

#if LCD_U8_MODE==LCD_U8_8_BIT_MODE

	/*WRITE */
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN0,Get_Bit(Copy_u8_val,DIO_U8_PIN0));
    1f26:	89 8d       	ldd	r24, Y+25	; 0x19
    1f28:	98 2f       	mov	r25, r24
    1f2a:	91 70       	andi	r25, 0x01	; 1
    1f2c:	82 e0       	ldi	r24, 0x02	; 2
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	49 2f       	mov	r20, r25
    1f32:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN1,Get_Bit(Copy_u8_val,DIO_U8_PIN1));
    1f36:	89 8d       	ldd	r24, Y+25	; 0x19
    1f38:	86 95       	lsr	r24
    1f3a:	98 2f       	mov	r25, r24
    1f3c:	91 70       	andi	r25, 0x01	; 1
    1f3e:	82 e0       	ldi	r24, 0x02	; 2
    1f40:	61 e0       	ldi	r22, 0x01	; 1
    1f42:	49 2f       	mov	r20, r25
    1f44:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN2,Get_Bit(Copy_u8_val,DIO_U8_PIN2));
    1f48:	89 8d       	ldd	r24, Y+25	; 0x19
    1f4a:	86 95       	lsr	r24
    1f4c:	86 95       	lsr	r24
    1f4e:	98 2f       	mov	r25, r24
    1f50:	91 70       	andi	r25, 0x01	; 1
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	62 e0       	ldi	r22, 0x02	; 2
    1f56:	49 2f       	mov	r20, r25
    1f58:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN3,Get_Bit(Copy_u8_val,DIO_U8_PIN3));
    1f5c:	89 8d       	ldd	r24, Y+25	; 0x19
    1f5e:	86 95       	lsr	r24
    1f60:	86 95       	lsr	r24
    1f62:	86 95       	lsr	r24
    1f64:	98 2f       	mov	r25, r24
    1f66:	91 70       	andi	r25, 0x01	; 1
    1f68:	82 e0       	ldi	r24, 0x02	; 2
    1f6a:	63 e0       	ldi	r22, 0x03	; 3
    1f6c:	49 2f       	mov	r20, r25
    1f6e:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN4,Get_Bit(Copy_u8_val,DIO_U8_PIN4));
    1f72:	89 8d       	ldd	r24, Y+25	; 0x19
    1f74:	82 95       	swap	r24
    1f76:	8f 70       	andi	r24, 0x0F	; 15
    1f78:	98 2f       	mov	r25, r24
    1f7a:	91 70       	andi	r25, 0x01	; 1
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	64 e0       	ldi	r22, 0x04	; 4
    1f80:	49 2f       	mov	r20, r25
    1f82:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN5,Get_Bit(Copy_u8_val,DIO_U8_PIN5));
    1f86:	89 8d       	ldd	r24, Y+25	; 0x19
    1f88:	82 95       	swap	r24
    1f8a:	86 95       	lsr	r24
    1f8c:	87 70       	andi	r24, 0x07	; 7
    1f8e:	98 2f       	mov	r25, r24
    1f90:	91 70       	andi	r25, 0x01	; 1
    1f92:	82 e0       	ldi	r24, 0x02	; 2
    1f94:	65 e0       	ldi	r22, 0x05	; 5
    1f96:	49 2f       	mov	r20, r25
    1f98:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN6,Get_Bit(Copy_u8_val,DIO_U8_PIN6));
    1f9c:	89 8d       	ldd	r24, Y+25	; 0x19
    1f9e:	82 95       	swap	r24
    1fa0:	86 95       	lsr	r24
    1fa2:	86 95       	lsr	r24
    1fa4:	83 70       	andi	r24, 0x03	; 3
    1fa6:	98 2f       	mov	r25, r24
    1fa8:	91 70       	andi	r25, 0x01	; 1
    1faa:	82 e0       	ldi	r24, 0x02	; 2
    1fac:	66 e0       	ldi	r22, 0x06	; 6
    1fae:	49 2f       	mov	r20, r25
    1fb0:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN7,Get_Bit(Copy_u8_val,DIO_U8_PIN7));
    1fb4:	89 8d       	ldd	r24, Y+25	; 0x19
    1fb6:	98 2f       	mov	r25, r24
    1fb8:	99 1f       	adc	r25, r25
    1fba:	99 27       	eor	r25, r25
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	82 e0       	ldi	r24, 0x02	; 2
    1fc0:	67 e0       	ldi	r22, 0x07	; 7
    1fc2:	49 2f       	mov	r20, r25
    1fc4:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
	/*E=1*/
	/*E=0*/
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_HIGH);
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	62 e0       	ldi	r22, 0x02	; 2
    1fcc:	41 e0       	ldi	r20, 0x01	; 1
    1fce:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	a0 e8       	ldi	r26, 0x80	; 128
    1fd8:	bf e3       	ldi	r27, 0x3F	; 63
    1fda:	8d 8b       	std	Y+21, r24	; 0x15
    1fdc:	9e 8b       	std	Y+22, r25	; 0x16
    1fde:	af 8b       	std	Y+23, r26	; 0x17
    1fe0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fe2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fea:	2b ea       	ldi	r18, 0xAB	; 171
    1fec:	3a ea       	ldi	r19, 0xAA	; 170
    1fee:	4a e2       	ldi	r20, 0x2A	; 42
    1ff0:	50 e4       	ldi	r21, 0x40	; 64
    1ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	89 8b       	std	Y+17, r24	; 0x11
    1ffc:	9a 8b       	std	Y+18, r25	; 0x12
    1ffe:	ab 8b       	std	Y+19, r26	; 0x13
    2000:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2002:	69 89       	ldd	r22, Y+17	; 0x11
    2004:	7a 89       	ldd	r23, Y+18	; 0x12
    2006:	8b 89       	ldd	r24, Y+19	; 0x13
    2008:	9c 89       	ldd	r25, Y+20	; 0x14
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e8       	ldi	r20, 0x80	; 128
    2010:	5f e3       	ldi	r21, 0x3F	; 63
    2012:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2016:	88 23       	and	r24, r24
    2018:	1c f4       	brge	.+6      	; 0x2020 <LCD_void_Write+0x11a>
		__ticks = 1;
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	88 8b       	std	Y+16, r24	; 0x10
    201e:	91 c0       	rjmp	.+290    	; 0x2142 <LCD_void_Write+0x23c>
	else if (__tmp > 255)
    2020:	69 89       	ldd	r22, Y+17	; 0x11
    2022:	7a 89       	ldd	r23, Y+18	; 0x12
    2024:	8b 89       	ldd	r24, Y+19	; 0x13
    2026:	9c 89       	ldd	r25, Y+20	; 0x14
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	4f e7       	ldi	r20, 0x7F	; 127
    202e:	53 e4       	ldi	r21, 0x43	; 67
    2030:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2034:	18 16       	cp	r1, r24
    2036:	0c f0       	brlt	.+2      	; 0x203a <LCD_void_Write+0x134>
    2038:	7b c0       	rjmp	.+246    	; 0x2130 <LCD_void_Write+0x22a>
	{
		_delay_ms(__us / 1000.0);
    203a:	6d 89       	ldd	r22, Y+21	; 0x15
    203c:	7e 89       	ldd	r23, Y+22	; 0x16
    203e:	8f 89       	ldd	r24, Y+23	; 0x17
    2040:	98 8d       	ldd	r25, Y+24	; 0x18
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4a e7       	ldi	r20, 0x7A	; 122
    2048:	54 e4       	ldi	r21, 0x44	; 68
    204a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	8c 87       	std	Y+12, r24	; 0x0c
    2054:	9d 87       	std	Y+13, r25	; 0x0d
    2056:	ae 87       	std	Y+14, r26	; 0x0e
    2058:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205a:	6c 85       	ldd	r22, Y+12	; 0x0c
    205c:	7d 85       	ldd	r23, Y+13	; 0x0d
    205e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2060:	9f 85       	ldd	r25, Y+15	; 0x0f
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	4a ef       	ldi	r20, 0xFA	; 250
    2068:	54 e4       	ldi	r21, 0x44	; 68
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	88 87       	std	Y+8, r24	; 0x08
    2074:	99 87       	std	Y+9, r25	; 0x09
    2076:	aa 87       	std	Y+10, r26	; 0x0a
    2078:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    207a:	68 85       	ldd	r22, Y+8	; 0x08
    207c:	79 85       	ldd	r23, Y+9	; 0x09
    207e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2080:	9b 85       	ldd	r25, Y+11	; 0x0b
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5f e3       	ldi	r21, 0x3F	; 63
    208a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    208e:	88 23       	and	r24, r24
    2090:	2c f4       	brge	.+10     	; 0x209c <LCD_void_Write+0x196>
		__ticks = 1;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9f 83       	std	Y+7, r25	; 0x07
    2098:	8e 83       	std	Y+6, r24	; 0x06
    209a:	3f c0       	rjmp	.+126    	; 0x211a <LCD_void_Write+0x214>
	else if (__tmp > 65535)
    209c:	68 85       	ldd	r22, Y+8	; 0x08
    209e:	79 85       	ldd	r23, Y+9	; 0x09
    20a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	3f ef       	ldi	r19, 0xFF	; 255
    20a8:	4f e7       	ldi	r20, 0x7F	; 127
    20aa:	57 e4       	ldi	r21, 0x47	; 71
    20ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20b0:	18 16       	cp	r1, r24
    20b2:	4c f5       	brge	.+82     	; 0x2106 <LCD_void_Write+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b4:	6c 85       	ldd	r22, Y+12	; 0x0c
    20b6:	7d 85       	ldd	r23, Y+13	; 0x0d
    20b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    20ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e2       	ldi	r20, 0x20	; 32
    20c2:	51 e4       	ldi	r21, 0x41	; 65
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9f 83       	std	Y+7, r25	; 0x07
    20da:	8e 83       	std	Y+6, r24	; 0x06
    20dc:	0f c0       	rjmp	.+30     	; 0x20fc <LCD_void_Write+0x1f6>
    20de:	88 ec       	ldi	r24, 0xC8	; 200
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	9d 83       	std	Y+5, r25	; 0x05
    20e4:	8c 83       	std	Y+4, r24	; 0x04
    20e6:	8c 81       	ldd	r24, Y+4	; 0x04
    20e8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <LCD_void_Write+0x1e4>
    20ee:	9d 83       	std	Y+5, r25	; 0x05
    20f0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f2:	8e 81       	ldd	r24, Y+6	; 0x06
    20f4:	9f 81       	ldd	r25, Y+7	; 0x07
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	9f 83       	std	Y+7, r25	; 0x07
    20fa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fc:	8e 81       	ldd	r24, Y+6	; 0x06
    20fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	69 f7       	brne	.-38     	; 0x20de <LCD_void_Write+0x1d8>
    2104:	24 c0       	rjmp	.+72     	; 0x214e <LCD_void_Write+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2106:	68 85       	ldd	r22, Y+8	; 0x08
    2108:	79 85       	ldd	r23, Y+9	; 0x09
    210a:	8a 85       	ldd	r24, Y+10	; 0x0a
    210c:	9b 85       	ldd	r25, Y+11	; 0x0b
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9f 83       	std	Y+7, r25	; 0x07
    2118:	8e 83       	std	Y+6, r24	; 0x06
    211a:	8e 81       	ldd	r24, Y+6	; 0x06
    211c:	9f 81       	ldd	r25, Y+7	; 0x07
    211e:	9b 83       	std	Y+3, r25	; 0x03
    2120:	8a 83       	std	Y+2, r24	; 0x02
    2122:	8a 81       	ldd	r24, Y+2	; 0x02
    2124:	9b 81       	ldd	r25, Y+3	; 0x03
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <LCD_void_Write+0x220>
    212a:	9b 83       	std	Y+3, r25	; 0x03
    212c:	8a 83       	std	Y+2, r24	; 0x02
    212e:	0f c0       	rjmp	.+30     	; 0x214e <LCD_void_Write+0x248>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2130:	69 89       	ldd	r22, Y+17	; 0x11
    2132:	7a 89       	ldd	r23, Y+18	; 0x12
    2134:	8b 89       	ldd	r24, Y+19	; 0x13
    2136:	9c 89       	ldd	r25, Y+20	; 0x14
    2138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	88 8b       	std	Y+16, r24	; 0x10
    2142:	88 89       	ldd	r24, Y+16	; 0x10
    2144:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	8a 95       	dec	r24
    214a:	f1 f7       	brne	.-4      	; 0x2148 <LCD_void_Write+0x242>
    214c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_LOW);
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	62 e0       	ldi	r22, 0x02	; 2
    2152:	40 e0       	ldi	r20, 0x00	; 0
    2154:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
		DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_LOW);

#endif


}
    2158:	69 96       	adiw	r28, 0x19	; 25
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <LCD_void_Write_Data>:


void LCD_void_Write_Data(u8 Copy_u8_char)
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	0f 92       	push	r0
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	89 83       	std	Y+1, r24	; 0x01
	/*steps*/
		/*RS=1*/
//	DIO_U8_Set_Pin_Dir(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_OUTPUT);
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_HIGH);
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	41 e0       	ldi	r20, 0x01	; 1
    217c:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
		/*RW=0*/
		/*write a data*/
		/*E=1*/
		/*E=0*/
	LCD_void_Write(Copy_u8_char);
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <LCD_void_Write>
}
    2186:	0f 90       	pop	r0
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <LCD_void_Write_String>:




void LCD_void_Write_String(u8 *str)
{
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	00 d0       	rcall	.+0      	; 0x2194 <LCD_void_Write_String+0x6>
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	9a 83       	std	Y+2, r25	; 0x02
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	0a c0       	rjmp	.+20     	; 0x21b2 <LCD_void_Write_String+0x24>
	while( *str!='\0')
	{
		LCD_void_Write_Data(*str);
    219e:	e9 81       	ldd	r30, Y+1	; 0x01
    21a0:	fa 81       	ldd	r31, Y+2	; 0x02
    21a2:	80 81       	ld	r24, Z
    21a4:	0e 94 b5 10 	call	0x216a	; 0x216a <LCD_void_Write_Data>
		str++;
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	9a 81       	ldd	r25, Y+2	; 0x02
    21ac:	01 96       	adiw	r24, 0x01	; 1
    21ae:	9a 83       	std	Y+2, r25	; 0x02
    21b0:	89 83       	std	Y+1, r24	; 0x01



void LCD_void_Write_String(u8 *str)
{
	while( *str!='\0')
    21b2:	e9 81       	ldd	r30, Y+1	; 0x01
    21b4:	fa 81       	ldd	r31, Y+2	; 0x02
    21b6:	80 81       	ld	r24, Z
    21b8:	88 23       	and	r24, r24
    21ba:	89 f7       	brne	.-30     	; 0x219e <LCD_void_Write_String+0x10>
	{
		LCD_void_Write_Data(*str);
		str++;
	}
}
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	cf 91       	pop	r28
    21c2:	df 91       	pop	r29
    21c4:	08 95       	ret

000021c6 <LCD_void_Write_Numbers>:


void LCD_void_Write_Numbers(u32 Copy_U8_Number)
{
    21c6:	df 93       	push	r29
    21c8:	cf 93       	push	r28
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	6a 97       	sbiw	r28, 0x1a	; 26
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	6f 8b       	std	Y+23, r22	; 0x17
    21dc:	78 8f       	std	Y+24, r23	; 0x18
    21de:	89 8f       	std	Y+25, r24	; 0x19
    21e0:	9a 8f       	std	Y+26, r25	; 0x1a
	u8 rem ;
	u8 index=0 ;
    21e2:	19 82       	std	Y+1, r1	; 0x01
	u8 arr[BITSET_NUMBER];
	if(Copy_U8_Number == 0){
    21e4:	8f 89       	ldd	r24, Y+23	; 0x17
    21e6:	98 8d       	ldd	r25, Y+24	; 0x18
    21e8:	a9 8d       	ldd	r26, Y+25	; 0x19
    21ea:	ba 8d       	ldd	r27, Y+26	; 0x1a
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	a1 05       	cpc	r26, r1
    21f0:	b1 05       	cpc	r27, r1
    21f2:	f1 f5       	brne	.+124    	; 0x2270 <LCD_void_Write_Numbers+0xaa>
		arr[index]='0';
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	ce 01       	movw	r24, r28
    21fc:	03 96       	adiw	r24, 0x03	; 3
    21fe:	fc 01       	movw	r30, r24
    2200:	e2 0f       	add	r30, r18
    2202:	f3 1f       	adc	r31, r19
    2204:	80 e3       	ldi	r24, 0x30	; 48
    2206:	80 83       	st	Z, r24
		index++;
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	8f 5f       	subi	r24, 0xFF	; 255
    220c:	89 83       	std	Y+1, r24	; 0x01
    220e:	30 c0       	rjmp	.+96     	; 0x2270 <LCD_void_Write_Numbers+0xaa>
	}
	while(Copy_U8_Number!=0)
	{
		rem=Copy_U8_Number%10;
    2210:	8f 89       	ldd	r24, Y+23	; 0x17
    2212:	98 8d       	ldd	r25, Y+24	; 0x18
    2214:	a9 8d       	ldd	r26, Y+25	; 0x19
    2216:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2218:	2a e0       	ldi	r18, 0x0A	; 10
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e0       	ldi	r20, 0x00	; 0
    221e:	50 e0       	ldi	r21, 0x00	; 0
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	0e 94 65 21 	call	0x42ca	; 0x42ca <__udivmodsi4>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	8a 83       	std	Y+2, r24	; 0x02
		arr[index]=rem+'0';
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	8a 81       	ldd	r24, Y+2	; 0x02
    2236:	48 2f       	mov	r20, r24
    2238:	40 5d       	subi	r20, 0xD0	; 208
    223a:	ce 01       	movw	r24, r28
    223c:	03 96       	adiw	r24, 0x03	; 3
    223e:	fc 01       	movw	r30, r24
    2240:	e2 0f       	add	r30, r18
    2242:	f3 1f       	adc	r31, r19
    2244:	40 83       	st	Z, r20
		index++;
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	8f 5f       	subi	r24, 0xFF	; 255
    224a:	89 83       	std	Y+1, r24	; 0x01
		Copy_U8_Number/=10;
    224c:	8f 89       	ldd	r24, Y+23	; 0x17
    224e:	98 8d       	ldd	r25, Y+24	; 0x18
    2250:	a9 8d       	ldd	r26, Y+25	; 0x19
    2252:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2254:	2a e0       	ldi	r18, 0x0A	; 10
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	50 e0       	ldi	r21, 0x00	; 0
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 65 21 	call	0x42ca	; 0x42ca <__udivmodsi4>
    2264:	da 01       	movw	r26, r20
    2266:	c9 01       	movw	r24, r18
    2268:	8f 8b       	std	Y+23, r24	; 0x17
    226a:	98 8f       	std	Y+24, r25	; 0x18
    226c:	a9 8f       	std	Y+25, r26	; 0x19
    226e:	ba 8f       	std	Y+26, r27	; 0x1a
	u8 arr[BITSET_NUMBER];
	if(Copy_U8_Number == 0){
		arr[index]='0';
		index++;
	}
	while(Copy_U8_Number!=0)
    2270:	8f 89       	ldd	r24, Y+23	; 0x17
    2272:	98 8d       	ldd	r25, Y+24	; 0x18
    2274:	a9 8d       	ldd	r26, Y+25	; 0x19
    2276:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	a1 05       	cpc	r26, r1
    227c:	b1 05       	cpc	r27, r1
    227e:	41 f6       	brne	.-112    	; 0x2210 <LCD_void_Write_Numbers+0x4a>
		rem=Copy_U8_Number%10;
		arr[index]=rem+'0';
		index++;
		Copy_U8_Number/=10;
	}
	arr[index]='\0';
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	28 2f       	mov	r18, r24
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	ce 01       	movw	r24, r28
    2288:	03 96       	adiw	r24, 0x03	; 3
    228a:	fc 01       	movw	r30, r24
    228c:	e2 0f       	add	r30, r18
    228e:	f3 1f       	adc	r31, r19
    2290:	10 82       	st	Z, r1
	reverse(arr,index);
    2292:	ce 01       	movw	r24, r28
    2294:	03 96       	adiw	r24, 0x03	; 3
    2296:	69 81       	ldd	r22, Y+1	; 0x01
    2298:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <reverse>
	LCD_void_Write_String(arr);
    229c:	ce 01       	movw	r24, r28
    229e:	03 96       	adiw	r24, 0x03	; 3
    22a0:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>

}
    22a4:	6a 96       	adiw	r28, 0x1a	; 26
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <reverse>:

void reverse(u8 *ptr , u8 element)
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	29 97       	sbiw	r28, 0x09	; 9
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
    22ca:	98 87       	std	Y+8, r25	; 0x08
    22cc:	8f 83       	std	Y+7, r24	; 0x07
    22ce:	69 87       	std	Y+9, r22	; 0x09
	u8 start = 0;
    22d0:	1e 82       	std	Y+6, r1	; 0x06
	u8 end = element-1;
    22d2:	89 85       	ldd	r24, Y+9	; 0x09
    22d4:	81 50       	subi	r24, 0x01	; 1
    22d6:	8d 83       	std	Y+5, r24	; 0x05
    22d8:	33 c0       	rjmp	.+102    	; 0x2340 <reverse+0x8a>
	while(start<end)
	{
		u32 temp = ptr[start];
    22da:	8e 81       	ldd	r24, Y+6	; 0x06
    22dc:	28 2f       	mov	r18, r24
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	8f 81       	ldd	r24, Y+7	; 0x07
    22e2:	98 85       	ldd	r25, Y+8	; 0x08
    22e4:	fc 01       	movw	r30, r24
    22e6:	e2 0f       	add	r30, r18
    22e8:	f3 1f       	adc	r31, r19
    22ea:	80 81       	ld	r24, Z
    22ec:	88 2f       	mov	r24, r24
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	a0 e0       	ldi	r26, 0x00	; 0
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	9a 83       	std	Y+2, r25	; 0x02
    22f8:	ab 83       	std	Y+3, r26	; 0x03
    22fa:	bc 83       	std	Y+4, r27	; 0x04
		ptr[start]=ptr[end];
    22fc:	8e 81       	ldd	r24, Y+6	; 0x06
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	8f 81       	ldd	r24, Y+7	; 0x07
    2304:	98 85       	ldd	r25, Y+8	; 0x08
    2306:	dc 01       	movw	r26, r24
    2308:	a2 0f       	add	r26, r18
    230a:	b3 1f       	adc	r27, r19
    230c:	8d 81       	ldd	r24, Y+5	; 0x05
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	8f 81       	ldd	r24, Y+7	; 0x07
    2314:	98 85       	ldd	r25, Y+8	; 0x08
    2316:	fc 01       	movw	r30, r24
    2318:	e2 0f       	add	r30, r18
    231a:	f3 1f       	adc	r31, r19
    231c:	80 81       	ld	r24, Z
    231e:	8c 93       	st	X, r24
		ptr[end]=temp;
    2320:	8d 81       	ldd	r24, Y+5	; 0x05
    2322:	28 2f       	mov	r18, r24
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	8f 81       	ldd	r24, Y+7	; 0x07
    2328:	98 85       	ldd	r25, Y+8	; 0x08
    232a:	fc 01       	movw	r30, r24
    232c:	e2 0f       	add	r30, r18
    232e:	f3 1f       	adc	r31, r19
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	80 83       	st	Z, r24
		start++;
    2334:	8e 81       	ldd	r24, Y+6	; 0x06
    2336:	8f 5f       	subi	r24, 0xFF	; 255
    2338:	8e 83       	std	Y+6, r24	; 0x06
		end--;
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	81 50       	subi	r24, 0x01	; 1
    233e:	8d 83       	std	Y+5, r24	; 0x05

void reverse(u8 *ptr , u8 element)
{
	u8 start = 0;
	u8 end = element-1;
	while(start<end)
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	8d 81       	ldd	r24, Y+5	; 0x05
    2344:	98 17       	cp	r25, r24
    2346:	48 f2       	brcs	.-110    	; 0x22da <reverse+0x24>
		ptr[end]=temp;
		start++;
		end--;

	}
}
    2348:	29 96       	adiw	r28, 0x09	; 9
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	08 95       	ret

0000235a <LCD_void_DDRAM_Address>:


void LCD_void_DDRAM_Address(u8 Copy_u8_Line , u8 Copy_u8_Location)
{
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	00 d0       	rcall	.+0      	; 0x2360 <LCD_void_DDRAM_Address+0x6>
    2360:	0f 92       	push	r0
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	8a 83       	std	Y+2, r24	; 0x02
    2368:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_Address = (Copy_u8_Location+(64*Copy_u8_Line));
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	88 2f       	mov	r24, r24
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	00 24       	eor	r0, r0
    2372:	96 95       	lsr	r25
    2374:	87 95       	ror	r24
    2376:	07 94       	ror	r0
    2378:	96 95       	lsr	r25
    237a:	87 95       	ror	r24
    237c:	07 94       	ror	r0
    237e:	98 2f       	mov	r25, r24
    2380:	80 2d       	mov	r24, r0
    2382:	98 2f       	mov	r25, r24
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	89 0f       	add	r24, r25
    2388:	89 83       	std	Y+1, r24	; 0x01
	DDRAM_Address|=0b10000000;
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	80 68       	ori	r24, 0x80	; 128
    238e:	89 83       	std	Y+1, r24	; 0x01
	LCD_void_Write_CMD(DDRAM_Address);
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <LCD_void_Write_CMD>
}
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <LCD_void_Set_CGRAM_Address>:


void LCD_void_Set_CGRAM_Address(u8 Address , u8 *ptr)
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <LCD_void_Set_CGRAM_Address+0x6>
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <LCD_void_Set_CGRAM_Address+0x8>
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	8a 83       	std	Y+2, r24	; 0x02
    23b0:	7c 83       	std	Y+4, r23	; 0x04
    23b2:	6b 83       	std	Y+3, r22	; 0x03
	LCD_void_Write_CMD(Address);
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <LCD_void_Write_CMD>
	for(u8 i =0 ; i<8 ; i++)
    23ba:	19 82       	std	Y+1, r1	; 0x01
    23bc:	0d c0       	rjmp	.+26     	; 0x23d8 <LCD_void_Set_CGRAM_Address+0x36>
	{
		LCD_void_Write_Data(*ptr);
    23be:	eb 81       	ldd	r30, Y+3	; 0x03
    23c0:	fc 81       	ldd	r31, Y+4	; 0x04
    23c2:	80 81       	ld	r24, Z
    23c4:	0e 94 b5 10 	call	0x216a	; 0x216a <LCD_void_Write_Data>
		ptr++;
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	9c 81       	ldd	r25, Y+4	; 0x04
    23cc:	01 96       	adiw	r24, 0x01	; 1
    23ce:	9c 83       	std	Y+4, r25	; 0x04
    23d0:	8b 83       	std	Y+3, r24	; 0x03


void LCD_void_Set_CGRAM_Address(u8 Address , u8 *ptr)
{
	LCD_void_Write_CMD(Address);
	for(u8 i =0 ; i<8 ; i++)
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	8f 5f       	subi	r24, 0xFF	; 255
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	88 30       	cpi	r24, 0x08	; 8
    23dc:	80 f3       	brcs	.-32     	; 0x23be <LCD_void_Set_CGRAM_Address+0x1c>
	{
		LCD_void_Write_Data(*ptr);
		ptr++;
	}

}
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <LCD_void_Clear_Screen>:

void LCD_void_Clear_Screen(void)
{
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	2e 97       	sbiw	r28, 0x0e	; 14
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
	LCD_void_Write_CMD(LCD_Clear_Display_Screen);
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <LCD_void_Write_CMD>
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	a0 e0       	ldi	r26, 0x00	; 0
    240c:	b0 e4       	ldi	r27, 0x40	; 64
    240e:	8b 87       	std	Y+11, r24	; 0x0b
    2410:	9c 87       	std	Y+12, r25	; 0x0c
    2412:	ad 87       	std	Y+13, r26	; 0x0d
    2414:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2416:	6b 85       	ldd	r22, Y+11	; 0x0b
    2418:	7c 85       	ldd	r23, Y+12	; 0x0c
    241a:	8d 85       	ldd	r24, Y+13	; 0x0d
    241c:	9e 85       	ldd	r25, Y+14	; 0x0e
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	4a ef       	ldi	r20, 0xFA	; 250
    2424:	54 e4       	ldi	r21, 0x44	; 68
    2426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	8f 83       	std	Y+7, r24	; 0x07
    2430:	98 87       	std	Y+8, r25	; 0x08
    2432:	a9 87       	std	Y+9, r26	; 0x09
    2434:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2436:	6f 81       	ldd	r22, Y+7	; 0x07
    2438:	78 85       	ldd	r23, Y+8	; 0x08
    243a:	89 85       	ldd	r24, Y+9	; 0x09
    243c:	9a 85       	ldd	r25, Y+10	; 0x0a
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e8       	ldi	r20, 0x80	; 128
    2444:	5f e3       	ldi	r21, 0x3F	; 63
    2446:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    244a:	88 23       	and	r24, r24
    244c:	2c f4       	brge	.+10     	; 0x2458 <LCD_void_Clear_Screen+0x6c>
		__ticks = 1;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	9e 83       	std	Y+6, r25	; 0x06
    2454:	8d 83       	std	Y+5, r24	; 0x05
    2456:	3f c0       	rjmp	.+126    	; 0x24d6 <LCD_void_Clear_Screen+0xea>
	else if (__tmp > 65535)
    2458:	6f 81       	ldd	r22, Y+7	; 0x07
    245a:	78 85       	ldd	r23, Y+8	; 0x08
    245c:	89 85       	ldd	r24, Y+9	; 0x09
    245e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	3f ef       	ldi	r19, 0xFF	; 255
    2464:	4f e7       	ldi	r20, 0x7F	; 127
    2466:	57 e4       	ldi	r21, 0x47	; 71
    2468:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    246c:	18 16       	cp	r1, r24
    246e:	4c f5       	brge	.+82     	; 0x24c2 <LCD_void_Clear_Screen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2470:	6b 85       	ldd	r22, Y+11	; 0x0b
    2472:	7c 85       	ldd	r23, Y+12	; 0x0c
    2474:	8d 85       	ldd	r24, Y+13	; 0x0d
    2476:	9e 85       	ldd	r25, Y+14	; 0x0e
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e2       	ldi	r20, 0x20	; 32
    247e:	51 e4       	ldi	r21, 0x41	; 65
    2480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	bc 01       	movw	r22, r24
    248a:	cd 01       	movw	r24, r26
    248c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
    2498:	0f c0       	rjmp	.+30     	; 0x24b8 <LCD_void_Clear_Screen+0xcc>
    249a:	88 ec       	ldi	r24, 0xC8	; 200
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	9c 83       	std	Y+4, r25	; 0x04
    24a0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	9c 81       	ldd	r25, Y+4	; 0x04
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <LCD_void_Clear_Screen+0xba>
    24aa:	9c 83       	std	Y+4, r25	; 0x04
    24ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ae:	8d 81       	ldd	r24, Y+5	; 0x05
    24b0:	9e 81       	ldd	r25, Y+6	; 0x06
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	9e 83       	std	Y+6, r25	; 0x06
    24b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ba:	9e 81       	ldd	r25, Y+6	; 0x06
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	69 f7       	brne	.-38     	; 0x249a <LCD_void_Clear_Screen+0xae>
    24c0:	14 c0       	rjmp	.+40     	; 0x24ea <LCD_void_Clear_Screen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c2:	6f 81       	ldd	r22, Y+7	; 0x07
    24c4:	78 85       	ldd	r23, Y+8	; 0x08
    24c6:	89 85       	ldd	r24, Y+9	; 0x09
    24c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	9e 83       	std	Y+6, r25	; 0x06
    24d4:	8d 83       	std	Y+5, r24	; 0x05
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	9e 81       	ldd	r25, Y+6	; 0x06
    24da:	9a 83       	std	Y+2, r25	; 0x02
    24dc:	89 83       	std	Y+1, r24	; 0x01
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	9a 81       	ldd	r25, Y+2	; 0x02
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <LCD_void_Clear_Screen+0xf6>
    24e6:	9a 83       	std	Y+2, r25	; 0x02
    24e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    24ea:	2e 96       	adiw	r28, 0x0e	; 14
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    2504:	62 97       	sbiw	r28, 0x12	; 18
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	9a 8b       	std	Y+18, r25	; 0x12
    2512:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   /* store the integer number to arr & 10 is for decimal numbering system*/
   itoa(data,arr,10);
    2514:	89 89       	ldd	r24, Y+17	; 0x11
    2516:	9a 89       	ldd	r25, Y+18	; 0x12
    2518:	9e 01       	movw	r18, r28
    251a:	2f 5f       	subi	r18, 0xFF	; 255
    251c:	3f 4f       	sbci	r19, 0xFF	; 255
    251e:	b9 01       	movw	r22, r18
    2520:	4a e0       	ldi	r20, 0x0A	; 10
    2522:	50 e0       	ldi	r21, 0x00	; 0
    2524:	0e 94 be 21 	call	0x437c	; 0x437c <itoa>

   LCD_void_Write_String(arr);
    2528:	ce 01       	movw	r24, r28
    252a:	01 96       	adiw	r24, 0x01	; 1
    252c:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
}
    2530:	62 96       	adiw	r28, 0x12	; 18
    2532:	0f b6       	in	r0, 0x3f	; 63
    2534:	f8 94       	cli
    2536:	de bf       	out	0x3e, r29	; 62
    2538:	0f be       	out	0x3f, r0	; 63
    253a:	cd bf       	out	0x3d, r28	; 61
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	08 95       	ret

00002542 <SPI_Void_Init>:




void SPI_Void_Init()
{
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(SPI_U8_SPCR,0);
	Clear_Bit(SPI_U8_SPSR,0);

#elif SPI_u8_Mode==SPI_u8_Slave_Mode

	DIO_U8_Set_Pin_Dir(PORTB_ID,4,0); // SS
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	64 e0       	ldi	r22, 0x04	; 4
    254e:	40 e0       	ldi	r20, 0x00	; 0
    2550:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_U8_Set_Pin_Dir>
	DIO_U8_Set_Pin_Dir(PORTB_ID,5,0); // MOSI
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	65 e0       	ldi	r22, 0x05	; 5
    2558:	40 e0       	ldi	r20, 0x00	; 0
    255a:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_U8_Set_Pin_Dir>
	DIO_U8_Set_Pin_Dir(PORTB_ID,6,1); // MISO
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	66 e0       	ldi	r22, 0x06	; 6
    2562:	41 e0       	ldi	r20, 0x01	; 1
    2564:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_U8_Set_Pin_Dir>
	DIO_U8_Set_Pin_Dir(PORTB_ID,7,0); // SCK
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	67 e0       	ldi	r22, 0x07	; 7
    256c:	40 e0       	ldi	r20, 0x00	; 0
    256e:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_U8_Set_Pin_Dir>

	/*data order = MSB*/
	Clear_Bit(SPI_U8_SPCR,5);
    2572:	ad e2       	ldi	r26, 0x2D	; 45
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	ed e2       	ldi	r30, 0x2D	; 45
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	8f 7d       	andi	r24, 0xDF	; 223
    257e:	8c 93       	st	X, r24
	/*master-->1/slave-->0*/
	Clear_Bit(SPI_U8_SPCR,4);
    2580:	ad e2       	ldi	r26, 0x2D	; 45
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	ed e2       	ldi	r30, 0x2D	; 45
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	8f 7e       	andi	r24, 0xEF	; 239
    258c:	8c 93       	st	X, r24
	/*Clock Polarity CPOL And Clock phase CPHA ==> falling , rising / setup , sample*/
	Set_Bit(SPI_U8_SPCR,3);
    258e:	ad e2       	ldi	r26, 0x2D	; 45
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	ed e2       	ldi	r30, 0x2D	; 45
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	88 60       	ori	r24, 0x08	; 8
    259a:	8c 93       	st	X, r24
	Set_Bit(SPI_U8_SPCR,2);
    259c:	ad e2       	ldi	r26, 0x2D	; 45
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	ed e2       	ldi	r30, 0x2D	; 45
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	84 60       	ori	r24, 0x04	; 4
    25a8:	8c 93       	st	X, r24
	/*choose any clock*/
	Set_Bit(SPI_U8_SPCR,1);
    25aa:	ad e2       	ldi	r26, 0x2D	; 45
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	ed e2       	ldi	r30, 0x2D	; 45
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	82 60       	ori	r24, 0x02	; 2
    25b6:	8c 93       	st	X, r24
	Clear_Bit(SPI_U8_SPCR,0);
    25b8:	ad e2       	ldi	r26, 0x2D	; 45
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	ed e2       	ldi	r30, 0x2D	; 45
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	8e 7f       	andi	r24, 0xFE	; 254
    25c4:	8c 93       	st	X, r24
	Clear_Bit(SPI_U8_SPSR,0);
    25c6:	ae e2       	ldi	r26, 0x2E	; 46
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	ee e2       	ldi	r30, 0x2E	; 46
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	8e 7f       	andi	r24, 0xFE	; 254
    25d2:	8c 93       	st	X, r24
#error"error in SPI_Config to select SPI_mode"

#endif

	/*Enable SPI*/
		Set_Bit(SPI_U8_SPCR,6);
    25d4:	ad e2       	ldi	r26, 0x2D	; 45
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	ed e2       	ldi	r30, 0x2D	; 45
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	80 64       	ori	r24, 0x40	; 64
    25e0:	8c 93       	st	X, r24
}
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <SPI_U8_Master_TransRecieve>:


u8 SPI_U8_Master_TransRecieve(u8 copy_U8TranmitedByte , u8 * copy_pu8RecievedByte)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	00 d0       	rcall	.+0      	; 0x25ee <SPI_U8_Master_TransRecieve+0x6>
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <SPI_U8_Master_TransRecieve+0x8>
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	8a 83       	std	Y+2, r24	; 0x02
    25f6:	7c 83       	std	Y+4, r23	; 0x04
    25f8:	6b 83       	std	Y+3, r22	; 0x03
	/*SET PIN SS TO LOW*/
	DIO_U8_Set_Pin_value(PORTB_ID,4,0);
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	64 e0       	ldi	r22, 0x04	; 4
    25fe:	40 e0       	ldi	r20, 0x00	; 0
    2600:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
	u8 LocalErrorState=0;
    2604:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pu8RecievedByte!=Null)
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
    2608:	9c 81       	ldd	r25, Y+4	; 0x04
    260a:	00 97       	sbiw	r24, 0x00	; 0
    260c:	89 f0       	breq	.+34     	; 0x2630 <SPI_U8_Master_TransRecieve+0x48>
	{
		/*send byte*/
		SPI_U8_SPDR=copy_U8TranmitedByte;
    260e:	ef e2       	ldi	r30, 0x2F	; 47
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	80 83       	st	Z, r24
		/*check if the transmission is completed*/
		while(Get_Bit(SPI_U8_SPSR,7)==0);
    2616:	ee e2       	ldi	r30, 0x2E	; 46
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	88 23       	and	r24, r24
    261e:	dc f7       	brge	.-10     	; 0x2616 <SPI_U8_Master_TransRecieve+0x2e>
		/*Read byte*/
		*copy_pu8RecievedByte=SPI_U8_SPDR;
    2620:	ef e2       	ldi	r30, 0x2F	; 47
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	eb 81       	ldd	r30, Y+3	; 0x03
    2628:	fc 81       	ldd	r31, Y+4	; 0x04
    262a:	80 83       	st	Z, r24
		LocalErrorState=1;
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	89 83       	std	Y+1, r24	; 0x01
	}
	DIO_U8_Set_Pin_value(PORTB_ID,4,1);
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	64 e0       	ldi	r22, 0x04	; 4
    2634:	41 e0       	ldi	r20, 0x01	; 1
    2636:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
	return LocalErrorState;
    263a:	89 81       	ldd	r24, Y+1	; 0x01
}
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	08 95       	ret

0000264a <SPI_Void_SlaveSendByte>:

void SPI_Void_SlaveSendByte(u8 copy_U8TranmitedByte)
{
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	00 d0       	rcall	.+0      	; 0x2650 <SPI_Void_SlaveSendByte+0x6>
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
    2654:	8a 83       	std	Y+2, r24	; 0x02
	u8 flush;
	/*Notify master by dio pin*/
	DIO_U8_Set_Pin_Dir(PORTA_ID,7,1);
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	67 e0       	ldi	r22, 0x07	; 7
    265a:	41 e0       	ldi	r20, 0x01	; 1
    265c:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_U8_Set_Pin_Dir>
	DIO_U8_Set_Pin_value(PORTA_ID,7,1);
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	67 e0       	ldi	r22, 0x07	; 7
    2664:	41 e0       	ldi	r20, 0x01	; 1
    2666:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
	/*send byte*/
	SPI_U8_SPDR=copy_U8TranmitedByte;
    266a:	ef e2       	ldi	r30, 0x2F	; 47
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	8a 81       	ldd	r24, Y+2	; 0x02
    2670:	80 83       	st	Z, r24
	/*check if the transmission is completed*/
	while(Get_Bit(SPI_U8_SPSR,7)==0);
    2672:	ee e2       	ldi	r30, 0x2E	; 46
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	88 23       	and	r24, r24
    267a:	dc f7       	brge	.-10     	; 0x2672 <SPI_Void_SlaveSendByte+0x28>
	flush = SPI_U8_SPDR;
    267c:	ef e2       	ldi	r30, 0x2F	; 47
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	89 83       	std	Y+1, r24	; 0x01


}
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	08 95       	ret

0000268e <SPI_U8_Slave_TransRecieve>:

u8 SPI_U8_Slave_TransRecieve(u8 data , u8 * copy_pu8RecievedByte)
{
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	00 d0       	rcall	.+0      	; 0x2694 <SPI_U8_Slave_TransRecieve+0x6>
    2694:	00 d0       	rcall	.+0      	; 0x2696 <SPI_U8_Slave_TransRecieve+0x8>
    2696:	cd b7       	in	r28, 0x3d	; 61
    2698:	de b7       	in	r29, 0x3e	; 62
    269a:	8a 83       	std	Y+2, r24	; 0x02
    269c:	7c 83       	std	Y+4, r23	; 0x04
    269e:	6b 83       	std	Y+3, r22	; 0x03
	SPI_U8_SPDR=data;
    26a0:	ef e2       	ldi	r30, 0x2F	; 47
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	8a 81       	ldd	r24, Y+2	; 0x02
    26a6:	80 83       	st	Z, r24
	u8 LocalErrorState=0;
    26a8:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pu8RecievedByte!=Null)
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	9c 81       	ldd	r25, Y+4	; 0x04
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	69 f0       	breq	.+26     	; 0x26cc <SPI_U8_Slave_TransRecieve+0x3e>
	{
		while(Get_Bit(SPI_U8_SPSR,7)==0);
    26b2:	ee e2       	ldi	r30, 0x2E	; 46
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	88 23       	and	r24, r24
    26ba:	dc f7       	brge	.-10     	; 0x26b2 <SPI_U8_Slave_TransRecieve+0x24>
		/*Read byte*/
		* copy_pu8RecievedByte=SPI_U8_SPDR;
    26bc:	ef e2       	ldi	r30, 0x2F	; 47
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	eb 81       	ldd	r30, Y+3	; 0x03
    26c4:	fc 81       	ldd	r31, Y+4	; 0x04
    26c6:	80 83       	st	Z, r24
		LocalErrorState=1;
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	89 83       	std	Y+1, r24	; 0x01
	}
	return LocalErrorState;
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	cf 91       	pop	r28
    26d8:	df 91       	pop	r29
    26da:	08 95       	ret

000026dc <Air_Cond>:

u8 Desired_Temp=23;


void Air_Cond()
{
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	6c 97       	sbiw	r28, 0x1c	; 28
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	f8 94       	cli
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	cd bf       	out	0x3d, r28	; 61
	static u8 status = 1 ;
	Toggle_Bit(status,0);
    26f0:	90 91 a8 01 	lds	r25, 0x01A8
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	89 27       	eor	r24, r25
    26f8:	80 93 a8 01 	sts	0x01A8, r24
	if(status==0)
    26fc:	80 91 a8 01 	lds	r24, 0x01A8
    2700:	88 23       	and	r24, r24
    2702:	09 f0       	breq	.+2      	; 0x2706 <Air_Cond+0x2a>
    2704:	88 c0       	rjmp	.+272    	; 0x2816 <Air_Cond+0x13a>
	{
		LCD_void_Clear_Screen();
    2706:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
		DIO_U8_Set_Pin_value(PORTD_ID,1,0);
    270a:	83 e0       	ldi	r24, 0x03	; 3
    270c:	61 e0       	ldi	r22, 0x01	; 1
    270e:	40 e0       	ldi	r20, 0x00	; 0
    2710:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
		LCD_void_Write_String("   Air_Cond.   ");
    2714:	80 e6       	ldi	r24, 0x60	; 96
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
		LCD_void_DDRAM_Address(1,0);
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	0e 94 ad 11 	call	0x235a	; 0x235a <LCD_void_DDRAM_Address>
		LCD_void_Write_String("   Turned OFF   ");
    2724:	80 e7       	ldi	r24, 0x70	; 112
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	aa e7       	ldi	r26, 0x7A	; 122
    2732:	b4 e4       	ldi	r27, 0x44	; 68
    2734:	89 8f       	std	Y+25, r24	; 0x19
    2736:	9a 8f       	std	Y+26, r25	; 0x1a
    2738:	ab 8f       	std	Y+27, r26	; 0x1b
    273a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273c:	69 8d       	ldd	r22, Y+25	; 0x19
    273e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2740:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2742:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	4a ef       	ldi	r20, 0xFA	; 250
    274a:	54 e4       	ldi	r21, 0x44	; 68
    274c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	8d 8b       	std	Y+21, r24	; 0x15
    2756:	9e 8b       	std	Y+22, r25	; 0x16
    2758:	af 8b       	std	Y+23, r26	; 0x17
    275a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    275c:	6d 89       	ldd	r22, Y+21	; 0x15
    275e:	7e 89       	ldd	r23, Y+22	; 0x16
    2760:	8f 89       	ldd	r24, Y+23	; 0x17
    2762:	98 8d       	ldd	r25, Y+24	; 0x18
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e8       	ldi	r20, 0x80	; 128
    276a:	5f e3       	ldi	r21, 0x3F	; 63
    276c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2770:	88 23       	and	r24, r24
    2772:	2c f4       	brge	.+10     	; 0x277e <Air_Cond+0xa2>
		__ticks = 1;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	9c 8b       	std	Y+20, r25	; 0x14
    277a:	8b 8b       	std	Y+19, r24	; 0x13
    277c:	3f c0       	rjmp	.+126    	; 0x27fc <Air_Cond+0x120>
	else if (__tmp > 65535)
    277e:	6d 89       	ldd	r22, Y+21	; 0x15
    2780:	7e 89       	ldd	r23, Y+22	; 0x16
    2782:	8f 89       	ldd	r24, Y+23	; 0x17
    2784:	98 8d       	ldd	r25, Y+24	; 0x18
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	3f ef       	ldi	r19, 0xFF	; 255
    278a:	4f e7       	ldi	r20, 0x7F	; 127
    278c:	57 e4       	ldi	r21, 0x47	; 71
    278e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2792:	18 16       	cp	r1, r24
    2794:	4c f5       	brge	.+82     	; 0x27e8 <Air_Cond+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2796:	69 8d       	ldd	r22, Y+25	; 0x19
    2798:	7a 8d       	ldd	r23, Y+26	; 0x1a
    279a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    279c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e2       	ldi	r20, 0x20	; 32
    27a4:	51 e4       	ldi	r21, 0x41	; 65
    27a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	bc 01       	movw	r22, r24
    27b0:	cd 01       	movw	r24, r26
    27b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	9c 8b       	std	Y+20, r25	; 0x14
    27bc:	8b 8b       	std	Y+19, r24	; 0x13
    27be:	0f c0       	rjmp	.+30     	; 0x27de <Air_Cond+0x102>
    27c0:	88 ec       	ldi	r24, 0xC8	; 200
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	9a 8b       	std	Y+18, r25	; 0x12
    27c6:	89 8b       	std	Y+17, r24	; 0x11
    27c8:	89 89       	ldd	r24, Y+17	; 0x11
    27ca:	9a 89       	ldd	r25, Y+18	; 0x12
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	f1 f7       	brne	.-4      	; 0x27cc <Air_Cond+0xf0>
    27d0:	9a 8b       	std	Y+18, r25	; 0x12
    27d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d4:	8b 89       	ldd	r24, Y+19	; 0x13
    27d6:	9c 89       	ldd	r25, Y+20	; 0x14
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	9c 8b       	std	Y+20, r25	; 0x14
    27dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27de:	8b 89       	ldd	r24, Y+19	; 0x13
    27e0:	9c 89       	ldd	r25, Y+20	; 0x14
    27e2:	00 97       	sbiw	r24, 0x00	; 0
    27e4:	69 f7       	brne	.-38     	; 0x27c0 <Air_Cond+0xe4>
    27e6:	14 c0       	rjmp	.+40     	; 0x2810 <Air_Cond+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e8:	6d 89       	ldd	r22, Y+21	; 0x15
    27ea:	7e 89       	ldd	r23, Y+22	; 0x16
    27ec:	8f 89       	ldd	r24, Y+23	; 0x17
    27ee:	98 8d       	ldd	r25, Y+24	; 0x18
    27f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	9c 8b       	std	Y+20, r25	; 0x14
    27fa:	8b 8b       	std	Y+19, r24	; 0x13
    27fc:	8b 89       	ldd	r24, Y+19	; 0x13
    27fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2800:	98 8b       	std	Y+16, r25	; 0x10
    2802:	8f 87       	std	Y+15, r24	; 0x0f
    2804:	8f 85       	ldd	r24, Y+15	; 0x0f
    2806:	98 89       	ldd	r25, Y+16	; 0x10
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <Air_Cond+0x12c>
    280c:	98 8b       	std	Y+16, r25	; 0x10
    280e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LCD_void_Clear_Screen();
    2810:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
    2814:	87 c0       	rjmp	.+270    	; 0x2924 <Air_Cond+0x248>
//		status=1;
	}
	else
	{
		LCD_void_Clear_Screen();
    2816:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
		LCD_void_Write_String("   Air_Cond.   ");
    281a:	80 e6       	ldi	r24, 0x60	; 96
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
		LCD_void_DDRAM_Address(1,0);
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	60 e0       	ldi	r22, 0x00	; 0
    2826:	0e 94 ad 11 	call	0x235a	; 0x235a <LCD_void_DDRAM_Address>
		LCD_void_Write_String("   Turned ON   ");
    282a:	81 e8       	ldi	r24, 0x81	; 129
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
		DIO_U8_Set_Pin_value(PORTD_ID,1,1);
    2832:	83 e0       	ldi	r24, 0x03	; 3
    2834:	61 e0       	ldi	r22, 0x01	; 1
    2836:	41 e0       	ldi	r20, 0x01	; 1
    2838:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	aa e7       	ldi	r26, 0x7A	; 122
    2842:	b4 e4       	ldi	r27, 0x44	; 68
    2844:	8b 87       	std	Y+11, r24	; 0x0b
    2846:	9c 87       	std	Y+12, r25	; 0x0c
    2848:	ad 87       	std	Y+13, r26	; 0x0d
    284a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284c:	6b 85       	ldd	r22, Y+11	; 0x0b
    284e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2850:	8d 85       	ldd	r24, Y+13	; 0x0d
    2852:	9e 85       	ldd	r25, Y+14	; 0x0e
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	4a ef       	ldi	r20, 0xFA	; 250
    285a:	54 e4       	ldi	r21, 0x44	; 68
    285c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	8f 83       	std	Y+7, r24	; 0x07
    2866:	98 87       	std	Y+8, r25	; 0x08
    2868:	a9 87       	std	Y+9, r26	; 0x09
    286a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    286c:	6f 81       	ldd	r22, Y+7	; 0x07
    286e:	78 85       	ldd	r23, Y+8	; 0x08
    2870:	89 85       	ldd	r24, Y+9	; 0x09
    2872:	9a 85       	ldd	r25, Y+10	; 0x0a
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e8       	ldi	r20, 0x80	; 128
    287a:	5f e3       	ldi	r21, 0x3F	; 63
    287c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2880:	88 23       	and	r24, r24
    2882:	2c f4       	brge	.+10     	; 0x288e <Air_Cond+0x1b2>
		__ticks = 1;
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	9e 83       	std	Y+6, r25	; 0x06
    288a:	8d 83       	std	Y+5, r24	; 0x05
    288c:	3f c0       	rjmp	.+126    	; 0x290c <Air_Cond+0x230>
	else if (__tmp > 65535)
    288e:	6f 81       	ldd	r22, Y+7	; 0x07
    2890:	78 85       	ldd	r23, Y+8	; 0x08
    2892:	89 85       	ldd	r24, Y+9	; 0x09
    2894:	9a 85       	ldd	r25, Y+10	; 0x0a
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	3f ef       	ldi	r19, 0xFF	; 255
    289a:	4f e7       	ldi	r20, 0x7F	; 127
    289c:	57 e4       	ldi	r21, 0x47	; 71
    289e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28a2:	18 16       	cp	r1, r24
    28a4:	4c f5       	brge	.+82     	; 0x28f8 <Air_Cond+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	40 e2       	ldi	r20, 0x20	; 32
    28b4:	51 e4       	ldi	r21, 0x41	; 65
    28b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	bc 01       	movw	r22, r24
    28c0:	cd 01       	movw	r24, r26
    28c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	9e 83       	std	Y+6, r25	; 0x06
    28cc:	8d 83       	std	Y+5, r24	; 0x05
    28ce:	0f c0       	rjmp	.+30     	; 0x28ee <Air_Cond+0x212>
    28d0:	88 ec       	ldi	r24, 0xC8	; 200
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	9c 83       	std	Y+4, r25	; 0x04
    28d6:	8b 83       	std	Y+3, r24	; 0x03
    28d8:	8b 81       	ldd	r24, Y+3	; 0x03
    28da:	9c 81       	ldd	r25, Y+4	; 0x04
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	f1 f7       	brne	.-4      	; 0x28dc <Air_Cond+0x200>
    28e0:	9c 83       	std	Y+4, r25	; 0x04
    28e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e4:	8d 81       	ldd	r24, Y+5	; 0x05
    28e6:	9e 81       	ldd	r25, Y+6	; 0x06
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	9e 83       	std	Y+6, r25	; 0x06
    28ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ee:	8d 81       	ldd	r24, Y+5	; 0x05
    28f0:	9e 81       	ldd	r25, Y+6	; 0x06
    28f2:	00 97       	sbiw	r24, 0x00	; 0
    28f4:	69 f7       	brne	.-38     	; 0x28d0 <Air_Cond+0x1f4>
    28f6:	14 c0       	rjmp	.+40     	; 0x2920 <Air_Cond+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f8:	6f 81       	ldd	r22, Y+7	; 0x07
    28fa:	78 85       	ldd	r23, Y+8	; 0x08
    28fc:	89 85       	ldd	r24, Y+9	; 0x09
    28fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	9e 83       	std	Y+6, r25	; 0x06
    290a:	8d 83       	std	Y+5, r24	; 0x05
    290c:	8d 81       	ldd	r24, Y+5	; 0x05
    290e:	9e 81       	ldd	r25, Y+6	; 0x06
    2910:	9a 83       	std	Y+2, r25	; 0x02
    2912:	89 83       	std	Y+1, r24	; 0x01
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	9a 81       	ldd	r25, Y+2	; 0x02
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <Air_Cond+0x23c>
    291c:	9a 83       	std	Y+2, r25	; 0x02
    291e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_void_Clear_Screen();
    2920:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
//		status=0;
	}
}
    2924:	6c 96       	adiw	r28, 0x1c	; 28
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <main>:
void main(void)
{
    2936:	0f 93       	push	r16
    2938:	1f 93       	push	r17
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
    2942:	c3 5f       	subi	r28, 0xF3	; 243
    2944:	d0 40       	sbci	r29, 0x00	; 0
    2946:	0f b6       	in	r0, 0x3f	; 63
    2948:	f8 94       	cli
    294a:	de bf       	out	0x3e, r29	; 62
    294c:	0f be       	out	0x3f, r0	; 63
    294e:	cd bf       	out	0x3d, r28	; 61

 u8 local;
 u16 Temp;
	DIO_void_Init();
    2950:	0e 94 4e 07 	call	0xe9c	; 0xe9c <DIO_void_Init>
	LCD_void_Init();
    2954:	0e 94 ae 0c 	call	0x195c	; 0x195c <LCD_void_Init>
	SPI_Void_Init();
    2958:	0e 94 a1 12 	call	0x2542	; 0x2542 <SPI_Void_Init>
	ADC_void_Init();
    295c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_void_Init>

	EXTI_void_Set_Level(EXTI_U8_INT0, EXTI_U8_INT0_FALLING_EDGE);
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	62 e0       	ldi	r22, 0x02	; 2
    2964:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <EXTI_void_Set_Level>
	EXTI_void_Eable(EXTI_U8_INT0);
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <EXTI_void_Eable>
	EXTI_void_Global_EN_DIS(EXTI_U8_GLOBAL_ENABLE);
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	0e 94 77 0c 	call	0x18ee	; 0x18ee <EXTI_void_Global_EN_DIS>
	EXTI_void_Set_CallBack(EXTI_U8_INT0,Air_Cond);
    2974:	2e e6       	ldi	r18, 0x6E	; 110
    2976:	33 e1       	ldi	r19, 0x13	; 19
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	b9 01       	movw	r22, r18
    297c:	0e 94 93 0c 	call	0x1926	; 0x1926 <EXTI_void_Set_CallBack>



while(1)
{
	SPI_U8_Slave_TransRecieve(0xFF,&local);
    2980:	9e 01       	movw	r18, r28
    2982:	2f 50       	subi	r18, 0x0F	; 15
    2984:	3f 4f       	sbci	r19, 0xFF	; 255
    2986:	8f ef       	ldi	r24, 0xFF	; 255
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	b9 01       	movw	r22, r18
    298c:	0e 94 47 13 	call	0x268e	; 0x268e <SPI_U8_Slave_TransRecieve>
	switch(local)
    2990:	fe 01       	movw	r30, r28
    2992:	ef 50       	subi	r30, 0x0F	; 15
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	80 81       	ld	r24, Z
    2998:	28 2f       	mov	r18, r24
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	ce 50       	subi	r28, 0x0E	; 14
    299e:	df 4f       	sbci	r29, 0xFF	; 255
    29a0:	39 83       	std	Y+1, r19	; 0x01
    29a2:	28 83       	st	Y, r18
    29a4:	c2 5f       	subi	r28, 0xF2	; 242
    29a6:	d0 40       	sbci	r29, 0x00	; 0
    29a8:	ce 50       	subi	r28, 0x0E	; 14
    29aa:	df 4f       	sbci	r29, 0xFF	; 255
    29ac:	88 81       	ld	r24, Y
    29ae:	99 81       	ldd	r25, Y+1	; 0x01
    29b0:	c2 5f       	subi	r28, 0xF2	; 242
    29b2:	d0 40       	sbci	r29, 0x00	; 0
    29b4:	86 30       	cpi	r24, 0x06	; 6
    29b6:	91 05       	cpc	r25, r1
    29b8:	09 f4       	brne	.+2      	; 0x29bc <main+0x86>
    29ba:	58 c4       	rjmp	.+2224   	; 0x326c <main+0x936>
    29bc:	ce 50       	subi	r28, 0x0E	; 14
    29be:	df 4f       	sbci	r29, 0xFF	; 255
    29c0:	e8 81       	ld	r30, Y
    29c2:	f9 81       	ldd	r31, Y+1	; 0x01
    29c4:	c2 5f       	subi	r28, 0xF2	; 242
    29c6:	d0 40       	sbci	r29, 0x00	; 0
    29c8:	e7 30       	cpi	r30, 0x07	; 7
    29ca:	f1 05       	cpc	r31, r1
    29cc:	ec f5       	brge	.+122    	; 0x2a48 <main+0x112>
    29ce:	ce 50       	subi	r28, 0x0E	; 14
    29d0:	df 4f       	sbci	r29, 0xFF	; 255
    29d2:	28 81       	ld	r18, Y
    29d4:	39 81       	ldd	r19, Y+1	; 0x01
    29d6:	c2 5f       	subi	r28, 0xF2	; 242
    29d8:	d0 40       	sbci	r29, 0x00	; 0
    29da:	23 30       	cpi	r18, 0x03	; 3
    29dc:	31 05       	cpc	r19, r1
    29de:	09 f4       	brne	.+2      	; 0x29e2 <main+0xac>
    29e0:	02 c2       	rjmp	.+1028   	; 0x2de6 <main+0x4b0>
    29e2:	ce 50       	subi	r28, 0x0E	; 14
    29e4:	df 4f       	sbci	r29, 0xFF	; 255
    29e6:	88 81       	ld	r24, Y
    29e8:	99 81       	ldd	r25, Y+1	; 0x01
    29ea:	c2 5f       	subi	r28, 0xF2	; 242
    29ec:	d0 40       	sbci	r29, 0x00	; 0
    29ee:	84 30       	cpi	r24, 0x04	; 4
    29f0:	91 05       	cpc	r25, r1
    29f2:	ac f4       	brge	.+42     	; 0x2a1e <main+0xe8>
    29f4:	ce 50       	subi	r28, 0x0E	; 14
    29f6:	df 4f       	sbci	r29, 0xFF	; 255
    29f8:	e8 81       	ld	r30, Y
    29fa:	f9 81       	ldd	r31, Y+1	; 0x01
    29fc:	c2 5f       	subi	r28, 0xF2	; 242
    29fe:	d0 40       	sbci	r29, 0x00	; 0
    2a00:	e1 30       	cpi	r30, 0x01	; 1
    2a02:	f1 05       	cpc	r31, r1
    2a04:	09 f4       	brne	.+2      	; 0x2a08 <main+0xd2>
    2a06:	6d c0       	rjmp	.+218    	; 0x2ae2 <main+0x1ac>
    2a08:	ce 50       	subi	r28, 0x0E	; 14
    2a0a:	df 4f       	sbci	r29, 0xFF	; 255
    2a0c:	28 81       	ld	r18, Y
    2a0e:	39 81       	ldd	r19, Y+1	; 0x01
    2a10:	c2 5f       	subi	r28, 0xF2	; 242
    2a12:	d0 40       	sbci	r29, 0x00	; 0
    2a14:	22 30       	cpi	r18, 0x02	; 2
    2a16:	31 05       	cpc	r19, r1
    2a18:	09 f4       	brne	.+2      	; 0x2a1c <main+0xe6>
    2a1a:	24 c1       	rjmp	.+584    	; 0x2c64 <main+0x32e>
    2a1c:	b1 cf       	rjmp	.-158    	; 0x2980 <main+0x4a>
    2a1e:	ce 50       	subi	r28, 0x0E	; 14
    2a20:	df 4f       	sbci	r29, 0xFF	; 255
    2a22:	88 81       	ld	r24, Y
    2a24:	99 81       	ldd	r25, Y+1	; 0x01
    2a26:	c2 5f       	subi	r28, 0xF2	; 242
    2a28:	d0 40       	sbci	r29, 0x00	; 0
    2a2a:	84 30       	cpi	r24, 0x04	; 4
    2a2c:	91 05       	cpc	r25, r1
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <main+0xfc>
    2a30:	9b c2       	rjmp	.+1334   	; 0x2f68 <main+0x632>
    2a32:	ce 50       	subi	r28, 0x0E	; 14
    2a34:	df 4f       	sbci	r29, 0xFF	; 255
    2a36:	e8 81       	ld	r30, Y
    2a38:	f9 81       	ldd	r31, Y+1	; 0x01
    2a3a:	c2 5f       	subi	r28, 0xF2	; 242
    2a3c:	d0 40       	sbci	r29, 0x00	; 0
    2a3e:	e5 30       	cpi	r30, 0x05	; 5
    2a40:	f1 05       	cpc	r31, r1
    2a42:	09 f4       	brne	.+2      	; 0x2a46 <main+0x110>
    2a44:	52 c3       	rjmp	.+1700   	; 0x30ea <main+0x7b4>
    2a46:	9c cf       	rjmp	.-200    	; 0x2980 <main+0x4a>
    2a48:	ce 50       	subi	r28, 0x0E	; 14
    2a4a:	df 4f       	sbci	r29, 0xFF	; 255
    2a4c:	28 81       	ld	r18, Y
    2a4e:	39 81       	ldd	r19, Y+1	; 0x01
    2a50:	c2 5f       	subi	r28, 0xF2	; 242
    2a52:	d0 40       	sbci	r29, 0x00	; 0
    2a54:	2e 31       	cpi	r18, 0x1E	; 30
    2a56:	31 05       	cpc	r19, r1
    2a58:	11 f4       	brne	.+4      	; 0x2a5e <main+0x128>
    2a5a:	0c 94 4f 1f 	jmp	0x3e9e	; 0x3e9e <main+0x1568>
    2a5e:	ce 50       	subi	r28, 0x0E	; 14
    2a60:	df 4f       	sbci	r29, 0xFF	; 255
    2a62:	88 81       	ld	r24, Y
    2a64:	99 81       	ldd	r25, Y+1	; 0x01
    2a66:	c2 5f       	subi	r28, 0xF2	; 242
    2a68:	d0 40       	sbci	r29, 0x00	; 0
    2a6a:	8f 31       	cpi	r24, 0x1F	; 31
    2a6c:	91 05       	cpc	r25, r1
    2a6e:	bc f4       	brge	.+46     	; 0x2a9e <main+0x168>
    2a70:	ce 50       	subi	r28, 0x0E	; 14
    2a72:	df 4f       	sbci	r29, 0xFF	; 255
    2a74:	e8 81       	ld	r30, Y
    2a76:	f9 81       	ldd	r31, Y+1	; 0x01
    2a78:	c2 5f       	subi	r28, 0xF2	; 242
    2a7a:	d0 40       	sbci	r29, 0x00	; 0
    2a7c:	ea 30       	cpi	r30, 0x0A	; 10
    2a7e:	f1 05       	cpc	r31, r1
    2a80:	11 f4       	brne	.+4      	; 0x2a86 <main+0x150>
    2a82:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <main+0x12a0>
    2a86:	ce 50       	subi	r28, 0x0E	; 14
    2a88:	df 4f       	sbci	r29, 0xFF	; 255
    2a8a:	28 81       	ld	r18, Y
    2a8c:	39 81       	ldd	r19, Y+1	; 0x01
    2a8e:	c2 5f       	subi	r28, 0xF2	; 242
    2a90:	d0 40       	sbci	r29, 0x00	; 0
    2a92:	24 31       	cpi	r18, 0x14	; 20
    2a94:	31 05       	cpc	r19, r1
    2a96:	11 f4       	brne	.+4      	; 0x2a9c <main+0x166>
    2a98:	0c 94 b5 1e 	jmp	0x3d6a	; 0x3d6a <main+0x1434>
    2a9c:	71 cf       	rjmp	.-286    	; 0x2980 <main+0x4a>
    2a9e:	ce 50       	subi	r28, 0x0E	; 14
    2aa0:	df 4f       	sbci	r29, 0xFF	; 255
    2aa2:	88 81       	ld	r24, Y
    2aa4:	99 81       	ldd	r25, Y+1	; 0x01
    2aa6:	c2 5f       	subi	r28, 0xF2	; 242
    2aa8:	d0 40       	sbci	r29, 0x00	; 0
    2aaa:	82 33       	cpi	r24, 0x32	; 50
    2aac:	91 05       	cpc	r25, r1
    2aae:	11 f4       	brne	.+4      	; 0x2ab4 <main+0x17e>
    2ab0:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <main+0x1784>
    2ab4:	ce 50       	subi	r28, 0x0E	; 14
    2ab6:	df 4f       	sbci	r29, 0xFF	; 255
    2ab8:	e8 81       	ld	r30, Y
    2aba:	f9 81       	ldd	r31, Y+1	; 0x01
    2abc:	c2 5f       	subi	r28, 0xF2	; 242
    2abe:	d0 40       	sbci	r29, 0x00	; 0
    2ac0:	ec 33       	cpi	r30, 0x3C	; 60
    2ac2:	f1 05       	cpc	r31, r1
    2ac4:	11 f4       	brne	.+4      	; 0x2aca <main+0x194>
    2ac6:	0c 94 dc 20 	jmp	0x41b8	; 0x41b8 <main+0x1882>
    2aca:	ce 50       	subi	r28, 0x0E	; 14
    2acc:	df 4f       	sbci	r29, 0xFF	; 255
    2ace:	28 81       	ld	r18, Y
    2ad0:	39 81       	ldd	r19, Y+1	; 0x01
    2ad2:	c2 5f       	subi	r28, 0xF2	; 242
    2ad4:	d0 40       	sbci	r29, 0x00	; 0
    2ad6:	28 32       	cpi	r18, 0x28	; 40
    2ad8:	31 05       	cpc	r19, r1
    2ada:	11 f4       	brne	.+4      	; 0x2ae0 <main+0x1aa>
    2adc:	0c 94 d6 1f 	jmp	0x3fac	; 0x3fac <main+0x1676>
    2ae0:	4f cf       	rjmp	.-354    	; 0x2980 <main+0x4a>
	{
	case 1:
			DIO_U8_Set_Pin_value(PORTD_ID,4,1);
    2ae2:	83 e0       	ldi	r24, 0x03	; 3
    2ae4:	64 e0       	ldi	r22, 0x04	; 4
    2ae6:	41 e0       	ldi	r20, 0x01	; 1
    2ae8:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
			LCD_void_Clear_Screen();
    2aec:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
			LCD_void_Write_String("Room1 turned ON");
    2af0:	81 e9       	ldi	r24, 0x91	; 145
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
    2af8:	fe 01       	movw	r30, r28
    2afa:	e5 51       	subi	r30, 0x15	; 21
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	aa e7       	ldi	r26, 0x7A	; 122
    2b04:	b4 e4       	ldi	r27, 0x44	; 68
    2b06:	80 83       	st	Z, r24
    2b08:	91 83       	std	Z+1, r25	; 0x01
    2b0a:	a2 83       	std	Z+2, r26	; 0x02
    2b0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0e:	8e 01       	movw	r16, r28
    2b10:	09 51       	subi	r16, 0x19	; 25
    2b12:	1f 4f       	sbci	r17, 0xFF	; 255
    2b14:	fe 01       	movw	r30, r28
    2b16:	e5 51       	subi	r30, 0x15	; 21
    2b18:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1a:	60 81       	ld	r22, Z
    2b1c:	71 81       	ldd	r23, Z+1	; 0x01
    2b1e:	82 81       	ldd	r24, Z+2	; 0x02
    2b20:	93 81       	ldd	r25, Z+3	; 0x03
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	4a ef       	ldi	r20, 0xFA	; 250
    2b28:	54 e4       	ldi	r21, 0x44	; 68
    2b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	f8 01       	movw	r30, r16
    2b34:	80 83       	st	Z, r24
    2b36:	91 83       	std	Z+1, r25	; 0x01
    2b38:	a2 83       	std	Z+2, r26	; 0x02
    2b3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	e9 51       	subi	r30, 0x19	; 25
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	60 81       	ld	r22, Z
    2b44:	71 81       	ldd	r23, Z+1	; 0x01
    2b46:	82 81       	ldd	r24, Z+2	; 0x02
    2b48:	93 81       	ldd	r25, Z+3	; 0x03
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	40 e8       	ldi	r20, 0x80	; 128
    2b50:	5f e3       	ldi	r21, 0x3F	; 63
    2b52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b56:	88 23       	and	r24, r24
    2b58:	44 f4       	brge	.+16     	; 0x2b6a <main+0x234>
		__ticks = 1;
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	eb 51       	subi	r30, 0x1B	; 27
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	91 83       	std	Z+1, r25	; 0x01
    2b66:	80 83       	st	Z, r24
    2b68:	64 c0       	rjmp	.+200    	; 0x2c32 <main+0x2fc>
	else if (__tmp > 65535)
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	e9 51       	subi	r30, 0x19	; 25
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	60 81       	ld	r22, Z
    2b72:	71 81       	ldd	r23, Z+1	; 0x01
    2b74:	82 81       	ldd	r24, Z+2	; 0x02
    2b76:	93 81       	ldd	r25, Z+3	; 0x03
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	3f ef       	ldi	r19, 0xFF	; 255
    2b7c:	4f e7       	ldi	r20, 0x7F	; 127
    2b7e:	57 e4       	ldi	r21, 0x47	; 71
    2b80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b84:	18 16       	cp	r1, r24
    2b86:	0c f0       	brlt	.+2      	; 0x2b8a <main+0x254>
    2b88:	43 c0       	rjmp	.+134    	; 0x2c10 <main+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	e5 51       	subi	r30, 0x15	; 21
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	60 81       	ld	r22, Z
    2b92:	71 81       	ldd	r23, Z+1	; 0x01
    2b94:	82 81       	ldd	r24, Z+2	; 0x02
    2b96:	93 81       	ldd	r25, Z+3	; 0x03
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 e2       	ldi	r20, 0x20	; 32
    2b9e:	51 e4       	ldi	r21, 0x41	; 65
    2ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	8e 01       	movw	r16, r28
    2baa:	0b 51       	subi	r16, 0x1B	; 27
    2bac:	1f 4f       	sbci	r17, 0xFF	; 255
    2bae:	bc 01       	movw	r22, r24
    2bb0:	cd 01       	movw	r24, r26
    2bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	f8 01       	movw	r30, r16
    2bbc:	91 83       	std	Z+1, r25	; 0x01
    2bbe:	80 83       	st	Z, r24
    2bc0:	1f c0       	rjmp	.+62     	; 0x2c00 <main+0x2ca>
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	ed 51       	subi	r30, 0x1D	; 29
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	88 ec       	ldi	r24, 0xC8	; 200
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	91 83       	std	Z+1, r25	; 0x01
    2bce:	80 83       	st	Z, r24
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	ed 51       	subi	r30, 0x1D	; 29
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	80 81       	ld	r24, Z
    2bd8:	91 81       	ldd	r25, Z+1	; 0x01
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <main+0x2a4>
    2bde:	fe 01       	movw	r30, r28
    2be0:	ed 51       	subi	r30, 0x1D	; 29
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	91 83       	std	Z+1, r25	; 0x01
    2be6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be8:	de 01       	movw	r26, r28
    2bea:	ab 51       	subi	r26, 0x1B	; 27
    2bec:	bf 4f       	sbci	r27, 0xFF	; 255
    2bee:	fe 01       	movw	r30, r28
    2bf0:	eb 51       	subi	r30, 0x1B	; 27
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	80 81       	ld	r24, Z
    2bf6:	91 81       	ldd	r25, Z+1	; 0x01
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	11 96       	adiw	r26, 0x01	; 1
    2bfc:	9c 93       	st	X, r25
    2bfe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c00:	fe 01       	movw	r30, r28
    2c02:	eb 51       	subi	r30, 0x1B	; 27
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	80 81       	ld	r24, Z
    2c08:	91 81       	ldd	r25, Z+1	; 0x01
    2c0a:	00 97       	sbiw	r24, 0x00	; 0
    2c0c:	d1 f6       	brne	.-76     	; 0x2bc2 <main+0x28c>
    2c0e:	27 c0       	rjmp	.+78     	; 0x2c5e <main+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c10:	8e 01       	movw	r16, r28
    2c12:	0b 51       	subi	r16, 0x1B	; 27
    2c14:	1f 4f       	sbci	r17, 0xFF	; 255
    2c16:	fe 01       	movw	r30, r28
    2c18:	e9 51       	subi	r30, 0x19	; 25
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	60 81       	ld	r22, Z
    2c1e:	71 81       	ldd	r23, Z+1	; 0x01
    2c20:	82 81       	ldd	r24, Z+2	; 0x02
    2c22:	93 81       	ldd	r25, Z+3	; 0x03
    2c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	f8 01       	movw	r30, r16
    2c2e:	91 83       	std	Z+1, r25	; 0x01
    2c30:	80 83       	st	Z, r24
    2c32:	de 01       	movw	r26, r28
    2c34:	af 51       	subi	r26, 0x1F	; 31
    2c36:	bf 4f       	sbci	r27, 0xFF	; 255
    2c38:	fe 01       	movw	r30, r28
    2c3a:	eb 51       	subi	r30, 0x1B	; 27
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	80 81       	ld	r24, Z
    2c40:	91 81       	ldd	r25, Z+1	; 0x01
    2c42:	8d 93       	st	X+, r24
    2c44:	9c 93       	st	X, r25
    2c46:	fe 01       	movw	r30, r28
    2c48:	ef 51       	subi	r30, 0x1F	; 31
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	80 81       	ld	r24, Z
    2c4e:	91 81       	ldd	r25, Z+1	; 0x01
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	f1 f7       	brne	.-4      	; 0x2c50 <main+0x31a>
    2c54:	fe 01       	movw	r30, r28
    2c56:	ef 51       	subi	r30, 0x1F	; 31
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	91 83       	std	Z+1, r25	; 0x01
    2c5c:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_void_Clear_Screen();
    2c5e:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
    2c62:	8e ce       	rjmp	.-740    	; 0x2980 <main+0x4a>
			break;
	case 2:
			DIO_U8_Set_Pin_value(PORTD_ID,5,1);
    2c64:	83 e0       	ldi	r24, 0x03	; 3
    2c66:	65 e0       	ldi	r22, 0x05	; 5
    2c68:	41 e0       	ldi	r20, 0x01	; 1
    2c6a:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
			LCD_void_Clear_Screen();
    2c6e:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
			LCD_void_Write_String("Room2 turned ON");
    2c72:	81 ea       	ldi	r24, 0xA1	; 161
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	e3 52       	subi	r30, 0x23	; 35
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	aa e7       	ldi	r26, 0x7A	; 122
    2c86:	b4 e4       	ldi	r27, 0x44	; 68
    2c88:	80 83       	st	Z, r24
    2c8a:	91 83       	std	Z+1, r25	; 0x01
    2c8c:	a2 83       	std	Z+2, r26	; 0x02
    2c8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c90:	8e 01       	movw	r16, r28
    2c92:	07 52       	subi	r16, 0x27	; 39
    2c94:	1f 4f       	sbci	r17, 0xFF	; 255
    2c96:	fe 01       	movw	r30, r28
    2c98:	e3 52       	subi	r30, 0x23	; 35
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	60 81       	ld	r22, Z
    2c9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ca0:	82 81       	ldd	r24, Z+2	; 0x02
    2ca2:	93 81       	ldd	r25, Z+3	; 0x03
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	4a ef       	ldi	r20, 0xFA	; 250
    2caa:	54 e4       	ldi	r21, 0x44	; 68
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	f8 01       	movw	r30, r16
    2cb6:	80 83       	st	Z, r24
    2cb8:	91 83       	std	Z+1, r25	; 0x01
    2cba:	a2 83       	std	Z+2, r26	; 0x02
    2cbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	e7 52       	subi	r30, 0x27	; 39
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	60 81       	ld	r22, Z
    2cc6:	71 81       	ldd	r23, Z+1	; 0x01
    2cc8:	82 81       	ldd	r24, Z+2	; 0x02
    2cca:	93 81       	ldd	r25, Z+3	; 0x03
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e8       	ldi	r20, 0x80	; 128
    2cd2:	5f e3       	ldi	r21, 0x3F	; 63
    2cd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cd8:	88 23       	and	r24, r24
    2cda:	44 f4       	brge	.+16     	; 0x2cec <main+0x3b6>
		__ticks = 1;
    2cdc:	fe 01       	movw	r30, r28
    2cde:	e9 52       	subi	r30, 0x29	; 41
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	91 83       	std	Z+1, r25	; 0x01
    2ce8:	80 83       	st	Z, r24
    2cea:	64 c0       	rjmp	.+200    	; 0x2db4 <main+0x47e>
	else if (__tmp > 65535)
    2cec:	fe 01       	movw	r30, r28
    2cee:	e7 52       	subi	r30, 0x27	; 39
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	60 81       	ld	r22, Z
    2cf4:	71 81       	ldd	r23, Z+1	; 0x01
    2cf6:	82 81       	ldd	r24, Z+2	; 0x02
    2cf8:	93 81       	ldd	r25, Z+3	; 0x03
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	3f ef       	ldi	r19, 0xFF	; 255
    2cfe:	4f e7       	ldi	r20, 0x7F	; 127
    2d00:	57 e4       	ldi	r21, 0x47	; 71
    2d02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d06:	18 16       	cp	r1, r24
    2d08:	0c f0       	brlt	.+2      	; 0x2d0c <main+0x3d6>
    2d0a:	43 c0       	rjmp	.+134    	; 0x2d92 <main+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	e3 52       	subi	r30, 0x23	; 35
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	60 81       	ld	r22, Z
    2d14:	71 81       	ldd	r23, Z+1	; 0x01
    2d16:	82 81       	ldd	r24, Z+2	; 0x02
    2d18:	93 81       	ldd	r25, Z+3	; 0x03
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	40 e2       	ldi	r20, 0x20	; 32
    2d20:	51 e4       	ldi	r21, 0x41	; 65
    2d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	8e 01       	movw	r16, r28
    2d2c:	09 52       	subi	r16, 0x29	; 41
    2d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d30:	bc 01       	movw	r22, r24
    2d32:	cd 01       	movw	r24, r26
    2d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	f8 01       	movw	r30, r16
    2d3e:	91 83       	std	Z+1, r25	; 0x01
    2d40:	80 83       	st	Z, r24
    2d42:	1f c0       	rjmp	.+62     	; 0x2d82 <main+0x44c>
    2d44:	fe 01       	movw	r30, r28
    2d46:	eb 52       	subi	r30, 0x2B	; 43
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	88 ec       	ldi	r24, 0xC8	; 200
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	91 83       	std	Z+1, r25	; 0x01
    2d50:	80 83       	st	Z, r24
    2d52:	fe 01       	movw	r30, r28
    2d54:	eb 52       	subi	r30, 0x2B	; 43
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	80 81       	ld	r24, Z
    2d5a:	91 81       	ldd	r25, Z+1	; 0x01
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	f1 f7       	brne	.-4      	; 0x2d5c <main+0x426>
    2d60:	fe 01       	movw	r30, r28
    2d62:	eb 52       	subi	r30, 0x2B	; 43
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	91 83       	std	Z+1, r25	; 0x01
    2d68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6a:	de 01       	movw	r26, r28
    2d6c:	a9 52       	subi	r26, 0x29	; 41
    2d6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d70:	fe 01       	movw	r30, r28
    2d72:	e9 52       	subi	r30, 0x29	; 41
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	80 81       	ld	r24, Z
    2d78:	91 81       	ldd	r25, Z+1	; 0x01
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	11 96       	adiw	r26, 0x01	; 1
    2d7e:	9c 93       	st	X, r25
    2d80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d82:	fe 01       	movw	r30, r28
    2d84:	e9 52       	subi	r30, 0x29	; 41
    2d86:	ff 4f       	sbci	r31, 0xFF	; 255
    2d88:	80 81       	ld	r24, Z
    2d8a:	91 81       	ldd	r25, Z+1	; 0x01
    2d8c:	00 97       	sbiw	r24, 0x00	; 0
    2d8e:	d1 f6       	brne	.-76     	; 0x2d44 <main+0x40e>
    2d90:	27 c0       	rjmp	.+78     	; 0x2de0 <main+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d92:	8e 01       	movw	r16, r28
    2d94:	09 52       	subi	r16, 0x29	; 41
    2d96:	1f 4f       	sbci	r17, 0xFF	; 255
    2d98:	fe 01       	movw	r30, r28
    2d9a:	e7 52       	subi	r30, 0x27	; 39
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	60 81       	ld	r22, Z
    2da0:	71 81       	ldd	r23, Z+1	; 0x01
    2da2:	82 81       	ldd	r24, Z+2	; 0x02
    2da4:	93 81       	ldd	r25, Z+3	; 0x03
    2da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	f8 01       	movw	r30, r16
    2db0:	91 83       	std	Z+1, r25	; 0x01
    2db2:	80 83       	st	Z, r24
    2db4:	de 01       	movw	r26, r28
    2db6:	ad 52       	subi	r26, 0x2D	; 45
    2db8:	bf 4f       	sbci	r27, 0xFF	; 255
    2dba:	fe 01       	movw	r30, r28
    2dbc:	e9 52       	subi	r30, 0x29	; 41
    2dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc0:	80 81       	ld	r24, Z
    2dc2:	91 81       	ldd	r25, Z+1	; 0x01
    2dc4:	8d 93       	st	X+, r24
    2dc6:	9c 93       	st	X, r25
    2dc8:	fe 01       	movw	r30, r28
    2dca:	ed 52       	subi	r30, 0x2D	; 45
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	80 81       	ld	r24, Z
    2dd0:	91 81       	ldd	r25, Z+1	; 0x01
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	f1 f7       	brne	.-4      	; 0x2dd2 <main+0x49c>
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	ed 52       	subi	r30, 0x2D	; 45
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	91 83       	std	Z+1, r25	; 0x01
    2dde:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_void_Clear_Screen();
    2de0:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
    2de4:	cd cd       	rjmp	.-1126   	; 0x2980 <main+0x4a>

			break;
	case 3:
			DIO_U8_Set_Pin_value(PORTD_ID,6,1);
    2de6:	83 e0       	ldi	r24, 0x03	; 3
    2de8:	66 e0       	ldi	r22, 0x06	; 6
    2dea:	41 e0       	ldi	r20, 0x01	; 1
    2dec:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
			LCD_void_Clear_Screen();
    2df0:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
			LCD_void_Write_String("Room3 turned ON");
    2df4:	81 eb       	ldi	r24, 0xB1	; 177
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	e1 53       	subi	r30, 0x31	; 49
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	aa e7       	ldi	r26, 0x7A	; 122
    2e08:	b4 e4       	ldi	r27, 0x44	; 68
    2e0a:	80 83       	st	Z, r24
    2e0c:	91 83       	std	Z+1, r25	; 0x01
    2e0e:	a2 83       	std	Z+2, r26	; 0x02
    2e10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e12:	8e 01       	movw	r16, r28
    2e14:	05 53       	subi	r16, 0x35	; 53
    2e16:	1f 4f       	sbci	r17, 0xFF	; 255
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e1 53       	subi	r30, 0x31	; 49
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	60 81       	ld	r22, Z
    2e20:	71 81       	ldd	r23, Z+1	; 0x01
    2e22:	82 81       	ldd	r24, Z+2	; 0x02
    2e24:	93 81       	ldd	r25, Z+3	; 0x03
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	4a ef       	ldi	r20, 0xFA	; 250
    2e2c:	54 e4       	ldi	r21, 0x44	; 68
    2e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	f8 01       	movw	r30, r16
    2e38:	80 83       	st	Z, r24
    2e3a:	91 83       	std	Z+1, r25	; 0x01
    2e3c:	a2 83       	std	Z+2, r26	; 0x02
    2e3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e40:	fe 01       	movw	r30, r28
    2e42:	e5 53       	subi	r30, 0x35	; 53
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	60 81       	ld	r22, Z
    2e48:	71 81       	ldd	r23, Z+1	; 0x01
    2e4a:	82 81       	ldd	r24, Z+2	; 0x02
    2e4c:	93 81       	ldd	r25, Z+3	; 0x03
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	40 e8       	ldi	r20, 0x80	; 128
    2e54:	5f e3       	ldi	r21, 0x3F	; 63
    2e56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e5a:	88 23       	and	r24, r24
    2e5c:	44 f4       	brge	.+16     	; 0x2e6e <main+0x538>
		__ticks = 1;
    2e5e:	fe 01       	movw	r30, r28
    2e60:	e7 53       	subi	r30, 0x37	; 55
    2e62:	ff 4f       	sbci	r31, 0xFF	; 255
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	91 83       	std	Z+1, r25	; 0x01
    2e6a:	80 83       	st	Z, r24
    2e6c:	64 c0       	rjmp	.+200    	; 0x2f36 <main+0x600>
	else if (__tmp > 65535)
    2e6e:	fe 01       	movw	r30, r28
    2e70:	e5 53       	subi	r30, 0x35	; 53
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	60 81       	ld	r22, Z
    2e76:	71 81       	ldd	r23, Z+1	; 0x01
    2e78:	82 81       	ldd	r24, Z+2	; 0x02
    2e7a:	93 81       	ldd	r25, Z+3	; 0x03
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	3f ef       	ldi	r19, 0xFF	; 255
    2e80:	4f e7       	ldi	r20, 0x7F	; 127
    2e82:	57 e4       	ldi	r21, 0x47	; 71
    2e84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e88:	18 16       	cp	r1, r24
    2e8a:	0c f0       	brlt	.+2      	; 0x2e8e <main+0x558>
    2e8c:	43 c0       	rjmp	.+134    	; 0x2f14 <main+0x5de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e8e:	fe 01       	movw	r30, r28
    2e90:	e1 53       	subi	r30, 0x31	; 49
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	60 81       	ld	r22, Z
    2e96:	71 81       	ldd	r23, Z+1	; 0x01
    2e98:	82 81       	ldd	r24, Z+2	; 0x02
    2e9a:	93 81       	ldd	r25, Z+3	; 0x03
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e2       	ldi	r20, 0x20	; 32
    2ea2:	51 e4       	ldi	r21, 0x41	; 65
    2ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	8e 01       	movw	r16, r28
    2eae:	07 53       	subi	r16, 0x37	; 55
    2eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb2:	bc 01       	movw	r22, r24
    2eb4:	cd 01       	movw	r24, r26
    2eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	f8 01       	movw	r30, r16
    2ec0:	91 83       	std	Z+1, r25	; 0x01
    2ec2:	80 83       	st	Z, r24
    2ec4:	1f c0       	rjmp	.+62     	; 0x2f04 <main+0x5ce>
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	e9 53       	subi	r30, 0x39	; 57
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	88 ec       	ldi	r24, 0xC8	; 200
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	91 83       	std	Z+1, r25	; 0x01
    2ed2:	80 83       	st	Z, r24
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	e9 53       	subi	r30, 0x39	; 57
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	80 81       	ld	r24, Z
    2edc:	91 81       	ldd	r25, Z+1	; 0x01
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	f1 f7       	brne	.-4      	; 0x2ede <main+0x5a8>
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	e9 53       	subi	r30, 0x39	; 57
    2ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee8:	91 83       	std	Z+1, r25	; 0x01
    2eea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eec:	de 01       	movw	r26, r28
    2eee:	a7 53       	subi	r26, 0x37	; 55
    2ef0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	e7 53       	subi	r30, 0x37	; 55
    2ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef8:	80 81       	ld	r24, Z
    2efa:	91 81       	ldd	r25, Z+1	; 0x01
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	11 96       	adiw	r26, 0x01	; 1
    2f00:	9c 93       	st	X, r25
    2f02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f04:	fe 01       	movw	r30, r28
    2f06:	e7 53       	subi	r30, 0x37	; 55
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	80 81       	ld	r24, Z
    2f0c:	91 81       	ldd	r25, Z+1	; 0x01
    2f0e:	00 97       	sbiw	r24, 0x00	; 0
    2f10:	d1 f6       	brne	.-76     	; 0x2ec6 <main+0x590>
    2f12:	27 c0       	rjmp	.+78     	; 0x2f62 <main+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f14:	8e 01       	movw	r16, r28
    2f16:	07 53       	subi	r16, 0x37	; 55
    2f18:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	e5 53       	subi	r30, 0x35	; 53
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	60 81       	ld	r22, Z
    2f22:	71 81       	ldd	r23, Z+1	; 0x01
    2f24:	82 81       	ldd	r24, Z+2	; 0x02
    2f26:	93 81       	ldd	r25, Z+3	; 0x03
    2f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	f8 01       	movw	r30, r16
    2f32:	91 83       	std	Z+1, r25	; 0x01
    2f34:	80 83       	st	Z, r24
    2f36:	de 01       	movw	r26, r28
    2f38:	ab 53       	subi	r26, 0x3B	; 59
    2f3a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	e7 53       	subi	r30, 0x37	; 55
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	80 81       	ld	r24, Z
    2f44:	91 81       	ldd	r25, Z+1	; 0x01
    2f46:	8d 93       	st	X+, r24
    2f48:	9c 93       	st	X, r25
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	eb 53       	subi	r30, 0x3B	; 59
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	80 81       	ld	r24, Z
    2f52:	91 81       	ldd	r25, Z+1	; 0x01
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	f1 f7       	brne	.-4      	; 0x2f54 <main+0x61e>
    2f58:	fe 01       	movw	r30, r28
    2f5a:	eb 53       	subi	r30, 0x3B	; 59
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_void_Clear_Screen();
    2f62:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
    2f66:	0c cd       	rjmp	.-1512   	; 0x2980 <main+0x4a>

			break;
	case 4:
			DIO_U8_Set_Pin_value(PORTD_ID,7,1);
    2f68:	83 e0       	ldi	r24, 0x03	; 3
    2f6a:	67 e0       	ldi	r22, 0x07	; 7
    2f6c:	41 e0       	ldi	r20, 0x01	; 1
    2f6e:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
			LCD_void_Clear_Screen();
    2f72:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
			LCD_void_Write_String("Room4 turned ON");
    2f76:	81 ec       	ldi	r24, 0xC1	; 193
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
    2f7e:	fe 01       	movw	r30, r28
    2f80:	ef 53       	subi	r30, 0x3F	; 63
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	aa e7       	ldi	r26, 0x7A	; 122
    2f8a:	b4 e4       	ldi	r27, 0x44	; 68
    2f8c:	80 83       	st	Z, r24
    2f8e:	91 83       	std	Z+1, r25	; 0x01
    2f90:	a2 83       	std	Z+2, r26	; 0x02
    2f92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f94:	8e 01       	movw	r16, r28
    2f96:	03 54       	subi	r16, 0x43	; 67
    2f98:	1f 4f       	sbci	r17, 0xFF	; 255
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	ef 53       	subi	r30, 0x3F	; 63
    2f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa0:	60 81       	ld	r22, Z
    2fa2:	71 81       	ldd	r23, Z+1	; 0x01
    2fa4:	82 81       	ldd	r24, Z+2	; 0x02
    2fa6:	93 81       	ldd	r25, Z+3	; 0x03
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	4a ef       	ldi	r20, 0xFA	; 250
    2fae:	54 e4       	ldi	r21, 0x44	; 68
    2fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	f8 01       	movw	r30, r16
    2fba:	80 83       	st	Z, r24
    2fbc:	91 83       	std	Z+1, r25	; 0x01
    2fbe:	a2 83       	std	Z+2, r26	; 0x02
    2fc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e3 54       	subi	r30, 0x43	; 67
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	60 81       	ld	r22, Z
    2fca:	71 81       	ldd	r23, Z+1	; 0x01
    2fcc:	82 81       	ldd	r24, Z+2	; 0x02
    2fce:	93 81       	ldd	r25, Z+3	; 0x03
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e8       	ldi	r20, 0x80	; 128
    2fd6:	5f e3       	ldi	r21, 0x3F	; 63
    2fd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fdc:	88 23       	and	r24, r24
    2fde:	44 f4       	brge	.+16     	; 0x2ff0 <main+0x6ba>
		__ticks = 1;
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	e5 54       	subi	r30, 0x45	; 69
    2fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	91 83       	std	Z+1, r25	; 0x01
    2fec:	80 83       	st	Z, r24
    2fee:	64 c0       	rjmp	.+200    	; 0x30b8 <main+0x782>
	else if (__tmp > 65535)
    2ff0:	fe 01       	movw	r30, r28
    2ff2:	e3 54       	subi	r30, 0x43	; 67
    2ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff6:	60 81       	ld	r22, Z
    2ff8:	71 81       	ldd	r23, Z+1	; 0x01
    2ffa:	82 81       	ldd	r24, Z+2	; 0x02
    2ffc:	93 81       	ldd	r25, Z+3	; 0x03
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	3f ef       	ldi	r19, 0xFF	; 255
    3002:	4f e7       	ldi	r20, 0x7F	; 127
    3004:	57 e4       	ldi	r21, 0x47	; 71
    3006:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    300a:	18 16       	cp	r1, r24
    300c:	0c f0       	brlt	.+2      	; 0x3010 <main+0x6da>
    300e:	43 c0       	rjmp	.+134    	; 0x3096 <main+0x760>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3010:	fe 01       	movw	r30, r28
    3012:	ef 53       	subi	r30, 0x3F	; 63
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	60 81       	ld	r22, Z
    3018:	71 81       	ldd	r23, Z+1	; 0x01
    301a:	82 81       	ldd	r24, Z+2	; 0x02
    301c:	93 81       	ldd	r25, Z+3	; 0x03
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e2       	ldi	r20, 0x20	; 32
    3024:	51 e4       	ldi	r21, 0x41	; 65
    3026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	8e 01       	movw	r16, r28
    3030:	05 54       	subi	r16, 0x45	; 69
    3032:	1f 4f       	sbci	r17, 0xFF	; 255
    3034:	bc 01       	movw	r22, r24
    3036:	cd 01       	movw	r24, r26
    3038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	f8 01       	movw	r30, r16
    3042:	91 83       	std	Z+1, r25	; 0x01
    3044:	80 83       	st	Z, r24
    3046:	1f c0       	rjmp	.+62     	; 0x3086 <main+0x750>
    3048:	fe 01       	movw	r30, r28
    304a:	e7 54       	subi	r30, 0x47	; 71
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	88 ec       	ldi	r24, 0xC8	; 200
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	91 83       	std	Z+1, r25	; 0x01
    3054:	80 83       	st	Z, r24
    3056:	fe 01       	movw	r30, r28
    3058:	e7 54       	subi	r30, 0x47	; 71
    305a:	ff 4f       	sbci	r31, 0xFF	; 255
    305c:	80 81       	ld	r24, Z
    305e:	91 81       	ldd	r25, Z+1	; 0x01
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	f1 f7       	brne	.-4      	; 0x3060 <main+0x72a>
    3064:	fe 01       	movw	r30, r28
    3066:	e7 54       	subi	r30, 0x47	; 71
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	91 83       	std	Z+1, r25	; 0x01
    306c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    306e:	de 01       	movw	r26, r28
    3070:	a5 54       	subi	r26, 0x45	; 69
    3072:	bf 4f       	sbci	r27, 0xFF	; 255
    3074:	fe 01       	movw	r30, r28
    3076:	e5 54       	subi	r30, 0x45	; 69
    3078:	ff 4f       	sbci	r31, 0xFF	; 255
    307a:	80 81       	ld	r24, Z
    307c:	91 81       	ldd	r25, Z+1	; 0x01
    307e:	01 97       	sbiw	r24, 0x01	; 1
    3080:	11 96       	adiw	r26, 0x01	; 1
    3082:	9c 93       	st	X, r25
    3084:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3086:	fe 01       	movw	r30, r28
    3088:	e5 54       	subi	r30, 0x45	; 69
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	80 81       	ld	r24, Z
    308e:	91 81       	ldd	r25, Z+1	; 0x01
    3090:	00 97       	sbiw	r24, 0x00	; 0
    3092:	d1 f6       	brne	.-76     	; 0x3048 <main+0x712>
    3094:	27 c0       	rjmp	.+78     	; 0x30e4 <main+0x7ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3096:	8e 01       	movw	r16, r28
    3098:	05 54       	subi	r16, 0x45	; 69
    309a:	1f 4f       	sbci	r17, 0xFF	; 255
    309c:	fe 01       	movw	r30, r28
    309e:	e3 54       	subi	r30, 0x43	; 67
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	60 81       	ld	r22, Z
    30a4:	71 81       	ldd	r23, Z+1	; 0x01
    30a6:	82 81       	ldd	r24, Z+2	; 0x02
    30a8:	93 81       	ldd	r25, Z+3	; 0x03
    30aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	f8 01       	movw	r30, r16
    30b4:	91 83       	std	Z+1, r25	; 0x01
    30b6:	80 83       	st	Z, r24
    30b8:	de 01       	movw	r26, r28
    30ba:	a9 54       	subi	r26, 0x49	; 73
    30bc:	bf 4f       	sbci	r27, 0xFF	; 255
    30be:	fe 01       	movw	r30, r28
    30c0:	e5 54       	subi	r30, 0x45	; 69
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	80 81       	ld	r24, Z
    30c6:	91 81       	ldd	r25, Z+1	; 0x01
    30c8:	8d 93       	st	X+, r24
    30ca:	9c 93       	st	X, r25
    30cc:	fe 01       	movw	r30, r28
    30ce:	e9 54       	subi	r30, 0x49	; 73
    30d0:	ff 4f       	sbci	r31, 0xFF	; 255
    30d2:	80 81       	ld	r24, Z
    30d4:	91 81       	ldd	r25, Z+1	; 0x01
    30d6:	01 97       	sbiw	r24, 0x01	; 1
    30d8:	f1 f7       	brne	.-4      	; 0x30d6 <main+0x7a0>
    30da:	fe 01       	movw	r30, r28
    30dc:	e9 54       	subi	r30, 0x49	; 73
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	91 83       	std	Z+1, r25	; 0x01
    30e2:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_void_Clear_Screen();
    30e4:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
    30e8:	4b cc       	rjmp	.-1898   	; 0x2980 <main+0x4a>

			break;
	case 5:
			DIO_U8_Set_Pin_value(PORTD_ID,0,1);
    30ea:	83 e0       	ldi	r24, 0x03	; 3
    30ec:	60 e0       	ldi	r22, 0x00	; 0
    30ee:	41 e0       	ldi	r20, 0x01	; 1
    30f0:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
			LCD_void_Clear_Screen();
    30f4:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
			LCD_void_Write_String("TV turned ON");
    30f8:	81 ed       	ldi	r24, 0xD1	; 209
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
    3100:	fe 01       	movw	r30, r28
    3102:	ed 54       	subi	r30, 0x4D	; 77
    3104:	ff 4f       	sbci	r31, 0xFF	; 255
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	aa e7       	ldi	r26, 0x7A	; 122
    310c:	b4 e4       	ldi	r27, 0x44	; 68
    310e:	80 83       	st	Z, r24
    3110:	91 83       	std	Z+1, r25	; 0x01
    3112:	a2 83       	std	Z+2, r26	; 0x02
    3114:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3116:	8e 01       	movw	r16, r28
    3118:	01 55       	subi	r16, 0x51	; 81
    311a:	1f 4f       	sbci	r17, 0xFF	; 255
    311c:	fe 01       	movw	r30, r28
    311e:	ed 54       	subi	r30, 0x4D	; 77
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	60 81       	ld	r22, Z
    3124:	71 81       	ldd	r23, Z+1	; 0x01
    3126:	82 81       	ldd	r24, Z+2	; 0x02
    3128:	93 81       	ldd	r25, Z+3	; 0x03
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	4a ef       	ldi	r20, 0xFA	; 250
    3130:	54 e4       	ldi	r21, 0x44	; 68
    3132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	f8 01       	movw	r30, r16
    313c:	80 83       	st	Z, r24
    313e:	91 83       	std	Z+1, r25	; 0x01
    3140:	a2 83       	std	Z+2, r26	; 0x02
    3142:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3144:	fe 01       	movw	r30, r28
    3146:	e1 55       	subi	r30, 0x51	; 81
    3148:	ff 4f       	sbci	r31, 0xFF	; 255
    314a:	60 81       	ld	r22, Z
    314c:	71 81       	ldd	r23, Z+1	; 0x01
    314e:	82 81       	ldd	r24, Z+2	; 0x02
    3150:	93 81       	ldd	r25, Z+3	; 0x03
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	40 e8       	ldi	r20, 0x80	; 128
    3158:	5f e3       	ldi	r21, 0x3F	; 63
    315a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    315e:	88 23       	and	r24, r24
    3160:	44 f4       	brge	.+16     	; 0x3172 <main+0x83c>
		__ticks = 1;
    3162:	fe 01       	movw	r30, r28
    3164:	e3 55       	subi	r30, 0x53	; 83
    3166:	ff 4f       	sbci	r31, 0xFF	; 255
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	91 83       	std	Z+1, r25	; 0x01
    316e:	80 83       	st	Z, r24
    3170:	64 c0       	rjmp	.+200    	; 0x323a <main+0x904>
	else if (__tmp > 65535)
    3172:	fe 01       	movw	r30, r28
    3174:	e1 55       	subi	r30, 0x51	; 81
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	60 81       	ld	r22, Z
    317a:	71 81       	ldd	r23, Z+1	; 0x01
    317c:	82 81       	ldd	r24, Z+2	; 0x02
    317e:	93 81       	ldd	r25, Z+3	; 0x03
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	3f ef       	ldi	r19, 0xFF	; 255
    3184:	4f e7       	ldi	r20, 0x7F	; 127
    3186:	57 e4       	ldi	r21, 0x47	; 71
    3188:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    318c:	18 16       	cp	r1, r24
    318e:	0c f0       	brlt	.+2      	; 0x3192 <main+0x85c>
    3190:	43 c0       	rjmp	.+134    	; 0x3218 <main+0x8e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3192:	fe 01       	movw	r30, r28
    3194:	ed 54       	subi	r30, 0x4D	; 77
    3196:	ff 4f       	sbci	r31, 0xFF	; 255
    3198:	60 81       	ld	r22, Z
    319a:	71 81       	ldd	r23, Z+1	; 0x01
    319c:	82 81       	ldd	r24, Z+2	; 0x02
    319e:	93 81       	ldd	r25, Z+3	; 0x03
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	40 e2       	ldi	r20, 0x20	; 32
    31a6:	51 e4       	ldi	r21, 0x41	; 65
    31a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	8e 01       	movw	r16, r28
    31b2:	03 55       	subi	r16, 0x53	; 83
    31b4:	1f 4f       	sbci	r17, 0xFF	; 255
    31b6:	bc 01       	movw	r22, r24
    31b8:	cd 01       	movw	r24, r26
    31ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	f8 01       	movw	r30, r16
    31c4:	91 83       	std	Z+1, r25	; 0x01
    31c6:	80 83       	st	Z, r24
    31c8:	1f c0       	rjmp	.+62     	; 0x3208 <main+0x8d2>
    31ca:	fe 01       	movw	r30, r28
    31cc:	e5 55       	subi	r30, 0x55	; 85
    31ce:	ff 4f       	sbci	r31, 0xFF	; 255
    31d0:	88 ec       	ldi	r24, 0xC8	; 200
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	91 83       	std	Z+1, r25	; 0x01
    31d6:	80 83       	st	Z, r24
    31d8:	fe 01       	movw	r30, r28
    31da:	e5 55       	subi	r30, 0x55	; 85
    31dc:	ff 4f       	sbci	r31, 0xFF	; 255
    31de:	80 81       	ld	r24, Z
    31e0:	91 81       	ldd	r25, Z+1	; 0x01
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	f1 f7       	brne	.-4      	; 0x31e2 <main+0x8ac>
    31e6:	fe 01       	movw	r30, r28
    31e8:	e5 55       	subi	r30, 0x55	; 85
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	91 83       	std	Z+1, r25	; 0x01
    31ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f0:	de 01       	movw	r26, r28
    31f2:	a3 55       	subi	r26, 0x53	; 83
    31f4:	bf 4f       	sbci	r27, 0xFF	; 255
    31f6:	fe 01       	movw	r30, r28
    31f8:	e3 55       	subi	r30, 0x53	; 83
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	80 81       	ld	r24, Z
    31fe:	91 81       	ldd	r25, Z+1	; 0x01
    3200:	01 97       	sbiw	r24, 0x01	; 1
    3202:	11 96       	adiw	r26, 0x01	; 1
    3204:	9c 93       	st	X, r25
    3206:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3208:	fe 01       	movw	r30, r28
    320a:	e3 55       	subi	r30, 0x53	; 83
    320c:	ff 4f       	sbci	r31, 0xFF	; 255
    320e:	80 81       	ld	r24, Z
    3210:	91 81       	ldd	r25, Z+1	; 0x01
    3212:	00 97       	sbiw	r24, 0x00	; 0
    3214:	d1 f6       	brne	.-76     	; 0x31ca <main+0x894>
    3216:	27 c0       	rjmp	.+78     	; 0x3266 <main+0x930>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3218:	8e 01       	movw	r16, r28
    321a:	03 55       	subi	r16, 0x53	; 83
    321c:	1f 4f       	sbci	r17, 0xFF	; 255
    321e:	fe 01       	movw	r30, r28
    3220:	e1 55       	subi	r30, 0x51	; 81
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	60 81       	ld	r22, Z
    3226:	71 81       	ldd	r23, Z+1	; 0x01
    3228:	82 81       	ldd	r24, Z+2	; 0x02
    322a:	93 81       	ldd	r25, Z+3	; 0x03
    322c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	f8 01       	movw	r30, r16
    3236:	91 83       	std	Z+1, r25	; 0x01
    3238:	80 83       	st	Z, r24
    323a:	de 01       	movw	r26, r28
    323c:	a7 55       	subi	r26, 0x57	; 87
    323e:	bf 4f       	sbci	r27, 0xFF	; 255
    3240:	fe 01       	movw	r30, r28
    3242:	e3 55       	subi	r30, 0x53	; 83
    3244:	ff 4f       	sbci	r31, 0xFF	; 255
    3246:	80 81       	ld	r24, Z
    3248:	91 81       	ldd	r25, Z+1	; 0x01
    324a:	8d 93       	st	X+, r24
    324c:	9c 93       	st	X, r25
    324e:	fe 01       	movw	r30, r28
    3250:	e7 55       	subi	r30, 0x57	; 87
    3252:	ff 4f       	sbci	r31, 0xFF	; 255
    3254:	80 81       	ld	r24, Z
    3256:	91 81       	ldd	r25, Z+1	; 0x01
    3258:	01 97       	sbiw	r24, 0x01	; 1
    325a:	f1 f7       	brne	.-4      	; 0x3258 <main+0x922>
    325c:	fe 01       	movw	r30, r28
    325e:	e7 55       	subi	r30, 0x57	; 87
    3260:	ff 4f       	sbci	r31, 0xFF	; 255
    3262:	91 83       	std	Z+1, r25	; 0x01
    3264:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_void_Clear_Screen();
    3266:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
    326a:	8a cb       	rjmp	.-2284   	; 0x2980 <main+0x4a>
			break;
	case 6:

			Temp = ADC_U16_Read(3)/4;
    326c:	83 e0       	ldi	r24, 0x03	; 3
    326e:	0e 94 87 06 	call	0xd0e	; 0xd0e <ADC_U16_Read>
    3272:	fe 01       	movw	r30, r28
    3274:	e1 51       	subi	r30, 0x11	; 17
    3276:	ff 4f       	sbci	r31, 0xFF	; 255
    3278:	96 95       	lsr	r25
    327a:	87 95       	ror	r24
    327c:	96 95       	lsr	r25
    327e:	87 95       	ror	r24
    3280:	91 83       	std	Z+1, r25	; 0x01
    3282:	80 83       	st	Z, r24
			LCD_void_Clear_Screen();
    3284:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
			LCD_void_Write_String("Check Temp.");
    3288:	8e ed       	ldi	r24, 0xDE	; 222
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
    3290:	fe 01       	movw	r30, r28
    3292:	eb 55       	subi	r30, 0x5B	; 91
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	80 e0       	ldi	r24, 0x00	; 0
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	aa ef       	ldi	r26, 0xFA	; 250
    329c:	b3 e4       	ldi	r27, 0x43	; 67
    329e:	80 83       	st	Z, r24
    32a0:	91 83       	std	Z+1, r25	; 0x01
    32a2:	a2 83       	std	Z+2, r26	; 0x02
    32a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a6:	8e 01       	movw	r16, r28
    32a8:	0f 55       	subi	r16, 0x5F	; 95
    32aa:	1f 4f       	sbci	r17, 0xFF	; 255
    32ac:	fe 01       	movw	r30, r28
    32ae:	eb 55       	subi	r30, 0x5B	; 91
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	60 81       	ld	r22, Z
    32b4:	71 81       	ldd	r23, Z+1	; 0x01
    32b6:	82 81       	ldd	r24, Z+2	; 0x02
    32b8:	93 81       	ldd	r25, Z+3	; 0x03
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	4a ef       	ldi	r20, 0xFA	; 250
    32c0:	54 e4       	ldi	r21, 0x44	; 68
    32c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c6:	dc 01       	movw	r26, r24
    32c8:	cb 01       	movw	r24, r22
    32ca:	f8 01       	movw	r30, r16
    32cc:	80 83       	st	Z, r24
    32ce:	91 83       	std	Z+1, r25	; 0x01
    32d0:	a2 83       	std	Z+2, r26	; 0x02
    32d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32d4:	fe 01       	movw	r30, r28
    32d6:	ef 55       	subi	r30, 0x5F	; 95
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	60 81       	ld	r22, Z
    32dc:	71 81       	ldd	r23, Z+1	; 0x01
    32de:	82 81       	ldd	r24, Z+2	; 0x02
    32e0:	93 81       	ldd	r25, Z+3	; 0x03
    32e2:	20 e0       	ldi	r18, 0x00	; 0
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	40 e8       	ldi	r20, 0x80	; 128
    32e8:	5f e3       	ldi	r21, 0x3F	; 63
    32ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ee:	88 23       	and	r24, r24
    32f0:	44 f4       	brge	.+16     	; 0x3302 <main+0x9cc>
		__ticks = 1;
    32f2:	fe 01       	movw	r30, r28
    32f4:	e1 56       	subi	r30, 0x61	; 97
    32f6:	ff 4f       	sbci	r31, 0xFF	; 255
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	91 83       	std	Z+1, r25	; 0x01
    32fe:	80 83       	st	Z, r24
    3300:	64 c0       	rjmp	.+200    	; 0x33ca <main+0xa94>
	else if (__tmp > 65535)
    3302:	fe 01       	movw	r30, r28
    3304:	ef 55       	subi	r30, 0x5F	; 95
    3306:	ff 4f       	sbci	r31, 0xFF	; 255
    3308:	60 81       	ld	r22, Z
    330a:	71 81       	ldd	r23, Z+1	; 0x01
    330c:	82 81       	ldd	r24, Z+2	; 0x02
    330e:	93 81       	ldd	r25, Z+3	; 0x03
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	3f ef       	ldi	r19, 0xFF	; 255
    3314:	4f e7       	ldi	r20, 0x7F	; 127
    3316:	57 e4       	ldi	r21, 0x47	; 71
    3318:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    331c:	18 16       	cp	r1, r24
    331e:	0c f0       	brlt	.+2      	; 0x3322 <main+0x9ec>
    3320:	43 c0       	rjmp	.+134    	; 0x33a8 <main+0xa72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3322:	fe 01       	movw	r30, r28
    3324:	eb 55       	subi	r30, 0x5B	; 91
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	60 81       	ld	r22, Z
    332a:	71 81       	ldd	r23, Z+1	; 0x01
    332c:	82 81       	ldd	r24, Z+2	; 0x02
    332e:	93 81       	ldd	r25, Z+3	; 0x03
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	40 e2       	ldi	r20, 0x20	; 32
    3336:	51 e4       	ldi	r21, 0x41	; 65
    3338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	8e 01       	movw	r16, r28
    3342:	01 56       	subi	r16, 0x61	; 97
    3344:	1f 4f       	sbci	r17, 0xFF	; 255
    3346:	bc 01       	movw	r22, r24
    3348:	cd 01       	movw	r24, r26
    334a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334e:	dc 01       	movw	r26, r24
    3350:	cb 01       	movw	r24, r22
    3352:	f8 01       	movw	r30, r16
    3354:	91 83       	std	Z+1, r25	; 0x01
    3356:	80 83       	st	Z, r24
    3358:	1f c0       	rjmp	.+62     	; 0x3398 <main+0xa62>
    335a:	fe 01       	movw	r30, r28
    335c:	e3 56       	subi	r30, 0x63	; 99
    335e:	ff 4f       	sbci	r31, 0xFF	; 255
    3360:	88 ec       	ldi	r24, 0xC8	; 200
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	91 83       	std	Z+1, r25	; 0x01
    3366:	80 83       	st	Z, r24
    3368:	fe 01       	movw	r30, r28
    336a:	e3 56       	subi	r30, 0x63	; 99
    336c:	ff 4f       	sbci	r31, 0xFF	; 255
    336e:	80 81       	ld	r24, Z
    3370:	91 81       	ldd	r25, Z+1	; 0x01
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	f1 f7       	brne	.-4      	; 0x3372 <main+0xa3c>
    3376:	fe 01       	movw	r30, r28
    3378:	e3 56       	subi	r30, 0x63	; 99
    337a:	ff 4f       	sbci	r31, 0xFF	; 255
    337c:	91 83       	std	Z+1, r25	; 0x01
    337e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3380:	de 01       	movw	r26, r28
    3382:	a1 56       	subi	r26, 0x61	; 97
    3384:	bf 4f       	sbci	r27, 0xFF	; 255
    3386:	fe 01       	movw	r30, r28
    3388:	e1 56       	subi	r30, 0x61	; 97
    338a:	ff 4f       	sbci	r31, 0xFF	; 255
    338c:	80 81       	ld	r24, Z
    338e:	91 81       	ldd	r25, Z+1	; 0x01
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	11 96       	adiw	r26, 0x01	; 1
    3394:	9c 93       	st	X, r25
    3396:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3398:	fe 01       	movw	r30, r28
    339a:	e1 56       	subi	r30, 0x61	; 97
    339c:	ff 4f       	sbci	r31, 0xFF	; 255
    339e:	80 81       	ld	r24, Z
    33a0:	91 81       	ldd	r25, Z+1	; 0x01
    33a2:	00 97       	sbiw	r24, 0x00	; 0
    33a4:	d1 f6       	brne	.-76     	; 0x335a <main+0xa24>
    33a6:	27 c0       	rjmp	.+78     	; 0x33f6 <main+0xac0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a8:	8e 01       	movw	r16, r28
    33aa:	01 56       	subi	r16, 0x61	; 97
    33ac:	1f 4f       	sbci	r17, 0xFF	; 255
    33ae:	fe 01       	movw	r30, r28
    33b0:	ef 55       	subi	r30, 0x5F	; 95
    33b2:	ff 4f       	sbci	r31, 0xFF	; 255
    33b4:	60 81       	ld	r22, Z
    33b6:	71 81       	ldd	r23, Z+1	; 0x01
    33b8:	82 81       	ldd	r24, Z+2	; 0x02
    33ba:	93 81       	ldd	r25, Z+3	; 0x03
    33bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	f8 01       	movw	r30, r16
    33c6:	91 83       	std	Z+1, r25	; 0x01
    33c8:	80 83       	st	Z, r24
    33ca:	de 01       	movw	r26, r28
    33cc:	a5 56       	subi	r26, 0x65	; 101
    33ce:	bf 4f       	sbci	r27, 0xFF	; 255
    33d0:	fe 01       	movw	r30, r28
    33d2:	e1 56       	subi	r30, 0x61	; 97
    33d4:	ff 4f       	sbci	r31, 0xFF	; 255
    33d6:	80 81       	ld	r24, Z
    33d8:	91 81       	ldd	r25, Z+1	; 0x01
    33da:	8d 93       	st	X+, r24
    33dc:	9c 93       	st	X, r25
    33de:	fe 01       	movw	r30, r28
    33e0:	e5 56       	subi	r30, 0x65	; 101
    33e2:	ff 4f       	sbci	r31, 0xFF	; 255
    33e4:	80 81       	ld	r24, Z
    33e6:	91 81       	ldd	r25, Z+1	; 0x01
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	f1 f7       	brne	.-4      	; 0x33e8 <main+0xab2>
    33ec:	fe 01       	movw	r30, r28
    33ee:	e5 56       	subi	r30, 0x65	; 101
    33f0:	ff 4f       	sbci	r31, 0xFF	; 255
    33f2:	91 83       	std	Z+1, r25	; 0x01
    33f4:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_void_Clear_Screen();
    33f6:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
			LCD_void_Write_String("Check Temp..");
    33fa:	8a ee       	ldi	r24, 0xEA	; 234
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
    3402:	fe 01       	movw	r30, r28
    3404:	e9 56       	subi	r30, 0x69	; 105
    3406:	ff 4f       	sbci	r31, 0xFF	; 255
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	aa ef       	ldi	r26, 0xFA	; 250
    340e:	b3 e4       	ldi	r27, 0x43	; 67
    3410:	80 83       	st	Z, r24
    3412:	91 83       	std	Z+1, r25	; 0x01
    3414:	a2 83       	std	Z+2, r26	; 0x02
    3416:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3418:	8e 01       	movw	r16, r28
    341a:	0d 56       	subi	r16, 0x6D	; 109
    341c:	1f 4f       	sbci	r17, 0xFF	; 255
    341e:	fe 01       	movw	r30, r28
    3420:	e9 56       	subi	r30, 0x69	; 105
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	60 81       	ld	r22, Z
    3426:	71 81       	ldd	r23, Z+1	; 0x01
    3428:	82 81       	ldd	r24, Z+2	; 0x02
    342a:	93 81       	ldd	r25, Z+3	; 0x03
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	4a ef       	ldi	r20, 0xFA	; 250
    3432:	54 e4       	ldi	r21, 0x44	; 68
    3434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3438:	dc 01       	movw	r26, r24
    343a:	cb 01       	movw	r24, r22
    343c:	f8 01       	movw	r30, r16
    343e:	80 83       	st	Z, r24
    3440:	91 83       	std	Z+1, r25	; 0x01
    3442:	a2 83       	std	Z+2, r26	; 0x02
    3444:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3446:	fe 01       	movw	r30, r28
    3448:	ed 56       	subi	r30, 0x6D	; 109
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	60 81       	ld	r22, Z
    344e:	71 81       	ldd	r23, Z+1	; 0x01
    3450:	82 81       	ldd	r24, Z+2	; 0x02
    3452:	93 81       	ldd	r25, Z+3	; 0x03
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	40 e8       	ldi	r20, 0x80	; 128
    345a:	5f e3       	ldi	r21, 0x3F	; 63
    345c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3460:	88 23       	and	r24, r24
    3462:	44 f4       	brge	.+16     	; 0x3474 <main+0xb3e>
		__ticks = 1;
    3464:	fe 01       	movw	r30, r28
    3466:	ef 56       	subi	r30, 0x6F	; 111
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	91 83       	std	Z+1, r25	; 0x01
    3470:	80 83       	st	Z, r24
    3472:	64 c0       	rjmp	.+200    	; 0x353c <main+0xc06>
	else if (__tmp > 65535)
    3474:	fe 01       	movw	r30, r28
    3476:	ed 56       	subi	r30, 0x6D	; 109
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	60 81       	ld	r22, Z
    347c:	71 81       	ldd	r23, Z+1	; 0x01
    347e:	82 81       	ldd	r24, Z+2	; 0x02
    3480:	93 81       	ldd	r25, Z+3	; 0x03
    3482:	20 e0       	ldi	r18, 0x00	; 0
    3484:	3f ef       	ldi	r19, 0xFF	; 255
    3486:	4f e7       	ldi	r20, 0x7F	; 127
    3488:	57 e4       	ldi	r21, 0x47	; 71
    348a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    348e:	18 16       	cp	r1, r24
    3490:	0c f0       	brlt	.+2      	; 0x3494 <main+0xb5e>
    3492:	43 c0       	rjmp	.+134    	; 0x351a <main+0xbe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3494:	fe 01       	movw	r30, r28
    3496:	e9 56       	subi	r30, 0x69	; 105
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	60 81       	ld	r22, Z
    349c:	71 81       	ldd	r23, Z+1	; 0x01
    349e:	82 81       	ldd	r24, Z+2	; 0x02
    34a0:	93 81       	ldd	r25, Z+3	; 0x03
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	40 e2       	ldi	r20, 0x20	; 32
    34a8:	51 e4       	ldi	r21, 0x41	; 65
    34aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ae:	dc 01       	movw	r26, r24
    34b0:	cb 01       	movw	r24, r22
    34b2:	8e 01       	movw	r16, r28
    34b4:	0f 56       	subi	r16, 0x6F	; 111
    34b6:	1f 4f       	sbci	r17, 0xFF	; 255
    34b8:	bc 01       	movw	r22, r24
    34ba:	cd 01       	movw	r24, r26
    34bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c0:	dc 01       	movw	r26, r24
    34c2:	cb 01       	movw	r24, r22
    34c4:	f8 01       	movw	r30, r16
    34c6:	91 83       	std	Z+1, r25	; 0x01
    34c8:	80 83       	st	Z, r24
    34ca:	1f c0       	rjmp	.+62     	; 0x350a <main+0xbd4>
    34cc:	fe 01       	movw	r30, r28
    34ce:	e1 57       	subi	r30, 0x71	; 113
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	88 ec       	ldi	r24, 0xC8	; 200
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	91 83       	std	Z+1, r25	; 0x01
    34d8:	80 83       	st	Z, r24
    34da:	fe 01       	movw	r30, r28
    34dc:	e1 57       	subi	r30, 0x71	; 113
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	80 81       	ld	r24, Z
    34e2:	91 81       	ldd	r25, Z+1	; 0x01
    34e4:	01 97       	sbiw	r24, 0x01	; 1
    34e6:	f1 f7       	brne	.-4      	; 0x34e4 <main+0xbae>
    34e8:	fe 01       	movw	r30, r28
    34ea:	e1 57       	subi	r30, 0x71	; 113
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	91 83       	std	Z+1, r25	; 0x01
    34f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34f2:	de 01       	movw	r26, r28
    34f4:	af 56       	subi	r26, 0x6F	; 111
    34f6:	bf 4f       	sbci	r27, 0xFF	; 255
    34f8:	fe 01       	movw	r30, r28
    34fa:	ef 56       	subi	r30, 0x6F	; 111
    34fc:	ff 4f       	sbci	r31, 0xFF	; 255
    34fe:	80 81       	ld	r24, Z
    3500:	91 81       	ldd	r25, Z+1	; 0x01
    3502:	01 97       	sbiw	r24, 0x01	; 1
    3504:	11 96       	adiw	r26, 0x01	; 1
    3506:	9c 93       	st	X, r25
    3508:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    350a:	fe 01       	movw	r30, r28
    350c:	ef 56       	subi	r30, 0x6F	; 111
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	80 81       	ld	r24, Z
    3512:	91 81       	ldd	r25, Z+1	; 0x01
    3514:	00 97       	sbiw	r24, 0x00	; 0
    3516:	d1 f6       	brne	.-76     	; 0x34cc <main+0xb96>
    3518:	27 c0       	rjmp	.+78     	; 0x3568 <main+0xc32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    351a:	8e 01       	movw	r16, r28
    351c:	0f 56       	subi	r16, 0x6F	; 111
    351e:	1f 4f       	sbci	r17, 0xFF	; 255
    3520:	fe 01       	movw	r30, r28
    3522:	ed 56       	subi	r30, 0x6D	; 109
    3524:	ff 4f       	sbci	r31, 0xFF	; 255
    3526:	60 81       	ld	r22, Z
    3528:	71 81       	ldd	r23, Z+1	; 0x01
    352a:	82 81       	ldd	r24, Z+2	; 0x02
    352c:	93 81       	ldd	r25, Z+3	; 0x03
    352e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	f8 01       	movw	r30, r16
    3538:	91 83       	std	Z+1, r25	; 0x01
    353a:	80 83       	st	Z, r24
    353c:	de 01       	movw	r26, r28
    353e:	a3 57       	subi	r26, 0x73	; 115
    3540:	bf 4f       	sbci	r27, 0xFF	; 255
    3542:	fe 01       	movw	r30, r28
    3544:	ef 56       	subi	r30, 0x6F	; 111
    3546:	ff 4f       	sbci	r31, 0xFF	; 255
    3548:	80 81       	ld	r24, Z
    354a:	91 81       	ldd	r25, Z+1	; 0x01
    354c:	8d 93       	st	X+, r24
    354e:	9c 93       	st	X, r25
    3550:	fe 01       	movw	r30, r28
    3552:	e3 57       	subi	r30, 0x73	; 115
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	80 81       	ld	r24, Z
    3558:	91 81       	ldd	r25, Z+1	; 0x01
    355a:	01 97       	sbiw	r24, 0x01	; 1
    355c:	f1 f7       	brne	.-4      	; 0x355a <main+0xc24>
    355e:	fe 01       	movw	r30, r28
    3560:	e3 57       	subi	r30, 0x73	; 115
    3562:	ff 4f       	sbci	r31, 0xFF	; 255
    3564:	91 83       	std	Z+1, r25	; 0x01
    3566:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_void_Clear_Screen();
    3568:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
			LCD_void_Write_String("Check Temp...");
    356c:	87 ef       	ldi	r24, 0xF7	; 247
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
    3574:	fe 01       	movw	r30, r28
    3576:	e7 57       	subi	r30, 0x77	; 119
    3578:	ff 4f       	sbci	r31, 0xFF	; 255
    357a:	80 e0       	ldi	r24, 0x00	; 0
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	aa ef       	ldi	r26, 0xFA	; 250
    3580:	b3 e4       	ldi	r27, 0x43	; 67
    3582:	80 83       	st	Z, r24
    3584:	91 83       	std	Z+1, r25	; 0x01
    3586:	a2 83       	std	Z+2, r26	; 0x02
    3588:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    358a:	8e 01       	movw	r16, r28
    358c:	0b 57       	subi	r16, 0x7B	; 123
    358e:	1f 4f       	sbci	r17, 0xFF	; 255
    3590:	fe 01       	movw	r30, r28
    3592:	e7 57       	subi	r30, 0x77	; 119
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	60 81       	ld	r22, Z
    3598:	71 81       	ldd	r23, Z+1	; 0x01
    359a:	82 81       	ldd	r24, Z+2	; 0x02
    359c:	93 81       	ldd	r25, Z+3	; 0x03
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	4a ef       	ldi	r20, 0xFA	; 250
    35a4:	54 e4       	ldi	r21, 0x44	; 68
    35a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	f8 01       	movw	r30, r16
    35b0:	80 83       	st	Z, r24
    35b2:	91 83       	std	Z+1, r25	; 0x01
    35b4:	a2 83       	std	Z+2, r26	; 0x02
    35b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35b8:	fe 01       	movw	r30, r28
    35ba:	eb 57       	subi	r30, 0x7B	; 123
    35bc:	ff 4f       	sbci	r31, 0xFF	; 255
    35be:	60 81       	ld	r22, Z
    35c0:	71 81       	ldd	r23, Z+1	; 0x01
    35c2:	82 81       	ldd	r24, Z+2	; 0x02
    35c4:	93 81       	ldd	r25, Z+3	; 0x03
    35c6:	20 e0       	ldi	r18, 0x00	; 0
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	40 e8       	ldi	r20, 0x80	; 128
    35cc:	5f e3       	ldi	r21, 0x3F	; 63
    35ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35d2:	88 23       	and	r24, r24
    35d4:	44 f4       	brge	.+16     	; 0x35e6 <main+0xcb0>
		__ticks = 1;
    35d6:	fe 01       	movw	r30, r28
    35d8:	ed 57       	subi	r30, 0x7D	; 125
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	91 83       	std	Z+1, r25	; 0x01
    35e2:	80 83       	st	Z, r24
    35e4:	64 c0       	rjmp	.+200    	; 0x36ae <main+0xd78>
	else if (__tmp > 65535)
    35e6:	fe 01       	movw	r30, r28
    35e8:	eb 57       	subi	r30, 0x7B	; 123
    35ea:	ff 4f       	sbci	r31, 0xFF	; 255
    35ec:	60 81       	ld	r22, Z
    35ee:	71 81       	ldd	r23, Z+1	; 0x01
    35f0:	82 81       	ldd	r24, Z+2	; 0x02
    35f2:	93 81       	ldd	r25, Z+3	; 0x03
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	3f ef       	ldi	r19, 0xFF	; 255
    35f8:	4f e7       	ldi	r20, 0x7F	; 127
    35fa:	57 e4       	ldi	r21, 0x47	; 71
    35fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3600:	18 16       	cp	r1, r24
    3602:	0c f0       	brlt	.+2      	; 0x3606 <main+0xcd0>
    3604:	43 c0       	rjmp	.+134    	; 0x368c <main+0xd56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3606:	fe 01       	movw	r30, r28
    3608:	e7 57       	subi	r30, 0x77	; 119
    360a:	ff 4f       	sbci	r31, 0xFF	; 255
    360c:	60 81       	ld	r22, Z
    360e:	71 81       	ldd	r23, Z+1	; 0x01
    3610:	82 81       	ldd	r24, Z+2	; 0x02
    3612:	93 81       	ldd	r25, Z+3	; 0x03
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	40 e2       	ldi	r20, 0x20	; 32
    361a:	51 e4       	ldi	r21, 0x41	; 65
    361c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3620:	dc 01       	movw	r26, r24
    3622:	cb 01       	movw	r24, r22
    3624:	8e 01       	movw	r16, r28
    3626:	0d 57       	subi	r16, 0x7D	; 125
    3628:	1f 4f       	sbci	r17, 0xFF	; 255
    362a:	bc 01       	movw	r22, r24
    362c:	cd 01       	movw	r24, r26
    362e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	f8 01       	movw	r30, r16
    3638:	91 83       	std	Z+1, r25	; 0x01
    363a:	80 83       	st	Z, r24
    363c:	1f c0       	rjmp	.+62     	; 0x367c <main+0xd46>
    363e:	fe 01       	movw	r30, r28
    3640:	ef 57       	subi	r30, 0x7F	; 127
    3642:	ff 4f       	sbci	r31, 0xFF	; 255
    3644:	88 ec       	ldi	r24, 0xC8	; 200
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	91 83       	std	Z+1, r25	; 0x01
    364a:	80 83       	st	Z, r24
    364c:	fe 01       	movw	r30, r28
    364e:	ef 57       	subi	r30, 0x7F	; 127
    3650:	ff 4f       	sbci	r31, 0xFF	; 255
    3652:	80 81       	ld	r24, Z
    3654:	91 81       	ldd	r25, Z+1	; 0x01
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	f1 f7       	brne	.-4      	; 0x3656 <main+0xd20>
    365a:	fe 01       	movw	r30, r28
    365c:	ef 57       	subi	r30, 0x7F	; 127
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	91 83       	std	Z+1, r25	; 0x01
    3662:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3664:	de 01       	movw	r26, r28
    3666:	ad 57       	subi	r26, 0x7D	; 125
    3668:	bf 4f       	sbci	r27, 0xFF	; 255
    366a:	fe 01       	movw	r30, r28
    366c:	ed 57       	subi	r30, 0x7D	; 125
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	80 81       	ld	r24, Z
    3672:	91 81       	ldd	r25, Z+1	; 0x01
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	11 96       	adiw	r26, 0x01	; 1
    3678:	9c 93       	st	X, r25
    367a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    367c:	fe 01       	movw	r30, r28
    367e:	ed 57       	subi	r30, 0x7D	; 125
    3680:	ff 4f       	sbci	r31, 0xFF	; 255
    3682:	80 81       	ld	r24, Z
    3684:	91 81       	ldd	r25, Z+1	; 0x01
    3686:	00 97       	sbiw	r24, 0x00	; 0
    3688:	d1 f6       	brne	.-76     	; 0x363e <main+0xd08>
    368a:	27 c0       	rjmp	.+78     	; 0x36da <main+0xda4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    368c:	8e 01       	movw	r16, r28
    368e:	0d 57       	subi	r16, 0x7D	; 125
    3690:	1f 4f       	sbci	r17, 0xFF	; 255
    3692:	fe 01       	movw	r30, r28
    3694:	eb 57       	subi	r30, 0x7B	; 123
    3696:	ff 4f       	sbci	r31, 0xFF	; 255
    3698:	60 81       	ld	r22, Z
    369a:	71 81       	ldd	r23, Z+1	; 0x01
    369c:	82 81       	ldd	r24, Z+2	; 0x02
    369e:	93 81       	ldd	r25, Z+3	; 0x03
    36a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	f8 01       	movw	r30, r16
    36aa:	91 83       	std	Z+1, r25	; 0x01
    36ac:	80 83       	st	Z, r24
    36ae:	de 01       	movw	r26, r28
    36b0:	a1 58       	subi	r26, 0x81	; 129
    36b2:	bf 4f       	sbci	r27, 0xFF	; 255
    36b4:	fe 01       	movw	r30, r28
    36b6:	ed 57       	subi	r30, 0x7D	; 125
    36b8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ba:	80 81       	ld	r24, Z
    36bc:	91 81       	ldd	r25, Z+1	; 0x01
    36be:	8d 93       	st	X+, r24
    36c0:	9c 93       	st	X, r25
    36c2:	fe 01       	movw	r30, r28
    36c4:	e1 58       	subi	r30, 0x81	; 129
    36c6:	ff 4f       	sbci	r31, 0xFF	; 255
    36c8:	80 81       	ld	r24, Z
    36ca:	91 81       	ldd	r25, Z+1	; 0x01
    36cc:	01 97       	sbiw	r24, 0x01	; 1
    36ce:	f1 f7       	brne	.-4      	; 0x36cc <main+0xd96>
    36d0:	fe 01       	movw	r30, r28
    36d2:	e1 58       	subi	r30, 0x81	; 129
    36d4:	ff 4f       	sbci	r31, 0xFF	; 255
    36d6:	91 83       	std	Z+1, r25	; 0x01
    36d8:	80 83       	st	Z, r24
			_delay_ms(500);
			LCD_void_Clear_Screen();
    36da:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
			LCD_void_Write_String("Desired Temp=");
    36de:	85 e0       	ldi	r24, 0x05	; 5
    36e0:	91 e0       	ldi	r25, 0x01	; 1
    36e2:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
			LCD_void_Write_Numbers(Desired_Temp);
    36e6:	80 91 a7 01 	lds	r24, 0x01A7
    36ea:	88 2f       	mov	r24, r24
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	a0 e0       	ldi	r26, 0x00	; 0
    36f0:	b0 e0       	ldi	r27, 0x00	; 0
    36f2:	bc 01       	movw	r22, r24
    36f4:	cd 01       	movw	r24, r26
    36f6:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <LCD_void_Write_Numbers>
			LCD_void_DDRAM_Address(1,0);
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	60 e0       	ldi	r22, 0x00	; 0
    36fe:	0e 94 ad 11 	call	0x235a	; 0x235a <LCD_void_DDRAM_Address>
			LCD_void_Write_String("Room Temp=");
    3702:	83 e1       	ldi	r24, 0x13	; 19
    3704:	91 e0       	ldi	r25, 0x01	; 1
    3706:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
			LCD_void_Write_Numbers(Temp);
    370a:	fe 01       	movw	r30, r28
    370c:	e1 51       	subi	r30, 0x11	; 17
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	80 81       	ld	r24, Z
    3712:	91 81       	ldd	r25, Z+1	; 0x01
    3714:	cc 01       	movw	r24, r24
    3716:	a0 e0       	ldi	r26, 0x00	; 0
    3718:	b0 e0       	ldi	r27, 0x00	; 0
    371a:	bc 01       	movw	r22, r24
    371c:	cd 01       	movw	r24, r26
    371e:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <LCD_void_Write_Numbers>
    3722:	fe 01       	movw	r30, r28
    3724:	e5 58       	subi	r30, 0x85	; 133
    3726:	ff 4f       	sbci	r31, 0xFF	; 255
    3728:	80 e0       	ldi	r24, 0x00	; 0
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	aa e7       	ldi	r26, 0x7A	; 122
    372e:	b4 e4       	ldi	r27, 0x44	; 68
    3730:	80 83       	st	Z, r24
    3732:	91 83       	std	Z+1, r25	; 0x01
    3734:	a2 83       	std	Z+2, r26	; 0x02
    3736:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3738:	8e 01       	movw	r16, r28
    373a:	09 58       	subi	r16, 0x89	; 137
    373c:	1f 4f       	sbci	r17, 0xFF	; 255
    373e:	fe 01       	movw	r30, r28
    3740:	e5 58       	subi	r30, 0x85	; 133
    3742:	ff 4f       	sbci	r31, 0xFF	; 255
    3744:	60 81       	ld	r22, Z
    3746:	71 81       	ldd	r23, Z+1	; 0x01
    3748:	82 81       	ldd	r24, Z+2	; 0x02
    374a:	93 81       	ldd	r25, Z+3	; 0x03
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	4a ef       	ldi	r20, 0xFA	; 250
    3752:	54 e4       	ldi	r21, 0x44	; 68
    3754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	f8 01       	movw	r30, r16
    375e:	80 83       	st	Z, r24
    3760:	91 83       	std	Z+1, r25	; 0x01
    3762:	a2 83       	std	Z+2, r26	; 0x02
    3764:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3766:	fe 01       	movw	r30, r28
    3768:	e9 58       	subi	r30, 0x89	; 137
    376a:	ff 4f       	sbci	r31, 0xFF	; 255
    376c:	60 81       	ld	r22, Z
    376e:	71 81       	ldd	r23, Z+1	; 0x01
    3770:	82 81       	ldd	r24, Z+2	; 0x02
    3772:	93 81       	ldd	r25, Z+3	; 0x03
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	40 e8       	ldi	r20, 0x80	; 128
    377a:	5f e3       	ldi	r21, 0x3F	; 63
    377c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3780:	88 23       	and	r24, r24
    3782:	44 f4       	brge	.+16     	; 0x3794 <main+0xe5e>
		__ticks = 1;
    3784:	fe 01       	movw	r30, r28
    3786:	eb 58       	subi	r30, 0x8B	; 139
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	91 83       	std	Z+1, r25	; 0x01
    3790:	80 83       	st	Z, r24
    3792:	64 c0       	rjmp	.+200    	; 0x385c <main+0xf26>
	else if (__tmp > 65535)
    3794:	fe 01       	movw	r30, r28
    3796:	e9 58       	subi	r30, 0x89	; 137
    3798:	ff 4f       	sbci	r31, 0xFF	; 255
    379a:	60 81       	ld	r22, Z
    379c:	71 81       	ldd	r23, Z+1	; 0x01
    379e:	82 81       	ldd	r24, Z+2	; 0x02
    37a0:	93 81       	ldd	r25, Z+3	; 0x03
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	3f ef       	ldi	r19, 0xFF	; 255
    37a6:	4f e7       	ldi	r20, 0x7F	; 127
    37a8:	57 e4       	ldi	r21, 0x47	; 71
    37aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37ae:	18 16       	cp	r1, r24
    37b0:	0c f0       	brlt	.+2      	; 0x37b4 <main+0xe7e>
    37b2:	43 c0       	rjmp	.+134    	; 0x383a <main+0xf04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b4:	fe 01       	movw	r30, r28
    37b6:	e5 58       	subi	r30, 0x85	; 133
    37b8:	ff 4f       	sbci	r31, 0xFF	; 255
    37ba:	60 81       	ld	r22, Z
    37bc:	71 81       	ldd	r23, Z+1	; 0x01
    37be:	82 81       	ldd	r24, Z+2	; 0x02
    37c0:	93 81       	ldd	r25, Z+3	; 0x03
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	40 e2       	ldi	r20, 0x20	; 32
    37c8:	51 e4       	ldi	r21, 0x41	; 65
    37ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	8e 01       	movw	r16, r28
    37d4:	0b 58       	subi	r16, 0x8B	; 139
    37d6:	1f 4f       	sbci	r17, 0xFF	; 255
    37d8:	bc 01       	movw	r22, r24
    37da:	cd 01       	movw	r24, r26
    37dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e0:	dc 01       	movw	r26, r24
    37e2:	cb 01       	movw	r24, r22
    37e4:	f8 01       	movw	r30, r16
    37e6:	91 83       	std	Z+1, r25	; 0x01
    37e8:	80 83       	st	Z, r24
    37ea:	1f c0       	rjmp	.+62     	; 0x382a <main+0xef4>
    37ec:	fe 01       	movw	r30, r28
    37ee:	ed 58       	subi	r30, 0x8D	; 141
    37f0:	ff 4f       	sbci	r31, 0xFF	; 255
    37f2:	88 ec       	ldi	r24, 0xC8	; 200
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	91 83       	std	Z+1, r25	; 0x01
    37f8:	80 83       	st	Z, r24
    37fa:	fe 01       	movw	r30, r28
    37fc:	ed 58       	subi	r30, 0x8D	; 141
    37fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3800:	80 81       	ld	r24, Z
    3802:	91 81       	ldd	r25, Z+1	; 0x01
    3804:	01 97       	sbiw	r24, 0x01	; 1
    3806:	f1 f7       	brne	.-4      	; 0x3804 <main+0xece>
    3808:	fe 01       	movw	r30, r28
    380a:	ed 58       	subi	r30, 0x8D	; 141
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	91 83       	std	Z+1, r25	; 0x01
    3810:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3812:	de 01       	movw	r26, r28
    3814:	ab 58       	subi	r26, 0x8B	; 139
    3816:	bf 4f       	sbci	r27, 0xFF	; 255
    3818:	fe 01       	movw	r30, r28
    381a:	eb 58       	subi	r30, 0x8B	; 139
    381c:	ff 4f       	sbci	r31, 0xFF	; 255
    381e:	80 81       	ld	r24, Z
    3820:	91 81       	ldd	r25, Z+1	; 0x01
    3822:	01 97       	sbiw	r24, 0x01	; 1
    3824:	11 96       	adiw	r26, 0x01	; 1
    3826:	9c 93       	st	X, r25
    3828:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    382a:	fe 01       	movw	r30, r28
    382c:	eb 58       	subi	r30, 0x8B	; 139
    382e:	ff 4f       	sbci	r31, 0xFF	; 255
    3830:	80 81       	ld	r24, Z
    3832:	91 81       	ldd	r25, Z+1	; 0x01
    3834:	00 97       	sbiw	r24, 0x00	; 0
    3836:	d1 f6       	brne	.-76     	; 0x37ec <main+0xeb6>
    3838:	28 c0       	rjmp	.+80     	; 0x388a <main+0xf54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    383a:	8e 01       	movw	r16, r28
    383c:	0b 58       	subi	r16, 0x8B	; 139
    383e:	1f 4f       	sbci	r17, 0xFF	; 255
    3840:	fe 01       	movw	r30, r28
    3842:	e9 58       	subi	r30, 0x89	; 137
    3844:	ff 4f       	sbci	r31, 0xFF	; 255
    3846:	60 81       	ld	r22, Z
    3848:	71 81       	ldd	r23, Z+1	; 0x01
    384a:	82 81       	ldd	r24, Z+2	; 0x02
    384c:	93 81       	ldd	r25, Z+3	; 0x03
    384e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	f8 01       	movw	r30, r16
    3858:	91 83       	std	Z+1, r25	; 0x01
    385a:	80 83       	st	Z, r24
    385c:	de 01       	movw	r26, r28
    385e:	af 58       	subi	r26, 0x8F	; 143
    3860:	bf 4f       	sbci	r27, 0xFF	; 255
    3862:	fe 01       	movw	r30, r28
    3864:	eb 58       	subi	r30, 0x8B	; 139
    3866:	ff 4f       	sbci	r31, 0xFF	; 255
    3868:	80 81       	ld	r24, Z
    386a:	91 81       	ldd	r25, Z+1	; 0x01
    386c:	11 96       	adiw	r26, 0x01	; 1
    386e:	9c 93       	st	X, r25
    3870:	8e 93       	st	-X, r24
    3872:	fe 01       	movw	r30, r28
    3874:	ef 58       	subi	r30, 0x8F	; 143
    3876:	ff 4f       	sbci	r31, 0xFF	; 255
    3878:	80 81       	ld	r24, Z
    387a:	91 81       	ldd	r25, Z+1	; 0x01
    387c:	01 97       	sbiw	r24, 0x01	; 1
    387e:	f1 f7       	brne	.-4      	; 0x387c <main+0xf46>
    3880:	fe 01       	movw	r30, r28
    3882:	ef 58       	subi	r30, 0x8F	; 143
    3884:	ff 4f       	sbci	r31, 0xFF	; 255
    3886:	91 83       	std	Z+1, r25	; 0x01
    3888:	80 83       	st	Z, r24
			_delay_ms(1000);
			if(Temp>Desired_Temp)
    388a:	80 91 a7 01 	lds	r24, 0x01A7
    388e:	28 2f       	mov	r18, r24
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	fe 01       	movw	r30, r28
    3894:	e1 51       	subi	r30, 0x11	; 17
    3896:	ff 4f       	sbci	r31, 0xFF	; 255
    3898:	80 81       	ld	r24, Z
    389a:	91 81       	ldd	r25, Z+1	; 0x01
    389c:	28 17       	cp	r18, r24
    389e:	39 07       	cpc	r19, r25
    38a0:	08 f0       	brcs	.+2      	; 0x38a4 <main+0xf6e>
    38a2:	ca c0       	rjmp	.+404    	; 0x3a38 <main+0x1102>
			{
				LCD_void_Clear_Screen();
    38a4:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
				LCD_void_Write_String("   Air_Cond.   ");
    38a8:	80 e6       	ldi	r24, 0x60	; 96
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
				LCD_void_DDRAM_Address(1,0);
    38b0:	81 e0       	ldi	r24, 0x01	; 1
    38b2:	60 e0       	ldi	r22, 0x00	; 0
    38b4:	0e 94 ad 11 	call	0x235a	; 0x235a <LCD_void_DDRAM_Address>
				LCD_void_Write_String("   Turned ON   ");
    38b8:	81 e8       	ldi	r24, 0x81	; 129
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
				DIO_U8_Set_Pin_value(PORTD_ID,1,1);
    38c0:	83 e0       	ldi	r24, 0x03	; 3
    38c2:	61 e0       	ldi	r22, 0x01	; 1
    38c4:	41 e0       	ldi	r20, 0x01	; 1
    38c6:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
    38ca:	fe 01       	movw	r30, r28
    38cc:	e3 59       	subi	r30, 0x93	; 147
    38ce:	ff 4f       	sbci	r31, 0xFF	; 255
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	aa e7       	ldi	r26, 0x7A	; 122
    38d6:	b4 e4       	ldi	r27, 0x44	; 68
    38d8:	80 83       	st	Z, r24
    38da:	91 83       	std	Z+1, r25	; 0x01
    38dc:	a2 83       	std	Z+2, r26	; 0x02
    38de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e0:	8e 01       	movw	r16, r28
    38e2:	07 59       	subi	r16, 0x97	; 151
    38e4:	1f 4f       	sbci	r17, 0xFF	; 255
    38e6:	fe 01       	movw	r30, r28
    38e8:	e3 59       	subi	r30, 0x93	; 147
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	60 81       	ld	r22, Z
    38ee:	71 81       	ldd	r23, Z+1	; 0x01
    38f0:	82 81       	ldd	r24, Z+2	; 0x02
    38f2:	93 81       	ldd	r25, Z+3	; 0x03
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	4a ef       	ldi	r20, 0xFA	; 250
    38fa:	54 e4       	ldi	r21, 0x44	; 68
    38fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	f8 01       	movw	r30, r16
    3906:	80 83       	st	Z, r24
    3908:	91 83       	std	Z+1, r25	; 0x01
    390a:	a2 83       	std	Z+2, r26	; 0x02
    390c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    390e:	fe 01       	movw	r30, r28
    3910:	e7 59       	subi	r30, 0x97	; 151
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	60 81       	ld	r22, Z
    3916:	71 81       	ldd	r23, Z+1	; 0x01
    3918:	82 81       	ldd	r24, Z+2	; 0x02
    391a:	93 81       	ldd	r25, Z+3	; 0x03
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	40 e8       	ldi	r20, 0x80	; 128
    3922:	5f e3       	ldi	r21, 0x3F	; 63
    3924:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3928:	88 23       	and	r24, r24
    392a:	44 f4       	brge	.+16     	; 0x393c <main+0x1006>
		__ticks = 1;
    392c:	fe 01       	movw	r30, r28
    392e:	e9 59       	subi	r30, 0x99	; 153
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	81 e0       	ldi	r24, 0x01	; 1
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	91 83       	std	Z+1, r25	; 0x01
    3938:	80 83       	st	Z, r24
    393a:	64 c0       	rjmp	.+200    	; 0x3a04 <main+0x10ce>
	else if (__tmp > 65535)
    393c:	fe 01       	movw	r30, r28
    393e:	e7 59       	subi	r30, 0x97	; 151
    3940:	ff 4f       	sbci	r31, 0xFF	; 255
    3942:	60 81       	ld	r22, Z
    3944:	71 81       	ldd	r23, Z+1	; 0x01
    3946:	82 81       	ldd	r24, Z+2	; 0x02
    3948:	93 81       	ldd	r25, Z+3	; 0x03
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	3f ef       	ldi	r19, 0xFF	; 255
    394e:	4f e7       	ldi	r20, 0x7F	; 127
    3950:	57 e4       	ldi	r21, 0x47	; 71
    3952:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3956:	18 16       	cp	r1, r24
    3958:	0c f0       	brlt	.+2      	; 0x395c <main+0x1026>
    395a:	43 c0       	rjmp	.+134    	; 0x39e2 <main+0x10ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    395c:	fe 01       	movw	r30, r28
    395e:	e3 59       	subi	r30, 0x93	; 147
    3960:	ff 4f       	sbci	r31, 0xFF	; 255
    3962:	60 81       	ld	r22, Z
    3964:	71 81       	ldd	r23, Z+1	; 0x01
    3966:	82 81       	ldd	r24, Z+2	; 0x02
    3968:	93 81       	ldd	r25, Z+3	; 0x03
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	40 e2       	ldi	r20, 0x20	; 32
    3970:	51 e4       	ldi	r21, 0x41	; 65
    3972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3976:	dc 01       	movw	r26, r24
    3978:	cb 01       	movw	r24, r22
    397a:	8e 01       	movw	r16, r28
    397c:	09 59       	subi	r16, 0x99	; 153
    397e:	1f 4f       	sbci	r17, 0xFF	; 255
    3980:	bc 01       	movw	r22, r24
    3982:	cd 01       	movw	r24, r26
    3984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3988:	dc 01       	movw	r26, r24
    398a:	cb 01       	movw	r24, r22
    398c:	f8 01       	movw	r30, r16
    398e:	91 83       	std	Z+1, r25	; 0x01
    3990:	80 83       	st	Z, r24
    3992:	1f c0       	rjmp	.+62     	; 0x39d2 <main+0x109c>
    3994:	fe 01       	movw	r30, r28
    3996:	eb 59       	subi	r30, 0x9B	; 155
    3998:	ff 4f       	sbci	r31, 0xFF	; 255
    399a:	88 ec       	ldi	r24, 0xC8	; 200
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	91 83       	std	Z+1, r25	; 0x01
    39a0:	80 83       	st	Z, r24
    39a2:	fe 01       	movw	r30, r28
    39a4:	eb 59       	subi	r30, 0x9B	; 155
    39a6:	ff 4f       	sbci	r31, 0xFF	; 255
    39a8:	80 81       	ld	r24, Z
    39aa:	91 81       	ldd	r25, Z+1	; 0x01
    39ac:	01 97       	sbiw	r24, 0x01	; 1
    39ae:	f1 f7       	brne	.-4      	; 0x39ac <main+0x1076>
    39b0:	fe 01       	movw	r30, r28
    39b2:	eb 59       	subi	r30, 0x9B	; 155
    39b4:	ff 4f       	sbci	r31, 0xFF	; 255
    39b6:	91 83       	std	Z+1, r25	; 0x01
    39b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ba:	de 01       	movw	r26, r28
    39bc:	a9 59       	subi	r26, 0x99	; 153
    39be:	bf 4f       	sbci	r27, 0xFF	; 255
    39c0:	fe 01       	movw	r30, r28
    39c2:	e9 59       	subi	r30, 0x99	; 153
    39c4:	ff 4f       	sbci	r31, 0xFF	; 255
    39c6:	80 81       	ld	r24, Z
    39c8:	91 81       	ldd	r25, Z+1	; 0x01
    39ca:	01 97       	sbiw	r24, 0x01	; 1
    39cc:	11 96       	adiw	r26, 0x01	; 1
    39ce:	9c 93       	st	X, r25
    39d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39d2:	fe 01       	movw	r30, r28
    39d4:	e9 59       	subi	r30, 0x99	; 153
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	80 81       	ld	r24, Z
    39da:	91 81       	ldd	r25, Z+1	; 0x01
    39dc:	00 97       	sbiw	r24, 0x00	; 0
    39de:	d1 f6       	brne	.-76     	; 0x3994 <main+0x105e>
    39e0:	27 c0       	rjmp	.+78     	; 0x3a30 <main+0x10fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e2:	8e 01       	movw	r16, r28
    39e4:	09 59       	subi	r16, 0x99	; 153
    39e6:	1f 4f       	sbci	r17, 0xFF	; 255
    39e8:	fe 01       	movw	r30, r28
    39ea:	e7 59       	subi	r30, 0x97	; 151
    39ec:	ff 4f       	sbci	r31, 0xFF	; 255
    39ee:	60 81       	ld	r22, Z
    39f0:	71 81       	ldd	r23, Z+1	; 0x01
    39f2:	82 81       	ldd	r24, Z+2	; 0x02
    39f4:	93 81       	ldd	r25, Z+3	; 0x03
    39f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39fa:	dc 01       	movw	r26, r24
    39fc:	cb 01       	movw	r24, r22
    39fe:	f8 01       	movw	r30, r16
    3a00:	91 83       	std	Z+1, r25	; 0x01
    3a02:	80 83       	st	Z, r24
    3a04:	de 01       	movw	r26, r28
    3a06:	ad 59       	subi	r26, 0x9D	; 157
    3a08:	bf 4f       	sbci	r27, 0xFF	; 255
    3a0a:	fe 01       	movw	r30, r28
    3a0c:	e9 59       	subi	r30, 0x99	; 153
    3a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a10:	80 81       	ld	r24, Z
    3a12:	91 81       	ldd	r25, Z+1	; 0x01
    3a14:	8d 93       	st	X+, r24
    3a16:	9c 93       	st	X, r25
    3a18:	fe 01       	movw	r30, r28
    3a1a:	ed 59       	subi	r30, 0x9D	; 157
    3a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1e:	80 81       	ld	r24, Z
    3a20:	91 81       	ldd	r25, Z+1	; 0x01
    3a22:	01 97       	sbiw	r24, 0x01	; 1
    3a24:	f1 f7       	brne	.-4      	; 0x3a22 <main+0x10ec>
    3a26:	fe 01       	movw	r30, r28
    3a28:	ed 59       	subi	r30, 0x9D	; 157
    3a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2c:	91 83       	std	Z+1, r25	; 0x01
    3a2e:	80 83       	st	Z, r24
				_delay_ms(1000);
				LCD_void_Clear_Screen();
    3a30:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
    3a34:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <main+0x4a>
			}
			else
			{
				LCD_void_Clear_Screen();
    3a38:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
				LCD_void_Write_String("Room Temp<=");
    3a3c:	8e e1       	ldi	r24, 0x1E	; 30
    3a3e:	91 e0       	ldi	r25, 0x01	; 1
    3a40:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
				LCD_void_Write_Numbers(Desired_Temp);
    3a44:	80 91 a7 01 	lds	r24, 0x01A7
    3a48:	88 2f       	mov	r24, r24
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	a0 e0       	ldi	r26, 0x00	; 0
    3a4e:	b0 e0       	ldi	r27, 0x00	; 0
    3a50:	bc 01       	movw	r22, r24
    3a52:	cd 01       	movw	r24, r26
    3a54:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <LCD_void_Write_Numbers>
				LCD_void_DDRAM_Address(1,0);
    3a58:	81 e0       	ldi	r24, 0x01	; 1
    3a5a:	60 e0       	ldi	r22, 0x00	; 0
    3a5c:	0e 94 ad 11 	call	0x235a	; 0x235a <LCD_void_DDRAM_Address>
				LCD_void_Write_String("Conditiong OFF");
    3a60:	8a e2       	ldi	r24, 0x2A	; 42
    3a62:	91 e0       	ldi	r25, 0x01	; 1
    3a64:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
    3a68:	fe 01       	movw	r30, r28
    3a6a:	e1 5a       	subi	r30, 0xA1	; 161
    3a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6e:	80 e0       	ldi	r24, 0x00	; 0
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	aa e7       	ldi	r26, 0x7A	; 122
    3a74:	b4 e4       	ldi	r27, 0x44	; 68
    3a76:	80 83       	st	Z, r24
    3a78:	91 83       	std	Z+1, r25	; 0x01
    3a7a:	a2 83       	std	Z+2, r26	; 0x02
    3a7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a7e:	8e 01       	movw	r16, r28
    3a80:	05 5a       	subi	r16, 0xA5	; 165
    3a82:	1f 4f       	sbci	r17, 0xFF	; 255
    3a84:	fe 01       	movw	r30, r28
    3a86:	e1 5a       	subi	r30, 0xA1	; 161
    3a88:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8a:	60 81       	ld	r22, Z
    3a8c:	71 81       	ldd	r23, Z+1	; 0x01
    3a8e:	82 81       	ldd	r24, Z+2	; 0x02
    3a90:	93 81       	ldd	r25, Z+3	; 0x03
    3a92:	20 e0       	ldi	r18, 0x00	; 0
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	4a ef       	ldi	r20, 0xFA	; 250
    3a98:	54 e4       	ldi	r21, 0x44	; 68
    3a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a9e:	dc 01       	movw	r26, r24
    3aa0:	cb 01       	movw	r24, r22
    3aa2:	f8 01       	movw	r30, r16
    3aa4:	80 83       	st	Z, r24
    3aa6:	91 83       	std	Z+1, r25	; 0x01
    3aa8:	a2 83       	std	Z+2, r26	; 0x02
    3aaa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3aac:	fe 01       	movw	r30, r28
    3aae:	e5 5a       	subi	r30, 0xA5	; 165
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	60 81       	ld	r22, Z
    3ab4:	71 81       	ldd	r23, Z+1	; 0x01
    3ab6:	82 81       	ldd	r24, Z+2	; 0x02
    3ab8:	93 81       	ldd	r25, Z+3	; 0x03
    3aba:	20 e0       	ldi	r18, 0x00	; 0
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	40 e8       	ldi	r20, 0x80	; 128
    3ac0:	5f e3       	ldi	r21, 0x3F	; 63
    3ac2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ac6:	88 23       	and	r24, r24
    3ac8:	44 f4       	brge	.+16     	; 0x3ada <main+0x11a4>
		__ticks = 1;
    3aca:	fe 01       	movw	r30, r28
    3acc:	e7 5a       	subi	r30, 0xA7	; 167
    3ace:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	91 83       	std	Z+1, r25	; 0x01
    3ad6:	80 83       	st	Z, r24
    3ad8:	64 c0       	rjmp	.+200    	; 0x3ba2 <main+0x126c>
	else if (__tmp > 65535)
    3ada:	fe 01       	movw	r30, r28
    3adc:	e5 5a       	subi	r30, 0xA5	; 165
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	60 81       	ld	r22, Z
    3ae2:	71 81       	ldd	r23, Z+1	; 0x01
    3ae4:	82 81       	ldd	r24, Z+2	; 0x02
    3ae6:	93 81       	ldd	r25, Z+3	; 0x03
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	3f ef       	ldi	r19, 0xFF	; 255
    3aec:	4f e7       	ldi	r20, 0x7F	; 127
    3aee:	57 e4       	ldi	r21, 0x47	; 71
    3af0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3af4:	18 16       	cp	r1, r24
    3af6:	0c f0       	brlt	.+2      	; 0x3afa <main+0x11c4>
    3af8:	43 c0       	rjmp	.+134    	; 0x3b80 <main+0x124a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3afa:	fe 01       	movw	r30, r28
    3afc:	e1 5a       	subi	r30, 0xA1	; 161
    3afe:	ff 4f       	sbci	r31, 0xFF	; 255
    3b00:	60 81       	ld	r22, Z
    3b02:	71 81       	ldd	r23, Z+1	; 0x01
    3b04:	82 81       	ldd	r24, Z+2	; 0x02
    3b06:	93 81       	ldd	r25, Z+3	; 0x03
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	40 e2       	ldi	r20, 0x20	; 32
    3b0e:	51 e4       	ldi	r21, 0x41	; 65
    3b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b14:	dc 01       	movw	r26, r24
    3b16:	cb 01       	movw	r24, r22
    3b18:	8e 01       	movw	r16, r28
    3b1a:	07 5a       	subi	r16, 0xA7	; 167
    3b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1e:	bc 01       	movw	r22, r24
    3b20:	cd 01       	movw	r24, r26
    3b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b26:	dc 01       	movw	r26, r24
    3b28:	cb 01       	movw	r24, r22
    3b2a:	f8 01       	movw	r30, r16
    3b2c:	91 83       	std	Z+1, r25	; 0x01
    3b2e:	80 83       	st	Z, r24
    3b30:	1f c0       	rjmp	.+62     	; 0x3b70 <main+0x123a>
    3b32:	fe 01       	movw	r30, r28
    3b34:	e9 5a       	subi	r30, 0xA9	; 169
    3b36:	ff 4f       	sbci	r31, 0xFF	; 255
    3b38:	88 ec       	ldi	r24, 0xC8	; 200
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	91 83       	std	Z+1, r25	; 0x01
    3b3e:	80 83       	st	Z, r24
    3b40:	fe 01       	movw	r30, r28
    3b42:	e9 5a       	subi	r30, 0xA9	; 169
    3b44:	ff 4f       	sbci	r31, 0xFF	; 255
    3b46:	80 81       	ld	r24, Z
    3b48:	91 81       	ldd	r25, Z+1	; 0x01
    3b4a:	01 97       	sbiw	r24, 0x01	; 1
    3b4c:	f1 f7       	brne	.-4      	; 0x3b4a <main+0x1214>
    3b4e:	fe 01       	movw	r30, r28
    3b50:	e9 5a       	subi	r30, 0xA9	; 169
    3b52:	ff 4f       	sbci	r31, 0xFF	; 255
    3b54:	91 83       	std	Z+1, r25	; 0x01
    3b56:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b58:	de 01       	movw	r26, r28
    3b5a:	a7 5a       	subi	r26, 0xA7	; 167
    3b5c:	bf 4f       	sbci	r27, 0xFF	; 255
    3b5e:	fe 01       	movw	r30, r28
    3b60:	e7 5a       	subi	r30, 0xA7	; 167
    3b62:	ff 4f       	sbci	r31, 0xFF	; 255
    3b64:	80 81       	ld	r24, Z
    3b66:	91 81       	ldd	r25, Z+1	; 0x01
    3b68:	01 97       	sbiw	r24, 0x01	; 1
    3b6a:	11 96       	adiw	r26, 0x01	; 1
    3b6c:	9c 93       	st	X, r25
    3b6e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b70:	fe 01       	movw	r30, r28
    3b72:	e7 5a       	subi	r30, 0xA7	; 167
    3b74:	ff 4f       	sbci	r31, 0xFF	; 255
    3b76:	80 81       	ld	r24, Z
    3b78:	91 81       	ldd	r25, Z+1	; 0x01
    3b7a:	00 97       	sbiw	r24, 0x00	; 0
    3b7c:	d1 f6       	brne	.-76     	; 0x3b32 <main+0x11fc>
    3b7e:	27 c0       	rjmp	.+78     	; 0x3bce <main+0x1298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b80:	8e 01       	movw	r16, r28
    3b82:	07 5a       	subi	r16, 0xA7	; 167
    3b84:	1f 4f       	sbci	r17, 0xFF	; 255
    3b86:	fe 01       	movw	r30, r28
    3b88:	e5 5a       	subi	r30, 0xA5	; 165
    3b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8c:	60 81       	ld	r22, Z
    3b8e:	71 81       	ldd	r23, Z+1	; 0x01
    3b90:	82 81       	ldd	r24, Z+2	; 0x02
    3b92:	93 81       	ldd	r25, Z+3	; 0x03
    3b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b98:	dc 01       	movw	r26, r24
    3b9a:	cb 01       	movw	r24, r22
    3b9c:	f8 01       	movw	r30, r16
    3b9e:	91 83       	std	Z+1, r25	; 0x01
    3ba0:	80 83       	st	Z, r24
    3ba2:	de 01       	movw	r26, r28
    3ba4:	ab 5a       	subi	r26, 0xAB	; 171
    3ba6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ba8:	fe 01       	movw	r30, r28
    3baa:	e7 5a       	subi	r30, 0xA7	; 167
    3bac:	ff 4f       	sbci	r31, 0xFF	; 255
    3bae:	80 81       	ld	r24, Z
    3bb0:	91 81       	ldd	r25, Z+1	; 0x01
    3bb2:	8d 93       	st	X+, r24
    3bb4:	9c 93       	st	X, r25
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	eb 5a       	subi	r30, 0xAB	; 171
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	80 81       	ld	r24, Z
    3bbe:	91 81       	ldd	r25, Z+1	; 0x01
    3bc0:	01 97       	sbiw	r24, 0x01	; 1
    3bc2:	f1 f7       	brne	.-4      	; 0x3bc0 <main+0x128a>
    3bc4:	fe 01       	movw	r30, r28
    3bc6:	eb 5a       	subi	r30, 0xAB	; 171
    3bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bca:	91 83       	std	Z+1, r25	; 0x01
    3bcc:	80 83       	st	Z, r24
				_delay_ms(1000);
				LCD_void_Clear_Screen();
    3bce:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
    3bd2:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <main+0x4a>

			}
			break;

	case 10:
			DIO_U8_Set_Pin_value(PORTD_ID,4,0);
    3bd6:	83 e0       	ldi	r24, 0x03	; 3
    3bd8:	64 e0       	ldi	r22, 0x04	; 4
    3bda:	40 e0       	ldi	r20, 0x00	; 0
    3bdc:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
			LCD_void_Clear_Screen();
    3be0:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
			LCD_void_Write_String("    Room1       ");
    3be4:	89 e3       	ldi	r24, 0x39	; 57
    3be6:	91 e0       	ldi	r25, 0x01	; 1
    3be8:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
			LCD_void_DDRAM_Address(1,0);
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	60 e0       	ldi	r22, 0x00	; 0
    3bf0:	0e 94 ad 11 	call	0x235a	; 0x235a <LCD_void_DDRAM_Address>
			LCD_void_Write_String("   turned OFF   ");
    3bf4:	8a e4       	ldi	r24, 0x4A	; 74
    3bf6:	91 e0       	ldi	r25, 0x01	; 1
    3bf8:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	ef 5a       	subi	r30, 0xAF	; 175
    3c00:	ff 4f       	sbci	r31, 0xFF	; 255
    3c02:	80 e0       	ldi	r24, 0x00	; 0
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	aa e7       	ldi	r26, 0x7A	; 122
    3c08:	b4 e4       	ldi	r27, 0x44	; 68
    3c0a:	80 83       	st	Z, r24
    3c0c:	91 83       	std	Z+1, r25	; 0x01
    3c0e:	a2 83       	std	Z+2, r26	; 0x02
    3c10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c12:	8e 01       	movw	r16, r28
    3c14:	03 5b       	subi	r16, 0xB3	; 179
    3c16:	1f 4f       	sbci	r17, 0xFF	; 255
    3c18:	fe 01       	movw	r30, r28
    3c1a:	ef 5a       	subi	r30, 0xAF	; 175
    3c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1e:	60 81       	ld	r22, Z
    3c20:	71 81       	ldd	r23, Z+1	; 0x01
    3c22:	82 81       	ldd	r24, Z+2	; 0x02
    3c24:	93 81       	ldd	r25, Z+3	; 0x03
    3c26:	20 e0       	ldi	r18, 0x00	; 0
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	4a ef       	ldi	r20, 0xFA	; 250
    3c2c:	54 e4       	ldi	r21, 0x44	; 68
    3c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c32:	dc 01       	movw	r26, r24
    3c34:	cb 01       	movw	r24, r22
    3c36:	f8 01       	movw	r30, r16
    3c38:	80 83       	st	Z, r24
    3c3a:	91 83       	std	Z+1, r25	; 0x01
    3c3c:	a2 83       	std	Z+2, r26	; 0x02
    3c3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c40:	fe 01       	movw	r30, r28
    3c42:	e3 5b       	subi	r30, 0xB3	; 179
    3c44:	ff 4f       	sbci	r31, 0xFF	; 255
    3c46:	60 81       	ld	r22, Z
    3c48:	71 81       	ldd	r23, Z+1	; 0x01
    3c4a:	82 81       	ldd	r24, Z+2	; 0x02
    3c4c:	93 81       	ldd	r25, Z+3	; 0x03
    3c4e:	20 e0       	ldi	r18, 0x00	; 0
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	40 e8       	ldi	r20, 0x80	; 128
    3c54:	5f e3       	ldi	r21, 0x3F	; 63
    3c56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c5a:	88 23       	and	r24, r24
    3c5c:	44 f4       	brge	.+16     	; 0x3c6e <main+0x1338>
		__ticks = 1;
    3c5e:	fe 01       	movw	r30, r28
    3c60:	e5 5b       	subi	r30, 0xB5	; 181
    3c62:	ff 4f       	sbci	r31, 0xFF	; 255
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	91 83       	std	Z+1, r25	; 0x01
    3c6a:	80 83       	st	Z, r24
    3c6c:	64 c0       	rjmp	.+200    	; 0x3d36 <main+0x1400>
	else if (__tmp > 65535)
    3c6e:	fe 01       	movw	r30, r28
    3c70:	e3 5b       	subi	r30, 0xB3	; 179
    3c72:	ff 4f       	sbci	r31, 0xFF	; 255
    3c74:	60 81       	ld	r22, Z
    3c76:	71 81       	ldd	r23, Z+1	; 0x01
    3c78:	82 81       	ldd	r24, Z+2	; 0x02
    3c7a:	93 81       	ldd	r25, Z+3	; 0x03
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	3f ef       	ldi	r19, 0xFF	; 255
    3c80:	4f e7       	ldi	r20, 0x7F	; 127
    3c82:	57 e4       	ldi	r21, 0x47	; 71
    3c84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c88:	18 16       	cp	r1, r24
    3c8a:	0c f0       	brlt	.+2      	; 0x3c8e <main+0x1358>
    3c8c:	43 c0       	rjmp	.+134    	; 0x3d14 <main+0x13de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c8e:	fe 01       	movw	r30, r28
    3c90:	ef 5a       	subi	r30, 0xAF	; 175
    3c92:	ff 4f       	sbci	r31, 0xFF	; 255
    3c94:	60 81       	ld	r22, Z
    3c96:	71 81       	ldd	r23, Z+1	; 0x01
    3c98:	82 81       	ldd	r24, Z+2	; 0x02
    3c9a:	93 81       	ldd	r25, Z+3	; 0x03
    3c9c:	20 e0       	ldi	r18, 0x00	; 0
    3c9e:	30 e0       	ldi	r19, 0x00	; 0
    3ca0:	40 e2       	ldi	r20, 0x20	; 32
    3ca2:	51 e4       	ldi	r21, 0x41	; 65
    3ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca8:	dc 01       	movw	r26, r24
    3caa:	cb 01       	movw	r24, r22
    3cac:	8e 01       	movw	r16, r28
    3cae:	05 5b       	subi	r16, 0xB5	; 181
    3cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb2:	bc 01       	movw	r22, r24
    3cb4:	cd 01       	movw	r24, r26
    3cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cba:	dc 01       	movw	r26, r24
    3cbc:	cb 01       	movw	r24, r22
    3cbe:	f8 01       	movw	r30, r16
    3cc0:	91 83       	std	Z+1, r25	; 0x01
    3cc2:	80 83       	st	Z, r24
    3cc4:	1f c0       	rjmp	.+62     	; 0x3d04 <main+0x13ce>
    3cc6:	fe 01       	movw	r30, r28
    3cc8:	e7 5b       	subi	r30, 0xB7	; 183
    3cca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ccc:	88 ec       	ldi	r24, 0xC8	; 200
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	91 83       	std	Z+1, r25	; 0x01
    3cd2:	80 83       	st	Z, r24
    3cd4:	fe 01       	movw	r30, r28
    3cd6:	e7 5b       	subi	r30, 0xB7	; 183
    3cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cda:	80 81       	ld	r24, Z
    3cdc:	91 81       	ldd	r25, Z+1	; 0x01
    3cde:	01 97       	sbiw	r24, 0x01	; 1
    3ce0:	f1 f7       	brne	.-4      	; 0x3cde <main+0x13a8>
    3ce2:	fe 01       	movw	r30, r28
    3ce4:	e7 5b       	subi	r30, 0xB7	; 183
    3ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce8:	91 83       	std	Z+1, r25	; 0x01
    3cea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cec:	de 01       	movw	r26, r28
    3cee:	a5 5b       	subi	r26, 0xB5	; 181
    3cf0:	bf 4f       	sbci	r27, 0xFF	; 255
    3cf2:	fe 01       	movw	r30, r28
    3cf4:	e5 5b       	subi	r30, 0xB5	; 181
    3cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf8:	80 81       	ld	r24, Z
    3cfa:	91 81       	ldd	r25, Z+1	; 0x01
    3cfc:	01 97       	sbiw	r24, 0x01	; 1
    3cfe:	11 96       	adiw	r26, 0x01	; 1
    3d00:	9c 93       	st	X, r25
    3d02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d04:	fe 01       	movw	r30, r28
    3d06:	e5 5b       	subi	r30, 0xB5	; 181
    3d08:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0a:	80 81       	ld	r24, Z
    3d0c:	91 81       	ldd	r25, Z+1	; 0x01
    3d0e:	00 97       	sbiw	r24, 0x00	; 0
    3d10:	d1 f6       	brne	.-76     	; 0x3cc6 <main+0x1390>
    3d12:	27 c0       	rjmp	.+78     	; 0x3d62 <main+0x142c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d14:	8e 01       	movw	r16, r28
    3d16:	05 5b       	subi	r16, 0xB5	; 181
    3d18:	1f 4f       	sbci	r17, 0xFF	; 255
    3d1a:	fe 01       	movw	r30, r28
    3d1c:	e3 5b       	subi	r30, 0xB3	; 179
    3d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d20:	60 81       	ld	r22, Z
    3d22:	71 81       	ldd	r23, Z+1	; 0x01
    3d24:	82 81       	ldd	r24, Z+2	; 0x02
    3d26:	93 81       	ldd	r25, Z+3	; 0x03
    3d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d2c:	dc 01       	movw	r26, r24
    3d2e:	cb 01       	movw	r24, r22
    3d30:	f8 01       	movw	r30, r16
    3d32:	91 83       	std	Z+1, r25	; 0x01
    3d34:	80 83       	st	Z, r24
    3d36:	de 01       	movw	r26, r28
    3d38:	a9 5b       	subi	r26, 0xB9	; 185
    3d3a:	bf 4f       	sbci	r27, 0xFF	; 255
    3d3c:	fe 01       	movw	r30, r28
    3d3e:	e5 5b       	subi	r30, 0xB5	; 181
    3d40:	ff 4f       	sbci	r31, 0xFF	; 255
    3d42:	80 81       	ld	r24, Z
    3d44:	91 81       	ldd	r25, Z+1	; 0x01
    3d46:	8d 93       	st	X+, r24
    3d48:	9c 93       	st	X, r25
    3d4a:	fe 01       	movw	r30, r28
    3d4c:	e9 5b       	subi	r30, 0xB9	; 185
    3d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d50:	80 81       	ld	r24, Z
    3d52:	91 81       	ldd	r25, Z+1	; 0x01
    3d54:	01 97       	sbiw	r24, 0x01	; 1
    3d56:	f1 f7       	brne	.-4      	; 0x3d54 <main+0x141e>
    3d58:	fe 01       	movw	r30, r28
    3d5a:	e9 5b       	subi	r30, 0xB9	; 185
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	91 83       	std	Z+1, r25	; 0x01
    3d60:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_void_Clear_Screen();
    3d62:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
    3d66:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <main+0x4a>

			break;
	case 20:
			DIO_U8_Set_Pin_value(PORTD_ID,5,0);
    3d6a:	83 e0       	ldi	r24, 0x03	; 3
    3d6c:	65 e0       	ldi	r22, 0x05	; 5
    3d6e:	40 e0       	ldi	r20, 0x00	; 0
    3d70:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
			LCD_void_Write_String("    Room2       ");
    3d74:	8b e5       	ldi	r24, 0x5B	; 91
    3d76:	91 e0       	ldi	r25, 0x01	; 1
    3d78:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
			LCD_void_DDRAM_Address(1,0);
    3d7c:	81 e0       	ldi	r24, 0x01	; 1
    3d7e:	60 e0       	ldi	r22, 0x00	; 0
    3d80:	0e 94 ad 11 	call	0x235a	; 0x235a <LCD_void_DDRAM_Address>
			LCD_void_Write_String("   turned OFF   ");
    3d84:	8a e4       	ldi	r24, 0x4A	; 74
    3d86:	91 e0       	ldi	r25, 0x01	; 1
    3d88:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
    3d8c:	fe 01       	movw	r30, r28
    3d8e:	ed 5b       	subi	r30, 0xBD	; 189
    3d90:	ff 4f       	sbci	r31, 0xFF	; 255
    3d92:	80 e0       	ldi	r24, 0x00	; 0
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	aa e7       	ldi	r26, 0x7A	; 122
    3d98:	b4 e4       	ldi	r27, 0x44	; 68
    3d9a:	80 83       	st	Z, r24
    3d9c:	91 83       	std	Z+1, r25	; 0x01
    3d9e:	a2 83       	std	Z+2, r26	; 0x02
    3da0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3da2:	8e 01       	movw	r16, r28
    3da4:	01 5c       	subi	r16, 0xC1	; 193
    3da6:	1f 4f       	sbci	r17, 0xFF	; 255
    3da8:	fe 01       	movw	r30, r28
    3daa:	ed 5b       	subi	r30, 0xBD	; 189
    3dac:	ff 4f       	sbci	r31, 0xFF	; 255
    3dae:	60 81       	ld	r22, Z
    3db0:	71 81       	ldd	r23, Z+1	; 0x01
    3db2:	82 81       	ldd	r24, Z+2	; 0x02
    3db4:	93 81       	ldd	r25, Z+3	; 0x03
    3db6:	20 e0       	ldi	r18, 0x00	; 0
    3db8:	30 e0       	ldi	r19, 0x00	; 0
    3dba:	4a ef       	ldi	r20, 0xFA	; 250
    3dbc:	54 e4       	ldi	r21, 0x44	; 68
    3dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	f8 01       	movw	r30, r16
    3dc8:	80 83       	st	Z, r24
    3dca:	91 83       	std	Z+1, r25	; 0x01
    3dcc:	a2 83       	std	Z+2, r26	; 0x02
    3dce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	ff 96       	adiw	r30, 0x3f	; 63
    3dd4:	60 81       	ld	r22, Z
    3dd6:	71 81       	ldd	r23, Z+1	; 0x01
    3dd8:	82 81       	ldd	r24, Z+2	; 0x02
    3dda:	93 81       	ldd	r25, Z+3	; 0x03
    3ddc:	20 e0       	ldi	r18, 0x00	; 0
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    3de0:	40 e8       	ldi	r20, 0x80	; 128
    3de2:	5f e3       	ldi	r21, 0x3F	; 63
    3de4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3de8:	88 23       	and	r24, r24
    3dea:	2c f4       	brge	.+10     	; 0x3df6 <main+0x14c0>
		__ticks = 1;
    3dec:	81 e0       	ldi	r24, 0x01	; 1
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	9e af       	std	Y+62, r25	; 0x3e
    3df2:	8d af       	std	Y+61, r24	; 0x3d
    3df4:	46 c0       	rjmp	.+140    	; 0x3e82 <main+0x154c>
	else if (__tmp > 65535)
    3df6:	fe 01       	movw	r30, r28
    3df8:	ff 96       	adiw	r30, 0x3f	; 63
    3dfa:	60 81       	ld	r22, Z
    3dfc:	71 81       	ldd	r23, Z+1	; 0x01
    3dfe:	82 81       	ldd	r24, Z+2	; 0x02
    3e00:	93 81       	ldd	r25, Z+3	; 0x03
    3e02:	20 e0       	ldi	r18, 0x00	; 0
    3e04:	3f ef       	ldi	r19, 0xFF	; 255
    3e06:	4f e7       	ldi	r20, 0x7F	; 127
    3e08:	57 e4       	ldi	r21, 0x47	; 71
    3e0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e0e:	18 16       	cp	r1, r24
    3e10:	64 f5       	brge	.+88     	; 0x3e6a <main+0x1534>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e12:	fe 01       	movw	r30, r28
    3e14:	ed 5b       	subi	r30, 0xBD	; 189
    3e16:	ff 4f       	sbci	r31, 0xFF	; 255
    3e18:	60 81       	ld	r22, Z
    3e1a:	71 81       	ldd	r23, Z+1	; 0x01
    3e1c:	82 81       	ldd	r24, Z+2	; 0x02
    3e1e:	93 81       	ldd	r25, Z+3	; 0x03
    3e20:	20 e0       	ldi	r18, 0x00	; 0
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	40 e2       	ldi	r20, 0x20	; 32
    3e26:	51 e4       	ldi	r21, 0x41	; 65
    3e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e2c:	dc 01       	movw	r26, r24
    3e2e:	cb 01       	movw	r24, r22
    3e30:	bc 01       	movw	r22, r24
    3e32:	cd 01       	movw	r24, r26
    3e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e38:	dc 01       	movw	r26, r24
    3e3a:	cb 01       	movw	r24, r22
    3e3c:	9e af       	std	Y+62, r25	; 0x3e
    3e3e:	8d af       	std	Y+61, r24	; 0x3d
    3e40:	0f c0       	rjmp	.+30     	; 0x3e60 <main+0x152a>
    3e42:	88 ec       	ldi	r24, 0xC8	; 200
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	9c af       	std	Y+60, r25	; 0x3c
    3e48:	8b af       	std	Y+59, r24	; 0x3b
    3e4a:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e4c:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e4e:	01 97       	sbiw	r24, 0x01	; 1
    3e50:	f1 f7       	brne	.-4      	; 0x3e4e <main+0x1518>
    3e52:	9c af       	std	Y+60, r25	; 0x3c
    3e54:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e56:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e58:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e5a:	01 97       	sbiw	r24, 0x01	; 1
    3e5c:	9e af       	std	Y+62, r25	; 0x3e
    3e5e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e60:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e62:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e64:	00 97       	sbiw	r24, 0x00	; 0
    3e66:	69 f7       	brne	.-38     	; 0x3e42 <main+0x150c>
    3e68:	16 c0       	rjmp	.+44     	; 0x3e96 <main+0x1560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e6a:	fe 01       	movw	r30, r28
    3e6c:	ff 96       	adiw	r30, 0x3f	; 63
    3e6e:	60 81       	ld	r22, Z
    3e70:	71 81       	ldd	r23, Z+1	; 0x01
    3e72:	82 81       	ldd	r24, Z+2	; 0x02
    3e74:	93 81       	ldd	r25, Z+3	; 0x03
    3e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e7a:	dc 01       	movw	r26, r24
    3e7c:	cb 01       	movw	r24, r22
    3e7e:	9e af       	std	Y+62, r25	; 0x3e
    3e80:	8d af       	std	Y+61, r24	; 0x3d
    3e82:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e84:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e86:	9a af       	std	Y+58, r25	; 0x3a
    3e88:	89 af       	std	Y+57, r24	; 0x39
    3e8a:	89 ad       	ldd	r24, Y+57	; 0x39
    3e8c:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e8e:	01 97       	sbiw	r24, 0x01	; 1
    3e90:	f1 f7       	brne	.-4      	; 0x3e8e <main+0x1558>
    3e92:	9a af       	std	Y+58, r25	; 0x3a
    3e94:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1000);
			LCD_void_Clear_Screen();
    3e96:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
    3e9a:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <main+0x4a>

			break;
	case 30:
			DIO_U8_Set_Pin_value(PORTD_ID,6,0);
    3e9e:	83 e0       	ldi	r24, 0x03	; 3
    3ea0:	66 e0       	ldi	r22, 0x06	; 6
    3ea2:	40 e0       	ldi	r20, 0x00	; 0
    3ea4:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
			LCD_void_Write_String("    Room3       ");
    3ea8:	8c e6       	ldi	r24, 0x6C	; 108
    3eaa:	91 e0       	ldi	r25, 0x01	; 1
    3eac:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
			LCD_void_DDRAM_Address(1,0);
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	60 e0       	ldi	r22, 0x00	; 0
    3eb4:	0e 94 ad 11 	call	0x235a	; 0x235a <LCD_void_DDRAM_Address>
			LCD_void_Write_String("   turned OFF   ");
    3eb8:	8a e4       	ldi	r24, 0x4A	; 74
    3eba:	91 e0       	ldi	r25, 0x01	; 1
    3ebc:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	aa e7       	ldi	r26, 0x7A	; 122
    3ec6:	b4 e4       	ldi	r27, 0x44	; 68
    3ec8:	8d ab       	std	Y+53, r24	; 0x35
    3eca:	9e ab       	std	Y+54, r25	; 0x36
    3ecc:	af ab       	std	Y+55, r26	; 0x37
    3ece:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ed0:	6d a9       	ldd	r22, Y+53	; 0x35
    3ed2:	7e a9       	ldd	r23, Y+54	; 0x36
    3ed4:	8f a9       	ldd	r24, Y+55	; 0x37
    3ed6:	98 ad       	ldd	r25, Y+56	; 0x38
    3ed8:	20 e0       	ldi	r18, 0x00	; 0
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	4a ef       	ldi	r20, 0xFA	; 250
    3ede:	54 e4       	ldi	r21, 0x44	; 68
    3ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee4:	dc 01       	movw	r26, r24
    3ee6:	cb 01       	movw	r24, r22
    3ee8:	89 ab       	std	Y+49, r24	; 0x31
    3eea:	9a ab       	std	Y+50, r25	; 0x32
    3eec:	ab ab       	std	Y+51, r26	; 0x33
    3eee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3ef0:	69 a9       	ldd	r22, Y+49	; 0x31
    3ef2:	7a a9       	ldd	r23, Y+50	; 0x32
    3ef4:	8b a9       	ldd	r24, Y+51	; 0x33
    3ef6:	9c a9       	ldd	r25, Y+52	; 0x34
    3ef8:	20 e0       	ldi	r18, 0x00	; 0
    3efa:	30 e0       	ldi	r19, 0x00	; 0
    3efc:	40 e8       	ldi	r20, 0x80	; 128
    3efe:	5f e3       	ldi	r21, 0x3F	; 63
    3f00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f04:	88 23       	and	r24, r24
    3f06:	2c f4       	brge	.+10     	; 0x3f12 <main+0x15dc>
		__ticks = 1;
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	98 ab       	std	Y+48, r25	; 0x30
    3f0e:	8f a7       	std	Y+47, r24	; 0x2f
    3f10:	3f c0       	rjmp	.+126    	; 0x3f90 <main+0x165a>
	else if (__tmp > 65535)
    3f12:	69 a9       	ldd	r22, Y+49	; 0x31
    3f14:	7a a9       	ldd	r23, Y+50	; 0x32
    3f16:	8b a9       	ldd	r24, Y+51	; 0x33
    3f18:	9c a9       	ldd	r25, Y+52	; 0x34
    3f1a:	20 e0       	ldi	r18, 0x00	; 0
    3f1c:	3f ef       	ldi	r19, 0xFF	; 255
    3f1e:	4f e7       	ldi	r20, 0x7F	; 127
    3f20:	57 e4       	ldi	r21, 0x47	; 71
    3f22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f26:	18 16       	cp	r1, r24
    3f28:	4c f5       	brge	.+82     	; 0x3f7c <main+0x1646>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f2a:	6d a9       	ldd	r22, Y+53	; 0x35
    3f2c:	7e a9       	ldd	r23, Y+54	; 0x36
    3f2e:	8f a9       	ldd	r24, Y+55	; 0x37
    3f30:	98 ad       	ldd	r25, Y+56	; 0x38
    3f32:	20 e0       	ldi	r18, 0x00	; 0
    3f34:	30 e0       	ldi	r19, 0x00	; 0
    3f36:	40 e2       	ldi	r20, 0x20	; 32
    3f38:	51 e4       	ldi	r21, 0x41	; 65
    3f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f3e:	dc 01       	movw	r26, r24
    3f40:	cb 01       	movw	r24, r22
    3f42:	bc 01       	movw	r22, r24
    3f44:	cd 01       	movw	r24, r26
    3f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f4a:	dc 01       	movw	r26, r24
    3f4c:	cb 01       	movw	r24, r22
    3f4e:	98 ab       	std	Y+48, r25	; 0x30
    3f50:	8f a7       	std	Y+47, r24	; 0x2f
    3f52:	0f c0       	rjmp	.+30     	; 0x3f72 <main+0x163c>
    3f54:	88 ec       	ldi	r24, 0xC8	; 200
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	9e a7       	std	Y+46, r25	; 0x2e
    3f5a:	8d a7       	std	Y+45, r24	; 0x2d
    3f5c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f5e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f60:	01 97       	sbiw	r24, 0x01	; 1
    3f62:	f1 f7       	brne	.-4      	; 0x3f60 <main+0x162a>
    3f64:	9e a7       	std	Y+46, r25	; 0x2e
    3f66:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f68:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f6a:	98 a9       	ldd	r25, Y+48	; 0x30
    3f6c:	01 97       	sbiw	r24, 0x01	; 1
    3f6e:	98 ab       	std	Y+48, r25	; 0x30
    3f70:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f72:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f74:	98 a9       	ldd	r25, Y+48	; 0x30
    3f76:	00 97       	sbiw	r24, 0x00	; 0
    3f78:	69 f7       	brne	.-38     	; 0x3f54 <main+0x161e>
    3f7a:	14 c0       	rjmp	.+40     	; 0x3fa4 <main+0x166e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f7c:	69 a9       	ldd	r22, Y+49	; 0x31
    3f7e:	7a a9       	ldd	r23, Y+50	; 0x32
    3f80:	8b a9       	ldd	r24, Y+51	; 0x33
    3f82:	9c a9       	ldd	r25, Y+52	; 0x34
    3f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f88:	dc 01       	movw	r26, r24
    3f8a:	cb 01       	movw	r24, r22
    3f8c:	98 ab       	std	Y+48, r25	; 0x30
    3f8e:	8f a7       	std	Y+47, r24	; 0x2f
    3f90:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f92:	98 a9       	ldd	r25, Y+48	; 0x30
    3f94:	9c a7       	std	Y+44, r25	; 0x2c
    3f96:	8b a7       	std	Y+43, r24	; 0x2b
    3f98:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f9c:	01 97       	sbiw	r24, 0x01	; 1
    3f9e:	f1 f7       	brne	.-4      	; 0x3f9c <main+0x1666>
    3fa0:	9c a7       	std	Y+44, r25	; 0x2c
    3fa2:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			LCD_void_Clear_Screen();
    3fa4:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
    3fa8:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <main+0x4a>

			break;
	case 40:
			DIO_U8_Set_Pin_value(PORTD_ID,7,0);
    3fac:	83 e0       	ldi	r24, 0x03	; 3
    3fae:	67 e0       	ldi	r22, 0x07	; 7
    3fb0:	40 e0       	ldi	r20, 0x00	; 0
    3fb2:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
			LCD_void_Write_String("    Room4       ");
    3fb6:	8d e7       	ldi	r24, 0x7D	; 125
    3fb8:	91 e0       	ldi	r25, 0x01	; 1
    3fba:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
			LCD_void_DDRAM_Address(1,0);
    3fbe:	81 e0       	ldi	r24, 0x01	; 1
    3fc0:	60 e0       	ldi	r22, 0x00	; 0
    3fc2:	0e 94 ad 11 	call	0x235a	; 0x235a <LCD_void_DDRAM_Address>
			LCD_void_Write_String("   turned OFF   ");
    3fc6:	8a e4       	ldi	r24, 0x4A	; 74
    3fc8:	91 e0       	ldi	r25, 0x01	; 1
    3fca:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
    3fce:	80 e0       	ldi	r24, 0x00	; 0
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	aa e7       	ldi	r26, 0x7A	; 122
    3fd4:	b4 e4       	ldi	r27, 0x44	; 68
    3fd6:	8f a3       	std	Y+39, r24	; 0x27
    3fd8:	98 a7       	std	Y+40, r25	; 0x28
    3fda:	a9 a7       	std	Y+41, r26	; 0x29
    3fdc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fde:	6f a1       	ldd	r22, Y+39	; 0x27
    3fe0:	78 a5       	ldd	r23, Y+40	; 0x28
    3fe2:	89 a5       	ldd	r24, Y+41	; 0x29
    3fe4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fe6:	20 e0       	ldi	r18, 0x00	; 0
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	4a ef       	ldi	r20, 0xFA	; 250
    3fec:	54 e4       	ldi	r21, 0x44	; 68
    3fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ff2:	dc 01       	movw	r26, r24
    3ff4:	cb 01       	movw	r24, r22
    3ff6:	8b a3       	std	Y+35, r24	; 0x23
    3ff8:	9c a3       	std	Y+36, r25	; 0x24
    3ffa:	ad a3       	std	Y+37, r26	; 0x25
    3ffc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ffe:	6b a1       	ldd	r22, Y+35	; 0x23
    4000:	7c a1       	ldd	r23, Y+36	; 0x24
    4002:	8d a1       	ldd	r24, Y+37	; 0x25
    4004:	9e a1       	ldd	r25, Y+38	; 0x26
    4006:	20 e0       	ldi	r18, 0x00	; 0
    4008:	30 e0       	ldi	r19, 0x00	; 0
    400a:	40 e8       	ldi	r20, 0x80	; 128
    400c:	5f e3       	ldi	r21, 0x3F	; 63
    400e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4012:	88 23       	and	r24, r24
    4014:	2c f4       	brge	.+10     	; 0x4020 <main+0x16ea>
		__ticks = 1;
    4016:	81 e0       	ldi	r24, 0x01	; 1
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	9a a3       	std	Y+34, r25	; 0x22
    401c:	89 a3       	std	Y+33, r24	; 0x21
    401e:	3f c0       	rjmp	.+126    	; 0x409e <main+0x1768>
	else if (__tmp > 65535)
    4020:	6b a1       	ldd	r22, Y+35	; 0x23
    4022:	7c a1       	ldd	r23, Y+36	; 0x24
    4024:	8d a1       	ldd	r24, Y+37	; 0x25
    4026:	9e a1       	ldd	r25, Y+38	; 0x26
    4028:	20 e0       	ldi	r18, 0x00	; 0
    402a:	3f ef       	ldi	r19, 0xFF	; 255
    402c:	4f e7       	ldi	r20, 0x7F	; 127
    402e:	57 e4       	ldi	r21, 0x47	; 71
    4030:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4034:	18 16       	cp	r1, r24
    4036:	4c f5       	brge	.+82     	; 0x408a <main+0x1754>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4038:	6f a1       	ldd	r22, Y+39	; 0x27
    403a:	78 a5       	ldd	r23, Y+40	; 0x28
    403c:	89 a5       	ldd	r24, Y+41	; 0x29
    403e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4040:	20 e0       	ldi	r18, 0x00	; 0
    4042:	30 e0       	ldi	r19, 0x00	; 0
    4044:	40 e2       	ldi	r20, 0x20	; 32
    4046:	51 e4       	ldi	r21, 0x41	; 65
    4048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404c:	dc 01       	movw	r26, r24
    404e:	cb 01       	movw	r24, r22
    4050:	bc 01       	movw	r22, r24
    4052:	cd 01       	movw	r24, r26
    4054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4058:	dc 01       	movw	r26, r24
    405a:	cb 01       	movw	r24, r22
    405c:	9a a3       	std	Y+34, r25	; 0x22
    405e:	89 a3       	std	Y+33, r24	; 0x21
    4060:	0f c0       	rjmp	.+30     	; 0x4080 <main+0x174a>
    4062:	88 ec       	ldi	r24, 0xC8	; 200
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	98 a3       	std	Y+32, r25	; 0x20
    4068:	8f 8f       	std	Y+31, r24	; 0x1f
    406a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    406c:	98 a1       	ldd	r25, Y+32	; 0x20
    406e:	01 97       	sbiw	r24, 0x01	; 1
    4070:	f1 f7       	brne	.-4      	; 0x406e <main+0x1738>
    4072:	98 a3       	std	Y+32, r25	; 0x20
    4074:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4076:	89 a1       	ldd	r24, Y+33	; 0x21
    4078:	9a a1       	ldd	r25, Y+34	; 0x22
    407a:	01 97       	sbiw	r24, 0x01	; 1
    407c:	9a a3       	std	Y+34, r25	; 0x22
    407e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4080:	89 a1       	ldd	r24, Y+33	; 0x21
    4082:	9a a1       	ldd	r25, Y+34	; 0x22
    4084:	00 97       	sbiw	r24, 0x00	; 0
    4086:	69 f7       	brne	.-38     	; 0x4062 <main+0x172c>
    4088:	14 c0       	rjmp	.+40     	; 0x40b2 <main+0x177c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    408a:	6b a1       	ldd	r22, Y+35	; 0x23
    408c:	7c a1       	ldd	r23, Y+36	; 0x24
    408e:	8d a1       	ldd	r24, Y+37	; 0x25
    4090:	9e a1       	ldd	r25, Y+38	; 0x26
    4092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4096:	dc 01       	movw	r26, r24
    4098:	cb 01       	movw	r24, r22
    409a:	9a a3       	std	Y+34, r25	; 0x22
    409c:	89 a3       	std	Y+33, r24	; 0x21
    409e:	89 a1       	ldd	r24, Y+33	; 0x21
    40a0:	9a a1       	ldd	r25, Y+34	; 0x22
    40a2:	9e 8f       	std	Y+30, r25	; 0x1e
    40a4:	8d 8f       	std	Y+29, r24	; 0x1d
    40a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    40aa:	01 97       	sbiw	r24, 0x01	; 1
    40ac:	f1 f7       	brne	.-4      	; 0x40aa <main+0x1774>
    40ae:	9e 8f       	std	Y+30, r25	; 0x1e
    40b0:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			LCD_void_Clear_Screen();
    40b2:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
    40b6:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <main+0x4a>

			break;
	case 50:
			DIO_U8_Set_Pin_value(PORTD_ID,0,0);
    40ba:	83 e0       	ldi	r24, 0x03	; 3
    40bc:	60 e0       	ldi	r22, 0x00	; 0
    40be:	40 e0       	ldi	r20, 0x00	; 0
    40c0:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
			LCD_void_Write_String("TV turned OFF   ");
    40c4:	8e e8       	ldi	r24, 0x8E	; 142
    40c6:	91 e0       	ldi	r25, 0x01	; 1
    40c8:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
    40cc:	80 e0       	ldi	r24, 0x00	; 0
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	aa e7       	ldi	r26, 0x7A	; 122
    40d2:	b4 e4       	ldi	r27, 0x44	; 68
    40d4:	89 8f       	std	Y+25, r24	; 0x19
    40d6:	9a 8f       	std	Y+26, r25	; 0x1a
    40d8:	ab 8f       	std	Y+27, r26	; 0x1b
    40da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40dc:	69 8d       	ldd	r22, Y+25	; 0x19
    40de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40e4:	20 e0       	ldi	r18, 0x00	; 0
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	4a ef       	ldi	r20, 0xFA	; 250
    40ea:	54 e4       	ldi	r21, 0x44	; 68
    40ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f0:	dc 01       	movw	r26, r24
    40f2:	cb 01       	movw	r24, r22
    40f4:	8d 8b       	std	Y+21, r24	; 0x15
    40f6:	9e 8b       	std	Y+22, r25	; 0x16
    40f8:	af 8b       	std	Y+23, r26	; 0x17
    40fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    40fc:	6d 89       	ldd	r22, Y+21	; 0x15
    40fe:	7e 89       	ldd	r23, Y+22	; 0x16
    4100:	8f 89       	ldd	r24, Y+23	; 0x17
    4102:	98 8d       	ldd	r25, Y+24	; 0x18
    4104:	20 e0       	ldi	r18, 0x00	; 0
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	40 e8       	ldi	r20, 0x80	; 128
    410a:	5f e3       	ldi	r21, 0x3F	; 63
    410c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4110:	88 23       	and	r24, r24
    4112:	2c f4       	brge	.+10     	; 0x411e <main+0x17e8>
		__ticks = 1;
    4114:	81 e0       	ldi	r24, 0x01	; 1
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	9c 8b       	std	Y+20, r25	; 0x14
    411a:	8b 8b       	std	Y+19, r24	; 0x13
    411c:	3f c0       	rjmp	.+126    	; 0x419c <main+0x1866>
	else if (__tmp > 65535)
    411e:	6d 89       	ldd	r22, Y+21	; 0x15
    4120:	7e 89       	ldd	r23, Y+22	; 0x16
    4122:	8f 89       	ldd	r24, Y+23	; 0x17
    4124:	98 8d       	ldd	r25, Y+24	; 0x18
    4126:	20 e0       	ldi	r18, 0x00	; 0
    4128:	3f ef       	ldi	r19, 0xFF	; 255
    412a:	4f e7       	ldi	r20, 0x7F	; 127
    412c:	57 e4       	ldi	r21, 0x47	; 71
    412e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4132:	18 16       	cp	r1, r24
    4134:	4c f5       	brge	.+82     	; 0x4188 <main+0x1852>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4136:	69 8d       	ldd	r22, Y+25	; 0x19
    4138:	7a 8d       	ldd	r23, Y+26	; 0x1a
    413a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    413c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    413e:	20 e0       	ldi	r18, 0x00	; 0
    4140:	30 e0       	ldi	r19, 0x00	; 0
    4142:	40 e2       	ldi	r20, 0x20	; 32
    4144:	51 e4       	ldi	r21, 0x41	; 65
    4146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    414a:	dc 01       	movw	r26, r24
    414c:	cb 01       	movw	r24, r22
    414e:	bc 01       	movw	r22, r24
    4150:	cd 01       	movw	r24, r26
    4152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4156:	dc 01       	movw	r26, r24
    4158:	cb 01       	movw	r24, r22
    415a:	9c 8b       	std	Y+20, r25	; 0x14
    415c:	8b 8b       	std	Y+19, r24	; 0x13
    415e:	0f c0       	rjmp	.+30     	; 0x417e <main+0x1848>
    4160:	88 ec       	ldi	r24, 0xC8	; 200
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	9a 8b       	std	Y+18, r25	; 0x12
    4166:	89 8b       	std	Y+17, r24	; 0x11
    4168:	89 89       	ldd	r24, Y+17	; 0x11
    416a:	9a 89       	ldd	r25, Y+18	; 0x12
    416c:	01 97       	sbiw	r24, 0x01	; 1
    416e:	f1 f7       	brne	.-4      	; 0x416c <main+0x1836>
    4170:	9a 8b       	std	Y+18, r25	; 0x12
    4172:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4174:	8b 89       	ldd	r24, Y+19	; 0x13
    4176:	9c 89       	ldd	r25, Y+20	; 0x14
    4178:	01 97       	sbiw	r24, 0x01	; 1
    417a:	9c 8b       	std	Y+20, r25	; 0x14
    417c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    417e:	8b 89       	ldd	r24, Y+19	; 0x13
    4180:	9c 89       	ldd	r25, Y+20	; 0x14
    4182:	00 97       	sbiw	r24, 0x00	; 0
    4184:	69 f7       	brne	.-38     	; 0x4160 <main+0x182a>
    4186:	14 c0       	rjmp	.+40     	; 0x41b0 <main+0x187a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4188:	6d 89       	ldd	r22, Y+21	; 0x15
    418a:	7e 89       	ldd	r23, Y+22	; 0x16
    418c:	8f 89       	ldd	r24, Y+23	; 0x17
    418e:	98 8d       	ldd	r25, Y+24	; 0x18
    4190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4194:	dc 01       	movw	r26, r24
    4196:	cb 01       	movw	r24, r22
    4198:	9c 8b       	std	Y+20, r25	; 0x14
    419a:	8b 8b       	std	Y+19, r24	; 0x13
    419c:	8b 89       	ldd	r24, Y+19	; 0x13
    419e:	9c 89       	ldd	r25, Y+20	; 0x14
    41a0:	98 8b       	std	Y+16, r25	; 0x10
    41a2:	8f 87       	std	Y+15, r24	; 0x0f
    41a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41a6:	98 89       	ldd	r25, Y+16	; 0x10
    41a8:	01 97       	sbiw	r24, 0x01	; 1
    41aa:	f1 f7       	brne	.-4      	; 0x41a8 <main+0x1872>
    41ac:	98 8b       	std	Y+16, r25	; 0x10
    41ae:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			LCD_void_Clear_Screen();
    41b0:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
    41b4:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <main+0x4a>
			break;
	case 60:
				LCD_void_Clear_Screen();
    41b8:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
				DIO_U8_Set_Pin_value(PORTD_ID,1,0);
    41bc:	83 e0       	ldi	r24, 0x03	; 3
    41be:	61 e0       	ldi	r22, 0x01	; 1
    41c0:	40 e0       	ldi	r20, 0x00	; 0
    41c2:	0e 94 01 09 	call	0x1202	; 0x1202 <DIO_U8_Set_Pin_value>
				LCD_void_Write_String("   Air_Cond.   ");
    41c6:	80 e6       	ldi	r24, 0x60	; 96
    41c8:	90 e0       	ldi	r25, 0x00	; 0
    41ca:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
				LCD_void_DDRAM_Address(1,0);
    41ce:	81 e0       	ldi	r24, 0x01	; 1
    41d0:	60 e0       	ldi	r22, 0x00	; 0
    41d2:	0e 94 ad 11 	call	0x235a	; 0x235a <LCD_void_DDRAM_Address>
				LCD_void_Write_String("   Turned OFF   ");
    41d6:	80 e7       	ldi	r24, 0x70	; 112
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_void_Write_String>
    41de:	80 e0       	ldi	r24, 0x00	; 0
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	aa e7       	ldi	r26, 0x7A	; 122
    41e4:	b4 e4       	ldi	r27, 0x44	; 68
    41e6:	8b 87       	std	Y+11, r24	; 0x0b
    41e8:	9c 87       	std	Y+12, r25	; 0x0c
    41ea:	ad 87       	std	Y+13, r26	; 0x0d
    41ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    41f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    41f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    41f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    41f6:	20 e0       	ldi	r18, 0x00	; 0
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	4a ef       	ldi	r20, 0xFA	; 250
    41fc:	54 e4       	ldi	r21, 0x44	; 68
    41fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4202:	dc 01       	movw	r26, r24
    4204:	cb 01       	movw	r24, r22
    4206:	8f 83       	std	Y+7, r24	; 0x07
    4208:	98 87       	std	Y+8, r25	; 0x08
    420a:	a9 87       	std	Y+9, r26	; 0x09
    420c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    420e:	6f 81       	ldd	r22, Y+7	; 0x07
    4210:	78 85       	ldd	r23, Y+8	; 0x08
    4212:	89 85       	ldd	r24, Y+9	; 0x09
    4214:	9a 85       	ldd	r25, Y+10	; 0x0a
    4216:	20 e0       	ldi	r18, 0x00	; 0
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	40 e8       	ldi	r20, 0x80	; 128
    421c:	5f e3       	ldi	r21, 0x3F	; 63
    421e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4222:	88 23       	and	r24, r24
    4224:	2c f4       	brge	.+10     	; 0x4230 <main+0x18fa>
		__ticks = 1;
    4226:	81 e0       	ldi	r24, 0x01	; 1
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	9e 83       	std	Y+6, r25	; 0x06
    422c:	8d 83       	std	Y+5, r24	; 0x05
    422e:	3f c0       	rjmp	.+126    	; 0x42ae <main+0x1978>
	else if (__tmp > 65535)
    4230:	6f 81       	ldd	r22, Y+7	; 0x07
    4232:	78 85       	ldd	r23, Y+8	; 0x08
    4234:	89 85       	ldd	r24, Y+9	; 0x09
    4236:	9a 85       	ldd	r25, Y+10	; 0x0a
    4238:	20 e0       	ldi	r18, 0x00	; 0
    423a:	3f ef       	ldi	r19, 0xFF	; 255
    423c:	4f e7       	ldi	r20, 0x7F	; 127
    423e:	57 e4       	ldi	r21, 0x47	; 71
    4240:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4244:	18 16       	cp	r1, r24
    4246:	4c f5       	brge	.+82     	; 0x429a <main+0x1964>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4248:	6b 85       	ldd	r22, Y+11	; 0x0b
    424a:	7c 85       	ldd	r23, Y+12	; 0x0c
    424c:	8d 85       	ldd	r24, Y+13	; 0x0d
    424e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4250:	20 e0       	ldi	r18, 0x00	; 0
    4252:	30 e0       	ldi	r19, 0x00	; 0
    4254:	40 e2       	ldi	r20, 0x20	; 32
    4256:	51 e4       	ldi	r21, 0x41	; 65
    4258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	bc 01       	movw	r22, r24
    4262:	cd 01       	movw	r24, r26
    4264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4268:	dc 01       	movw	r26, r24
    426a:	cb 01       	movw	r24, r22
    426c:	9e 83       	std	Y+6, r25	; 0x06
    426e:	8d 83       	std	Y+5, r24	; 0x05
    4270:	0f c0       	rjmp	.+30     	; 0x4290 <main+0x195a>
    4272:	88 ec       	ldi	r24, 0xC8	; 200
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	9c 83       	std	Y+4, r25	; 0x04
    4278:	8b 83       	std	Y+3, r24	; 0x03
    427a:	8b 81       	ldd	r24, Y+3	; 0x03
    427c:	9c 81       	ldd	r25, Y+4	; 0x04
    427e:	01 97       	sbiw	r24, 0x01	; 1
    4280:	f1 f7       	brne	.-4      	; 0x427e <main+0x1948>
    4282:	9c 83       	std	Y+4, r25	; 0x04
    4284:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4286:	8d 81       	ldd	r24, Y+5	; 0x05
    4288:	9e 81       	ldd	r25, Y+6	; 0x06
    428a:	01 97       	sbiw	r24, 0x01	; 1
    428c:	9e 83       	std	Y+6, r25	; 0x06
    428e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4290:	8d 81       	ldd	r24, Y+5	; 0x05
    4292:	9e 81       	ldd	r25, Y+6	; 0x06
    4294:	00 97       	sbiw	r24, 0x00	; 0
    4296:	69 f7       	brne	.-38     	; 0x4272 <main+0x193c>
    4298:	14 c0       	rjmp	.+40     	; 0x42c2 <main+0x198c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    429a:	6f 81       	ldd	r22, Y+7	; 0x07
    429c:	78 85       	ldd	r23, Y+8	; 0x08
    429e:	89 85       	ldd	r24, Y+9	; 0x09
    42a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42a6:	dc 01       	movw	r26, r24
    42a8:	cb 01       	movw	r24, r22
    42aa:	9e 83       	std	Y+6, r25	; 0x06
    42ac:	8d 83       	std	Y+5, r24	; 0x05
    42ae:	8d 81       	ldd	r24, Y+5	; 0x05
    42b0:	9e 81       	ldd	r25, Y+6	; 0x06
    42b2:	9a 83       	std	Y+2, r25	; 0x02
    42b4:	89 83       	std	Y+1, r24	; 0x01
    42b6:	89 81       	ldd	r24, Y+1	; 0x01
    42b8:	9a 81       	ldd	r25, Y+2	; 0x02
    42ba:	01 97       	sbiw	r24, 0x01	; 1
    42bc:	f1 f7       	brne	.-4      	; 0x42ba <main+0x1984>
    42be:	9a 83       	std	Y+2, r25	; 0x02
    42c0:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				LCD_void_Clear_Screen();
    42c2:	0e 94 f6 11 	call	0x23ec	; 0x23ec <LCD_void_Clear_Screen>
    42c6:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <main+0x4a>

000042ca <__udivmodsi4>:
    42ca:	a1 e2       	ldi	r26, 0x21	; 33
    42cc:	1a 2e       	mov	r1, r26
    42ce:	aa 1b       	sub	r26, r26
    42d0:	bb 1b       	sub	r27, r27
    42d2:	fd 01       	movw	r30, r26
    42d4:	0d c0       	rjmp	.+26     	; 0x42f0 <__udivmodsi4_ep>

000042d6 <__udivmodsi4_loop>:
    42d6:	aa 1f       	adc	r26, r26
    42d8:	bb 1f       	adc	r27, r27
    42da:	ee 1f       	adc	r30, r30
    42dc:	ff 1f       	adc	r31, r31
    42de:	a2 17       	cp	r26, r18
    42e0:	b3 07       	cpc	r27, r19
    42e2:	e4 07       	cpc	r30, r20
    42e4:	f5 07       	cpc	r31, r21
    42e6:	20 f0       	brcs	.+8      	; 0x42f0 <__udivmodsi4_ep>
    42e8:	a2 1b       	sub	r26, r18
    42ea:	b3 0b       	sbc	r27, r19
    42ec:	e4 0b       	sbc	r30, r20
    42ee:	f5 0b       	sbc	r31, r21

000042f0 <__udivmodsi4_ep>:
    42f0:	66 1f       	adc	r22, r22
    42f2:	77 1f       	adc	r23, r23
    42f4:	88 1f       	adc	r24, r24
    42f6:	99 1f       	adc	r25, r25
    42f8:	1a 94       	dec	r1
    42fa:	69 f7       	brne	.-38     	; 0x42d6 <__udivmodsi4_loop>
    42fc:	60 95       	com	r22
    42fe:	70 95       	com	r23
    4300:	80 95       	com	r24
    4302:	90 95       	com	r25
    4304:	9b 01       	movw	r18, r22
    4306:	ac 01       	movw	r20, r24
    4308:	bd 01       	movw	r22, r26
    430a:	cf 01       	movw	r24, r30
    430c:	08 95       	ret

0000430e <__prologue_saves__>:
    430e:	2f 92       	push	r2
    4310:	3f 92       	push	r3
    4312:	4f 92       	push	r4
    4314:	5f 92       	push	r5
    4316:	6f 92       	push	r6
    4318:	7f 92       	push	r7
    431a:	8f 92       	push	r8
    431c:	9f 92       	push	r9
    431e:	af 92       	push	r10
    4320:	bf 92       	push	r11
    4322:	cf 92       	push	r12
    4324:	df 92       	push	r13
    4326:	ef 92       	push	r14
    4328:	ff 92       	push	r15
    432a:	0f 93       	push	r16
    432c:	1f 93       	push	r17
    432e:	cf 93       	push	r28
    4330:	df 93       	push	r29
    4332:	cd b7       	in	r28, 0x3d	; 61
    4334:	de b7       	in	r29, 0x3e	; 62
    4336:	ca 1b       	sub	r28, r26
    4338:	db 0b       	sbc	r29, r27
    433a:	0f b6       	in	r0, 0x3f	; 63
    433c:	f8 94       	cli
    433e:	de bf       	out	0x3e, r29	; 62
    4340:	0f be       	out	0x3f, r0	; 63
    4342:	cd bf       	out	0x3d, r28	; 61
    4344:	09 94       	ijmp

00004346 <__epilogue_restores__>:
    4346:	2a 88       	ldd	r2, Y+18	; 0x12
    4348:	39 88       	ldd	r3, Y+17	; 0x11
    434a:	48 88       	ldd	r4, Y+16	; 0x10
    434c:	5f 84       	ldd	r5, Y+15	; 0x0f
    434e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4350:	7d 84       	ldd	r7, Y+13	; 0x0d
    4352:	8c 84       	ldd	r8, Y+12	; 0x0c
    4354:	9b 84       	ldd	r9, Y+11	; 0x0b
    4356:	aa 84       	ldd	r10, Y+10	; 0x0a
    4358:	b9 84       	ldd	r11, Y+9	; 0x09
    435a:	c8 84       	ldd	r12, Y+8	; 0x08
    435c:	df 80       	ldd	r13, Y+7	; 0x07
    435e:	ee 80       	ldd	r14, Y+6	; 0x06
    4360:	fd 80       	ldd	r15, Y+5	; 0x05
    4362:	0c 81       	ldd	r16, Y+4	; 0x04
    4364:	1b 81       	ldd	r17, Y+3	; 0x03
    4366:	aa 81       	ldd	r26, Y+2	; 0x02
    4368:	b9 81       	ldd	r27, Y+1	; 0x01
    436a:	ce 0f       	add	r28, r30
    436c:	d1 1d       	adc	r29, r1
    436e:	0f b6       	in	r0, 0x3f	; 63
    4370:	f8 94       	cli
    4372:	de bf       	out	0x3e, r29	; 62
    4374:	0f be       	out	0x3f, r0	; 63
    4376:	cd bf       	out	0x3d, r28	; 61
    4378:	ed 01       	movw	r28, r26
    437a:	08 95       	ret

0000437c <itoa>:
    437c:	fb 01       	movw	r30, r22
    437e:	9f 01       	movw	r18, r30
    4380:	e8 94       	clt
    4382:	42 30       	cpi	r20, 0x02	; 2
    4384:	c4 f0       	brlt	.+48     	; 0x43b6 <itoa+0x3a>
    4386:	45 32       	cpi	r20, 0x25	; 37
    4388:	b4 f4       	brge	.+44     	; 0x43b6 <itoa+0x3a>
    438a:	4a 30       	cpi	r20, 0x0A	; 10
    438c:	29 f4       	brne	.+10     	; 0x4398 <itoa+0x1c>
    438e:	97 fb       	bst	r25, 7
    4390:	1e f4       	brtc	.+6      	; 0x4398 <itoa+0x1c>
    4392:	90 95       	com	r25
    4394:	81 95       	neg	r24
    4396:	9f 4f       	sbci	r25, 0xFF	; 255
    4398:	64 2f       	mov	r22, r20
    439a:	77 27       	eor	r23, r23
    439c:	0e 94 ef 21 	call	0x43de	; 0x43de <__udivmodhi4>
    43a0:	80 5d       	subi	r24, 0xD0	; 208
    43a2:	8a 33       	cpi	r24, 0x3A	; 58
    43a4:	0c f0       	brlt	.+2      	; 0x43a8 <itoa+0x2c>
    43a6:	89 5d       	subi	r24, 0xD9	; 217
    43a8:	81 93       	st	Z+, r24
    43aa:	cb 01       	movw	r24, r22
    43ac:	00 97       	sbiw	r24, 0x00	; 0
    43ae:	a1 f7       	brne	.-24     	; 0x4398 <itoa+0x1c>
    43b0:	16 f4       	brtc	.+4      	; 0x43b6 <itoa+0x3a>
    43b2:	5d e2       	ldi	r21, 0x2D	; 45
    43b4:	51 93       	st	Z+, r21
    43b6:	10 82       	st	Z, r1
    43b8:	c9 01       	movw	r24, r18
    43ba:	0c 94 df 21 	jmp	0x43be	; 0x43be <strrev>

000043be <strrev>:
    43be:	dc 01       	movw	r26, r24
    43c0:	fc 01       	movw	r30, r24
    43c2:	67 2f       	mov	r22, r23
    43c4:	71 91       	ld	r23, Z+
    43c6:	77 23       	and	r23, r23
    43c8:	e1 f7       	brne	.-8      	; 0x43c2 <strrev+0x4>
    43ca:	32 97       	sbiw	r30, 0x02	; 2
    43cc:	04 c0       	rjmp	.+8      	; 0x43d6 <strrev+0x18>
    43ce:	7c 91       	ld	r23, X
    43d0:	6d 93       	st	X+, r22
    43d2:	70 83       	st	Z, r23
    43d4:	62 91       	ld	r22, -Z
    43d6:	ae 17       	cp	r26, r30
    43d8:	bf 07       	cpc	r27, r31
    43da:	c8 f3       	brcs	.-14     	; 0x43ce <strrev+0x10>
    43dc:	08 95       	ret

000043de <__udivmodhi4>:
    43de:	aa 1b       	sub	r26, r26
    43e0:	bb 1b       	sub	r27, r27
    43e2:	51 e1       	ldi	r21, 0x11	; 17
    43e4:	07 c0       	rjmp	.+14     	; 0x43f4 <__udivmodhi4_ep>

000043e6 <__udivmodhi4_loop>:
    43e6:	aa 1f       	adc	r26, r26
    43e8:	bb 1f       	adc	r27, r27
    43ea:	a6 17       	cp	r26, r22
    43ec:	b7 07       	cpc	r27, r23
    43ee:	10 f0       	brcs	.+4      	; 0x43f4 <__udivmodhi4_ep>
    43f0:	a6 1b       	sub	r26, r22
    43f2:	b7 0b       	sbc	r27, r23

000043f4 <__udivmodhi4_ep>:
    43f4:	88 1f       	adc	r24, r24
    43f6:	99 1f       	adc	r25, r25
    43f8:	5a 95       	dec	r21
    43fa:	a9 f7       	brne	.-22     	; 0x43e6 <__udivmodhi4_loop>
    43fc:	80 95       	com	r24
    43fe:	90 95       	com	r25
    4400:	bc 01       	movw	r22, r24
    4402:	cd 01       	movw	r24, r26
    4404:	08 95       	ret

00004406 <_exit>:
    4406:	f8 94       	cli

00004408 <__stop_program>:
    4408:	ff cf       	rjmp	.-2      	; 0x4408 <__stop_program>
