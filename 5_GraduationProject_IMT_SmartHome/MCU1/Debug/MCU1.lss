
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002dc  00800060  000040d8  0000416c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080033c  0080033c  00004448  2**0
                  ALLOC
  3 .stab         00003b34  00000000  00000000  00004448  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000120a  00000000  00000000  00007f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009186  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00009326  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00009516  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000b922  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000cc99  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000de74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000e034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000e327  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ecf5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 34       	cpi	r26, 0x4A	; 74
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <main>
      8a:	0c 94 6a 20 	jmp	0x40d4	; 0x40d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 02 20 	jmp	0x4004	; 0x4004 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e0       	ldi	r26, 0x0F	; 15
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1e 20 	jmp	0x403c	; 0x403c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 02 20 	jmp	0x4004	; 0x4004 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e0       	ldi	r24, 0x0F	; 15
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1e 20 	jmp	0x403c	; 0x403c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0a 20 	jmp	0x4014	; 0x4014 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e0       	ldi	r22, 0x0F	; 15
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 26 20 	jmp	0x404c	; 0x404c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0e 20 	jmp	0x401c	; 0x401c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0b 20 	jmp	0x4016	; 0x4016 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 27 20 	jmp	0x404e	; 0x404e <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 12 20 	jmp	0x4024	; 0x4024 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 2e 20 	jmp	0x405c	; 0x405c <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e9 5e       	subi	r30, 0xE9	; 233
     a94:	fd 4f       	sbci	r31, 0xFD	; 253
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <ADC_void_Init>:
#include"ADC_interface.h"
#include"ADC_config.h"
#include"ADC_private.h"

void ADC_void_Init(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	// ADC enable
	Set_Bit(ADC_U8_ADCSRA,DIO_U8_PIN7);
     e00:	a6 e2       	ldi	r26, 0x26	; 38
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e6 e2       	ldi	r30, 0x26	; 38
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	80 68       	ori	r24, 0x80	; 128
     e0c:	8c 93       	st	X, r24
	// PRESCALER = 128
	Assign_Bit(ADC_U8_ADCSRA,DIO_U8_PIN0 ,PRESCALER_U8_ADPS0);
     e0e:	a6 e2       	ldi	r26, 0x26	; 38
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e6 e2       	ldi	r30, 0x26	; 38
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	81 60       	ori	r24, 0x01	; 1
     e1a:	8c 93       	st	X, r24
	Assign_Bit(ADC_U8_ADCSRA,DIO_U8_PIN1 ,PRESCALER_U8_ADPS1);
     e1c:	a6 e2       	ldi	r26, 0x26	; 38
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e6 e2       	ldi	r30, 0x26	; 38
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	82 60       	ori	r24, 0x02	; 2
     e28:	8c 93       	st	X, r24
	Assign_Bit(ADC_U8_ADCSRA,DIO_U8_PIN2 ,PRESCALER_U8_ADPS2);
     e2a:	a6 e2       	ldi	r26, 0x26	; 38
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e6 e2       	ldi	r30, 0x26	; 38
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	84 60       	ori	r24, 0x04	; 4
     e36:	8c 93       	st	X, r24
    //REF. VOLATAGE -->5v
	Assign_Bit(ADC_U8_ADMUX,DIO_U8_PIN6,REF_VOLTAGE_REFS0);
     e38:	a7 e2       	ldi	r26, 0x27	; 39
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e7 e2       	ldi	r30, 0x27	; 39
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	80 64       	ori	r24, 0x40	; 64
     e44:	8c 93       	st	X, r24
	Assign_Bit(ADC_U8_ADMUX,DIO_U8_PIN7,REF_VOLTAGE_REFS1);
     e46:	a7 e2       	ldi	r26, 0x27	; 39
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e7 e2       	ldi	r30, 0x27	; 39
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	8f 77       	andi	r24, 0x7F	; 127
     e52:	8c 93       	st	X, r24
	// LEFT ADUSTMENT
	Assign_Bit(ADC_U8_ADMUX,DIO_U8_PIN5 ,ADMUX_U8_ADLAR);
     e54:	a7 e2       	ldi	r26, 0x27	; 39
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e7 e2       	ldi	r30, 0x27	; 39
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	80 62       	ori	r24, 0x20	; 32
     e60:	8c 93       	st	X, r24

}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <ADC_U16_Read>:

u16 ADC_U16_Read(u8 channel)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <ADC_U16_Read+0x6>
     e6e:	0f 92       	push	r0
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	8b 83       	std	Y+3, r24	; 0x03
	// choose channel
	ADC_U8_ADMUX &=0b11100000;
     e76:	a7 e2       	ldi	r26, 0x27	; 39
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e7 e2       	ldi	r30, 0x27	; 39
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	80 7e       	andi	r24, 0xE0	; 224
     e82:	8c 93       	st	X, r24
	ADC_U8_ADMUX |=channel;
     e84:	a7 e2       	ldi	r26, 0x27	; 39
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e7 e2       	ldi	r30, 0x27	; 39
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	90 81       	ld	r25, Z
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	89 2b       	or	r24, r25
     e92:	8c 93       	st	X, r24
	// Start conversion
	Set_Bit(ADC_U8_ADCSRA, DIO_U8_PIN6);
     e94:	a6 e2       	ldi	r26, 0x26	; 38
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e6 e2       	ldi	r30, 0x26	; 38
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	80 64       	ori	r24, 0x40	; 64
     ea0:	8c 93       	st	X, r24
	while(Get_Bit(ADC_U8_ADCSRA,DIO_U8_PIN4)!=1);
     ea2:	e6 e2       	ldi	r30, 0x26	; 38
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	82 95       	swap	r24
     eaa:	8f 70       	andi	r24, 0x0F	; 15
     eac:	88 2f       	mov	r24, r24
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	81 70       	andi	r24, 0x01	; 1
     eb2:	90 70       	andi	r25, 0x00	; 0
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	a9 f3       	breq	.-22     	; 0xea2 <ADC_U16_Read+0x3a>
	Set_Bit(ADC_U8_ADCSRA,DIO_U8_PIN4);
     eb8:	a6 e2       	ldi	r26, 0x26	; 38
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e6 e2       	ldi	r30, 0x26	; 38
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	80 61       	ori	r24, 0x10	; 16
     ec4:	8c 93       	st	X, r24

	u16 result = (ADC_U8_ADCL>>6);
     ec6:	e4 e2       	ldi	r30, 0x24	; 36
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	82 95       	swap	r24
     ece:	86 95       	lsr	r24
     ed0:	86 95       	lsr	r24
     ed2:	83 70       	andi	r24, 0x03	; 3
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9a 83       	std	Y+2, r25	; 0x02
     eda:	89 83       	std	Y+1, r24	; 0x01
	result|=((u16)(ADC_U8_ADCH<<2));
     edc:	e5 e2       	ldi	r30, 0x25	; 37
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	88 2f       	mov	r24, r24
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	9c 01       	movw	r18, r24
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	82 2b       	or	r24, r18
     ef6:	93 2b       	or	r25, r19
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01
	return result;
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <INTIAL_DIR>:
/*****************************************************************************/
/***********************************fucntion**********************************/
/********************************************************************************/

u8 INTIAL_DIR(u8 p0 , u8 p1 , u8 p2 , u8 p3 , u8 p4 , u8 p5 , u8 p6 , u8 p7)
{
     f0c:	af 92       	push	r10
     f0e:	cf 92       	push	r12
     f10:	ef 92       	push	r14
     f12:	0f 93       	push	r16
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	29 97       	sbiw	r28, 0x09	; 9
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	8a 83       	std	Y+2, r24	; 0x02
     f2a:	6b 83       	std	Y+3, r22	; 0x03
     f2c:	4c 83       	std	Y+4, r20	; 0x04
     f2e:	2d 83       	std	Y+5, r18	; 0x05
     f30:	0e 83       	std	Y+6, r16	; 0x06
     f32:	ef 82       	std	Y+7, r14	; 0x07
     f34:	c8 86       	std	Y+8, r12	; 0x08
     f36:	a9 86       	std	Y+9, r10	; 0x09
	u8 port = 0x00 ;
     f38:	19 82       	std	Y+1, r1	; 0x01
	Assign_Bit(port,DIO_U8_PIN0,p0);
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	21 f4       	brne	.+8      	; 0xf48 <INTIAL_DIR+0x3c>
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	81 60       	ori	r24, 0x01	; 1
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	03 c0       	rjmp	.+6      	; 0xf4e <INTIAL_DIR+0x42>
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	8e 7f       	andi	r24, 0xFE	; 254
     f4c:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN1,p1);
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	21 f4       	brne	.+8      	; 0xf5c <INTIAL_DIR+0x50>
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	82 60       	ori	r24, 0x02	; 2
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	03 c0       	rjmp	.+6      	; 0xf62 <INTIAL_DIR+0x56>
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	8d 7f       	andi	r24, 0xFD	; 253
     f60:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN2,p2);
     f62:	8c 81       	ldd	r24, Y+4	; 0x04
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	21 f4       	brne	.+8      	; 0xf70 <INTIAL_DIR+0x64>
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	84 60       	ori	r24, 0x04	; 4
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <INTIAL_DIR+0x6a>
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	8b 7f       	andi	r24, 0xFB	; 251
     f74:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN3,p3);
     f76:	8d 81       	ldd	r24, Y+5	; 0x05
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	21 f4       	brne	.+8      	; 0xf84 <INTIAL_DIR+0x78>
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	88 60       	ori	r24, 0x08	; 8
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	03 c0       	rjmp	.+6      	; 0xf8a <INTIAL_DIR+0x7e>
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	87 7f       	andi	r24, 0xF7	; 247
     f88:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN4,p4);
     f8a:	8e 81       	ldd	r24, Y+6	; 0x06
     f8c:	81 30       	cpi	r24, 0x01	; 1
     f8e:	21 f4       	brne	.+8      	; 0xf98 <INTIAL_DIR+0x8c>
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	80 61       	ori	r24, 0x10	; 16
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	03 c0       	rjmp	.+6      	; 0xf9e <INTIAL_DIR+0x92>
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	8f 7e       	andi	r24, 0xEF	; 239
     f9c:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN5,p5);
     f9e:	8f 81       	ldd	r24, Y+7	; 0x07
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	21 f4       	brne	.+8      	; 0xfac <INTIAL_DIR+0xa0>
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	80 62       	ori	r24, 0x20	; 32
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <INTIAL_DIR+0xa6>
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	8f 7d       	andi	r24, 0xDF	; 223
     fb0:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN6,p6);
     fb2:	88 85       	ldd	r24, Y+8	; 0x08
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	21 f4       	brne	.+8      	; 0xfc0 <INTIAL_DIR+0xb4>
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	80 64       	ori	r24, 0x40	; 64
     fbc:	89 83       	std	Y+1, r24	; 0x01
     fbe:	03 c0       	rjmp	.+6      	; 0xfc6 <INTIAL_DIR+0xba>
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	8f 7b       	andi	r24, 0xBF	; 191
     fc4:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN7,p7);
     fc6:	89 85       	ldd	r24, Y+9	; 0x09
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	21 f4       	brne	.+8      	; 0xfd4 <INTIAL_DIR+0xc8>
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	80 68       	ori	r24, 0x80	; 128
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	03 c0       	rjmp	.+6      	; 0xfda <INTIAL_DIR+0xce>
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	8f 77       	andi	r24, 0x7F	; 127
     fd8:	89 83       	std	Y+1, r24	; 0x01
	return port;
     fda:	89 81       	ldd	r24, Y+1	; 0x01

}
     fdc:	29 96       	adiw	r28, 0x09	; 9
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	0f 91       	pop	r16
     fee:	ef 90       	pop	r14
     ff0:	cf 90       	pop	r12
     ff2:	af 90       	pop	r10
     ff4:	08 95       	ret

00000ff6 <DIO_void_Init>:


void DIO_void_Init(void)
{
     ff6:	8f 92       	push	r8
     ff8:	9f 92       	push	r9
     ffa:	af 92       	push	r10
     ffc:	cf 92       	push	r12
     ffe:	ef 92       	push	r14
    1000:	0f 93       	push	r16
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
	/*direction*/
	DIO_U8_DDRA =INTIAL_DIR(DIO_u8_PA0_INTIAL_DIR,DIO_u8_PA1_INTIAL_DIR,DIO_u8_PA2_INTIAL_DIR,DIO_u8_PA3_INTIAL_DIR,DIO_u8_PA4_INTIAL_DIR,DIO_u8_PA5_INTIAL_DIR,DIO_u8_PA6_INTIAL_DIR,DIO_u8_PA7_INTIAL_DIR);
    100a:	0f 2e       	mov	r0, r31
    100c:	fa e3       	ldi	r31, 0x3A	; 58
    100e:	8f 2e       	mov	r8, r31
    1010:	99 24       	eor	r9, r9
    1012:	f0 2d       	mov	r31, r0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	61 e0       	ldi	r22, 0x01	; 1
    1018:	41 e0       	ldi	r20, 0x01	; 1
    101a:	21 e0       	ldi	r18, 0x01	; 1
    101c:	00 e0       	ldi	r16, 0x00	; 0
    101e:	ee 24       	eor	r14, r14
    1020:	cc 24       	eor	r12, r12
    1022:	aa 24       	eor	r10, r10
    1024:	0e 94 86 07 	call	0xf0c	; 0xf0c <INTIAL_DIR>
    1028:	f4 01       	movw	r30, r8
    102a:	80 83       	st	Z, r24
	DIO_U8_DDRB =INTIAL_DIR(DIO_u8_PB0_INTIAL_DIR,DIO_u8_PB1_INTIAL_DIR,DIO_u8_PB2_INTIAL_DIR,DIO_u8_PB3_INTIAL_DIR,DIO_u8_PB4_INTIAL_DIR,DIO_u8_PB5_INTIAL_DIR,DIO_u8_PB6_INTIAL_DIR,DIO_u8_PB7_INTIAL_DIR);
    102c:	0f 2e       	mov	r0, r31
    102e:	f7 e3       	ldi	r31, 0x37	; 55
    1030:	8f 2e       	mov	r8, r31
    1032:	99 24       	eor	r9, r9
    1034:	f0 2d       	mov	r31, r0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	61 e0       	ldi	r22, 0x01	; 1
    103a:	41 e0       	ldi	r20, 0x01	; 1
    103c:	21 e0       	ldi	r18, 0x01	; 1
    103e:	00 e0       	ldi	r16, 0x00	; 0
    1040:	ee 24       	eor	r14, r14
    1042:	cc 24       	eor	r12, r12
    1044:	aa 24       	eor	r10, r10
    1046:	0e 94 86 07 	call	0xf0c	; 0xf0c <INTIAL_DIR>
    104a:	f4 01       	movw	r30, r8
    104c:	80 83       	st	Z, r24
	DIO_U8_DDRC =INTIAL_DIR(DIO_u8_PC0_INTIAL_DIR,DIO_u8_PC1_INTIAL_DIR,DIO_u8_PC2_INTIAL_DIR,DIO_u8_PC3_INTIAL_DIR,DIO_u8_PC4_INTIAL_DIR,DIO_u8_PC5_INTIAL_DIR,DIO_u8_PC6_INTIAL_DIR,DIO_u8_PC7_INTIAL_DIR);
    104e:	0f 2e       	mov	r0, r31
    1050:	f4 e3       	ldi	r31, 0x34	; 52
    1052:	8f 2e       	mov	r8, r31
    1054:	99 24       	eor	r9, r9
    1056:	f0 2d       	mov	r31, r0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	61 e0       	ldi	r22, 0x01	; 1
    105c:	41 e0       	ldi	r20, 0x01	; 1
    105e:	21 e0       	ldi	r18, 0x01	; 1
    1060:	01 e0       	ldi	r16, 0x01	; 1
    1062:	ee 24       	eor	r14, r14
    1064:	e3 94       	inc	r14
    1066:	cc 24       	eor	r12, r12
    1068:	c3 94       	inc	r12
    106a:	aa 24       	eor	r10, r10
    106c:	a3 94       	inc	r10
    106e:	0e 94 86 07 	call	0xf0c	; 0xf0c <INTIAL_DIR>
    1072:	f4 01       	movw	r30, r8
    1074:	80 83       	st	Z, r24
	DIO_U8_DDRD =INTIAL_DIR(DIO_u8_PD0_INTIAL_DIR,DIO_u8_PD1_INTIAL_DIR,DIO_u8_PD2_INTIAL_DIR,DIO_u8_PD3_INTIAL_DIR,DIO_u8_PD4_INTIAL_DIR,DIO_u8_PD5_INTIAL_DIR,DIO_u8_PD6_INTIAL_DIR,DIO_u8_PD7_INTIAL_DIR);
    1076:	0f 2e       	mov	r0, r31
    1078:	f1 e3       	ldi	r31, 0x31	; 49
    107a:	8f 2e       	mov	r8, r31
    107c:	99 24       	eor	r9, r9
    107e:	f0 2d       	mov	r31, r0
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	00 e0       	ldi	r16, 0x00	; 0
    108a:	ee 24       	eor	r14, r14
    108c:	cc 24       	eor	r12, r12
    108e:	aa 24       	eor	r10, r10
    1090:	0e 94 86 07 	call	0xf0c	; 0xf0c <INTIAL_DIR>
    1094:	f4 01       	movw	r30, r8
    1096:	80 83       	st	Z, r24
}
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	0f 91       	pop	r16
    109e:	ef 90       	pop	r14
    10a0:	cf 90       	pop	r12
    10a2:	af 90       	pop	r10
    10a4:	9f 90       	pop	r9
    10a6:	8f 90       	pop	r8
    10a8:	08 95       	ret

000010aa <DIO_U8_Set_Pin_Dir>:

u8 DIO_U8_Set_Pin_Dir(u8 Copy_U8_Port_ID , u8 Copy_U8_Pin_ID , u8 Copy_U8_Pin_Dir)
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <DIO_U8_Set_Pin_Dir+0x6>
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <DIO_U8_Set_Pin_Dir+0x8>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <DIO_U8_Set_Pin_Dir+0xa>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	6a 83       	std	Y+2, r22	; 0x02
    10bc:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	84 30       	cpi	r24, 0x04	; 4
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <DIO_U8_Set_Pin_Dir+0x1c>
    10c4:	e4 c0       	rjmp	.+456    	; 0x128e <DIO_U8_Set_Pin_Dir+0x1e4>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	88 30       	cpi	r24, 0x08	; 8
    10ca:	08 f0       	brcs	.+2      	; 0x10ce <DIO_U8_Set_Pin_Dir+0x24>
    10cc:	dd c0       	rjmp	.+442    	; 0x1288 <DIO_U8_Set_Pin_Dir+0x1de>
		{
			if((Copy_U8_Pin_Dir==PIN_INPUT)||(Copy_U8_Pin_Dir==PIN_OUTPUT))
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	88 23       	and	r24, r24
    10d2:	21 f0       	breq	.+8      	; 0x10dc <DIO_U8_Set_Pin_Dir+0x32>
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	09 f0       	breq	.+2      	; 0x10dc <DIO_U8_Set_Pin_Dir+0x32>
    10da:	d4 c0       	rjmp	.+424    	; 0x1284 <DIO_U8_Set_Pin_Dir+0x1da>
			{
				switch(Copy_U8_Port_ID)
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	3e 83       	std	Y+6, r19	; 0x06
    10e4:	2d 83       	std	Y+5, r18	; 0x05
    10e6:	8d 81       	ldd	r24, Y+5	; 0x05
    10e8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	91 05       	cpc	r25, r1
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <DIO_U8_Set_Pin_Dir+0x48>
    10f0:	43 c0       	rjmp	.+134    	; 0x1178 <DIO_U8_Set_Pin_Dir+0xce>
    10f2:	2d 81       	ldd	r18, Y+5	; 0x05
    10f4:	3e 81       	ldd	r19, Y+6	; 0x06
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	2c f4       	brge	.+10     	; 0x1106 <DIO_U8_Set_Pin_Dir+0x5c>
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	71 f0       	breq	.+28     	; 0x1120 <DIO_U8_Set_Pin_Dir+0x76>
    1104:	bc c0       	rjmp	.+376    	; 0x127e <DIO_U8_Set_Pin_Dir+0x1d4>
    1106:	2d 81       	ldd	r18, Y+5	; 0x05
    1108:	3e 81       	ldd	r19, Y+6	; 0x06
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	09 f4       	brne	.+2      	; 0x1112 <DIO_U8_Set_Pin_Dir+0x68>
    1110:	5f c0       	rjmp	.+190    	; 0x11d0 <DIO_U8_Set_Pin_Dir+0x126>
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
    1114:	9e 81       	ldd	r25, Y+6	; 0x06
    1116:	83 30       	cpi	r24, 0x03	; 3
    1118:	91 05       	cpc	r25, r1
    111a:	09 f4       	brne	.+2      	; 0x111e <DIO_U8_Set_Pin_Dir+0x74>
    111c:	85 c0       	rjmp	.+266    	; 0x1228 <DIO_U8_Set_Pin_Dir+0x17e>
    111e:	af c0       	rjmp	.+350    	; 0x127e <DIO_U8_Set_Pin_Dir+0x1d4>
				{
				case PORTA_ID:
					Assign_Bit(DIO_U8_DDRA,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	a1 f4       	brne	.+40     	; 0x114e <DIO_U8_Set_Pin_Dir+0xa4>
    1126:	aa e3       	ldi	r26, 0x3A	; 58
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	ea e3       	ldi	r30, 0x3A	; 58
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_U8_Set_Pin_Dir+0x9a>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <DIO_U8_Set_Pin_Dir+0x96>
    1148:	84 2b       	or	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	98 c0       	rjmp	.+304    	; 0x127e <DIO_U8_Set_Pin_Dir+0x1d4>
    114e:	aa e3       	ldi	r26, 0x3A	; 58
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	ea e3       	ldi	r30, 0x3A	; 58
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_U8_Set_Pin_Dir+0xc2>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_U8_Set_Pin_Dir+0xbe>
    1170:	80 95       	com	r24
    1172:	84 23       	and	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	83 c0       	rjmp	.+262    	; 0x127e <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTB_ID:
					Assign_Bit(DIO_U8_DDRB,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	a1 f4       	brne	.+40     	; 0x11a6 <DIO_U8_Set_Pin_Dir+0xfc>
    117e:	a7 e3       	ldi	r26, 0x37	; 55
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e7 e3       	ldi	r30, 0x37	; 55
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_U8_Set_Pin_Dir+0xf2>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_U8_Set_Pin_Dir+0xee>
    11a0:	84 2b       	or	r24, r20
    11a2:	8c 93       	st	X, r24
    11a4:	6c c0       	rjmp	.+216    	; 0x127e <DIO_U8_Set_Pin_Dir+0x1d4>
    11a6:	a7 e3       	ldi	r26, 0x37	; 55
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e7 e3       	ldi	r30, 0x37	; 55
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 2e       	mov	r0, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <DIO_U8_Set_Pin_Dir+0x11a>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <DIO_U8_Set_Pin_Dir+0x116>
    11c8:	80 95       	com	r24
    11ca:	84 23       	and	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	57 c0       	rjmp	.+174    	; 0x127e <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTC_ID:
					Assign_Bit(DIO_U8_DDRC,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	a1 f4       	brne	.+40     	; 0x11fe <DIO_U8_Set_Pin_Dir+0x154>
    11d6:	a4 e3       	ldi	r26, 0x34	; 52
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e4 e3       	ldi	r30, 0x34	; 52
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_U8_Set_Pin_Dir+0x14a>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_U8_Set_Pin_Dir+0x146>
    11f8:	84 2b       	or	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	40 c0       	rjmp	.+128    	; 0x127e <DIO_U8_Set_Pin_Dir+0x1d4>
    11fe:	a4 e3       	ldi	r26, 0x34	; 52
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e4 e3       	ldi	r30, 0x34	; 52
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_U8_Set_Pin_Dir+0x172>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_U8_Set_Pin_Dir+0x16e>
    1220:	80 95       	com	r24
    1222:	84 23       	and	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	2b c0       	rjmp	.+86     	; 0x127e <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTD_ID:
					Assign_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	a1 f4       	brne	.+40     	; 0x1256 <DIO_U8_Set_Pin_Dir+0x1ac>
    122e:	a1 e3       	ldi	r26, 0x31	; 49
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e1 e3       	ldi	r30, 0x31	; 49
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <DIO_U8_Set_Pin_Dir+0x1a2>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <DIO_U8_Set_Pin_Dir+0x19e>
    1250:	84 2b       	or	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	14 c0       	rjmp	.+40     	; 0x127e <DIO_U8_Set_Pin_Dir+0x1d4>
    1256:	a1 e3       	ldi	r26, 0x31	; 49
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e1 e3       	ldi	r30, 0x31	; 49
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <DIO_U8_Set_Pin_Dir+0x1ca>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <DIO_U8_Set_Pin_Dir+0x1c6>
    1278:	80 95       	com	r24
    127a:	84 23       	and	r24, r20
    127c:	8c 93       	st	X, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    127e:	93 e0       	ldi	r25, 0x03	; 3
    1280:	9c 83       	std	Y+4, r25	; 0x04
    1282:	07 c0       	rjmp	.+14     	; 0x1292 <DIO_U8_Set_Pin_Dir+0x1e8>

				}
			}
			else
			{
				return WRONG_PIN_DIR;
    1284:	1c 82       	std	Y+4, r1	; 0x04
    1286:	05 c0       	rjmp	.+10     	; 0x1292 <DIO_U8_Set_Pin_Dir+0x1e8>
			}
		}
		else{
			return WRONG_PIN;
    1288:	21 e0       	ldi	r18, 0x01	; 1
    128a:	2c 83       	std	Y+4, r18	; 0x04
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_U8_Set_Pin_Dir+0x1e8>


	}
	else
	{
		return WRONG_PORT;
    128e:	32 e0       	ldi	r19, 0x02	; 2
    1290:	3c 83       	std	Y+4, r19	; 0x04
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    1294:	26 96       	adiw	r28, 0x06	; 6
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <DIO_U8_Set_Port_Dir>:




u8 DIO_U8_Set_Port_Dir(u8 Copy_U8_Port_ID  , u16 Copy_U8_PORT_Dir)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <DIO_U8_Set_Port_Dir+0x6>
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <DIO_U8_Set_Port_Dir+0x8>
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <DIO_U8_Set_Port_Dir+0xa>
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	7b 83       	std	Y+3, r23	; 0x03
    12b8:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	84 30       	cpi	r24, 0x04	; 4
    12be:	08 f0       	brcs	.+2      	; 0x12c2 <DIO_U8_Set_Port_Dir+0x1c>
    12c0:	3d c0       	rjmp	.+122    	; 0x133c <DIO_U8_Set_Port_Dir+0x96>
	{
		if((Copy_U8_PORT_Dir)>=MIN_DIR_OR_VALUE&&(Copy_U8_PORT_Dir)<=MAX_DIR_OR_VALUE)
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	9b 81       	ldd	r25, Y+3	; 0x03
    12c6:	8f 3f       	cpi	r24, 0xFF	; 255
    12c8:	91 05       	cpc	r25, r1
    12ca:	09 f0       	breq	.+2      	; 0x12ce <DIO_U8_Set_Port_Dir+0x28>
    12cc:	a8 f5       	brcc	.+106    	; 0x1338 <DIO_U8_Set_Port_Dir+0x92>
		{
				switch(Copy_U8_Port_ID)
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	3e 83       	std	Y+6, r19	; 0x06
    12d6:	2d 83       	std	Y+5, r18	; 0x05
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	9e 81       	ldd	r25, Y+6	; 0x06
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	91 05       	cpc	r25, r1
    12e0:	d1 f0       	breq	.+52     	; 0x1316 <DIO_U8_Set_Port_Dir+0x70>
    12e2:	2d 81       	ldd	r18, Y+5	; 0x05
    12e4:	3e 81       	ldd	r19, Y+6	; 0x06
    12e6:	22 30       	cpi	r18, 0x02	; 2
    12e8:	31 05       	cpc	r19, r1
    12ea:	2c f4       	brge	.+10     	; 0x12f6 <DIO_U8_Set_Port_Dir+0x50>
    12ec:	8d 81       	ldd	r24, Y+5	; 0x05
    12ee:	9e 81       	ldd	r25, Y+6	; 0x06
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	61 f0       	breq	.+24     	; 0x130c <DIO_U8_Set_Port_Dir+0x66>
    12f4:	1e c0       	rjmp	.+60     	; 0x1332 <DIO_U8_Set_Port_Dir+0x8c>
    12f6:	2d 81       	ldd	r18, Y+5	; 0x05
    12f8:	3e 81       	ldd	r19, Y+6	; 0x06
    12fa:	22 30       	cpi	r18, 0x02	; 2
    12fc:	31 05       	cpc	r19, r1
    12fe:	81 f0       	breq	.+32     	; 0x1320 <DIO_U8_Set_Port_Dir+0x7a>
    1300:	8d 81       	ldd	r24, Y+5	; 0x05
    1302:	9e 81       	ldd	r25, Y+6	; 0x06
    1304:	83 30       	cpi	r24, 0x03	; 3
    1306:	91 05       	cpc	r25, r1
    1308:	81 f0       	breq	.+32     	; 0x132a <DIO_U8_Set_Port_Dir+0x84>
    130a:	13 c0       	rjmp	.+38     	; 0x1332 <DIO_U8_Set_Port_Dir+0x8c>
				{
				case PORTA_ID:
					DIO_U8_DDRA=Copy_U8_PORT_Dir;
    130c:	ea e3       	ldi	r30, 0x3A	; 58
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	80 83       	st	Z, r24
    1314:	0e c0       	rjmp	.+28     	; 0x1332 <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTB_ID:
					DIO_U8_DDRB=Copy_U8_PORT_Dir;
    1316:	e7 e3       	ldi	r30, 0x37	; 55
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	80 83       	st	Z, r24
    131e:	09 c0       	rjmp	.+18     	; 0x1332 <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTC_ID:
					DIO_U8_DDRC=Copy_U8_PORT_Dir;
    1320:	e4 e3       	ldi	r30, 0x34	; 52
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	80 83       	st	Z, r24
    1328:	04 c0       	rjmp	.+8      	; 0x1332 <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTD_ID:
					DIO_U8_DDRD=Copy_U8_PORT_Dir;
    132a:	e1 e3       	ldi	r30, 0x31	; 49
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	80 83       	st	Z, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    1332:	93 e0       	ldi	r25, 0x03	; 3
    1334:	9c 83       	std	Y+4, r25	; 0x04
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <DIO_U8_Set_Port_Dir+0x9a>

				}
		}
		else
		{
			return WRONG_PORT_DIR;
    1338:	1c 82       	std	Y+4, r1	; 0x04
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_U8_Set_Port_Dir+0x9a>
		}

	}
	else
	{
		return WRONG_PORT;
    133c:	22 e0       	ldi	r18, 0x02	; 2
    133e:	2c 83       	std	Y+4, r18	; 0x04
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    1342:	26 96       	adiw	r28, 0x06	; 6
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <DIO_U8_Set_Pin_value>:




u8 DIO_U8_Set_Pin_value(u8 Copy_U8_Port_ID , u8 Copy_U8_Pin_ID , u8 Copy_U8_Pin_value)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	00 d0       	rcall	.+0      	; 0x135a <DIO_U8_Set_Pin_value+0x6>
    135a:	00 d0       	rcall	.+0      	; 0x135c <DIO_U8_Set_Pin_value+0x8>
    135c:	00 d0       	rcall	.+0      	; 0x135e <DIO_U8_Set_Pin_value+0xa>
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	6a 83       	std	Y+2, r22	; 0x02
    1366:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	84 30       	cpi	r24, 0x04	; 4
    136c:	08 f0       	brcs	.+2      	; 0x1370 <DIO_U8_Set_Pin_value+0x1c>
    136e:	e4 c0       	rjmp	.+456    	; 0x1538 <DIO_U8_Set_Pin_value+0x1e4>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	88 30       	cpi	r24, 0x08	; 8
    1374:	08 f0       	brcs	.+2      	; 0x1378 <DIO_U8_Set_Pin_value+0x24>
    1376:	dd c0       	rjmp	.+442    	; 0x1532 <DIO_U8_Set_Pin_value+0x1de>
		{
			if((Copy_U8_Pin_value==PIN_LOW)||(Copy_U8_Pin_value==PIN_HIGH))
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	88 23       	and	r24, r24
    137c:	21 f0       	breq	.+8      	; 0x1386 <DIO_U8_Set_Pin_value+0x32>
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	09 f0       	breq	.+2      	; 0x1386 <DIO_U8_Set_Pin_value+0x32>
    1384:	d4 c0       	rjmp	.+424    	; 0x152e <DIO_U8_Set_Pin_value+0x1da>
			{
				switch(Copy_U8_Port_ID)
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	3e 83       	std	Y+6, r19	; 0x06
    138e:	2d 83       	std	Y+5, r18	; 0x05
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	91 05       	cpc	r25, r1
    1398:	09 f4       	brne	.+2      	; 0x139c <DIO_U8_Set_Pin_value+0x48>
    139a:	43 c0       	rjmp	.+134    	; 0x1422 <DIO_U8_Set_Pin_value+0xce>
    139c:	2d 81       	ldd	r18, Y+5	; 0x05
    139e:	3e 81       	ldd	r19, Y+6	; 0x06
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <DIO_U8_Set_Pin_value+0x5c>
    13a6:	8d 81       	ldd	r24, Y+5	; 0x05
    13a8:	9e 81       	ldd	r25, Y+6	; 0x06
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	71 f0       	breq	.+28     	; 0x13ca <DIO_U8_Set_Pin_value+0x76>
    13ae:	bc c0       	rjmp	.+376    	; 0x1528 <DIO_U8_Set_Pin_value+0x1d4>
    13b0:	2d 81       	ldd	r18, Y+5	; 0x05
    13b2:	3e 81       	ldd	r19, Y+6	; 0x06
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	09 f4       	brne	.+2      	; 0x13bc <DIO_U8_Set_Pin_value+0x68>
    13ba:	5f c0       	rjmp	.+190    	; 0x147a <DIO_U8_Set_Pin_value+0x126>
    13bc:	8d 81       	ldd	r24, Y+5	; 0x05
    13be:	9e 81       	ldd	r25, Y+6	; 0x06
    13c0:	83 30       	cpi	r24, 0x03	; 3
    13c2:	91 05       	cpc	r25, r1
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <DIO_U8_Set_Pin_value+0x74>
    13c6:	85 c0       	rjmp	.+266    	; 0x14d2 <DIO_U8_Set_Pin_value+0x17e>
    13c8:	af c0       	rjmp	.+350    	; 0x1528 <DIO_U8_Set_Pin_value+0x1d4>
				{
				case PORTA_ID:
					Assign_Bit(DIO_U8_PORTA,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	a1 f4       	brne	.+40     	; 0x13f8 <DIO_U8_Set_Pin_value+0xa4>
    13d0:	ab e3       	ldi	r26, 0x3B	; 59
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	eb e3       	ldi	r30, 0x3B	; 59
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 2e       	mov	r0, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <DIO_U8_Set_Pin_value+0x9a>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <DIO_U8_Set_Pin_value+0x96>
    13f2:	84 2b       	or	r24, r20
    13f4:	8c 93       	st	X, r24
    13f6:	98 c0       	rjmp	.+304    	; 0x1528 <DIO_U8_Set_Pin_value+0x1d4>
    13f8:	ab e3       	ldi	r26, 0x3B	; 59
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	eb e3       	ldi	r30, 0x3B	; 59
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	48 2f       	mov	r20, r24
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	02 2e       	mov	r0, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <DIO_U8_Set_Pin_value+0xc2>
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	0a 94       	dec	r0
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <DIO_U8_Set_Pin_value+0xbe>
    141a:	80 95       	com	r24
    141c:	84 23       	and	r24, r20
    141e:	8c 93       	st	X, r24
    1420:	83 c0       	rjmp	.+262    	; 0x1528 <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTB_ID:
					Assign_Bit(DIO_U8_PORTB,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	a1 f4       	brne	.+40     	; 0x1450 <DIO_U8_Set_Pin_value+0xfc>
    1428:	a8 e3       	ldi	r26, 0x38	; 56
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e8 e3       	ldi	r30, 0x38	; 56
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	48 2f       	mov	r20, r24
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 2e       	mov	r0, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_U8_Set_Pin_value+0xf2>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	0a 94       	dec	r0
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_U8_Set_Pin_value+0xee>
    144a:	84 2b       	or	r24, r20
    144c:	8c 93       	st	X, r24
    144e:	6c c0       	rjmp	.+216    	; 0x1528 <DIO_U8_Set_Pin_value+0x1d4>
    1450:	a8 e3       	ldi	r26, 0x38	; 56
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e8 e3       	ldi	r30, 0x38	; 56
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 2e       	mov	r0, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_U8_Set_Pin_value+0x11a>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <DIO_U8_Set_Pin_value+0x116>
    1472:	80 95       	com	r24
    1474:	84 23       	and	r24, r20
    1476:	8c 93       	st	X, r24
    1478:	57 c0       	rjmp	.+174    	; 0x1528 <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTC_ID:
					Assign_Bit(DIO_U8_PORTC,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	a1 f4       	brne	.+40     	; 0x14a8 <DIO_U8_Set_Pin_value+0x154>
    1480:	a5 e3       	ldi	r26, 0x35	; 53
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e5 e3       	ldi	r30, 0x35	; 53
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <DIO_U8_Set_Pin_value+0x14a>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <DIO_U8_Set_Pin_value+0x146>
    14a2:	84 2b       	or	r24, r20
    14a4:	8c 93       	st	X, r24
    14a6:	40 c0       	rjmp	.+128    	; 0x1528 <DIO_U8_Set_Pin_value+0x1d4>
    14a8:	a5 e3       	ldi	r26, 0x35	; 53
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e5 e3       	ldi	r30, 0x35	; 53
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	48 2f       	mov	r20, r24
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 2e       	mov	r0, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <DIO_U8_Set_Pin_value+0x172>
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	0a 94       	dec	r0
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <DIO_U8_Set_Pin_value+0x16e>
    14ca:	80 95       	com	r24
    14cc:	84 23       	and	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	2b c0       	rjmp	.+86     	; 0x1528 <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTD_ID:
					Assign_Bit(DIO_U8_PORTD,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	a1 f4       	brne	.+40     	; 0x1500 <DIO_U8_Set_Pin_value+0x1ac>
    14d8:	a2 e3       	ldi	r26, 0x32	; 50
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e2 e3       	ldi	r30, 0x32	; 50
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <DIO_U8_Set_Pin_value+0x1a2>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <DIO_U8_Set_Pin_value+0x19e>
    14fa:	84 2b       	or	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	14 c0       	rjmp	.+40     	; 0x1528 <DIO_U8_Set_Pin_value+0x1d4>
    1500:	a2 e3       	ldi	r26, 0x32	; 50
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e2 e3       	ldi	r30, 0x32	; 50
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	48 2f       	mov	r20, r24
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	02 2e       	mov	r0, r18
    1518:	02 c0       	rjmp	.+4      	; 0x151e <DIO_U8_Set_Pin_value+0x1ca>
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	0a 94       	dec	r0
    1520:	e2 f7       	brpl	.-8      	; 0x151a <DIO_U8_Set_Pin_value+0x1c6>
    1522:	80 95       	com	r24
    1524:	84 23       	and	r24, r20
    1526:	8c 93       	st	X, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    1528:	93 e0       	ldi	r25, 0x03	; 3
    152a:	9c 83       	std	Y+4, r25	; 0x04
    152c:	07 c0       	rjmp	.+14     	; 0x153c <DIO_U8_Set_Pin_value+0x1e8>

				}
			}
			else
			{
				return WRONG_PIN_value;
    152e:	1c 82       	std	Y+4, r1	; 0x04
    1530:	05 c0       	rjmp	.+10     	; 0x153c <DIO_U8_Set_Pin_value+0x1e8>
			}
		}
		else{
			return WRONG_PIN;
    1532:	21 e0       	ldi	r18, 0x01	; 1
    1534:	2c 83       	std	Y+4, r18	; 0x04
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_U8_Set_Pin_value+0x1e8>


	}
	else
	{
		return WRONG_PORT;
    1538:	32 e0       	ldi	r19, 0x02	; 2
    153a:	3c 83       	std	Y+4, r19	; 0x04
    153c:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    153e:	26 96       	adiw	r28, 0x06	; 6
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <DIO_U8_Set_Port_Value>:




u8 DIO_U8_Set_Port_Value(u8 Copy_U8_Port_ID  , u16 Copy_U8_PORT_value)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	00 d0       	rcall	.+0      	; 0x1556 <DIO_U8_Set_Port_Value+0x6>
    1556:	00 d0       	rcall	.+0      	; 0x1558 <DIO_U8_Set_Port_Value+0x8>
    1558:	00 d0       	rcall	.+0      	; 0x155a <DIO_U8_Set_Port_Value+0xa>
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	7b 83       	std	Y+3, r23	; 0x03
    1562:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_PORT_value>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_PORT_value<=DIO_MAX_U8_PROT_ID))
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	9b 81       	ldd	r25, Y+3	; 0x03
    1568:	84 30       	cpi	r24, 0x04	; 4
    156a:	91 05       	cpc	r25, r1
    156c:	08 f0       	brcs	.+2      	; 0x1570 <DIO_U8_Set_Port_Value+0x20>
    156e:	3d c0       	rjmp	.+122    	; 0x15ea <DIO_U8_Set_Port_Value+0x9a>
	{
			if((Copy_U8_PORT_value)>=MIN_DIR_OR_VALUE&&(Copy_U8_PORT_value)<=MAX_DIR_OR_VALUE)
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	9b 81       	ldd	r25, Y+3	; 0x03
    1574:	8f 3f       	cpi	r24, 0xFF	; 255
    1576:	91 05       	cpc	r25, r1
    1578:	09 f0       	breq	.+2      	; 0x157c <DIO_U8_Set_Port_Value+0x2c>
    157a:	a8 f5       	brcc	.+106    	; 0x15e6 <DIO_U8_Set_Port_Value+0x96>
			{
				switch(Copy_U8_Port_ID)
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	3e 83       	std	Y+6, r19	; 0x06
    1584:	2d 83       	std	Y+5, r18	; 0x05
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	91 05       	cpc	r25, r1
    158e:	d1 f0       	breq	.+52     	; 0x15c4 <DIO_U8_Set_Port_Value+0x74>
    1590:	2d 81       	ldd	r18, Y+5	; 0x05
    1592:	3e 81       	ldd	r19, Y+6	; 0x06
    1594:	22 30       	cpi	r18, 0x02	; 2
    1596:	31 05       	cpc	r19, r1
    1598:	2c f4       	brge	.+10     	; 0x15a4 <DIO_U8_Set_Port_Value+0x54>
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	61 f0       	breq	.+24     	; 0x15ba <DIO_U8_Set_Port_Value+0x6a>
    15a2:	1e c0       	rjmp	.+60     	; 0x15e0 <DIO_U8_Set_Port_Value+0x90>
    15a4:	2d 81       	ldd	r18, Y+5	; 0x05
    15a6:	3e 81       	ldd	r19, Y+6	; 0x06
    15a8:	22 30       	cpi	r18, 0x02	; 2
    15aa:	31 05       	cpc	r19, r1
    15ac:	81 f0       	breq	.+32     	; 0x15ce <DIO_U8_Set_Port_Value+0x7e>
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	83 30       	cpi	r24, 0x03	; 3
    15b4:	91 05       	cpc	r25, r1
    15b6:	81 f0       	breq	.+32     	; 0x15d8 <DIO_U8_Set_Port_Value+0x88>
    15b8:	13 c0       	rjmp	.+38     	; 0x15e0 <DIO_U8_Set_Port_Value+0x90>
				{
				case PORTA_ID:
					DIO_U8_PORTA=Copy_U8_PORT_value;
    15ba:	eb e3       	ldi	r30, 0x3B	; 59
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	80 83       	st	Z, r24
    15c2:	0e c0       	rjmp	.+28     	; 0x15e0 <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTB_ID:
					DIO_U8_PORTB=Copy_U8_PORT_value;
    15c4:	e8 e3       	ldi	r30, 0x38	; 56
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	80 83       	st	Z, r24
    15cc:	09 c0       	rjmp	.+18     	; 0x15e0 <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTC_ID:
					DIO_U8_PORTC=Copy_U8_PORT_value;
    15ce:	e5 e3       	ldi	r30, 0x35	; 53
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	80 83       	st	Z, r24
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTD_ID:
					DIO_U8_PORTD=Copy_U8_PORT_value;
    15d8:	e2 e3       	ldi	r30, 0x32	; 50
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	80 83       	st	Z, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    15e0:	93 e0       	ldi	r25, 0x03	; 3
    15e2:	9c 83       	std	Y+4, r25	; 0x04
    15e4:	04 c0       	rjmp	.+8      	; 0x15ee <DIO_U8_Set_Port_Value+0x9e>

				}
			}
			else
			{
				return WRONG_PORT_VALUE;
    15e6:	1c 82       	std	Y+4, r1	; 0x04
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <DIO_U8_Set_Port_Value+0x9e>


	}
	else
	{
		return WRONG_PORT;
    15ea:	22 e0       	ldi	r18, 0x02	; 2
    15ec:	2c 83       	std	Y+4, r18	; 0x04
    15ee:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    15f0:	26 96       	adiw	r28, 0x06	; 6
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <DIO_U8_Get_pin_value>:




u8 DIO_U8_Get_pin_value(u8 Copy_U8_Port_ID,u8 Copy_U8_Pin_ID , u8 *Copy_U8_Pin_Value)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	28 97       	sbiw	r28, 0x08	; 8
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	6a 83       	std	Y+2, r22	; 0x02
    161a:	5c 83       	std	Y+4, r21	; 0x04
    161c:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	84 30       	cpi	r24, 0x04	; 4
    1622:	08 f0       	brcs	.+2      	; 0x1626 <DIO_U8_Get_pin_value+0x24>
    1624:	78 c0       	rjmp	.+240    	; 0x1716 <DIO_U8_Get_pin_value+0x114>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	88 30       	cpi	r24, 0x08	; 8
    162a:	08 f0       	brcs	.+2      	; 0x162e <DIO_U8_Get_pin_value+0x2c>
    162c:	71 c0       	rjmp	.+226    	; 0x1710 <DIO_U8_Get_pin_value+0x10e>
		{

			switch(Copy_U8_Port_ID)
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	3f 83       	std	Y+7, r19	; 0x07
    1636:	2e 83       	std	Y+6, r18	; 0x06
    1638:	4e 81       	ldd	r20, Y+6	; 0x06
    163a:	5f 81       	ldd	r21, Y+7	; 0x07
    163c:	41 30       	cpi	r20, 0x01	; 1
    163e:	51 05       	cpc	r21, r1
    1640:	59 f1       	breq	.+86     	; 0x1698 <DIO_U8_Get_pin_value+0x96>
    1642:	8e 81       	ldd	r24, Y+6	; 0x06
    1644:	9f 81       	ldd	r25, Y+7	; 0x07
    1646:	82 30       	cpi	r24, 0x02	; 2
    1648:	91 05       	cpc	r25, r1
    164a:	34 f4       	brge	.+12     	; 0x1658 <DIO_U8_Get_pin_value+0x56>
    164c:	2e 81       	ldd	r18, Y+6	; 0x06
    164e:	3f 81       	ldd	r19, Y+7	; 0x07
    1650:	21 15       	cp	r18, r1
    1652:	31 05       	cpc	r19, r1
    1654:	69 f0       	breq	.+26     	; 0x1670 <DIO_U8_Get_pin_value+0x6e>
    1656:	5b c0       	rjmp	.+182    	; 0x170e <DIO_U8_Get_pin_value+0x10c>
    1658:	4e 81       	ldd	r20, Y+6	; 0x06
    165a:	5f 81       	ldd	r21, Y+7	; 0x07
    165c:	42 30       	cpi	r20, 0x02	; 2
    165e:	51 05       	cpc	r21, r1
    1660:	79 f1       	breq	.+94     	; 0x16c0 <DIO_U8_Get_pin_value+0xbe>
    1662:	8e 81       	ldd	r24, Y+6	; 0x06
    1664:	9f 81       	ldd	r25, Y+7	; 0x07
    1666:	83 30       	cpi	r24, 0x03	; 3
    1668:	91 05       	cpc	r25, r1
    166a:	09 f4       	brne	.+2      	; 0x166e <DIO_U8_Get_pin_value+0x6c>
    166c:	3d c0       	rjmp	.+122    	; 0x16e8 <DIO_U8_Get_pin_value+0xe6>
    166e:	4f c0       	rjmp	.+158    	; 0x170e <DIO_U8_Get_pin_value+0x10c>
							{
				case PORTA_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINA,Copy_U8_Pin_ID);
    1670:	e9 e3       	ldi	r30, 0x39	; 57
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a9 01       	movw	r20, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <DIO_U8_Get_pin_value+0x86>
    1684:	55 95       	asr	r21
    1686:	47 95       	ror	r20
    1688:	8a 95       	dec	r24
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <DIO_U8_Get_pin_value+0x82>
    168c:	ca 01       	movw	r24, r20
    168e:	81 70       	andi	r24, 0x01	; 1
    1690:	eb 81       	ldd	r30, Y+3	; 0x03
    1692:	fc 81       	ldd	r31, Y+4	; 0x04
    1694:	80 83       	st	Z, r24
    1696:	3b c0       	rjmp	.+118    	; 0x170e <DIO_U8_Get_pin_value+0x10c>
					break;
				case PORTB_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINB,Copy_U8_Pin_ID);
    1698:	e6 e3       	ldi	r30, 0x36	; 54
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	88 2f       	mov	r24, r24
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	a9 01       	movw	r20, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_U8_Get_pin_value+0xae>
    16ac:	55 95       	asr	r21
    16ae:	47 95       	ror	r20
    16b0:	8a 95       	dec	r24
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_U8_Get_pin_value+0xaa>
    16b4:	ca 01       	movw	r24, r20
    16b6:	81 70       	andi	r24, 0x01	; 1
    16b8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ba:	fc 81       	ldd	r31, Y+4	; 0x04
    16bc:	80 83       	st	Z, r24
    16be:	27 c0       	rjmp	.+78     	; 0x170e <DIO_U8_Get_pin_value+0x10c>
					break;
				case PORTC_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINC,Copy_U8_Pin_ID);
    16c0:	e3 e3       	ldi	r30, 0x33	; 51
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	88 2f       	mov	r24, r24
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	a9 01       	movw	r20, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_U8_Get_pin_value+0xd6>
    16d4:	55 95       	asr	r21
    16d6:	47 95       	ror	r20
    16d8:	8a 95       	dec	r24
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <DIO_U8_Get_pin_value+0xd2>
    16dc:	ca 01       	movw	r24, r20
    16de:	81 70       	andi	r24, 0x01	; 1
    16e0:	eb 81       	ldd	r30, Y+3	; 0x03
    16e2:	fc 81       	ldd	r31, Y+4	; 0x04
    16e4:	80 83       	st	Z, r24
    16e6:	13 c0       	rjmp	.+38     	; 0x170e <DIO_U8_Get_pin_value+0x10c>
					break;
				case PORTD_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
    16e8:	e0 e3       	ldi	r30, 0x30	; 48
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	a9 01       	movw	r20, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <DIO_U8_Get_pin_value+0xfe>
    16fc:	55 95       	asr	r21
    16fe:	47 95       	ror	r20
    1700:	8a 95       	dec	r24
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <DIO_U8_Get_pin_value+0xfa>
    1704:	ca 01       	movw	r24, r20
    1706:	81 70       	andi	r24, 0x01	; 1
    1708:	eb 81       	ldd	r30, Y+3	; 0x03
    170a:	fc 81       	ldd	r31, Y+4	; 0x04
    170c:	80 83       	st	Z, r24
    170e:	07 c0       	rjmp	.+14     	; 0x171e <DIO_U8_Get_pin_value+0x11c>
					break;
							}
		}
		else
		{
			return WRONG_PIN;
    1710:	51 e0       	ldi	r21, 0x01	; 1
    1712:	5d 83       	std	Y+5, r21	; 0x05
    1714:	02 c0       	rjmp	.+4      	; 0x171a <DIO_U8_Get_pin_value+0x118>
		}
	}
	else
	{
		return WRONG_PORT;
    1716:	82 e0       	ldi	r24, 0x02	; 2
    1718:	8d 83       	std	Y+5, r24	; 0x05
    171a:	9d 81       	ldd	r25, Y+5	; 0x05
    171c:	98 87       	std	Y+8, r25	; 0x08
	}
}
    171e:	88 85       	ldd	r24, Y+8	; 0x08
    1720:	28 96       	adiw	r28, 0x08	; 8
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <DOOR_INIT>:


/**********************************************************************************/

void DOOR_INIT()
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
	DIO_void_Init();
    173a:	0e 94 fb 07 	call	0xff6	; 0xff6 <DIO_void_Init>
	LCD_void_Init();
    173e:	0e 94 0f 18 	call	0x301e	; 0x301e <LCD_void_Init>
	KPD_Init();
    1742:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <KPD_Init>
	ADC_void_Init();
    1746:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <ADC_void_Init>
	TIMER1_void_Init();
    174a:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <TIMER1_void_Init>
	SERVO_void_Init();
    174e:	0e 94 76 1e 	call	0x3cec	; 0x3cec <SERVO_void_Init>
	UART_void_Init();
    1752:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <UART_void_Init>
//	EXTI_void_Set_Level(EXTI_U8_INT1,EXTI_U8_INT1_FALLING_EDGE);
//	EXTI_void_Eable(EXTI_U8_INT0);
//	EXTI_void_Eable(EXTI_U8_INT1);
//	EXTI_void_Global_EN_DIS(EXTI_U8_GLOBAL_ENABLE);

}
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <WelcomeMainScreen>:

void WelcomeMainScreen()
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	2e 97       	sbiw	r28, 0x0e	; 14
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61

	LCD_void_Clear_Screen();
    1770:	0e 94 57 1d 	call	0x3aae	; 0x3aae <LCD_void_Clear_Screen>
	LCD_void_Write_String("Welcome to my");
    1774:	80 e6       	ldi	r24, 0x60	; 96
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
	LCD_void_DDRAM_Address(1,0);
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
	LCD_void_Write_String("Smart Home");
    1784:	8e e6       	ldi	r24, 0x6E	; 110
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	aa e7       	ldi	r26, 0x7A	; 122
    1792:	b4 e4       	ldi	r27, 0x44	; 68
    1794:	8b 87       	std	Y+11, r24	; 0x0b
    1796:	9c 87       	std	Y+12, r25	; 0x0c
    1798:	ad 87       	std	Y+13, r26	; 0x0d
    179a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179c:	6b 85       	ldd	r22, Y+11	; 0x0b
    179e:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	4a ef       	ldi	r20, 0xFA	; 250
    17aa:	54 e4       	ldi	r21, 0x44	; 68
    17ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	8f 83       	std	Y+7, r24	; 0x07
    17b6:	98 87       	std	Y+8, r25	; 0x08
    17b8:	a9 87       	std	Y+9, r26	; 0x09
    17ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17bc:	6f 81       	ldd	r22, Y+7	; 0x07
    17be:	78 85       	ldd	r23, Y+8	; 0x08
    17c0:	89 85       	ldd	r24, Y+9	; 0x09
    17c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e8       	ldi	r20, 0x80	; 128
    17ca:	5f e3       	ldi	r21, 0x3F	; 63
    17cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17d0:	88 23       	and	r24, r24
    17d2:	2c f4       	brge	.+10     	; 0x17de <WelcomeMainScreen+0x82>
		__ticks = 1;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	9e 83       	std	Y+6, r25	; 0x06
    17da:	8d 83       	std	Y+5, r24	; 0x05
    17dc:	3f c0       	rjmp	.+126    	; 0x185c <WelcomeMainScreen+0x100>
	else if (__tmp > 65535)
    17de:	6f 81       	ldd	r22, Y+7	; 0x07
    17e0:	78 85       	ldd	r23, Y+8	; 0x08
    17e2:	89 85       	ldd	r24, Y+9	; 0x09
    17e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	3f ef       	ldi	r19, 0xFF	; 255
    17ea:	4f e7       	ldi	r20, 0x7F	; 127
    17ec:	57 e4       	ldi	r21, 0x47	; 71
    17ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17f2:	18 16       	cp	r1, r24
    17f4:	4c f5       	brge	.+82     	; 0x1848 <WelcomeMainScreen+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    17fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e2       	ldi	r20, 0x20	; 32
    1804:	51 e4       	ldi	r21, 0x41	; 65
    1806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	bc 01       	movw	r22, r24
    1810:	cd 01       	movw	r24, r26
    1812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	9e 83       	std	Y+6, r25	; 0x06
    181c:	8d 83       	std	Y+5, r24	; 0x05
    181e:	0f c0       	rjmp	.+30     	; 0x183e <WelcomeMainScreen+0xe2>
    1820:	88 ec       	ldi	r24, 0xC8	; 200
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	9c 83       	std	Y+4, r25	; 0x04
    1826:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	9c 81       	ldd	r25, Y+4	; 0x04
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	f1 f7       	brne	.-4      	; 0x182c <WelcomeMainScreen+0xd0>
    1830:	9c 83       	std	Y+4, r25	; 0x04
    1832:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1834:	8d 81       	ldd	r24, Y+5	; 0x05
    1836:	9e 81       	ldd	r25, Y+6	; 0x06
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	9e 83       	std	Y+6, r25	; 0x06
    183c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183e:	8d 81       	ldd	r24, Y+5	; 0x05
    1840:	9e 81       	ldd	r25, Y+6	; 0x06
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	69 f7       	brne	.-38     	; 0x1820 <WelcomeMainScreen+0xc4>
    1846:	14 c0       	rjmp	.+40     	; 0x1870 <WelcomeMainScreen+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1848:	6f 81       	ldd	r22, Y+7	; 0x07
    184a:	78 85       	ldd	r23, Y+8	; 0x08
    184c:	89 85       	ldd	r24, Y+9	; 0x09
    184e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	9e 83       	std	Y+6, r25	; 0x06
    185a:	8d 83       	std	Y+5, r24	; 0x05
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	9e 81       	ldd	r25, Y+6	; 0x06
    1860:	9a 83       	std	Y+2, r25	; 0x02
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	9a 81       	ldd	r25, Y+2	; 0x02
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	f1 f7       	brne	.-4      	; 0x1868 <WelcomeMainScreen+0x10c>
    186c:	9a 83       	std	Y+2, r25	; 0x02
    186e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(SHORT_DELAY);
	start_project();
    1870:	0e 94 43 0c 	call	0x1886	; 0x1886 <start_project>

}
    1874:	2e 96       	adiw	r28, 0x0e	; 14
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <start_project>:

static void start_project()
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	0f 92       	push	r0
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
	u8 Password_door;

	LCD_void_Clear_Screen();
    1890:	0e 94 57 1d 	call	0x3aae	; 0x3aae <LCD_void_Clear_Screen>
		LCD_void_Write_String("  Select Mode:  ");
    1894:	89 e7       	ldi	r24, 0x79	; 121
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
			LCD_void_DDRAM_Address(1,0);
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
			LCD_void_Write_String("1-Admin  2-Guest");
    18a4:	8a e8       	ldi	r24, 0x8A	; 138
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>

			Password_door = KPD_Void_GET_Status();
    18ac:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <KPD_Void_GET_Status>
    18b0:	89 83       	std	Y+1, r24	; 0x01

			if(Password_door=='1')
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	81 33       	cpi	r24, 0x31	; 49
    18b6:	19 f4       	brne	.+6      	; 0x18be <start_project+0x38>
			{

				AdminModeDoor();
    18b8:	0e 94 6d 0c 	call	0x18da	; 0x18da <AdminModeDoor>
    18bc:	0a c0       	rjmp	.+20     	; 0x18d2 <start_project+0x4c>
			}
			else if(Password_door=='2')
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	82 33       	cpi	r24, 0x32	; 50
    18c2:	19 f4       	brne	.+6      	; 0x18ca <start_project+0x44>
			{
				GuestModeDoor();
    18c4:	0e 94 16 14 	call	0x282c	; 0x282c <GuestModeDoor>
    18c8:	04 c0       	rjmp	.+8      	; 0x18d2 <start_project+0x4c>
			}
			else
			{
				WrongChoice();
    18ca:	0e 94 83 13 	call	0x2706	; 0x2706 <WrongChoice>
				WelcomeMainScreen();
    18ce:	0e 94 ae 0b 	call	0x175c	; 0x175c <WelcomeMainScreen>
			}


}
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <AdminModeDoor>:
static void AdminModeDoor()
{
    18da:	0f 93       	push	r16
    18dc:	1f 93       	push	r17
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	a4 97       	sbiw	r28, 0x24	; 36
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
	u8 statePass = WrongPass ;
    18f2:	18 a2       	std	Y+32, r1	; 0x20
	u8 adminEnterPass[4];


	for(u8 j=0 ; (j<Tries && statePass==WrongPass);j++)
    18f4:	1f 8e       	std	Y+31, r1	; 0x1f
    18f6:	be c0       	rjmp	.+380    	; 0x1a74 <AdminModeDoor+0x19a>
	{

			LCD_void_Clear_Screen();
    18f8:	0e 94 57 1d 	call	0x3aae	; 0x3aae <LCD_void_Clear_Screen>
			LCD_void_Write_String("  Admin Mode:  ");
    18fc:	8b e9       	ldi	r24, 0x9B	; 155
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
			LCD_void_DDRAM_Address(1,0);
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
			LCD_void_Write_String("Enter Pass:");
    190c:	8b ea       	ldi	r24, 0xAB	; 171
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>

		/*get password*/
		for(u8 k =0 ; k<NumAdminPass ; k++)
    1914:	1e 8e       	std	Y+30, r1	; 0x1e
    1916:	84 c0       	rjmp	.+264    	; 0x1a20 <AdminModeDoor+0x146>
		{
			adminEnterPass[k] = KPD_Void_GET_Status();
    1918:	8e 8d       	ldd	r24, Y+30	; 0x1e
    191a:	08 2f       	mov	r16, r24
    191c:	10 e0       	ldi	r17, 0x00	; 0
    191e:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <KPD_Void_GET_Status>
    1922:	28 2f       	mov	r18, r24
    1924:	ce 01       	movw	r24, r28
    1926:	81 96       	adiw	r24, 0x21	; 33
    1928:	fc 01       	movw	r30, r24
    192a:	e0 0f       	add	r30, r16
    192c:	f1 1f       	adc	r31, r17
    192e:	20 83       	st	Z, r18
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	a8 e4       	ldi	r26, 0x48	; 72
    1936:	b3 e4       	ldi	r27, 0x43	; 67
    1938:	89 8f       	std	Y+25, r24	; 0x19
    193a:	9a 8f       	std	Y+26, r25	; 0x1a
    193c:	ab 8f       	std	Y+27, r26	; 0x1b
    193e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1940:	69 8d       	ldd	r22, Y+25	; 0x19
    1942:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1944:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1946:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	4a ef       	ldi	r20, 0xFA	; 250
    194e:	54 e4       	ldi	r21, 0x44	; 68
    1950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	8d 8b       	std	Y+21, r24	; 0x15
    195a:	9e 8b       	std	Y+22, r25	; 0x16
    195c:	af 8b       	std	Y+23, r26	; 0x17
    195e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1960:	6d 89       	ldd	r22, Y+21	; 0x15
    1962:	7e 89       	ldd	r23, Y+22	; 0x16
    1964:	8f 89       	ldd	r24, Y+23	; 0x17
    1966:	98 8d       	ldd	r25, Y+24	; 0x18
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e8       	ldi	r20, 0x80	; 128
    196e:	5f e3       	ldi	r21, 0x3F	; 63
    1970:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1974:	88 23       	and	r24, r24
    1976:	2c f4       	brge	.+10     	; 0x1982 <AdminModeDoor+0xa8>
		__ticks = 1;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9c 8b       	std	Y+20, r25	; 0x14
    197e:	8b 8b       	std	Y+19, r24	; 0x13
    1980:	3f c0       	rjmp	.+126    	; 0x1a00 <AdminModeDoor+0x126>
	else if (__tmp > 65535)
    1982:	6d 89       	ldd	r22, Y+21	; 0x15
    1984:	7e 89       	ldd	r23, Y+22	; 0x16
    1986:	8f 89       	ldd	r24, Y+23	; 0x17
    1988:	98 8d       	ldd	r25, Y+24	; 0x18
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	3f ef       	ldi	r19, 0xFF	; 255
    198e:	4f e7       	ldi	r20, 0x7F	; 127
    1990:	57 e4       	ldi	r21, 0x47	; 71
    1992:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1996:	18 16       	cp	r1, r24
    1998:	4c f5       	brge	.+82     	; 0x19ec <AdminModeDoor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199a:	69 8d       	ldd	r22, Y+25	; 0x19
    199c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    199e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e2       	ldi	r20, 0x20	; 32
    19a8:	51 e4       	ldi	r21, 0x41	; 65
    19aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	bc 01       	movw	r22, r24
    19b4:	cd 01       	movw	r24, r26
    19b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	9c 8b       	std	Y+20, r25	; 0x14
    19c0:	8b 8b       	std	Y+19, r24	; 0x13
    19c2:	0f c0       	rjmp	.+30     	; 0x19e2 <AdminModeDoor+0x108>
    19c4:	88 ec       	ldi	r24, 0xC8	; 200
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	9a 8b       	std	Y+18, r25	; 0x12
    19ca:	89 8b       	std	Y+17, r24	; 0x11
    19cc:	89 89       	ldd	r24, Y+17	; 0x11
    19ce:	9a 89       	ldd	r25, Y+18	; 0x12
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <AdminModeDoor+0xf6>
    19d4:	9a 8b       	std	Y+18, r25	; 0x12
    19d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d8:	8b 89       	ldd	r24, Y+19	; 0x13
    19da:	9c 89       	ldd	r25, Y+20	; 0x14
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	9c 8b       	std	Y+20, r25	; 0x14
    19e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e2:	8b 89       	ldd	r24, Y+19	; 0x13
    19e4:	9c 89       	ldd	r25, Y+20	; 0x14
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	69 f7       	brne	.-38     	; 0x19c4 <AdminModeDoor+0xea>
    19ea:	14 c0       	rjmp	.+40     	; 0x1a14 <AdminModeDoor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ec:	6d 89       	ldd	r22, Y+21	; 0x15
    19ee:	7e 89       	ldd	r23, Y+22	; 0x16
    19f0:	8f 89       	ldd	r24, Y+23	; 0x17
    19f2:	98 8d       	ldd	r25, Y+24	; 0x18
    19f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	9c 8b       	std	Y+20, r25	; 0x14
    19fe:	8b 8b       	std	Y+19, r24	; 0x13
    1a00:	8b 89       	ldd	r24, Y+19	; 0x13
    1a02:	9c 89       	ldd	r25, Y+20	; 0x14
    1a04:	98 8b       	std	Y+16, r25	; 0x10
    1a06:	8f 87       	std	Y+15, r24	; 0x0f
    1a08:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a0a:	98 89       	ldd	r25, Y+16	; 0x10
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <AdminModeDoor+0x132>
    1a10:	98 8b       	std	Y+16, r25	; 0x10
    1a12:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(MINI_DELAY);
			LCD_void_Write_Data('*');
    1a14:	8a e2       	ldi	r24, 0x2A	; 42
    1a16:	0e 94 16 1c 	call	0x382c	; 0x382c <LCD_void_Write_Data>
			LCD_void_Write_String("  Admin Mode:  ");
			LCD_void_DDRAM_Address(1,0);
			LCD_void_Write_String("Enter Pass:");

		/*get password*/
		for(u8 k =0 ; k<NumAdminPass ; k++)
    1a1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a1c:	8f 5f       	subi	r24, 0xFF	; 255
    1a1e:	8e 8f       	std	Y+30, r24	; 0x1e
    1a20:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a22:	84 30       	cpi	r24, 0x04	; 4
    1a24:	08 f4       	brcc	.+2      	; 0x1a28 <AdminModeDoor+0x14e>
    1a26:	78 cf       	rjmp	.-272    	; 0x1918 <AdminModeDoor+0x3e>
			_delay_ms(MINI_DELAY);
			LCD_void_Write_Data('*');

		}

		statePass=TruePass;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	88 a3       	std	Y+32, r24	; 0x20

		/*check password*/
		for(u8 i=0 ; i<NumAdminPass ; i++)
    1a2c:	1d 8e       	std	Y+29, r1	; 0x1d
    1a2e:	1c c0       	rjmp	.+56     	; 0x1a68 <AdminModeDoor+0x18e>
		{
			if(adminEnterPass[i] != adminPass[i])
    1a30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	ce 01       	movw	r24, r28
    1a38:	81 96       	adiw	r24, 0x21	; 33
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	e2 0f       	add	r30, r18
    1a3e:	f3 1f       	adc	r31, r19
    1a40:	20 81       	ld	r18, Z
    1a42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a44:	88 2f       	mov	r24, r24
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	fc 01       	movw	r30, r24
    1a4a:	e9 5e       	subi	r30, 0xE9	; 233
    1a4c:	fc 4f       	sbci	r31, 0xFC	; 252
    1a4e:	80 81       	ld	r24, Z
    1a50:	28 17       	cp	r18, r24
    1a52:	39 f0       	breq	.+14     	; 0x1a62 <AdminModeDoor+0x188>
			{
				statePass=WrongPass;
    1a54:	18 a2       	std	Y+32, r1	; 0x20
				WrongPassword(2-j);
    1a56:	82 e0       	ldi	r24, 0x02	; 2
    1a58:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a5a:	89 1b       	sub	r24, r25
    1a5c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <WrongPassword>
    1a60:	06 c0       	rjmp	.+12     	; 0x1a6e <AdminModeDoor+0x194>
		}

		statePass=TruePass;

		/*check password*/
		for(u8 i=0 ; i<NumAdminPass ; i++)
    1a62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a64:	8f 5f       	subi	r24, 0xFF	; 255
    1a66:	8d 8f       	std	Y+29, r24	; 0x1d
    1a68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a6a:	84 30       	cpi	r24, 0x04	; 4
    1a6c:	08 f3       	brcs	.-62     	; 0x1a30 <AdminModeDoor+0x156>
{
	u8 statePass = WrongPass ;
	u8 adminEnterPass[4];


	for(u8 j=0 ; (j<Tries && statePass==WrongPass);j++)
    1a6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a70:	8f 5f       	subi	r24, 0xFF	; 255
    1a72:	8f 8f       	std	Y+31, r24	; 0x1f
    1a74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a76:	83 30       	cpi	r24, 0x03	; 3
    1a78:	20 f4       	brcc	.+8      	; 0x1a82 <AdminModeDoor+0x1a8>
    1a7a:	88 a1       	ldd	r24, Y+32	; 0x20
    1a7c:	88 23       	and	r24, r24
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <AdminModeDoor+0x1a8>
    1a80:	3b cf       	rjmp	.-394    	; 0x18f8 <AdminModeDoor+0x1e>
				break;
			}
		}

	}
	if(statePass==TruePass)
    1a82:	88 a1       	ldd	r24, Y+32	; 0x20
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	09 f0       	breq	.+2      	; 0x1a8a <AdminModeDoor+0x1b0>
    1a88:	83 c0       	rjmp	.+262    	; 0x1b90 <AdminModeDoor+0x2b6>
		{

		LCD_void_Clear_Screen();
    1a8a:	0e 94 57 1d 	call	0x3aae	; 0x3aae <LCD_void_Clear_Screen>
		LCD_void_Write_String("    Welcome    ");
    1a8e:	87 eb       	ldi	r24, 0xB7	; 183
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
		LCD_void_DDRAM_Address(1,0);
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	60 e0       	ldi	r22, 0x00	; 0
    1a9a:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
		LCD_void_Write_String("   Abdelfattah  ");
    1a9e:	87 ec       	ldi	r24, 0xC7	; 199
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	aa e7       	ldi	r26, 0x7A	; 122
    1aac:	b4 e4       	ldi	r27, 0x44	; 68
    1aae:	8b 87       	std	Y+11, r24	; 0x0b
    1ab0:	9c 87       	std	Y+12, r25	; 0x0c
    1ab2:	ad 87       	std	Y+13, r26	; 0x0d
    1ab4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1abc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	4a ef       	ldi	r20, 0xFA	; 250
    1ac4:	54 e4       	ldi	r21, 0x44	; 68
    1ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	8f 83       	std	Y+7, r24	; 0x07
    1ad0:	98 87       	std	Y+8, r25	; 0x08
    1ad2:	a9 87       	std	Y+9, r26	; 0x09
    1ad4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad8:	78 85       	ldd	r23, Y+8	; 0x08
    1ada:	89 85       	ldd	r24, Y+9	; 0x09
    1adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e8       	ldi	r20, 0x80	; 128
    1ae4:	5f e3       	ldi	r21, 0x3F	; 63
    1ae6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aea:	88 23       	and	r24, r24
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <AdminModeDoor+0x21e>
		__ticks = 1;
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	9e 83       	std	Y+6, r25	; 0x06
    1af4:	8d 83       	std	Y+5, r24	; 0x05
    1af6:	3f c0       	rjmp	.+126    	; 0x1b76 <AdminModeDoor+0x29c>
	else if (__tmp > 65535)
    1af8:	6f 81       	ldd	r22, Y+7	; 0x07
    1afa:	78 85       	ldd	r23, Y+8	; 0x08
    1afc:	89 85       	ldd	r24, Y+9	; 0x09
    1afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	3f ef       	ldi	r19, 0xFF	; 255
    1b04:	4f e7       	ldi	r20, 0x7F	; 127
    1b06:	57 e4       	ldi	r21, 0x47	; 71
    1b08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b0c:	18 16       	cp	r1, r24
    1b0e:	4c f5       	brge	.+82     	; 0x1b62 <AdminModeDoor+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e2       	ldi	r20, 0x20	; 32
    1b1e:	51 e4       	ldi	r21, 0x41	; 65
    1b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	bc 01       	movw	r22, r24
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	9e 83       	std	Y+6, r25	; 0x06
    1b36:	8d 83       	std	Y+5, r24	; 0x05
    1b38:	0f c0       	rjmp	.+30     	; 0x1b58 <AdminModeDoor+0x27e>
    1b3a:	88 ec       	ldi	r24, 0xC8	; 200
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	9c 83       	std	Y+4, r25	; 0x04
    1b40:	8b 83       	std	Y+3, r24	; 0x03
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <AdminModeDoor+0x26c>
    1b4a:	9c 83       	std	Y+4, r25	; 0x04
    1b4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	9e 83       	std	Y+6, r25	; 0x06
    1b56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	69 f7       	brne	.-38     	; 0x1b3a <AdminModeDoor+0x260>
    1b60:	14 c0       	rjmp	.+40     	; 0x1b8a <AdminModeDoor+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b62:	6f 81       	ldd	r22, Y+7	; 0x07
    1b64:	78 85       	ldd	r23, Y+8	; 0x08
    1b66:	89 85       	ldd	r24, Y+9	; 0x09
    1b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7a:	9a 83       	std	Y+2, r25	; 0x02
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	9a 81       	ldd	r25, Y+2	; 0x02
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <AdminModeDoor+0x2a8>
    1b86:	9a 83       	std	Y+2, r25	; 0x02
    1b88:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(SHORT_DELAY);
		TrueAdminPass();
    1b8a:	0e 94 75 0e 	call	0x1cea	; 0x1cea <TrueAdminPass>
    1b8e:	05 c0       	rjmp	.+10     	; 0x1b9a <AdminModeDoor+0x2c0>

		}
	else if(statePass==WrongPass)
    1b90:	88 a1       	ldd	r24, Y+32	; 0x20
    1b92:	88 23       	and	r24, r24
    1b94:	11 f4       	brne	.+4      	; 0x1b9a <AdminModeDoor+0x2c0>
		{

		BlockMode();
    1b96:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <BlockMode>
		}




}
    1b9a:	a4 96       	adiw	r28, 0x24	; 36
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	1f 91       	pop	r17
    1bac:	0f 91       	pop	r16
    1bae:	08 95       	ret

00001bb0 <WrongPassword>:



static void WrongPassword(u8 iteration)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
    1bb8:	2f 97       	sbiw	r28, 0x0f	; 15
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	f8 94       	cli
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	cd bf       	out	0x3d, r28	; 61
    1bc4:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_void_Clear_Screen();
    1bc6:	0e 94 57 1d 	call	0x3aae	; 0x3aae <LCD_void_Clear_Screen>
	LCD_void_Write_String("Wrong Password");
    1bca:	88 ed       	ldi	r24, 0xD8	; 216
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
	LCD_void_DDRAM_Address(1,0);
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	60 e0       	ldi	r22, 0x00	; 0
    1bd6:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
	LCD_void_Write_String("Tries Left");
    1bda:	87 ee       	ldi	r24, 0xE7	; 231
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
	LCD_void_Write_Numbers(iteration);
    1be2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be4:	88 2f       	mov	r24, r24
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	a0 e0       	ldi	r26, 0x00	; 0
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	bc 01       	movw	r22, r24
    1bee:	cd 01       	movw	r24, r26
    1bf0:	0e 94 44 1c 	call	0x3888	; 0x3888 <LCD_void_Write_Numbers>
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	aa e7       	ldi	r26, 0x7A	; 122
    1bfa:	b4 e4       	ldi	r27, 0x44	; 68
    1bfc:	8b 87       	std	Y+11, r24	; 0x0b
    1bfe:	9c 87       	std	Y+12, r25	; 0x0c
    1c00:	ad 87       	std	Y+13, r26	; 0x0d
    1c02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	4a ef       	ldi	r20, 0xFA	; 250
    1c12:	54 e4       	ldi	r21, 0x44	; 68
    1c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	8f 83       	std	Y+7, r24	; 0x07
    1c1e:	98 87       	std	Y+8, r25	; 0x08
    1c20:	a9 87       	std	Y+9, r26	; 0x09
    1c22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c24:	6f 81       	ldd	r22, Y+7	; 0x07
    1c26:	78 85       	ldd	r23, Y+8	; 0x08
    1c28:	89 85       	ldd	r24, Y+9	; 0x09
    1c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e8       	ldi	r20, 0x80	; 128
    1c32:	5f e3       	ldi	r21, 0x3F	; 63
    1c34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c38:	88 23       	and	r24, r24
    1c3a:	2c f4       	brge	.+10     	; 0x1c46 <WrongPassword+0x96>
		__ticks = 1;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	9e 83       	std	Y+6, r25	; 0x06
    1c42:	8d 83       	std	Y+5, r24	; 0x05
    1c44:	3f c0       	rjmp	.+126    	; 0x1cc4 <WrongPassword+0x114>
	else if (__tmp > 65535)
    1c46:	6f 81       	ldd	r22, Y+7	; 0x07
    1c48:	78 85       	ldd	r23, Y+8	; 0x08
    1c4a:	89 85       	ldd	r24, Y+9	; 0x09
    1c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	3f ef       	ldi	r19, 0xFF	; 255
    1c52:	4f e7       	ldi	r20, 0x7F	; 127
    1c54:	57 e4       	ldi	r21, 0x47	; 71
    1c56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c5a:	18 16       	cp	r1, r24
    1c5c:	4c f5       	brge	.+82     	; 0x1cb0 <WrongPassword+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e2       	ldi	r20, 0x20	; 32
    1c6c:	51 e4       	ldi	r21, 0x41	; 65
    1c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	bc 01       	movw	r22, r24
    1c78:	cd 01       	movw	r24, r26
    1c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	9e 83       	std	Y+6, r25	; 0x06
    1c84:	8d 83       	std	Y+5, r24	; 0x05
    1c86:	0f c0       	rjmp	.+30     	; 0x1ca6 <WrongPassword+0xf6>
    1c88:	88 ec       	ldi	r24, 0xC8	; 200
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	9c 83       	std	Y+4, r25	; 0x04
    1c8e:	8b 83       	std	Y+3, r24	; 0x03
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	9c 81       	ldd	r25, Y+4	; 0x04
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <WrongPassword+0xe4>
    1c98:	9c 83       	std	Y+4, r25	; 0x04
    1c9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	9e 83       	std	Y+6, r25	; 0x06
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	69 f7       	brne	.-38     	; 0x1c88 <WrongPassword+0xd8>
    1cae:	14 c0       	rjmp	.+40     	; 0x1cd8 <WrongPassword+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb2:	78 85       	ldd	r23, Y+8	; 0x08
    1cb4:	89 85       	ldd	r24, Y+9	; 0x09
    1cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	9e 83       	std	Y+6, r25	; 0x06
    1cc2:	8d 83       	std	Y+5, r24	; 0x05
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc8:	9a 83       	std	Y+2, r25	; 0x02
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <WrongPassword+0x120>
    1cd4:	9a 83       	std	Y+2, r25	; 0x02
    1cd6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(SHORT_DELAY);
}
    1cd8:	2f 96       	adiw	r28, 0x0f	; 15
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <TrueAdminPass>:



static void TrueAdminPass()
{
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	0f 92       	push	r0
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62

	u8 pressedkey;
	DIO_U8_Set_Pin_value(PORTA_ID,DIO_U8_PIN3,PIN_HIGH);
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	63 e0       	ldi	r22, 0x03	; 3
    1cf8:	41 e0       	ldi	r20, 0x01	; 1
    1cfa:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
	LCD_void_Clear_Screen();
    1cfe:	0e 94 57 1d 	call	0x3aae	; 0x3aae <LCD_void_Clear_Screen>
	LCD_void_Write_String("1:Home  2:Grage");
    1d02:	82 ef       	ldi	r24, 0xF2	; 242
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
	pressedkey = KPD_Void_GET_Status();
    1d0a:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <KPD_Void_GET_Status>
    1d0e:	89 83       	std	Y+1, r24	; 0x01
	if(pressedkey=='1')
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	81 33       	cpi	r24, 0x31	; 49
    1d14:	19 f4       	brne	.+6      	; 0x1d1c <TrueAdminPass+0x32>
	{
		AdminChoosedHome();
    1d16:	0e 94 3c 11 	call	0x2278	; 0x2278 <AdminChoosedHome>
    1d1a:	0a c0       	rjmp	.+20     	; 0x1d30 <TrueAdminPass+0x46>
	}
	else if(pressedkey=='2')
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	82 33       	cpi	r24, 0x32	; 50
    1d20:	19 f4       	brne	.+6      	; 0x1d28 <TrueAdminPass+0x3e>
	{
		AdminChoosedGrage();
    1d22:	0e 94 61 12 	call	0x24c2	; 0x24c2 <AdminChoosedGrage>
    1d26:	04 c0       	rjmp	.+8      	; 0x1d30 <TrueAdminPass+0x46>
	}
	else
	{
		WrongChoice();
    1d28:	0e 94 83 13 	call	0x2706	; 0x2706 <WrongChoice>
		TrueAdminPass();
    1d2c:	0e 94 75 0e 	call	0x1cea	; 0x1cea <TrueAdminPass>
	}

}
    1d30:	0f 90       	pop	r0
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <BlockMode>:


static void BlockMode()
{
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	c6 54       	subi	r28, 0x46	; 70
    1d46:	d0 40       	sbci	r29, 0x00	; 0
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
		DIO_U8_Set_Pin_value(PORTA_ID,DIO_U8_PIN5,PIN_HIGH);
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	65 e0       	ldi	r22, 0x05	; 5
    1d56:	41 e0       	ldi	r20, 0x01	; 1
    1d58:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
		LCD_void_Clear_Screen();
    1d5c:	0e 94 57 1d 	call	0x3aae	; 0x3aae <LCD_void_Clear_Screen>
		LCD_void_Write_String("Login Blocked");
    1d60:	82 e0       	ldi	r24, 0x02	; 2
    1d62:	91 e0       	ldi	r25, 0x01	; 1
    1d64:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
		LCD_void_DDRAM_Address(1,0);
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
		LCD_void_Write_String("Wait 5 second ");
    1d70:	80 e1       	ldi	r24, 0x10	; 16
    1d72:	91 e0       	ldi	r25, 0x01	; 1
    1d74:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
    1d78:	fe 01       	movw	r30, r28
    1d7a:	ed 5b       	subi	r30, 0xBD	; 189
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	aa e7       	ldi	r26, 0x7A	; 122
    1d84:	b4 e4       	ldi	r27, 0x44	; 68
    1d86:	80 83       	st	Z, r24
    1d88:	91 83       	std	Z+1, r25	; 0x01
    1d8a:	a2 83       	std	Z+2, r26	; 0x02
    1d8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8e:	8e 01       	movw	r16, r28
    1d90:	01 5c       	subi	r16, 0xC1	; 193
    1d92:	1f 4f       	sbci	r17, 0xFF	; 255
    1d94:	fe 01       	movw	r30, r28
    1d96:	ed 5b       	subi	r30, 0xBD	; 189
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	60 81       	ld	r22, Z
    1d9c:	71 81       	ldd	r23, Z+1	; 0x01
    1d9e:	82 81       	ldd	r24, Z+2	; 0x02
    1da0:	93 81       	ldd	r25, Z+3	; 0x03
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	4a ef       	ldi	r20, 0xFA	; 250
    1da8:	54 e4       	ldi	r21, 0x44	; 68
    1daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	f8 01       	movw	r30, r16
    1db4:	80 83       	st	Z, r24
    1db6:	91 83       	std	Z+1, r25	; 0x01
    1db8:	a2 83       	std	Z+2, r26	; 0x02
    1dba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	ff 96       	adiw	r30, 0x3f	; 63
    1dc0:	60 81       	ld	r22, Z
    1dc2:	71 81       	ldd	r23, Z+1	; 0x01
    1dc4:	82 81       	ldd	r24, Z+2	; 0x02
    1dc6:	93 81       	ldd	r25, Z+3	; 0x03
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e8       	ldi	r20, 0x80	; 128
    1dce:	5f e3       	ldi	r21, 0x3F	; 63
    1dd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dd4:	88 23       	and	r24, r24
    1dd6:	2c f4       	brge	.+10     	; 0x1de2 <BlockMode+0xaa>
		__ticks = 1;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	9e af       	std	Y+62, r25	; 0x3e
    1dde:	8d af       	std	Y+61, r24	; 0x3d
    1de0:	46 c0       	rjmp	.+140    	; 0x1e6e <BlockMode+0x136>
	else if (__tmp > 65535)
    1de2:	fe 01       	movw	r30, r28
    1de4:	ff 96       	adiw	r30, 0x3f	; 63
    1de6:	60 81       	ld	r22, Z
    1de8:	71 81       	ldd	r23, Z+1	; 0x01
    1dea:	82 81       	ldd	r24, Z+2	; 0x02
    1dec:	93 81       	ldd	r25, Z+3	; 0x03
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	3f ef       	ldi	r19, 0xFF	; 255
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	57 e4       	ldi	r21, 0x47	; 71
    1df6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dfa:	18 16       	cp	r1, r24
    1dfc:	64 f5       	brge	.+88     	; 0x1e56 <BlockMode+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfe:	fe 01       	movw	r30, r28
    1e00:	ed 5b       	subi	r30, 0xBD	; 189
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	60 81       	ld	r22, Z
    1e06:	71 81       	ldd	r23, Z+1	; 0x01
    1e08:	82 81       	ldd	r24, Z+2	; 0x02
    1e0a:	93 81       	ldd	r25, Z+3	; 0x03
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e2       	ldi	r20, 0x20	; 32
    1e12:	51 e4       	ldi	r21, 0x41	; 65
    1e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9e af       	std	Y+62, r25	; 0x3e
    1e2a:	8d af       	std	Y+61, r24	; 0x3d
    1e2c:	0f c0       	rjmp	.+30     	; 0x1e4c <BlockMode+0x114>
    1e2e:	88 ec       	ldi	r24, 0xC8	; 200
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	9c af       	std	Y+60, r25	; 0x3c
    1e34:	8b af       	std	Y+59, r24	; 0x3b
    1e36:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e38:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	f1 f7       	brne	.-4      	; 0x1e3a <BlockMode+0x102>
    1e3e:	9c af       	std	Y+60, r25	; 0x3c
    1e40:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e42:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e44:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	9e af       	std	Y+62, r25	; 0x3e
    1e4a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	69 f7       	brne	.-38     	; 0x1e2e <BlockMode+0xf6>
    1e54:	16 c0       	rjmp	.+44     	; 0x1e82 <BlockMode+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e56:	fe 01       	movw	r30, r28
    1e58:	ff 96       	adiw	r30, 0x3f	; 63
    1e5a:	60 81       	ld	r22, Z
    1e5c:	71 81       	ldd	r23, Z+1	; 0x01
    1e5e:	82 81       	ldd	r24, Z+2	; 0x02
    1e60:	93 81       	ldd	r25, Z+3	; 0x03
    1e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	9e af       	std	Y+62, r25	; 0x3e
    1e6c:	8d af       	std	Y+61, r24	; 0x3d
    1e6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e70:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e72:	9a af       	std	Y+58, r25	; 0x3a
    1e74:	89 af       	std	Y+57, r24	; 0x39
    1e76:	89 ad       	ldd	r24, Y+57	; 0x39
    1e78:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <BlockMode+0x142>
    1e7e:	9a af       	std	Y+58, r25	; 0x3a
    1e80:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1000);
		LCD_void_DDRAM_Address(1,0);
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	60 e0       	ldi	r22, 0x00	; 0
    1e86:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
		LCD_void_Write_String("Wait 4 second ");
    1e8a:	8f e1       	ldi	r24, 0x1F	; 31
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
    1e8e:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	aa e7       	ldi	r26, 0x7A	; 122
    1e98:	b4 e4       	ldi	r27, 0x44	; 68
    1e9a:	8d ab       	std	Y+53, r24	; 0x35
    1e9c:	9e ab       	std	Y+54, r25	; 0x36
    1e9e:	af ab       	std	Y+55, r26	; 0x37
    1ea0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ea4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ea6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ea8:	98 ad       	ldd	r25, Y+56	; 0x38
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	4a ef       	ldi	r20, 0xFA	; 250
    1eb0:	54 e4       	ldi	r21, 0x44	; 68
    1eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	89 ab       	std	Y+49, r24	; 0x31
    1ebc:	9a ab       	std	Y+50, r25	; 0x32
    1ebe:	ab ab       	std	Y+51, r26	; 0x33
    1ec0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ec2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ec8:	9c a9       	ldd	r25, Y+52	; 0x34
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <BlockMode+0x1ac>
		__ticks = 1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	98 ab       	std	Y+48, r25	; 0x30
    1ee0:	8f a7       	std	Y+47, r24	; 0x2f
    1ee2:	3f c0       	rjmp	.+126    	; 0x1f62 <BlockMode+0x22a>
	else if (__tmp > 65535)
    1ee4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ee6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ee8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eea:	9c a9       	ldd	r25, Y+52	; 0x34
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	3f ef       	ldi	r19, 0xFF	; 255
    1ef0:	4f e7       	ldi	r20, 0x7F	; 127
    1ef2:	57 e4       	ldi	r21, 0x47	; 71
    1ef4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef8:	18 16       	cp	r1, r24
    1efa:	4c f5       	brge	.+82     	; 0x1f4e <BlockMode+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efc:	6d a9       	ldd	r22, Y+53	; 0x35
    1efe:	7e a9       	ldd	r23, Y+54	; 0x36
    1f00:	8f a9       	ldd	r24, Y+55	; 0x37
    1f02:	98 ad       	ldd	r25, Y+56	; 0x38
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e2       	ldi	r20, 0x20	; 32
    1f0a:	51 e4       	ldi	r21, 0x41	; 65
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	98 ab       	std	Y+48, r25	; 0x30
    1f22:	8f a7       	std	Y+47, r24	; 0x2f
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <BlockMode+0x20c>
    1f26:	88 ec       	ldi	r24, 0xC8	; 200
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	9e a7       	std	Y+46, r25	; 0x2e
    1f2c:	8d a7       	std	Y+45, r24	; 0x2d
    1f2e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f30:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <BlockMode+0x1fa>
    1f36:	9e a7       	std	Y+46, r25	; 0x2e
    1f38:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	98 ab       	std	Y+48, r25	; 0x30
    1f42:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f46:	98 a9       	ldd	r25, Y+48	; 0x30
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	69 f7       	brne	.-38     	; 0x1f26 <BlockMode+0x1ee>
    1f4c:	14 c0       	rjmp	.+40     	; 0x1f76 <BlockMode+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f50:	7a a9       	ldd	r23, Y+50	; 0x32
    1f52:	8b a9       	ldd	r24, Y+51	; 0x33
    1f54:	9c a9       	ldd	r25, Y+52	; 0x34
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	98 ab       	std	Y+48, r25	; 0x30
    1f60:	8f a7       	std	Y+47, r24	; 0x2f
    1f62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f64:	98 a9       	ldd	r25, Y+48	; 0x30
    1f66:	9c a7       	std	Y+44, r25	; 0x2c
    1f68:	8b a7       	std	Y+43, r24	; 0x2b
    1f6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f6c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <BlockMode+0x236>
    1f72:	9c a7       	std	Y+44, r25	; 0x2c
    1f74:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		LCD_void_DDRAM_Address(1,0);
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	60 e0       	ldi	r22, 0x00	; 0
    1f7a:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
		LCD_void_Write_String("Wait 3 second ");
    1f7e:	8e e2       	ldi	r24, 0x2E	; 46
    1f80:	91 e0       	ldi	r25, 0x01	; 1
    1f82:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	aa e7       	ldi	r26, 0x7A	; 122
    1f8c:	b4 e4       	ldi	r27, 0x44	; 68
    1f8e:	8f a3       	std	Y+39, r24	; 0x27
    1f90:	98 a7       	std	Y+40, r25	; 0x28
    1f92:	a9 a7       	std	Y+41, r26	; 0x29
    1f94:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f96:	6f a1       	ldd	r22, Y+39	; 0x27
    1f98:	78 a5       	ldd	r23, Y+40	; 0x28
    1f9a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	4a ef       	ldi	r20, 0xFA	; 250
    1fa4:	54 e4       	ldi	r21, 0x44	; 68
    1fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	8b a3       	std	Y+35, r24	; 0x23
    1fb0:	9c a3       	std	Y+36, r25	; 0x24
    1fb2:	ad a3       	std	Y+37, r26	; 0x25
    1fb4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fb6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fb8:	7c a1       	ldd	r23, Y+36	; 0x24
    1fba:	8d a1       	ldd	r24, Y+37	; 0x25
    1fbc:	9e a1       	ldd	r25, Y+38	; 0x26
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e8       	ldi	r20, 0x80	; 128
    1fc4:	5f e3       	ldi	r21, 0x3F	; 63
    1fc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fca:	88 23       	and	r24, r24
    1fcc:	2c f4       	brge	.+10     	; 0x1fd8 <BlockMode+0x2a0>
		__ticks = 1;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9a a3       	std	Y+34, r25	; 0x22
    1fd4:	89 a3       	std	Y+33, r24	; 0x21
    1fd6:	3f c0       	rjmp	.+126    	; 0x2056 <BlockMode+0x31e>
	else if (__tmp > 65535)
    1fd8:	6b a1       	ldd	r22, Y+35	; 0x23
    1fda:	7c a1       	ldd	r23, Y+36	; 0x24
    1fdc:	8d a1       	ldd	r24, Y+37	; 0x25
    1fde:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	3f ef       	ldi	r19, 0xFF	; 255
    1fe4:	4f e7       	ldi	r20, 0x7F	; 127
    1fe6:	57 e4       	ldi	r21, 0x47	; 71
    1fe8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fec:	18 16       	cp	r1, r24
    1fee:	4c f5       	brge	.+82     	; 0x2042 <BlockMode+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ff2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ff4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ff6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e2       	ldi	r20, 0x20	; 32
    1ffe:	51 e4       	ldi	r21, 0x41	; 65
    2000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	bc 01       	movw	r22, r24
    200a:	cd 01       	movw	r24, r26
    200c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	9a a3       	std	Y+34, r25	; 0x22
    2016:	89 a3       	std	Y+33, r24	; 0x21
    2018:	0f c0       	rjmp	.+30     	; 0x2038 <BlockMode+0x300>
    201a:	88 ec       	ldi	r24, 0xC8	; 200
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	98 a3       	std	Y+32, r25	; 0x20
    2020:	8f 8f       	std	Y+31, r24	; 0x1f
    2022:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2024:	98 a1       	ldd	r25, Y+32	; 0x20
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <BlockMode+0x2ee>
    202a:	98 a3       	std	Y+32, r25	; 0x20
    202c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202e:	89 a1       	ldd	r24, Y+33	; 0x21
    2030:	9a a1       	ldd	r25, Y+34	; 0x22
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	9a a3       	std	Y+34, r25	; 0x22
    2036:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2038:	89 a1       	ldd	r24, Y+33	; 0x21
    203a:	9a a1       	ldd	r25, Y+34	; 0x22
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	69 f7       	brne	.-38     	; 0x201a <BlockMode+0x2e2>
    2040:	14 c0       	rjmp	.+40     	; 0x206a <BlockMode+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2042:	6b a1       	ldd	r22, Y+35	; 0x23
    2044:	7c a1       	ldd	r23, Y+36	; 0x24
    2046:	8d a1       	ldd	r24, Y+37	; 0x25
    2048:	9e a1       	ldd	r25, Y+38	; 0x26
    204a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	9a a3       	std	Y+34, r25	; 0x22
    2054:	89 a3       	std	Y+33, r24	; 0x21
    2056:	89 a1       	ldd	r24, Y+33	; 0x21
    2058:	9a a1       	ldd	r25, Y+34	; 0x22
    205a:	9e 8f       	std	Y+30, r25	; 0x1e
    205c:	8d 8f       	std	Y+29, r24	; 0x1d
    205e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2060:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <BlockMode+0x32a>
    2066:	9e 8f       	std	Y+30, r25	; 0x1e
    2068:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		LCD_void_DDRAM_Address(1,0);
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
		LCD_void_Write_String("Wait 2 second ");
    2072:	8d e3       	ldi	r24, 0x3D	; 61
    2074:	91 e0       	ldi	r25, 0x01	; 1
    2076:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	aa e7       	ldi	r26, 0x7A	; 122
    2080:	b4 e4       	ldi	r27, 0x44	; 68
    2082:	89 8f       	std	Y+25, r24	; 0x19
    2084:	9a 8f       	std	Y+26, r25	; 0x1a
    2086:	ab 8f       	std	Y+27, r26	; 0x1b
    2088:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208a:	69 8d       	ldd	r22, Y+25	; 0x19
    208c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    208e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2090:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	4a ef       	ldi	r20, 0xFA	; 250
    2098:	54 e4       	ldi	r21, 0x44	; 68
    209a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	8d 8b       	std	Y+21, r24	; 0x15
    20a4:	9e 8b       	std	Y+22, r25	; 0x16
    20a6:	af 8b       	std	Y+23, r26	; 0x17
    20a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20aa:	6d 89       	ldd	r22, Y+21	; 0x15
    20ac:	7e 89       	ldd	r23, Y+22	; 0x16
    20ae:	8f 89       	ldd	r24, Y+23	; 0x17
    20b0:	98 8d       	ldd	r25, Y+24	; 0x18
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e8       	ldi	r20, 0x80	; 128
    20b8:	5f e3       	ldi	r21, 0x3F	; 63
    20ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20be:	88 23       	and	r24, r24
    20c0:	2c f4       	brge	.+10     	; 0x20cc <BlockMode+0x394>
		__ticks = 1;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9c 8b       	std	Y+20, r25	; 0x14
    20c8:	8b 8b       	std	Y+19, r24	; 0x13
    20ca:	3f c0       	rjmp	.+126    	; 0x214a <BlockMode+0x412>
	else if (__tmp > 65535)
    20cc:	6d 89       	ldd	r22, Y+21	; 0x15
    20ce:	7e 89       	ldd	r23, Y+22	; 0x16
    20d0:	8f 89       	ldd	r24, Y+23	; 0x17
    20d2:	98 8d       	ldd	r25, Y+24	; 0x18
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	3f ef       	ldi	r19, 0xFF	; 255
    20d8:	4f e7       	ldi	r20, 0x7F	; 127
    20da:	57 e4       	ldi	r21, 0x47	; 71
    20dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e0:	18 16       	cp	r1, r24
    20e2:	4c f5       	brge	.+82     	; 0x2136 <BlockMode+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e4:	69 8d       	ldd	r22, Y+25	; 0x19
    20e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e2       	ldi	r20, 0x20	; 32
    20f2:	51 e4       	ldi	r21, 0x41	; 65
    20f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	bc 01       	movw	r22, r24
    20fe:	cd 01       	movw	r24, r26
    2100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	9c 8b       	std	Y+20, r25	; 0x14
    210a:	8b 8b       	std	Y+19, r24	; 0x13
    210c:	0f c0       	rjmp	.+30     	; 0x212c <BlockMode+0x3f4>
    210e:	88 ec       	ldi	r24, 0xC8	; 200
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	9a 8b       	std	Y+18, r25	; 0x12
    2114:	89 8b       	std	Y+17, r24	; 0x11
    2116:	89 89       	ldd	r24, Y+17	; 0x11
    2118:	9a 89       	ldd	r25, Y+18	; 0x12
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	f1 f7       	brne	.-4      	; 0x211a <BlockMode+0x3e2>
    211e:	9a 8b       	std	Y+18, r25	; 0x12
    2120:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2122:	8b 89       	ldd	r24, Y+19	; 0x13
    2124:	9c 89       	ldd	r25, Y+20	; 0x14
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	9c 8b       	std	Y+20, r25	; 0x14
    212a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212c:	8b 89       	ldd	r24, Y+19	; 0x13
    212e:	9c 89       	ldd	r25, Y+20	; 0x14
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	69 f7       	brne	.-38     	; 0x210e <BlockMode+0x3d6>
    2134:	14 c0       	rjmp	.+40     	; 0x215e <BlockMode+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2136:	6d 89       	ldd	r22, Y+21	; 0x15
    2138:	7e 89       	ldd	r23, Y+22	; 0x16
    213a:	8f 89       	ldd	r24, Y+23	; 0x17
    213c:	98 8d       	ldd	r25, Y+24	; 0x18
    213e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	9c 8b       	std	Y+20, r25	; 0x14
    2148:	8b 8b       	std	Y+19, r24	; 0x13
    214a:	8b 89       	ldd	r24, Y+19	; 0x13
    214c:	9c 89       	ldd	r25, Y+20	; 0x14
    214e:	98 8b       	std	Y+16, r25	; 0x10
    2150:	8f 87       	std	Y+15, r24	; 0x0f
    2152:	8f 85       	ldd	r24, Y+15	; 0x0f
    2154:	98 89       	ldd	r25, Y+16	; 0x10
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <BlockMode+0x41e>
    215a:	98 8b       	std	Y+16, r25	; 0x10
    215c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LCD_void_DDRAM_Address(1,0);
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
		LCD_void_Write_String("Wait 1 second ");
    2166:	8c e4       	ldi	r24, 0x4C	; 76
    2168:	91 e0       	ldi	r25, 0x01	; 1
    216a:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	aa e7       	ldi	r26, 0x7A	; 122
    2174:	b4 e4       	ldi	r27, 0x44	; 68
    2176:	8b 87       	std	Y+11, r24	; 0x0b
    2178:	9c 87       	std	Y+12, r25	; 0x0c
    217a:	ad 87       	std	Y+13, r26	; 0x0d
    217c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2180:	7c 85       	ldd	r23, Y+12	; 0x0c
    2182:	8d 85       	ldd	r24, Y+13	; 0x0d
    2184:	9e 85       	ldd	r25, Y+14	; 0x0e
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	4a ef       	ldi	r20, 0xFA	; 250
    218c:	54 e4       	ldi	r21, 0x44	; 68
    218e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	8f 83       	std	Y+7, r24	; 0x07
    2198:	98 87       	std	Y+8, r25	; 0x08
    219a:	a9 87       	std	Y+9, r26	; 0x09
    219c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    219e:	6f 81       	ldd	r22, Y+7	; 0x07
    21a0:	78 85       	ldd	r23, Y+8	; 0x08
    21a2:	89 85       	ldd	r24, Y+9	; 0x09
    21a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e8       	ldi	r20, 0x80	; 128
    21ac:	5f e3       	ldi	r21, 0x3F	; 63
    21ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b2:	88 23       	and	r24, r24
    21b4:	2c f4       	brge	.+10     	; 0x21c0 <BlockMode+0x488>
		__ticks = 1;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	9e 83       	std	Y+6, r25	; 0x06
    21bc:	8d 83       	std	Y+5, r24	; 0x05
    21be:	3f c0       	rjmp	.+126    	; 0x223e <BlockMode+0x506>
	else if (__tmp > 65535)
    21c0:	6f 81       	ldd	r22, Y+7	; 0x07
    21c2:	78 85       	ldd	r23, Y+8	; 0x08
    21c4:	89 85       	ldd	r24, Y+9	; 0x09
    21c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	3f ef       	ldi	r19, 0xFF	; 255
    21cc:	4f e7       	ldi	r20, 0x7F	; 127
    21ce:	57 e4       	ldi	r21, 0x47	; 71
    21d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d4:	18 16       	cp	r1, r24
    21d6:	4c f5       	brge	.+82     	; 0x222a <BlockMode+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21da:	7c 85       	ldd	r23, Y+12	; 0x0c
    21dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21de:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e2       	ldi	r20, 0x20	; 32
    21e6:	51 e4       	ldi	r21, 0x41	; 65
    21e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	bc 01       	movw	r22, r24
    21f2:	cd 01       	movw	r24, r26
    21f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	9e 83       	std	Y+6, r25	; 0x06
    21fe:	8d 83       	std	Y+5, r24	; 0x05
    2200:	0f c0       	rjmp	.+30     	; 0x2220 <BlockMode+0x4e8>
    2202:	88 ec       	ldi	r24, 0xC8	; 200
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9c 83       	std	Y+4, r25	; 0x04
    2208:	8b 83       	std	Y+3, r24	; 0x03
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	9c 81       	ldd	r25, Y+4	; 0x04
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <BlockMode+0x4d6>
    2212:	9c 83       	std	Y+4, r25	; 0x04
    2214:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2216:	8d 81       	ldd	r24, Y+5	; 0x05
    2218:	9e 81       	ldd	r25, Y+6	; 0x06
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	9e 83       	std	Y+6, r25	; 0x06
    221e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2220:	8d 81       	ldd	r24, Y+5	; 0x05
    2222:	9e 81       	ldd	r25, Y+6	; 0x06
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	69 f7       	brne	.-38     	; 0x2202 <BlockMode+0x4ca>
    2228:	14 c0       	rjmp	.+40     	; 0x2252 <BlockMode+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222a:	6f 81       	ldd	r22, Y+7	; 0x07
    222c:	78 85       	ldd	r23, Y+8	; 0x08
    222e:	89 85       	ldd	r24, Y+9	; 0x09
    2230:	9a 85       	ldd	r25, Y+10	; 0x0a
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	8d 83       	std	Y+5, r24	; 0x05
    223e:	8d 81       	ldd	r24, Y+5	; 0x05
    2240:	9e 81       	ldd	r25, Y+6	; 0x06
    2242:	9a 83       	std	Y+2, r25	; 0x02
    2244:	89 83       	std	Y+1, r24	; 0x01
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	9a 81       	ldd	r25, Y+2	; 0x02
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	f1 f7       	brne	.-4      	; 0x224a <BlockMode+0x512>
    224e:	9a 83       	std	Y+2, r25	; 0x02
    2250:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		DIO_U8_Set_Pin_value(PORTA_ID,DIO_U8_PIN5,PIN_LOW);
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	65 e0       	ldi	r22, 0x05	; 5
    2256:	40 e0       	ldi	r20, 0x00	; 0
    2258:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
		WelcomeMainScreen();
    225c:	0e 94 ae 0b 	call	0x175c	; 0x175c <WelcomeMainScreen>
	}
    2260:	ca 5b       	subi	r28, 0xBA	; 186
    2262:	df 4f       	sbci	r29, 0xFF	; 255
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	de bf       	out	0x3e, r29	; 62
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	cd bf       	out	0x3d, r28	; 61
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	1f 91       	pop	r17
    2274:	0f 91       	pop	r16
    2276:	08 95       	ret

00002278 <AdminChoosedHome>:


static void AdminChoosedHome()
{
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    2280:	6c 97       	sbiw	r28, 0x1c	; 28
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
	LCD_void_Clear_Screen();
    228c:	0e 94 57 1d 	call	0x3aae	; 0x3aae <LCD_void_Clear_Screen>
	LCD_void_Write_String("   Home Door");
    2290:	8b e5       	ldi	r24, 0x5B	; 91
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
	LCD_void_DDRAM_Address(1,0);
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	60 e0       	ldi	r22, 0x00	; 0
    229c:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
	LCD_void_Write_String("   Will Open");
    22a0:	88 e6       	ldi	r24, 0x68	; 104
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
	/*on the motor*/
	SERVO_void_Enable(90,SERVO_OC1A);
    22a8:	8a e5       	ldi	r24, 0x5A	; 90
    22aa:	61 e0       	ldi	r22, 0x01	; 1
    22ac:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <SERVO_void_Enable>
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e8       	ldi	r25, 0x80	; 128
    22b4:	ab e3       	ldi	r26, 0x3B	; 59
    22b6:	b5 e4       	ldi	r27, 0x45	; 69
    22b8:	89 8f       	std	Y+25, r24	; 0x19
    22ba:	9a 8f       	std	Y+26, r25	; 0x1a
    22bc:	ab 8f       	std	Y+27, r26	; 0x1b
    22be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c0:	69 8d       	ldd	r22, Y+25	; 0x19
    22c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	4a ef       	ldi	r20, 0xFA	; 250
    22ce:	54 e4       	ldi	r21, 0x44	; 68
    22d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	8d 8b       	std	Y+21, r24	; 0x15
    22da:	9e 8b       	std	Y+22, r25	; 0x16
    22dc:	af 8b       	std	Y+23, r26	; 0x17
    22de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22e0:	6d 89       	ldd	r22, Y+21	; 0x15
    22e2:	7e 89       	ldd	r23, Y+22	; 0x16
    22e4:	8f 89       	ldd	r24, Y+23	; 0x17
    22e6:	98 8d       	ldd	r25, Y+24	; 0x18
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e8       	ldi	r20, 0x80	; 128
    22ee:	5f e3       	ldi	r21, 0x3F	; 63
    22f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f4:	88 23       	and	r24, r24
    22f6:	2c f4       	brge	.+10     	; 0x2302 <AdminChoosedHome+0x8a>
		__ticks = 1;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9c 8b       	std	Y+20, r25	; 0x14
    22fe:	8b 8b       	std	Y+19, r24	; 0x13
    2300:	3f c0       	rjmp	.+126    	; 0x2380 <AdminChoosedHome+0x108>
	else if (__tmp > 65535)
    2302:	6d 89       	ldd	r22, Y+21	; 0x15
    2304:	7e 89       	ldd	r23, Y+22	; 0x16
    2306:	8f 89       	ldd	r24, Y+23	; 0x17
    2308:	98 8d       	ldd	r25, Y+24	; 0x18
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	3f ef       	ldi	r19, 0xFF	; 255
    230e:	4f e7       	ldi	r20, 0x7F	; 127
    2310:	57 e4       	ldi	r21, 0x47	; 71
    2312:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2316:	18 16       	cp	r1, r24
    2318:	4c f5       	brge	.+82     	; 0x236c <AdminChoosedHome+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231a:	69 8d       	ldd	r22, Y+25	; 0x19
    231c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    231e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2320:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e2       	ldi	r20, 0x20	; 32
    2328:	51 e4       	ldi	r21, 0x41	; 65
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	bc 01       	movw	r22, r24
    2334:	cd 01       	movw	r24, r26
    2336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9c 8b       	std	Y+20, r25	; 0x14
    2340:	8b 8b       	std	Y+19, r24	; 0x13
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <AdminChoosedHome+0xea>
    2344:	88 ec       	ldi	r24, 0xC8	; 200
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	9a 8b       	std	Y+18, r25	; 0x12
    234a:	89 8b       	std	Y+17, r24	; 0x11
    234c:	89 89       	ldd	r24, Y+17	; 0x11
    234e:	9a 89       	ldd	r25, Y+18	; 0x12
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <AdminChoosedHome+0xd8>
    2354:	9a 8b       	std	Y+18, r25	; 0x12
    2356:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2358:	8b 89       	ldd	r24, Y+19	; 0x13
    235a:	9c 89       	ldd	r25, Y+20	; 0x14
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	9c 8b       	std	Y+20, r25	; 0x14
    2360:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2362:	8b 89       	ldd	r24, Y+19	; 0x13
    2364:	9c 89       	ldd	r25, Y+20	; 0x14
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	69 f7       	brne	.-38     	; 0x2344 <AdminChoosedHome+0xcc>
    236a:	14 c0       	rjmp	.+40     	; 0x2394 <AdminChoosedHome+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236c:	6d 89       	ldd	r22, Y+21	; 0x15
    236e:	7e 89       	ldd	r23, Y+22	; 0x16
    2370:	8f 89       	ldd	r24, Y+23	; 0x17
    2372:	98 8d       	ldd	r25, Y+24	; 0x18
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	9c 8b       	std	Y+20, r25	; 0x14
    237e:	8b 8b       	std	Y+19, r24	; 0x13
    2380:	8b 89       	ldd	r24, Y+19	; 0x13
    2382:	9c 89       	ldd	r25, Y+20	; 0x14
    2384:	98 8b       	std	Y+16, r25	; 0x10
    2386:	8f 87       	std	Y+15, r24	; 0x0f
    2388:	8f 85       	ldd	r24, Y+15	; 0x0f
    238a:	98 89       	ldd	r25, Y+16	; 0x10
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <AdminChoosedHome+0x114>
    2390:	98 8b       	std	Y+16, r25	; 0x10
    2392:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3000);

	LCD_void_Clear_Screen();
    2394:	0e 94 57 1d 	call	0x3aae	; 0x3aae <LCD_void_Clear_Screen>
	LCD_void_Write_String("   Home Door");
    2398:	8b e5       	ldi	r24, 0x5B	; 91
    239a:	91 e0       	ldi	r25, 0x01	; 1
    239c:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
	LCD_void_DDRAM_Address(1,0);
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	60 e0       	ldi	r22, 0x00	; 0
    23a4:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
	LCD_void_Write_String("Will close again");
    23a8:	85 e7       	ldi	r24, 0x75	; 117
    23aa:	91 e0       	ldi	r25, 0x01	; 1
    23ac:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
	/*off the motor*/
	SERVO_void_Enable(0,SERVO_OC1A);
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	61 e0       	ldi	r22, 0x01	; 1
    23b4:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <SERVO_void_Enable>
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	aa e7       	ldi	r26, 0x7A	; 122
    23be:	b4 e4       	ldi	r27, 0x44	; 68
    23c0:	8b 87       	std	Y+11, r24	; 0x0b
    23c2:	9c 87       	std	Y+12, r25	; 0x0c
    23c4:	ad 87       	std	Y+13, r26	; 0x0d
    23c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    23cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	4a ef       	ldi	r20, 0xFA	; 250
    23d6:	54 e4       	ldi	r21, 0x44	; 68
    23d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	8f 83       	std	Y+7, r24	; 0x07
    23e2:	98 87       	std	Y+8, r25	; 0x08
    23e4:	a9 87       	std	Y+9, r26	; 0x09
    23e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23e8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ea:	78 85       	ldd	r23, Y+8	; 0x08
    23ec:	89 85       	ldd	r24, Y+9	; 0x09
    23ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e8       	ldi	r20, 0x80	; 128
    23f6:	5f e3       	ldi	r21, 0x3F	; 63
    23f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23fc:	88 23       	and	r24, r24
    23fe:	2c f4       	brge	.+10     	; 0x240a <AdminChoosedHome+0x192>
		__ticks = 1;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	9e 83       	std	Y+6, r25	; 0x06
    2406:	8d 83       	std	Y+5, r24	; 0x05
    2408:	3f c0       	rjmp	.+126    	; 0x2488 <AdminChoosedHome+0x210>
	else if (__tmp > 65535)
    240a:	6f 81       	ldd	r22, Y+7	; 0x07
    240c:	78 85       	ldd	r23, Y+8	; 0x08
    240e:	89 85       	ldd	r24, Y+9	; 0x09
    2410:	9a 85       	ldd	r25, Y+10	; 0x0a
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	3f ef       	ldi	r19, 0xFF	; 255
    2416:	4f e7       	ldi	r20, 0x7F	; 127
    2418:	57 e4       	ldi	r21, 0x47	; 71
    241a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    241e:	18 16       	cp	r1, r24
    2420:	4c f5       	brge	.+82     	; 0x2474 <AdminChoosedHome+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2422:	6b 85       	ldd	r22, Y+11	; 0x0b
    2424:	7c 85       	ldd	r23, Y+12	; 0x0c
    2426:	8d 85       	ldd	r24, Y+13	; 0x0d
    2428:	9e 85       	ldd	r25, Y+14	; 0x0e
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e2       	ldi	r20, 0x20	; 32
    2430:	51 e4       	ldi	r21, 0x41	; 65
    2432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	bc 01       	movw	r22, r24
    243c:	cd 01       	movw	r24, r26
    243e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	9e 83       	std	Y+6, r25	; 0x06
    2448:	8d 83       	std	Y+5, r24	; 0x05
    244a:	0f c0       	rjmp	.+30     	; 0x246a <AdminChoosedHome+0x1f2>
    244c:	88 ec       	ldi	r24, 0xC8	; 200
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	9c 83       	std	Y+4, r25	; 0x04
    2452:	8b 83       	std	Y+3, r24	; 0x03
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	9c 81       	ldd	r25, Y+4	; 0x04
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <AdminChoosedHome+0x1e0>
    245c:	9c 83       	std	Y+4, r25	; 0x04
    245e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2460:	8d 81       	ldd	r24, Y+5	; 0x05
    2462:	9e 81       	ldd	r25, Y+6	; 0x06
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	9e 83       	std	Y+6, r25	; 0x06
    2468:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246a:	8d 81       	ldd	r24, Y+5	; 0x05
    246c:	9e 81       	ldd	r25, Y+6	; 0x06
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	69 f7       	brne	.-38     	; 0x244c <AdminChoosedHome+0x1d4>
    2472:	14 c0       	rjmp	.+40     	; 0x249c <AdminChoosedHome+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2474:	6f 81       	ldd	r22, Y+7	; 0x07
    2476:	78 85       	ldd	r23, Y+8	; 0x08
    2478:	89 85       	ldd	r24, Y+9	; 0x09
    247a:	9a 85       	ldd	r25, Y+10	; 0x0a
    247c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	9e 83       	std	Y+6, r25	; 0x06
    2486:	8d 83       	std	Y+5, r24	; 0x05
    2488:	8d 81       	ldd	r24, Y+5	; 0x05
    248a:	9e 81       	ldd	r25, Y+6	; 0x06
    248c:	9a 83       	std	Y+2, r25	; 0x02
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	9a 81       	ldd	r25, Y+2	; 0x02
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <AdminChoosedHome+0x21c>
    2498:	9a 83       	std	Y+2, r25	; 0x02
    249a:	89 83       	std	Y+1, r24	; 0x01

_delay_ms(1000);



	UART_void_Send_Char('A');
    249c:	81 e4       	ldi	r24, 0x41	; 65
    249e:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <UART_void_Send_Char>
	DIO_U8_Set_Pin_value(PORTA_ID,DIO_U8_PIN3,PIN_LOW);
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	63 e0       	ldi	r22, 0x03	; 3
    24a6:	40 e0       	ldi	r20, 0x00	; 0
    24a8:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
	start_project();
    24ac:	0e 94 43 0c 	call	0x1886	; 0x1886 <start_project>



}
    24b0:	6c 96       	adiw	r28, 0x1c	; 28
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	de bf       	out	0x3e, r29	; 62
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	cd bf       	out	0x3d, r28	; 61
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	08 95       	ret

000024c2 <AdminChoosedGrage>:


static void AdminChoosedGrage()
{
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	6c 97       	sbiw	r28, 0x1c	; 28
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
		LCD_void_Clear_Screen();
    24d6:	0e 94 57 1d 	call	0x3aae	; 0x3aae <LCD_void_Clear_Screen>
		LCD_void_Write_String("   Grage Door");
    24da:	86 e8       	ldi	r24, 0x86	; 134
    24dc:	91 e0       	ldi	r25, 0x01	; 1
    24de:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
		LCD_void_DDRAM_Address(1,0);
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	60 e0       	ldi	r22, 0x00	; 0
    24e6:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
		LCD_void_Write_String("   Will Open");
    24ea:	88 e6       	ldi	r24, 0x68	; 104
    24ec:	91 e0       	ldi	r25, 0x01	; 1
    24ee:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
		/*on the motor*/
		SERVO_void_Enable(90,SERVO_OC1B);
    24f2:	8a e5       	ldi	r24, 0x5A	; 90
    24f4:	62 e0       	ldi	r22, 0x02	; 2
    24f6:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <SERVO_void_Enable>
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	90 e8       	ldi	r25, 0x80	; 128
    24fe:	ab e3       	ldi	r26, 0x3B	; 59
    2500:	b5 e4       	ldi	r27, 0x45	; 69
    2502:	89 8f       	std	Y+25, r24	; 0x19
    2504:	9a 8f       	std	Y+26, r25	; 0x1a
    2506:	ab 8f       	std	Y+27, r26	; 0x1b
    2508:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250a:	69 8d       	ldd	r22, Y+25	; 0x19
    250c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    250e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2510:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	4a ef       	ldi	r20, 0xFA	; 250
    2518:	54 e4       	ldi	r21, 0x44	; 68
    251a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	8d 8b       	std	Y+21, r24	; 0x15
    2524:	9e 8b       	std	Y+22, r25	; 0x16
    2526:	af 8b       	std	Y+23, r26	; 0x17
    2528:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    252a:	6d 89       	ldd	r22, Y+21	; 0x15
    252c:	7e 89       	ldd	r23, Y+22	; 0x16
    252e:	8f 89       	ldd	r24, Y+23	; 0x17
    2530:	98 8d       	ldd	r25, Y+24	; 0x18
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e8       	ldi	r20, 0x80	; 128
    2538:	5f e3       	ldi	r21, 0x3F	; 63
    253a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    253e:	88 23       	and	r24, r24
    2540:	2c f4       	brge	.+10     	; 0x254c <AdminChoosedGrage+0x8a>
		__ticks = 1;
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	9c 8b       	std	Y+20, r25	; 0x14
    2548:	8b 8b       	std	Y+19, r24	; 0x13
    254a:	3f c0       	rjmp	.+126    	; 0x25ca <AdminChoosedGrage+0x108>
	else if (__tmp > 65535)
    254c:	6d 89       	ldd	r22, Y+21	; 0x15
    254e:	7e 89       	ldd	r23, Y+22	; 0x16
    2550:	8f 89       	ldd	r24, Y+23	; 0x17
    2552:	98 8d       	ldd	r25, Y+24	; 0x18
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	3f ef       	ldi	r19, 0xFF	; 255
    2558:	4f e7       	ldi	r20, 0x7F	; 127
    255a:	57 e4       	ldi	r21, 0x47	; 71
    255c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2560:	18 16       	cp	r1, r24
    2562:	4c f5       	brge	.+82     	; 0x25b6 <AdminChoosedGrage+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2564:	69 8d       	ldd	r22, Y+25	; 0x19
    2566:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2568:	8b 8d       	ldd	r24, Y+27	; 0x1b
    256a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	40 e2       	ldi	r20, 0x20	; 32
    2572:	51 e4       	ldi	r21, 0x41	; 65
    2574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	9c 8b       	std	Y+20, r25	; 0x14
    258a:	8b 8b       	std	Y+19, r24	; 0x13
    258c:	0f c0       	rjmp	.+30     	; 0x25ac <AdminChoosedGrage+0xea>
    258e:	88 ec       	ldi	r24, 0xC8	; 200
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	9a 8b       	std	Y+18, r25	; 0x12
    2594:	89 8b       	std	Y+17, r24	; 0x11
    2596:	89 89       	ldd	r24, Y+17	; 0x11
    2598:	9a 89       	ldd	r25, Y+18	; 0x12
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <AdminChoosedGrage+0xd8>
    259e:	9a 8b       	std	Y+18, r25	; 0x12
    25a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a2:	8b 89       	ldd	r24, Y+19	; 0x13
    25a4:	9c 89       	ldd	r25, Y+20	; 0x14
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	9c 8b       	std	Y+20, r25	; 0x14
    25aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ac:	8b 89       	ldd	r24, Y+19	; 0x13
    25ae:	9c 89       	ldd	r25, Y+20	; 0x14
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	69 f7       	brne	.-38     	; 0x258e <AdminChoosedGrage+0xcc>
    25b4:	14 c0       	rjmp	.+40     	; 0x25de <AdminChoosedGrage+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b6:	6d 89       	ldd	r22, Y+21	; 0x15
    25b8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ba:	8f 89       	ldd	r24, Y+23	; 0x17
    25bc:	98 8d       	ldd	r25, Y+24	; 0x18
    25be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	9c 8b       	std	Y+20, r25	; 0x14
    25c8:	8b 8b       	std	Y+19, r24	; 0x13
    25ca:	8b 89       	ldd	r24, Y+19	; 0x13
    25cc:	9c 89       	ldd	r25, Y+20	; 0x14
    25ce:	98 8b       	std	Y+16, r25	; 0x10
    25d0:	8f 87       	std	Y+15, r24	; 0x0f
    25d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25d4:	98 89       	ldd	r25, Y+16	; 0x10
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <AdminChoosedGrage+0x114>
    25da:	98 8b       	std	Y+16, r25	; 0x10
    25dc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(3000);

		LCD_void_Clear_Screen();
    25de:	0e 94 57 1d 	call	0x3aae	; 0x3aae <LCD_void_Clear_Screen>
		LCD_void_Write_String("   Grage Door");
    25e2:	86 e8       	ldi	r24, 0x86	; 134
    25e4:	91 e0       	ldi	r25, 0x01	; 1
    25e6:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
		LCD_void_DDRAM_Address(1,0);
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	60 e0       	ldi	r22, 0x00	; 0
    25ee:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
		LCD_void_Write_String("Will close again");
    25f2:	85 e7       	ldi	r24, 0x75	; 117
    25f4:	91 e0       	ldi	r25, 0x01	; 1
    25f6:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
		/*off the motor*/
		SERVO_void_Enable(0,SERVO_OC1B);
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	62 e0       	ldi	r22, 0x02	; 2
    25fe:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <SERVO_void_Enable>
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	aa e7       	ldi	r26, 0x7A	; 122
    2608:	b4 e4       	ldi	r27, 0x44	; 68
    260a:	8b 87       	std	Y+11, r24	; 0x0b
    260c:	9c 87       	std	Y+12, r25	; 0x0c
    260e:	ad 87       	std	Y+13, r26	; 0x0d
    2610:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2612:	6b 85       	ldd	r22, Y+11	; 0x0b
    2614:	7c 85       	ldd	r23, Y+12	; 0x0c
    2616:	8d 85       	ldd	r24, Y+13	; 0x0d
    2618:	9e 85       	ldd	r25, Y+14	; 0x0e
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	4a ef       	ldi	r20, 0xFA	; 250
    2620:	54 e4       	ldi	r21, 0x44	; 68
    2622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	8f 83       	std	Y+7, r24	; 0x07
    262c:	98 87       	std	Y+8, r25	; 0x08
    262e:	a9 87       	std	Y+9, r26	; 0x09
    2630:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2632:	6f 81       	ldd	r22, Y+7	; 0x07
    2634:	78 85       	ldd	r23, Y+8	; 0x08
    2636:	89 85       	ldd	r24, Y+9	; 0x09
    2638:	9a 85       	ldd	r25, Y+10	; 0x0a
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e8       	ldi	r20, 0x80	; 128
    2640:	5f e3       	ldi	r21, 0x3F	; 63
    2642:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2646:	88 23       	and	r24, r24
    2648:	2c f4       	brge	.+10     	; 0x2654 <AdminChoosedGrage+0x192>
		__ticks = 1;
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	9e 83       	std	Y+6, r25	; 0x06
    2650:	8d 83       	std	Y+5, r24	; 0x05
    2652:	3f c0       	rjmp	.+126    	; 0x26d2 <AdminChoosedGrage+0x210>
	else if (__tmp > 65535)
    2654:	6f 81       	ldd	r22, Y+7	; 0x07
    2656:	78 85       	ldd	r23, Y+8	; 0x08
    2658:	89 85       	ldd	r24, Y+9	; 0x09
    265a:	9a 85       	ldd	r25, Y+10	; 0x0a
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	3f ef       	ldi	r19, 0xFF	; 255
    2660:	4f e7       	ldi	r20, 0x7F	; 127
    2662:	57 e4       	ldi	r21, 0x47	; 71
    2664:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2668:	18 16       	cp	r1, r24
    266a:	4c f5       	brge	.+82     	; 0x26be <AdminChoosedGrage+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266c:	6b 85       	ldd	r22, Y+11	; 0x0b
    266e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2670:	8d 85       	ldd	r24, Y+13	; 0x0d
    2672:	9e 85       	ldd	r25, Y+14	; 0x0e
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e2       	ldi	r20, 0x20	; 32
    267a:	51 e4       	ldi	r21, 0x41	; 65
    267c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	bc 01       	movw	r22, r24
    2686:	cd 01       	movw	r24, r26
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	9e 83       	std	Y+6, r25	; 0x06
    2692:	8d 83       	std	Y+5, r24	; 0x05
    2694:	0f c0       	rjmp	.+30     	; 0x26b4 <AdminChoosedGrage+0x1f2>
    2696:	88 ec       	ldi	r24, 0xC8	; 200
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	9c 83       	std	Y+4, r25	; 0x04
    269c:	8b 83       	std	Y+3, r24	; 0x03
    269e:	8b 81       	ldd	r24, Y+3	; 0x03
    26a0:	9c 81       	ldd	r25, Y+4	; 0x04
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	f1 f7       	brne	.-4      	; 0x26a2 <AdminChoosedGrage+0x1e0>
    26a6:	9c 83       	std	Y+4, r25	; 0x04
    26a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26aa:	8d 81       	ldd	r24, Y+5	; 0x05
    26ac:	9e 81       	ldd	r25, Y+6	; 0x06
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	9e 83       	std	Y+6, r25	; 0x06
    26b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b4:	8d 81       	ldd	r24, Y+5	; 0x05
    26b6:	9e 81       	ldd	r25, Y+6	; 0x06
    26b8:	00 97       	sbiw	r24, 0x00	; 0
    26ba:	69 f7       	brne	.-38     	; 0x2696 <AdminChoosedGrage+0x1d4>
    26bc:	14 c0       	rjmp	.+40     	; 0x26e6 <AdminChoosedGrage+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26be:	6f 81       	ldd	r22, Y+7	; 0x07
    26c0:	78 85       	ldd	r23, Y+8	; 0x08
    26c2:	89 85       	ldd	r24, Y+9	; 0x09
    26c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	9e 83       	std	Y+6, r25	; 0x06
    26d0:	8d 83       	std	Y+5, r24	; 0x05
    26d2:	8d 81       	ldd	r24, Y+5	; 0x05
    26d4:	9e 81       	ldd	r25, Y+6	; 0x06
    26d6:	9a 83       	std	Y+2, r25	; 0x02
    26d8:	89 83       	std	Y+1, r24	; 0x01
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	9a 81       	ldd	r25, Y+2	; 0x02
    26de:	01 97       	sbiw	r24, 0x01	; 1
    26e0:	f1 f7       	brne	.-4      	; 0x26de <AdminChoosedGrage+0x21c>
    26e2:	9a 83       	std	Y+2, r25	; 0x02
    26e4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		DIO_U8_Set_Pin_value(PORTA_ID,3,0);
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	63 e0       	ldi	r22, 0x03	; 3
    26ea:	40 e0       	ldi	r20, 0x00	; 0
    26ec:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
		start_project();
    26f0:	0e 94 43 0c 	call	0x1886	; 0x1886 <start_project>

}
    26f4:	6c 96       	adiw	r28, 0x1c	; 28
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <WrongChoice>:

static void WrongChoice()
{
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	2e 97       	sbiw	r28, 0x0e	; 14
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
			LCD_void_Clear_Screen();
    271a:	0e 94 57 1d 	call	0x3aae	; 0x3aae <LCD_void_Clear_Screen>
			LCD_void_Write_String("Wrong Choice");
    271e:	84 e9       	ldi	r24, 0x94	; 148
    2720:	91 e0       	ldi	r25, 0x01	; 1
    2722:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
			LCD_void_DDRAM_Address(1,0);
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	60 e0       	ldi	r22, 0x00	; 0
    272a:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
			LCD_void_Write_String("Choose again");
    272e:	81 ea       	ldi	r24, 0xA1	; 161
    2730:	91 e0       	ldi	r25, 0x01	; 1
    2732:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	aa e7       	ldi	r26, 0x7A	; 122
    273c:	b4 e4       	ldi	r27, 0x44	; 68
    273e:	8b 87       	std	Y+11, r24	; 0x0b
    2740:	9c 87       	std	Y+12, r25	; 0x0c
    2742:	ad 87       	std	Y+13, r26	; 0x0d
    2744:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2746:	6b 85       	ldd	r22, Y+11	; 0x0b
    2748:	7c 85       	ldd	r23, Y+12	; 0x0c
    274a:	8d 85       	ldd	r24, Y+13	; 0x0d
    274c:	9e 85       	ldd	r25, Y+14	; 0x0e
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	4a ef       	ldi	r20, 0xFA	; 250
    2754:	54 e4       	ldi	r21, 0x44	; 68
    2756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	8f 83       	std	Y+7, r24	; 0x07
    2760:	98 87       	std	Y+8, r25	; 0x08
    2762:	a9 87       	std	Y+9, r26	; 0x09
    2764:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2766:	6f 81       	ldd	r22, Y+7	; 0x07
    2768:	78 85       	ldd	r23, Y+8	; 0x08
    276a:	89 85       	ldd	r24, Y+9	; 0x09
    276c:	9a 85       	ldd	r25, Y+10	; 0x0a
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	40 e8       	ldi	r20, 0x80	; 128
    2774:	5f e3       	ldi	r21, 0x3F	; 63
    2776:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    277a:	88 23       	and	r24, r24
    277c:	2c f4       	brge	.+10     	; 0x2788 <WrongChoice+0x82>
		__ticks = 1;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
    2786:	3f c0       	rjmp	.+126    	; 0x2806 <WrongChoice+0x100>
	else if (__tmp > 65535)
    2788:	6f 81       	ldd	r22, Y+7	; 0x07
    278a:	78 85       	ldd	r23, Y+8	; 0x08
    278c:	89 85       	ldd	r24, Y+9	; 0x09
    278e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	3f ef       	ldi	r19, 0xFF	; 255
    2794:	4f e7       	ldi	r20, 0x7F	; 127
    2796:	57 e4       	ldi	r21, 0x47	; 71
    2798:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    279c:	18 16       	cp	r1, r24
    279e:	4c f5       	brge	.+82     	; 0x27f2 <WrongChoice+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e2       	ldi	r20, 0x20	; 32
    27ae:	51 e4       	ldi	r21, 0x41	; 65
    27b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9e 83       	std	Y+6, r25	; 0x06
    27c6:	8d 83       	std	Y+5, r24	; 0x05
    27c8:	0f c0       	rjmp	.+30     	; 0x27e8 <WrongChoice+0xe2>
    27ca:	88 ec       	ldi	r24, 0xC8	; 200
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	9c 83       	std	Y+4, r25	; 0x04
    27d0:	8b 83       	std	Y+3, r24	; 0x03
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	9c 81       	ldd	r25, Y+4	; 0x04
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <WrongChoice+0xd0>
    27da:	9c 83       	std	Y+4, r25	; 0x04
    27dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27de:	8d 81       	ldd	r24, Y+5	; 0x05
    27e0:	9e 81       	ldd	r25, Y+6	; 0x06
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	9e 83       	std	Y+6, r25	; 0x06
    27e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ea:	9e 81       	ldd	r25, Y+6	; 0x06
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	69 f7       	brne	.-38     	; 0x27ca <WrongChoice+0xc4>
    27f0:	14 c0       	rjmp	.+40     	; 0x281a <WrongChoice+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f2:	6f 81       	ldd	r22, Y+7	; 0x07
    27f4:	78 85       	ldd	r23, Y+8	; 0x08
    27f6:	89 85       	ldd	r24, Y+9	; 0x09
    27f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	9e 83       	std	Y+6, r25	; 0x06
    2804:	8d 83       	std	Y+5, r24	; 0x05
    2806:	8d 81       	ldd	r24, Y+5	; 0x05
    2808:	9e 81       	ldd	r25, Y+6	; 0x06
    280a:	9a 83       	std	Y+2, r25	; 0x02
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	9a 81       	ldd	r25, Y+2	; 0x02
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	f1 f7       	brne	.-4      	; 0x2812 <WrongChoice+0x10c>
    2816:	9a 83       	std	Y+2, r25	; 0x02
    2818:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(SHORT_DELAY);
}
    281a:	2e 96       	adiw	r28, 0x0e	; 14
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	de bf       	out	0x3e, r29	; 62
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	cd bf       	out	0x3d, r28	; 61
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <GuestModeDoor>:
/*********************************************************************/


static void GuestModeDoor()
{
    282c:	0f 93       	push	r16
    282e:	1f 93       	push	r17
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	e3 97       	sbiw	r28, 0x33	; 51
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
	u8 statePass = WrongPass ;
    2844:	1f a6       	std	Y+47, r1	; 0x2f
		u8 GuestEnterPass[4];
		u8 guestis ;

		for(u8 j=0 ; (j<Tries && statePass==WrongPass);j++)
    2846:	1d a6       	std	Y+45, r1	; 0x2d
    2848:	d4 c0       	rjmp	.+424    	; 0x29f2 <GuestModeDoor+0x1c6>
		{

				LCD_void_Clear_Screen();
    284a:	0e 94 57 1d 	call	0x3aae	; 0x3aae <LCD_void_Clear_Screen>
				LCD_void_Write_String("  Guest Mode:  ");
    284e:	8e ea       	ldi	r24, 0xAE	; 174
    2850:	91 e0       	ldi	r25, 0x01	; 1
    2852:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
				LCD_void_DDRAM_Address(1,0);
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	60 e0       	ldi	r22, 0x00	; 0
    285a:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
				LCD_void_Write_String("Enter Pass:");
    285e:	8b ea       	ldi	r24, 0xAB	; 171
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>

			/*get password*/
			for(u8 k =0 ; k<4 ; k++)
    2866:	1c a6       	std	Y+44, r1	; 0x2c
    2868:	84 c0       	rjmp	.+264    	; 0x2972 <GuestModeDoor+0x146>
			{
				GuestEnterPass[k] = KPD_Void_GET_Status();
    286a:	8c a5       	ldd	r24, Y+44	; 0x2c
    286c:	08 2f       	mov	r16, r24
    286e:	10 e0       	ldi	r17, 0x00	; 0
    2870:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <KPD_Void_GET_Status>
    2874:	28 2f       	mov	r18, r24
    2876:	ce 01       	movw	r24, r28
    2878:	c0 96       	adiw	r24, 0x30	; 48
    287a:	fc 01       	movw	r30, r24
    287c:	e0 0f       	add	r30, r16
    287e:	f1 1f       	adc	r31, r17
    2880:	20 83       	st	Z, r18
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	a8 e4       	ldi	r26, 0x48	; 72
    2888:	b3 e4       	ldi	r27, 0x43	; 67
    288a:	8f a3       	std	Y+39, r24	; 0x27
    288c:	98 a7       	std	Y+40, r25	; 0x28
    288e:	a9 a7       	std	Y+41, r26	; 0x29
    2890:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2892:	6f a1       	ldd	r22, Y+39	; 0x27
    2894:	78 a5       	ldd	r23, Y+40	; 0x28
    2896:	89 a5       	ldd	r24, Y+41	; 0x29
    2898:	9a a5       	ldd	r25, Y+42	; 0x2a
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	4a ef       	ldi	r20, 0xFA	; 250
    28a0:	54 e4       	ldi	r21, 0x44	; 68
    28a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	8b a3       	std	Y+35, r24	; 0x23
    28ac:	9c a3       	std	Y+36, r25	; 0x24
    28ae:	ad a3       	std	Y+37, r26	; 0x25
    28b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28b2:	6b a1       	ldd	r22, Y+35	; 0x23
    28b4:	7c a1       	ldd	r23, Y+36	; 0x24
    28b6:	8d a1       	ldd	r24, Y+37	; 0x25
    28b8:	9e a1       	ldd	r25, Y+38	; 0x26
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e8       	ldi	r20, 0x80	; 128
    28c0:	5f e3       	ldi	r21, 0x3F	; 63
    28c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28c6:	88 23       	and	r24, r24
    28c8:	2c f4       	brge	.+10     	; 0x28d4 <GuestModeDoor+0xa8>
		__ticks = 1;
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	9a a3       	std	Y+34, r25	; 0x22
    28d0:	89 a3       	std	Y+33, r24	; 0x21
    28d2:	3f c0       	rjmp	.+126    	; 0x2952 <GuestModeDoor+0x126>
	else if (__tmp > 65535)
    28d4:	6b a1       	ldd	r22, Y+35	; 0x23
    28d6:	7c a1       	ldd	r23, Y+36	; 0x24
    28d8:	8d a1       	ldd	r24, Y+37	; 0x25
    28da:	9e a1       	ldd	r25, Y+38	; 0x26
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	3f ef       	ldi	r19, 0xFF	; 255
    28e0:	4f e7       	ldi	r20, 0x7F	; 127
    28e2:	57 e4       	ldi	r21, 0x47	; 71
    28e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28e8:	18 16       	cp	r1, r24
    28ea:	4c f5       	brge	.+82     	; 0x293e <GuestModeDoor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ec:	6f a1       	ldd	r22, Y+39	; 0x27
    28ee:	78 a5       	ldd	r23, Y+40	; 0x28
    28f0:	89 a5       	ldd	r24, Y+41	; 0x29
    28f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e2       	ldi	r20, 0x20	; 32
    28fa:	51 e4       	ldi	r21, 0x41	; 65
    28fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	bc 01       	movw	r22, r24
    2906:	cd 01       	movw	r24, r26
    2908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	9a a3       	std	Y+34, r25	; 0x22
    2912:	89 a3       	std	Y+33, r24	; 0x21
    2914:	0f c0       	rjmp	.+30     	; 0x2934 <GuestModeDoor+0x108>
    2916:	88 ec       	ldi	r24, 0xC8	; 200
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	98 a3       	std	Y+32, r25	; 0x20
    291c:	8f 8f       	std	Y+31, r24	; 0x1f
    291e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2920:	98 a1       	ldd	r25, Y+32	; 0x20
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	f1 f7       	brne	.-4      	; 0x2922 <GuestModeDoor+0xf6>
    2926:	98 a3       	std	Y+32, r25	; 0x20
    2928:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292a:	89 a1       	ldd	r24, Y+33	; 0x21
    292c:	9a a1       	ldd	r25, Y+34	; 0x22
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	9a a3       	std	Y+34, r25	; 0x22
    2932:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2934:	89 a1       	ldd	r24, Y+33	; 0x21
    2936:	9a a1       	ldd	r25, Y+34	; 0x22
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	69 f7       	brne	.-38     	; 0x2916 <GuestModeDoor+0xea>
    293c:	14 c0       	rjmp	.+40     	; 0x2966 <GuestModeDoor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293e:	6b a1       	ldd	r22, Y+35	; 0x23
    2940:	7c a1       	ldd	r23, Y+36	; 0x24
    2942:	8d a1       	ldd	r24, Y+37	; 0x25
    2944:	9e a1       	ldd	r25, Y+38	; 0x26
    2946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	9a a3       	std	Y+34, r25	; 0x22
    2950:	89 a3       	std	Y+33, r24	; 0x21
    2952:	89 a1       	ldd	r24, Y+33	; 0x21
    2954:	9a a1       	ldd	r25, Y+34	; 0x22
    2956:	9e 8f       	std	Y+30, r25	; 0x1e
    2958:	8d 8f       	std	Y+29, r24	; 0x1d
    295a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    295c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	f1 f7       	brne	.-4      	; 0x295e <GuestModeDoor+0x132>
    2962:	9e 8f       	std	Y+30, r25	; 0x1e
    2964:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(MINI_DELAY);
				LCD_void_Write_Data('*');
    2966:	8a e2       	ldi	r24, 0x2A	; 42
    2968:	0e 94 16 1c 	call	0x382c	; 0x382c <LCD_void_Write_Data>
				LCD_void_Write_String("  Guest Mode:  ");
				LCD_void_DDRAM_Address(1,0);
				LCD_void_Write_String("Enter Pass:");

			/*get password*/
			for(u8 k =0 ; k<4 ; k++)
    296c:	8c a5       	ldd	r24, Y+44	; 0x2c
    296e:	8f 5f       	subi	r24, 0xFF	; 255
    2970:	8c a7       	std	Y+44, r24	; 0x2c
    2972:	8c a5       	ldd	r24, Y+44	; 0x2c
    2974:	84 30       	cpi	r24, 0x04	; 4
    2976:	08 f4       	brcc	.+2      	; 0x297a <GuestModeDoor+0x14e>
    2978:	78 cf       	rjmp	.-272    	; 0x286a <GuestModeDoor+0x3e>
				_delay_ms(MINI_DELAY);
				LCD_void_Write_Data('*');

			}

			statePass=TruePass;
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	8f a7       	std	Y+47, r24	; 0x2f
			guestis = Emad;
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	8e a7       	std	Y+46, r24	; 0x2e

			/*check password*/
			for(u8 i=0 ; i<4 ; i++)
    2982:	1b a6       	std	Y+43, r1	; 0x2b
    2984:	30 c0       	rjmp	.+96     	; 0x29e6 <GuestModeDoor+0x1ba>
			{
				if((GuestEnterPass[i] != EmadPass[i]) )
    2986:	8b a5       	ldd	r24, Y+43	; 0x2b
    2988:	28 2f       	mov	r18, r24
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	ce 01       	movw	r24, r28
    298e:	c0 96       	adiw	r24, 0x30	; 48
    2990:	fc 01       	movw	r30, r24
    2992:	e2 0f       	add	r30, r18
    2994:	f3 1f       	adc	r31, r19
    2996:	20 81       	ld	r18, Z
    2998:	8b a5       	ldd	r24, Y+43	; 0x2b
    299a:	88 2f       	mov	r24, r24
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	fc 01       	movw	r30, r24
    29a0:	e5 5e       	subi	r30, 0xE5	; 229
    29a2:	fc 4f       	sbci	r31, 0xFC	; 252
    29a4:	80 81       	ld	r24, Z
    29a6:	28 17       	cp	r18, r24
    29a8:	d9 f0       	breq	.+54     	; 0x29e0 <GuestModeDoor+0x1b4>
				{

					guestis=Hamada;
    29aa:	82 e0       	ldi	r24, 0x02	; 2
    29ac:	8e a7       	std	Y+46, r24	; 0x2e
					if(GuestEnterPass[i]!= HamadaPass[i])
    29ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    29b0:	28 2f       	mov	r18, r24
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	ce 01       	movw	r24, r28
    29b6:	c0 96       	adiw	r24, 0x30	; 48
    29b8:	fc 01       	movw	r30, r24
    29ba:	e2 0f       	add	r30, r18
    29bc:	f3 1f       	adc	r31, r19
    29be:	20 81       	ld	r18, Z
    29c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    29c2:	88 2f       	mov	r24, r24
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	fc 01       	movw	r30, r24
    29c8:	e1 5e       	subi	r30, 0xE1	; 225
    29ca:	fc 4f       	sbci	r31, 0xFC	; 252
    29cc:	80 81       	ld	r24, Z
    29ce:	28 17       	cp	r18, r24
    29d0:	39 f0       	breq	.+14     	; 0x29e0 <GuestModeDoor+0x1b4>
						{
							statePass=WrongPass;
    29d2:	1f a6       	std	Y+47, r1	; 0x2f
							WrongPassword(2-j);
    29d4:	82 e0       	ldi	r24, 0x02	; 2
    29d6:	9d a5       	ldd	r25, Y+45	; 0x2d
    29d8:	89 1b       	sub	r24, r25
    29da:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <WrongPassword>
    29de:	06 c0       	rjmp	.+12     	; 0x29ec <GuestModeDoor+0x1c0>

			statePass=TruePass;
			guestis = Emad;

			/*check password*/
			for(u8 i=0 ; i<4 ; i++)
    29e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    29e2:	8f 5f       	subi	r24, 0xFF	; 255
    29e4:	8b a7       	std	Y+43, r24	; 0x2b
    29e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    29e8:	84 30       	cpi	r24, 0x04	; 4
    29ea:	68 f2       	brcs	.-102    	; 0x2986 <GuestModeDoor+0x15a>
{
	u8 statePass = WrongPass ;
		u8 GuestEnterPass[4];
		u8 guestis ;

		for(u8 j=0 ; (j<Tries && statePass==WrongPass);j++)
    29ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    29ee:	8f 5f       	subi	r24, 0xFF	; 255
    29f0:	8d a7       	std	Y+45, r24	; 0x2d
    29f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    29f4:	83 30       	cpi	r24, 0x03	; 3
    29f6:	20 f4       	brcc	.+8      	; 0x2a00 <GuestModeDoor+0x1d4>
    29f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29fa:	88 23       	and	r24, r24
    29fc:	09 f4       	brne	.+2      	; 0x2a00 <GuestModeDoor+0x1d4>
    29fe:	25 cf       	rjmp	.-438    	; 0x284a <GuestModeDoor+0x1e>


			}

		}
		if(statePass==TruePass)
    2a00:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a02:	81 30       	cpi	r24, 0x01	; 1
    2a04:	09 f0       	breq	.+2      	; 0x2a08 <GuestModeDoor+0x1dc>
    2a06:	14 c1       	rjmp	.+552    	; 0x2c30 <GuestModeDoor+0x404>
			{

			if(guestis==Emad)
    2a08:	8e a5       	ldd	r24, Y+46	; 0x2e
    2a0a:	81 30       	cpi	r24, 0x01	; 1
    2a0c:	09 f0       	breq	.+2      	; 0x2a10 <GuestModeDoor+0x1e4>
    2a0e:	86 c0       	rjmp	.+268    	; 0x2b1c <GuestModeDoor+0x2f0>
			{
				LCD_void_Clear_Screen();
    2a10:	0e 94 57 1d 	call	0x3aae	; 0x3aae <LCD_void_Clear_Screen>
				LCD_void_Write_String("Right Password");
    2a14:	8e eb       	ldi	r24, 0xBE	; 190
    2a16:	91 e0       	ldi	r25, 0x01	; 1
    2a18:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
				LCD_void_DDRAM_Address(1,0);
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	60 e0       	ldi	r22, 0x00	; 0
    2a20:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
				LCD_void_Write_String("Welcome Emad");
    2a24:	8d ec       	ldi	r24, 0xCD	; 205
    2a26:	91 e0       	ldi	r25, 0x01	; 1
    2a28:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	aa e7       	ldi	r26, 0x7A	; 122
    2a32:	b4 e4       	ldi	r27, 0x44	; 68
    2a34:	89 8f       	std	Y+25, r24	; 0x19
    2a36:	9a 8f       	std	Y+26, r25	; 0x1a
    2a38:	ab 8f       	std	Y+27, r26	; 0x1b
    2a3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a3c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	4a ef       	ldi	r20, 0xFA	; 250
    2a4a:	54 e4       	ldi	r21, 0x44	; 68
    2a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	8d 8b       	std	Y+21, r24	; 0x15
    2a56:	9e 8b       	std	Y+22, r25	; 0x16
    2a58:	af 8b       	std	Y+23, r26	; 0x17
    2a5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a5c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a5e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a60:	8f 89       	ldd	r24, Y+23	; 0x17
    2a62:	98 8d       	ldd	r25, Y+24	; 0x18
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	40 e8       	ldi	r20, 0x80	; 128
    2a6a:	5f e3       	ldi	r21, 0x3F	; 63
    2a6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a70:	88 23       	and	r24, r24
    2a72:	2c f4       	brge	.+10     	; 0x2a7e <GuestModeDoor+0x252>
		__ticks = 1;
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	9c 8b       	std	Y+20, r25	; 0x14
    2a7a:	8b 8b       	std	Y+19, r24	; 0x13
    2a7c:	3f c0       	rjmp	.+126    	; 0x2afc <GuestModeDoor+0x2d0>
	else if (__tmp > 65535)
    2a7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a80:	7e 89       	ldd	r23, Y+22	; 0x16
    2a82:	8f 89       	ldd	r24, Y+23	; 0x17
    2a84:	98 8d       	ldd	r25, Y+24	; 0x18
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	3f ef       	ldi	r19, 0xFF	; 255
    2a8a:	4f e7       	ldi	r20, 0x7F	; 127
    2a8c:	57 e4       	ldi	r21, 0x47	; 71
    2a8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a92:	18 16       	cp	r1, r24
    2a94:	4c f5       	brge	.+82     	; 0x2ae8 <GuestModeDoor+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a96:	69 8d       	ldd	r22, Y+25	; 0x19
    2a98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	40 e2       	ldi	r20, 0x20	; 32
    2aa4:	51 e4       	ldi	r21, 0x41	; 65
    2aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	bc 01       	movw	r22, r24
    2ab0:	cd 01       	movw	r24, r26
    2ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	9c 8b       	std	Y+20, r25	; 0x14
    2abc:	8b 8b       	std	Y+19, r24	; 0x13
    2abe:	0f c0       	rjmp	.+30     	; 0x2ade <GuestModeDoor+0x2b2>
    2ac0:	88 ec       	ldi	r24, 0xC8	; 200
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	9a 8b       	std	Y+18, r25	; 0x12
    2ac6:	89 8b       	std	Y+17, r24	; 0x11
    2ac8:	89 89       	ldd	r24, Y+17	; 0x11
    2aca:	9a 89       	ldd	r25, Y+18	; 0x12
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <GuestModeDoor+0x2a0>
    2ad0:	9a 8b       	std	Y+18, r25	; 0x12
    2ad2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	9c 8b       	std	Y+20, r25	; 0x14
    2adc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ade:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae2:	00 97       	sbiw	r24, 0x00	; 0
    2ae4:	69 f7       	brne	.-38     	; 0x2ac0 <GuestModeDoor+0x294>
    2ae6:	14 c0       	rjmp	.+40     	; 0x2b10 <GuestModeDoor+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae8:	6d 89       	ldd	r22, Y+21	; 0x15
    2aea:	7e 89       	ldd	r23, Y+22	; 0x16
    2aec:	8f 89       	ldd	r24, Y+23	; 0x17
    2aee:	98 8d       	ldd	r25, Y+24	; 0x18
    2af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	9c 8b       	std	Y+20, r25	; 0x14
    2afa:	8b 8b       	std	Y+19, r24	; 0x13
    2afc:	8b 89       	ldd	r24, Y+19	; 0x13
    2afe:	9c 89       	ldd	r25, Y+20	; 0x14
    2b00:	98 8b       	std	Y+16, r25	; 0x10
    2b02:	8f 87       	std	Y+15, r24	; 0x0f
    2b04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b06:	98 89       	ldd	r25, Y+16	; 0x10
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	f1 f7       	brne	.-4      	; 0x2b08 <GuestModeDoor+0x2dc>
    2b0c:	98 8b       	std	Y+16, r25	; 0x10
    2b0e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(SHORT_DELAY);
				/*send to another microcontroller to display guest Emad outside*/
				UART_void_Send_Char('E');
    2b10:	85 e4       	ldi	r24, 0x45	; 69
    2b12:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <UART_void_Send_Char>
				/**/
				TrueGuestPass();
    2b16:	0e 94 28 16 	call	0x2c50	; 0x2c50 <TrueGuestPass>
    2b1a:	8f c0       	rjmp	.+286    	; 0x2c3a <GuestModeDoor+0x40e>
			}
			else if(guestis==Hamada)
    2b1c:	8e a5       	ldd	r24, Y+46	; 0x2e
    2b1e:	82 30       	cpi	r24, 0x02	; 2
    2b20:	09 f0       	breq	.+2      	; 0x2b24 <GuestModeDoor+0x2f8>
    2b22:	8b c0       	rjmp	.+278    	; 0x2c3a <GuestModeDoor+0x40e>
			{
				LCD_void_Clear_Screen();
    2b24:	0e 94 57 1d 	call	0x3aae	; 0x3aae <LCD_void_Clear_Screen>
				LCD_void_Write_String("Right Password");
    2b28:	8e eb       	ldi	r24, 0xBE	; 190
    2b2a:	91 e0       	ldi	r25, 0x01	; 1
    2b2c:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
				LCD_void_DDRAM_Address(1,0);
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	60 e0       	ldi	r22, 0x00	; 0
    2b34:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
				LCD_void_Write_String("Welcome Hamada");
    2b38:	8a ed       	ldi	r24, 0xDA	; 218
    2b3a:	91 e0       	ldi	r25, 0x01	; 1
    2b3c:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	aa e7       	ldi	r26, 0x7A	; 122
    2b46:	b4 e4       	ldi	r27, 0x44	; 68
    2b48:	8b 87       	std	Y+11, r24	; 0x0b
    2b4a:	9c 87       	std	Y+12, r25	; 0x0c
    2b4c:	ad 87       	std	Y+13, r26	; 0x0d
    2b4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	4a ef       	ldi	r20, 0xFA	; 250
    2b5e:	54 e4       	ldi	r21, 0x44	; 68
    2b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	8f 83       	std	Y+7, r24	; 0x07
    2b6a:	98 87       	std	Y+8, r25	; 0x08
    2b6c:	a9 87       	std	Y+9, r26	; 0x09
    2b6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b70:	6f 81       	ldd	r22, Y+7	; 0x07
    2b72:	78 85       	ldd	r23, Y+8	; 0x08
    2b74:	89 85       	ldd	r24, Y+9	; 0x09
    2b76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e8       	ldi	r20, 0x80	; 128
    2b7e:	5f e3       	ldi	r21, 0x3F	; 63
    2b80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b84:	88 23       	and	r24, r24
    2b86:	2c f4       	brge	.+10     	; 0x2b92 <GuestModeDoor+0x366>
		__ticks = 1;
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	9e 83       	std	Y+6, r25	; 0x06
    2b8e:	8d 83       	std	Y+5, r24	; 0x05
    2b90:	3f c0       	rjmp	.+126    	; 0x2c10 <GuestModeDoor+0x3e4>
	else if (__tmp > 65535)
    2b92:	6f 81       	ldd	r22, Y+7	; 0x07
    2b94:	78 85       	ldd	r23, Y+8	; 0x08
    2b96:	89 85       	ldd	r24, Y+9	; 0x09
    2b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	3f ef       	ldi	r19, 0xFF	; 255
    2b9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ba0:	57 e4       	ldi	r21, 0x47	; 71
    2ba2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ba6:	18 16       	cp	r1, r24
    2ba8:	4c f5       	brge	.+82     	; 0x2bfc <GuestModeDoor+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2baa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e2       	ldi	r20, 0x20	; 32
    2bb8:	51 e4       	ldi	r21, 0x41	; 65
    2bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	bc 01       	movw	r22, r24
    2bc4:	cd 01       	movw	r24, r26
    2bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	9e 83       	std	Y+6, r25	; 0x06
    2bd0:	8d 83       	std	Y+5, r24	; 0x05
    2bd2:	0f c0       	rjmp	.+30     	; 0x2bf2 <GuestModeDoor+0x3c6>
    2bd4:	88 ec       	ldi	r24, 0xC8	; 200
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	9c 83       	std	Y+4, r25	; 0x04
    2bda:	8b 83       	std	Y+3, r24	; 0x03
    2bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bde:	9c 81       	ldd	r25, Y+4	; 0x04
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <GuestModeDoor+0x3b4>
    2be4:	9c 83       	std	Y+4, r25	; 0x04
    2be6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bea:	9e 81       	ldd	r25, Y+6	; 0x06
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	9e 83       	std	Y+6, r25	; 0x06
    2bf0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf6:	00 97       	sbiw	r24, 0x00	; 0
    2bf8:	69 f7       	brne	.-38     	; 0x2bd4 <GuestModeDoor+0x3a8>
    2bfa:	14 c0       	rjmp	.+40     	; 0x2c24 <GuestModeDoor+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bfe:	78 85       	ldd	r23, Y+8	; 0x08
    2c00:	89 85       	ldd	r24, Y+9	; 0x09
    2c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	9e 83       	std	Y+6, r25	; 0x06
    2c0e:	8d 83       	std	Y+5, r24	; 0x05
    2c10:	8d 81       	ldd	r24, Y+5	; 0x05
    2c12:	9e 81       	ldd	r25, Y+6	; 0x06
    2c14:	9a 83       	std	Y+2, r25	; 0x02
    2c16:	89 83       	std	Y+1, r24	; 0x01
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <GuestModeDoor+0x3f0>
    2c20:	9a 83       	std	Y+2, r25	; 0x02
    2c22:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(SHORT_DELAY);
				/*send to another microcontroller to display guest Emad outside*/
				UART_void_Send_Char('H');
    2c24:	88 e4       	ldi	r24, 0x48	; 72
    2c26:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <UART_void_Send_Char>
				/**/
				TrueGuestPass();
    2c2a:	0e 94 28 16 	call	0x2c50	; 0x2c50 <TrueGuestPass>
    2c2e:	05 c0       	rjmp	.+10     	; 0x2c3a <GuestModeDoor+0x40e>

			}

		}
		else if(statePass==WrongPass)
    2c30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c32:	88 23       	and	r24, r24
    2c34:	11 f4       	brne	.+4      	; 0x2c3a <GuestModeDoor+0x40e>
			{

			BlockMode();
    2c36:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <BlockMode>

			}

}
    2c3a:	e3 96       	adiw	r28, 0x33	; 51
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	f8 94       	cli
    2c40:	de bf       	out	0x3e, r29	; 62
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	cd bf       	out	0x3d, r28	; 61
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	1f 91       	pop	r17
    2c4c:	0f 91       	pop	r16
    2c4e:	08 95       	ret

00002c50 <TrueGuestPass>:



static void TrueGuestPass()
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	6e 97       	sbiw	r28, 0x1e	; 30
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
	u8 i=0;
    2c64:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 state=0;
    2c66:	1d 8e       	std	Y+29, r1	; 0x1d

	/**/
	DIO_U8_Set_Pin_value(PORTA_ID,DIO_U8_PIN4,PIN_HIGH);
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	64 e0       	ldi	r22, 0x04	; 4
    2c6c:	41 e0       	ldi	r20, 0x01	; 1
    2c6e:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
	LCD_void_Clear_Screen();
    2c72:	0e 94 57 1d 	call	0x3aae	; 0x3aae <LCD_void_Clear_Screen>
	LCD_void_Write_String("Bell will ring");
    2c76:	89 ee       	ldi	r24, 0xE9	; 233
    2c78:	91 e0       	ldi	r25, 0x01	; 1
    2c7a:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
	/*trun on bell*/
	DIO_U8_Set_Pin_Dir(PORTA_ID,DIO_U8_PIN6,PIN_OUTPUT);
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	66 e0       	ldi	r22, 0x06	; 6
    2c82:	41 e0       	ldi	r20, 0x01	; 1
    2c84:	0e 94 55 08 	call	0x10aa	; 0x10aa <DIO_U8_Set_Pin_Dir>
    2c88:	81 c0       	rjmp	.+258    	; 0x2d8c <TrueGuestPass+0x13c>
	while(i<10)
	{
		DIO_U8_Set_Pin_value(PORTA_ID,DIO_U8_PIN6,Get_Bit(state,0));
    2c8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c8c:	98 2f       	mov	r25, r24
    2c8e:	91 70       	andi	r25, 0x01	; 1
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	66 e0       	ldi	r22, 0x06	; 6
    2c94:	49 2f       	mov	r20, r25
    2c96:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	a6 e9       	ldi	r26, 0x96	; 150
    2ca0:	b3 e4       	ldi	r27, 0x43	; 67
    2ca2:	89 8f       	std	Y+25, r24	; 0x19
    2ca4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ca6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ca8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2caa:	69 8d       	ldd	r22, Y+25	; 0x19
    2cac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	4a ef       	ldi	r20, 0xFA	; 250
    2cb8:	54 e4       	ldi	r21, 0x44	; 68
    2cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	8d 8b       	std	Y+21, r24	; 0x15
    2cc4:	9e 8b       	std	Y+22, r25	; 0x16
    2cc6:	af 8b       	std	Y+23, r26	; 0x17
    2cc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cca:	6d 89       	ldd	r22, Y+21	; 0x15
    2ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cce:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	40 e8       	ldi	r20, 0x80	; 128
    2cd8:	5f e3       	ldi	r21, 0x3F	; 63
    2cda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cde:	88 23       	and	r24, r24
    2ce0:	2c f4       	brge	.+10     	; 0x2cec <TrueGuestPass+0x9c>
		__ticks = 1;
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	9c 8b       	std	Y+20, r25	; 0x14
    2ce8:	8b 8b       	std	Y+19, r24	; 0x13
    2cea:	3f c0       	rjmp	.+126    	; 0x2d6a <TrueGuestPass+0x11a>
	else if (__tmp > 65535)
    2cec:	6d 89       	ldd	r22, Y+21	; 0x15
    2cee:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cf2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	3f ef       	ldi	r19, 0xFF	; 255
    2cf8:	4f e7       	ldi	r20, 0x7F	; 127
    2cfa:	57 e4       	ldi	r21, 0x47	; 71
    2cfc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d00:	18 16       	cp	r1, r24
    2d02:	4c f5       	brge	.+82     	; 0x2d56 <TrueGuestPass+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d04:	69 8d       	ldd	r22, Y+25	; 0x19
    2d06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e2       	ldi	r20, 0x20	; 32
    2d12:	51 e4       	ldi	r21, 0x41	; 65
    2d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	bc 01       	movw	r22, r24
    2d1e:	cd 01       	movw	r24, r26
    2d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	9c 8b       	std	Y+20, r25	; 0x14
    2d2a:	8b 8b       	std	Y+19, r24	; 0x13
    2d2c:	0f c0       	rjmp	.+30     	; 0x2d4c <TrueGuestPass+0xfc>
    2d2e:	88 ec       	ldi	r24, 0xC8	; 200
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	9a 8b       	std	Y+18, r25	; 0x12
    2d34:	89 8b       	std	Y+17, r24	; 0x11
    2d36:	89 89       	ldd	r24, Y+17	; 0x11
    2d38:	9a 89       	ldd	r25, Y+18	; 0x12
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	f1 f7       	brne	.-4      	; 0x2d3a <TrueGuestPass+0xea>
    2d3e:	9a 8b       	std	Y+18, r25	; 0x12
    2d40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d42:	8b 89       	ldd	r24, Y+19	; 0x13
    2d44:	9c 89       	ldd	r25, Y+20	; 0x14
    2d46:	01 97       	sbiw	r24, 0x01	; 1
    2d48:	9c 8b       	std	Y+20, r25	; 0x14
    2d4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d50:	00 97       	sbiw	r24, 0x00	; 0
    2d52:	69 f7       	brne	.-38     	; 0x2d2e <TrueGuestPass+0xde>
    2d54:	14 c0       	rjmp	.+40     	; 0x2d7e <TrueGuestPass+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d56:	6d 89       	ldd	r22, Y+21	; 0x15
    2d58:	7e 89       	ldd	r23, Y+22	; 0x16
    2d5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	9c 8b       	std	Y+20, r25	; 0x14
    2d68:	8b 8b       	std	Y+19, r24	; 0x13
    2d6a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d6c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d6e:	98 8b       	std	Y+16, r25	; 0x10
    2d70:	8f 87       	std	Y+15, r24	; 0x0f
    2d72:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d74:	98 89       	ldd	r25, Y+16	; 0x10
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <TrueGuestPass+0x126>
    2d7a:	98 8b       	std	Y+16, r25	; 0x10
    2d7c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		i++;
    2d7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d80:	8f 5f       	subi	r24, 0xFF	; 255
    2d82:	8e 8f       	std	Y+30, r24	; 0x1e
		Toggle_Bit(state,0);
    2d84:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	89 27       	eor	r24, r25
    2d8a:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_U8_Set_Pin_value(PORTA_ID,DIO_U8_PIN4,PIN_HIGH);
	LCD_void_Clear_Screen();
	LCD_void_Write_String("Bell will ring");
	/*trun on bell*/
	DIO_U8_Set_Pin_Dir(PORTA_ID,DIO_U8_PIN6,PIN_OUTPUT);
	while(i<10)
    2d8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d8e:	8a 30       	cpi	r24, 0x0A	; 10
    2d90:	08 f4       	brcc	.+2      	; 0x2d94 <TrueGuestPass+0x144>
    2d92:	7b cf       	rjmp	.-266    	; 0x2c8a <TrueGuestPass+0x3a>
		i++;
		Toggle_Bit(state,0);
	}

	/*turn off bell*/
	LCD_void_Clear_Screen();
    2d94:	0e 94 57 1d 	call	0x3aae	; 0x3aae <LCD_void_Clear_Screen>
	LCD_void_Write_String("Bell will ");
    2d98:	88 ef       	ldi	r24, 0xF8	; 248
    2d9a:	91 e0       	ldi	r25, 0x01	; 1
    2d9c:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
	LCD_void_DDRAM_Address(1,0);
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	60 e0       	ldi	r22, 0x00	; 0
    2da4:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_void_DDRAM_Address>
	LCD_void_Write_String("Turn OFF!!!");
    2da8:	83 e0       	ldi	r24, 0x03	; 3
    2daa:	92 e0       	ldi	r25, 0x02	; 2
    2dac:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
	DIO_U8_Set_Pin_value(PORTA_ID,DIO_U8_PIN6,PIN_LOW);
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	66 e0       	ldi	r22, 0x06	; 6
    2db4:	40 e0       	ldi	r20, 0x00	; 0
    2db6:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	aa ef       	ldi	r26, 0xFA	; 250
    2dc0:	b4 e4       	ldi	r27, 0x44	; 68
    2dc2:	8b 87       	std	Y+11, r24	; 0x0b
    2dc4:	9c 87       	std	Y+12, r25	; 0x0c
    2dc6:	ad 87       	std	Y+13, r26	; 0x0d
    2dc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	4a ef       	ldi	r20, 0xFA	; 250
    2dd8:	54 e4       	ldi	r21, 0x44	; 68
    2dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	8f 83       	std	Y+7, r24	; 0x07
    2de4:	98 87       	std	Y+8, r25	; 0x08
    2de6:	a9 87       	std	Y+9, r26	; 0x09
    2de8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dea:	6f 81       	ldd	r22, Y+7	; 0x07
    2dec:	78 85       	ldd	r23, Y+8	; 0x08
    2dee:	89 85       	ldd	r24, Y+9	; 0x09
    2df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	40 e8       	ldi	r20, 0x80	; 128
    2df8:	5f e3       	ldi	r21, 0x3F	; 63
    2dfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dfe:	88 23       	and	r24, r24
    2e00:	2c f4       	brge	.+10     	; 0x2e0c <TrueGuestPass+0x1bc>
		__ticks = 1;
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	9e 83       	std	Y+6, r25	; 0x06
    2e08:	8d 83       	std	Y+5, r24	; 0x05
    2e0a:	3f c0       	rjmp	.+126    	; 0x2e8a <TrueGuestPass+0x23a>
	else if (__tmp > 65535)
    2e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0e:	78 85       	ldd	r23, Y+8	; 0x08
    2e10:	89 85       	ldd	r24, Y+9	; 0x09
    2e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	3f ef       	ldi	r19, 0xFF	; 255
    2e18:	4f e7       	ldi	r20, 0x7F	; 127
    2e1a:	57 e4       	ldi	r21, 0x47	; 71
    2e1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e20:	18 16       	cp	r1, r24
    2e22:	4c f5       	brge	.+82     	; 0x2e76 <TrueGuestPass+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e2       	ldi	r20, 0x20	; 32
    2e32:	51 e4       	ldi	r21, 0x41	; 65
    2e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	bc 01       	movw	r22, r24
    2e3e:	cd 01       	movw	r24, r26
    2e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	9e 83       	std	Y+6, r25	; 0x06
    2e4a:	8d 83       	std	Y+5, r24	; 0x05
    2e4c:	0f c0       	rjmp	.+30     	; 0x2e6c <TrueGuestPass+0x21c>
    2e4e:	88 ec       	ldi	r24, 0xC8	; 200
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	9c 83       	std	Y+4, r25	; 0x04
    2e54:	8b 83       	std	Y+3, r24	; 0x03
    2e56:	8b 81       	ldd	r24, Y+3	; 0x03
    2e58:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5a:	01 97       	sbiw	r24, 0x01	; 1
    2e5c:	f1 f7       	brne	.-4      	; 0x2e5a <TrueGuestPass+0x20a>
    2e5e:	9c 83       	std	Y+4, r25	; 0x04
    2e60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e62:	8d 81       	ldd	r24, Y+5	; 0x05
    2e64:	9e 81       	ldd	r25, Y+6	; 0x06
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	9e 83       	std	Y+6, r25	; 0x06
    2e6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e70:	00 97       	sbiw	r24, 0x00	; 0
    2e72:	69 f7       	brne	.-38     	; 0x2e4e <TrueGuestPass+0x1fe>
    2e74:	14 c0       	rjmp	.+40     	; 0x2e9e <TrueGuestPass+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e76:	6f 81       	ldd	r22, Y+7	; 0x07
    2e78:	78 85       	ldd	r23, Y+8	; 0x08
    2e7a:	89 85       	ldd	r24, Y+9	; 0x09
    2e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	9e 83       	std	Y+6, r25	; 0x06
    2e88:	8d 83       	std	Y+5, r24	; 0x05
    2e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8e:	9a 83       	std	Y+2, r25	; 0x02
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	9a 81       	ldd	r25, Y+2	; 0x02
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	f1 f7       	brne	.-4      	; 0x2e96 <TrueGuestPass+0x246>
    2e9a:	9a 83       	std	Y+2, r25	; 0x02
    2e9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	DIO_U8_Set_Pin_value(PORTA_ID,DIO_U8_PIN4,PIN_LOW);
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	64 e0       	ldi	r22, 0x04	; 4
    2ea2:	40 e0       	ldi	r20, 0x00	; 0
    2ea4:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
	start_project();
    2ea8:	0e 94 43 0c 	call	0x1886	; 0x1886 <start_project>


}
    2eac:	6e 96       	adiw	r28, 0x1e	; 30
    2eae:	0f b6       	in	r0, 0x3f	; 63
    2eb0:	f8 94       	cli
    2eb2:	de bf       	out	0x3e, r29	; 62
    2eb4:	0f be       	out	0x3f, r0	; 63
    2eb6:	cd bf       	out	0x3d, r28	; 61
    2eb8:	cf 91       	pop	r28
    2eba:	df 91       	pop	r29
    2ebc:	08 95       	ret

00002ebe <KPD_Init>:
/****************************************< GLOABAL FUNCTION DEFINTION >****************************/
/**************************************************************************************/


void KPD_Init()
{
    2ebe:	df 93       	push	r29
    2ec0:	cf 93       	push	r28
    2ec2:	00 d0       	rcall	.+0      	; 0x2ec4 <KPD_Init+0x6>
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
	u8 COL_Index , ROW_Index ;

	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    2ec8:	1a 82       	std	Y+2, r1	; 0x02
    2eca:	0f c0       	rjmp	.+30     	; 0x2eea <KPD_Init+0x2c>
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_COLS_PORT  , KPD_AU8_COLS_PINS[COL_Index] , PIN_OUTPUT  ) ;
    2ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ece:	88 2f       	mov	r24, r24
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	fc 01       	movw	r30, r24
    2ed4:	e9 5d       	subi	r30, 0xD9	; 217
    2ed6:	fc 4f       	sbci	r31, 0xFC	; 252
    2ed8:	90 81       	ld	r25, Z
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	69 2f       	mov	r22, r25
    2ede:	41 e0       	ldi	r20, 0x01	; 1
    2ee0:	0e 94 55 08 	call	0x10aa	; 0x10aa <DIO_U8_Set_Pin_Dir>

void KPD_Init()
{
	u8 COL_Index , ROW_Index ;

	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    2ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee6:	8f 5f       	subi	r24, 0xFF	; 255
    2ee8:	8a 83       	std	Y+2, r24	; 0x02
    2eea:	8a 81       	ldd	r24, Y+2	; 0x02
    2eec:	84 30       	cpi	r24, 0x04	; 4
    2eee:	70 f3       	brcs	.-36     	; 0x2ecc <KPD_Init+0xe>
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_COLS_PORT  , KPD_AU8_COLS_PINS[COL_Index] , PIN_OUTPUT  ) ;
	}

	for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    2ef0:	19 82       	std	Y+1, r1	; 0x01
    2ef2:	1b c0       	rjmp	.+54     	; 0x2f2a <KPD_Init+0x6c>
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_ROWS_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , PIN_INPUT ) ;
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	88 2f       	mov	r24, r24
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	fc 01       	movw	r30, r24
    2efc:	ed 5d       	subi	r30, 0xDD	; 221
    2efe:	fc 4f       	sbci	r31, 0xFC	; 252
    2f00:	90 81       	ld	r25, Z
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	69 2f       	mov	r22, r25
    2f06:	40 e0       	ldi	r20, 0x00	; 0
    2f08:	0e 94 55 08 	call	0x10aa	; 0x10aa <DIO_U8_Set_Pin_Dir>
		DIO_U8_Set_Pin_value( KPD_U8_ROWS_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , PIN_HIGH ) ;
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	88 2f       	mov	r24, r24
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	fc 01       	movw	r30, r24
    2f14:	ed 5d       	subi	r30, 0xDD	; 221
    2f16:	fc 4f       	sbci	r31, 0xFC	; 252
    2f18:	90 81       	ld	r25, Z
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	69 2f       	mov	r22, r25
    2f1e:	41 e0       	ldi	r20, 0x01	; 1
    2f20:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_COLS_PORT  , KPD_AU8_COLS_PINS[COL_Index] , PIN_OUTPUT  ) ;
	}

	for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    2f24:	89 81       	ldd	r24, Y+1	; 0x01
    2f26:	8f 5f       	subi	r24, 0xFF	; 255
    2f28:	89 83       	std	Y+1, r24	; 0x01
    2f2a:	89 81       	ldd	r24, Y+1	; 0x01
    2f2c:	84 30       	cpi	r24, 0x04	; 4
    2f2e:	10 f3       	brcs	.-60     	; 0x2ef4 <KPD_Init+0x36>
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_ROWS_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , PIN_INPUT ) ;
		DIO_U8_Set_Pin_value( KPD_U8_ROWS_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , PIN_HIGH ) ;
	}
}
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	cf 91       	pop	r28
    2f36:	df 91       	pop	r29
    2f38:	08 95       	ret

00002f3a <KPD_Void_GET_Status>:




u8 KPD_Void_GET_Status ( void )
{
    2f3a:	df 93       	push	r29
    2f3c:	cf 93       	push	r28
    2f3e:	00 d0       	rcall	.+0      	; 0x2f40 <KPD_Void_GET_Status+0x6>
    2f40:	00 d0       	rcall	.+0      	; 0x2f42 <KPD_Void_GET_Status+0x8>
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
	u8 COL_Index , ROW_Index ;
	u8  KPD_Status , Presskey = KPD_Key_NotPressed ;
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	89 83       	std	Y+1, r24	; 0x01
	static u8 KPD_ARR [KPD_ROWS][KPD_COLS] = KPD_KEYS ;
while(1)
{
	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    2f4a:	1b 82       	std	Y+3, r1	; 0x03
    2f4c:	63 c0       	rjmp	.+198    	; 0x3014 <KPD_Void_GET_Status+0xda>
	{
		DIO_U8_Set_Pin_value( KPD_U8_COLS_PORT , KPD_AU8_COLS_PINS[COL_Index] , PIN_LOW  ) ;
    2f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f50:	88 2f       	mov	r24, r24
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	fc 01       	movw	r30, r24
    2f56:	e9 5d       	subi	r30, 0xD9	; 217
    2f58:	fc 4f       	sbci	r31, 0xFC	; 252
    2f5a:	90 81       	ld	r25, Z
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	69 2f       	mov	r22, r25
    2f60:	40 e0       	ldi	r20, 0x00	; 0
    2f62:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>

		for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    2f66:	1a 82       	std	Y+2, r1	; 0x02
    2f68:	42 c0       	rjmp	.+132    	; 0x2fee <KPD_Void_GET_Status+0xb4>
		{
			// Key_Num = COL_Index + ( ROW_Index * KPD_ROWS ) ;
			DIO_U8_Get_pin_value ( KPD_U8_ROWS_PORT , KPD_AU8_ROWS_PINS[ROW_Index] , &KPD_Status ) ;
    2f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6c:	88 2f       	mov	r24, r24
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	fc 01       	movw	r30, r24
    2f72:	ed 5d       	subi	r30, 0xDD	; 221
    2f74:	fc 4f       	sbci	r31, 0xFC	; 252
    2f76:	90 81       	ld	r25, Z
    2f78:	9e 01       	movw	r18, r28
    2f7a:	2c 5f       	subi	r18, 0xFC	; 252
    2f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	69 2f       	mov	r22, r25
    2f82:	a9 01       	movw	r20, r18
    2f84:	0e 94 01 0b 	call	0x1602	; 0x1602 <DIO_U8_Get_pin_value>

			if ( KPD_Status == KPD_Key_Pressed )
    2f88:	8c 81       	ldd	r24, Y+4	; 0x04
    2f8a:	88 23       	and	r24, r24
    2f8c:	69 f5       	brne	.+90     	; 0x2fe8 <KPD_Void_GET_Status+0xae>
			{
				Presskey = KPD_ARR[ROW_Index][COL_Index] ;
    2f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f90:	48 2f       	mov	r20, r24
    2f92:	50 e0       	ldi	r21, 0x00	; 0
    2f94:	8b 81       	ldd	r24, Y+3	; 0x03
    2f96:	28 2f       	mov	r18, r24
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	ca 01       	movw	r24, r20
    2f9c:	88 0f       	add	r24, r24
    2f9e:	99 1f       	adc	r25, r25
    2fa0:	88 0f       	add	r24, r24
    2fa2:	99 1f       	adc	r25, r25
    2fa4:	82 0f       	add	r24, r18
    2fa6:	93 1f       	adc	r25, r19
    2fa8:	fc 01       	movw	r30, r24
    2faa:	e5 5d       	subi	r30, 0xD5	; 213
    2fac:	fc 4f       	sbci	r31, 0xFC	; 252
    2fae:	80 81       	ld	r24, Z
    2fb0:	89 83       	std	Y+1, r24	; 0x01
    2fb2:	0f c0       	rjmp	.+30     	; 0x2fd2 <KPD_Void_GET_Status+0x98>

			while (KPD_Status == KPD_Key_Pressed)
			{
				DIO_U8_Get_pin_value( KPD_U8_ROWS_PORT , KPD_AU8_ROWS_PINS[ROW_Index] , &KPD_Status ) ;
    2fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb6:	88 2f       	mov	r24, r24
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	fc 01       	movw	r30, r24
    2fbc:	ed 5d       	subi	r30, 0xDD	; 221
    2fbe:	fc 4f       	sbci	r31, 0xFC	; 252
    2fc0:	90 81       	ld	r25, Z
    2fc2:	9e 01       	movw	r18, r28
    2fc4:	2c 5f       	subi	r18, 0xFC	; 252
    2fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	69 2f       	mov	r22, r25
    2fcc:	a9 01       	movw	r20, r18
    2fce:	0e 94 01 0b 	call	0x1602	; 0x1602 <DIO_U8_Get_pin_value>

			if ( KPD_Status == KPD_Key_Pressed )
			{
				Presskey = KPD_ARR[ROW_Index][COL_Index] ;

			while (KPD_Status == KPD_Key_Pressed)
    2fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd4:	88 23       	and	r24, r24
    2fd6:	71 f3       	breq	.-36     	; 0x2fb4 <KPD_Void_GET_Status+0x7a>
			{
				DIO_U8_Get_pin_value( KPD_U8_ROWS_PORT , KPD_AU8_ROWS_PINS[ROW_Index] , &KPD_Status ) ;
			}
			return Presskey ;
    2fd8:	89 81       	ldd	r24, Y+1	; 0x01
		}

		DIO_U8_Set_Pin_value( KPD_U8_COLS_PORT , KPD_AU8_COLS_PINS[COL_Index] , PIN_HIGH ) ;
	}
}
}
    2fda:	0f 90       	pop	r0
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	cf 91       	pop	r28
    2fe4:	df 91       	pop	r29
    2fe6:	08 95       	ret
{
	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
	{
		DIO_U8_Set_Pin_value( KPD_U8_COLS_PORT , KPD_AU8_COLS_PINS[COL_Index] , PIN_LOW  ) ;

		for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    2fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fea:	8f 5f       	subi	r24, 0xFF	; 255
    2fec:	8a 83       	std	Y+2, r24	; 0x02
    2fee:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff0:	84 30       	cpi	r24, 0x04	; 4
    2ff2:	08 f4       	brcc	.+2      	; 0x2ff6 <KPD_Void_GET_Status+0xbc>
    2ff4:	ba cf       	rjmp	.-140    	; 0x2f6a <KPD_Void_GET_Status+0x30>
			return Presskey ;
			}

		}

		DIO_U8_Set_Pin_value( KPD_U8_COLS_PORT , KPD_AU8_COLS_PINS[COL_Index] , PIN_HIGH ) ;
    2ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff8:	88 2f       	mov	r24, r24
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	e9 5d       	subi	r30, 0xD9	; 217
    3000:	fc 4f       	sbci	r31, 0xFC	; 252
    3002:	90 81       	ld	r25, Z
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	69 2f       	mov	r22, r25
    3008:	41 e0       	ldi	r20, 0x01	; 1
    300a:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
	u8 COL_Index , ROW_Index ;
	u8  KPD_Status , Presskey = KPD_Key_NotPressed ;
	static u8 KPD_ARR [KPD_ROWS][KPD_COLS] = KPD_KEYS ;
while(1)
{
	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    300e:	8b 81       	ldd	r24, Y+3	; 0x03
    3010:	8f 5f       	subi	r24, 0xFF	; 255
    3012:	8b 83       	std	Y+3, r24	; 0x03
    3014:	8b 81       	ldd	r24, Y+3	; 0x03
    3016:	84 30       	cpi	r24, 0x04	; 4
    3018:	08 f4       	brcc	.+2      	; 0x301c <KPD_Void_GET_Status+0xe2>
    301a:	99 cf       	rjmp	.-206    	; 0x2f4e <KPD_Void_GET_Status+0x14>
    301c:	96 cf       	rjmp	.-212    	; 0x2f4a <KPD_Void_GET_Status+0x10>

0000301e <LCD_void_Init>:
#include"LCD_private.h"




void LCD_void_Init(void){
    301e:	0f 93       	push	r16
    3020:	1f 93       	push	r17
    3022:	df 93       	push	r29
    3024:	cf 93       	push	r28
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
    302a:	cc 54       	subi	r28, 0x4C	; 76
    302c:	d0 40       	sbci	r29, 0x00	; 0
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	f8 94       	cli
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	cd bf       	out	0x3d, r28	; 61
    3038:	fe 01       	movw	r30, r28
    303a:	e7 5b       	subi	r30, 0xB7	; 183
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	ac e0       	ldi	r26, 0x0C	; 12
    3044:	b2 e4       	ldi	r27, 0x42	; 66
    3046:	80 83       	st	Z, r24
    3048:	91 83       	std	Z+1, r25	; 0x01
    304a:	a2 83       	std	Z+2, r26	; 0x02
    304c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    304e:	8e 01       	movw	r16, r28
    3050:	0b 5b       	subi	r16, 0xBB	; 187
    3052:	1f 4f       	sbci	r17, 0xFF	; 255
    3054:	fe 01       	movw	r30, r28
    3056:	e7 5b       	subi	r30, 0xB7	; 183
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	60 81       	ld	r22, Z
    305c:	71 81       	ldd	r23, Z+1	; 0x01
    305e:	82 81       	ldd	r24, Z+2	; 0x02
    3060:	93 81       	ldd	r25, Z+3	; 0x03
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	4a ef       	ldi	r20, 0xFA	; 250
    3068:	54 e4       	ldi	r21, 0x44	; 68
    306a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	f8 01       	movw	r30, r16
    3074:	80 83       	st	Z, r24
    3076:	91 83       	std	Z+1, r25	; 0x01
    3078:	a2 83       	std	Z+2, r26	; 0x02
    307a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    307c:	fe 01       	movw	r30, r28
    307e:	eb 5b       	subi	r30, 0xBB	; 187
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	60 81       	ld	r22, Z
    3084:	71 81       	ldd	r23, Z+1	; 0x01
    3086:	82 81       	ldd	r24, Z+2	; 0x02
    3088:	93 81       	ldd	r25, Z+3	; 0x03
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e8       	ldi	r20, 0x80	; 128
    3090:	5f e3       	ldi	r21, 0x3F	; 63
    3092:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3096:	88 23       	and	r24, r24
    3098:	44 f4       	brge	.+16     	; 0x30aa <LCD_void_Init+0x8c>
		__ticks = 1;
    309a:	fe 01       	movw	r30, r28
    309c:	ed 5b       	subi	r30, 0xBD	; 189
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	91 83       	std	Z+1, r25	; 0x01
    30a6:	80 83       	st	Z, r24
    30a8:	64 c0       	rjmp	.+200    	; 0x3172 <LCD_void_Init+0x154>
	else if (__tmp > 65535)
    30aa:	fe 01       	movw	r30, r28
    30ac:	eb 5b       	subi	r30, 0xBB	; 187
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	60 81       	ld	r22, Z
    30b2:	71 81       	ldd	r23, Z+1	; 0x01
    30b4:	82 81       	ldd	r24, Z+2	; 0x02
    30b6:	93 81       	ldd	r25, Z+3	; 0x03
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	3f ef       	ldi	r19, 0xFF	; 255
    30bc:	4f e7       	ldi	r20, 0x7F	; 127
    30be:	57 e4       	ldi	r21, 0x47	; 71
    30c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c4:	18 16       	cp	r1, r24
    30c6:	0c f0       	brlt	.+2      	; 0x30ca <LCD_void_Init+0xac>
    30c8:	43 c0       	rjmp	.+134    	; 0x3150 <LCD_void_Init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ca:	fe 01       	movw	r30, r28
    30cc:	e7 5b       	subi	r30, 0xB7	; 183
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	60 81       	ld	r22, Z
    30d2:	71 81       	ldd	r23, Z+1	; 0x01
    30d4:	82 81       	ldd	r24, Z+2	; 0x02
    30d6:	93 81       	ldd	r25, Z+3	; 0x03
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	40 e2       	ldi	r20, 0x20	; 32
    30de:	51 e4       	ldi	r21, 0x41	; 65
    30e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e4:	dc 01       	movw	r26, r24
    30e6:	cb 01       	movw	r24, r22
    30e8:	8e 01       	movw	r16, r28
    30ea:	0d 5b       	subi	r16, 0xBD	; 189
    30ec:	1f 4f       	sbci	r17, 0xFF	; 255
    30ee:	bc 01       	movw	r22, r24
    30f0:	cd 01       	movw	r24, r26
    30f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	f8 01       	movw	r30, r16
    30fc:	91 83       	std	Z+1, r25	; 0x01
    30fe:	80 83       	st	Z, r24
    3100:	1f c0       	rjmp	.+62     	; 0x3140 <LCD_void_Init+0x122>
    3102:	fe 01       	movw	r30, r28
    3104:	ef 5b       	subi	r30, 0xBF	; 191
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	88 ec       	ldi	r24, 0xC8	; 200
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	91 83       	std	Z+1, r25	; 0x01
    310e:	80 83       	st	Z, r24
    3110:	fe 01       	movw	r30, r28
    3112:	ef 5b       	subi	r30, 0xBF	; 191
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	80 81       	ld	r24, Z
    3118:	91 81       	ldd	r25, Z+1	; 0x01
    311a:	01 97       	sbiw	r24, 0x01	; 1
    311c:	f1 f7       	brne	.-4      	; 0x311a <LCD_void_Init+0xfc>
    311e:	fe 01       	movw	r30, r28
    3120:	ef 5b       	subi	r30, 0xBF	; 191
    3122:	ff 4f       	sbci	r31, 0xFF	; 255
    3124:	91 83       	std	Z+1, r25	; 0x01
    3126:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3128:	de 01       	movw	r26, r28
    312a:	ad 5b       	subi	r26, 0xBD	; 189
    312c:	bf 4f       	sbci	r27, 0xFF	; 255
    312e:	fe 01       	movw	r30, r28
    3130:	ed 5b       	subi	r30, 0xBD	; 189
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	80 81       	ld	r24, Z
    3136:	91 81       	ldd	r25, Z+1	; 0x01
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	11 96       	adiw	r26, 0x01	; 1
    313c:	9c 93       	st	X, r25
    313e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3140:	fe 01       	movw	r30, r28
    3142:	ed 5b       	subi	r30, 0xBD	; 189
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	80 81       	ld	r24, Z
    3148:	91 81       	ldd	r25, Z+1	; 0x01
    314a:	00 97       	sbiw	r24, 0x00	; 0
    314c:	d1 f6       	brne	.-76     	; 0x3102 <LCD_void_Init+0xe4>
    314e:	24 c0       	rjmp	.+72     	; 0x3198 <LCD_void_Init+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3150:	8e 01       	movw	r16, r28
    3152:	0d 5b       	subi	r16, 0xBD	; 189
    3154:	1f 4f       	sbci	r17, 0xFF	; 255
    3156:	fe 01       	movw	r30, r28
    3158:	eb 5b       	subi	r30, 0xBB	; 187
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	60 81       	ld	r22, Z
    315e:	71 81       	ldd	r23, Z+1	; 0x01
    3160:	82 81       	ldd	r24, Z+2	; 0x02
    3162:	93 81       	ldd	r25, Z+3	; 0x03
    3164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	f8 01       	movw	r30, r16
    316e:	91 83       	std	Z+1, r25	; 0x01
    3170:	80 83       	st	Z, r24
    3172:	fe 01       	movw	r30, r28
    3174:	ed 5b       	subi	r30, 0xBD	; 189
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	80 81       	ld	r24, Z
    317a:	91 81       	ldd	r25, Z+1	; 0x01
    317c:	fe 01       	movw	r30, r28
    317e:	ff 96       	adiw	r30, 0x3f	; 63
    3180:	91 83       	std	Z+1, r25	; 0x01
    3182:	80 83       	st	Z, r24
    3184:	fe 01       	movw	r30, r28
    3186:	ff 96       	adiw	r30, 0x3f	; 63
    3188:	80 81       	ld	r24, Z
    318a:	91 81       	ldd	r25, Z+1	; 0x01
    318c:	01 97       	sbiw	r24, 0x01	; 1
    318e:	f1 f7       	brne	.-4      	; 0x318c <LCD_void_Init+0x16e>
    3190:	fe 01       	movw	r30, r28
    3192:	ff 96       	adiw	r30, 0x3f	; 63
    3194:	91 83       	std	Z+1, r25	; 0x01
    3196:	80 83       	st	Z, r24
#if LCD_U8_MODE==LCD_U8_8_BIT_MODE
		/*delay more than 30ms*/
		_delay_ms(35);
		/*send function set */
		LCD_void_Write_CMD(LCD_Function_set_8_bit_2_line_mode);
    3198:	88 e3       	ldi	r24, 0x38	; 56
    319a:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <LCD_void_Write_CMD>
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	a0 e2       	ldi	r26, 0x20	; 32
    31a4:	b2 e4       	ldi	r27, 0x42	; 66
    31a6:	8b af       	std	Y+59, r24	; 0x3b
    31a8:	9c af       	std	Y+60, r25	; 0x3c
    31aa:	ad af       	std	Y+61, r26	; 0x3d
    31ac:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    31ae:	6b ad       	ldd	r22, Y+59	; 0x3b
    31b0:	7c ad       	ldd	r23, Y+60	; 0x3c
    31b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    31b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    31b6:	2b ea       	ldi	r18, 0xAB	; 171
    31b8:	3a ea       	ldi	r19, 0xAA	; 170
    31ba:	4a e2       	ldi	r20, 0x2A	; 42
    31bc:	50 e4       	ldi	r21, 0x40	; 64
    31be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	8f ab       	std	Y+55, r24	; 0x37
    31c8:	98 af       	std	Y+56, r25	; 0x38
    31ca:	a9 af       	std	Y+57, r26	; 0x39
    31cc:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    31ce:	6f a9       	ldd	r22, Y+55	; 0x37
    31d0:	78 ad       	ldd	r23, Y+56	; 0x38
    31d2:	89 ad       	ldd	r24, Y+57	; 0x39
    31d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	40 e8       	ldi	r20, 0x80	; 128
    31dc:	5f e3       	ldi	r21, 0x3F	; 63
    31de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31e2:	88 23       	and	r24, r24
    31e4:	1c f4       	brge	.+6      	; 0x31ec <LCD_void_Init+0x1ce>
		__ticks = 1;
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	8e ab       	std	Y+54, r24	; 0x36
    31ea:	91 c0       	rjmp	.+290    	; 0x330e <LCD_void_Init+0x2f0>
	else if (__tmp > 255)
    31ec:	6f a9       	ldd	r22, Y+55	; 0x37
    31ee:	78 ad       	ldd	r23, Y+56	; 0x38
    31f0:	89 ad       	ldd	r24, Y+57	; 0x39
    31f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	4f e7       	ldi	r20, 0x7F	; 127
    31fa:	53 e4       	ldi	r21, 0x43	; 67
    31fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3200:	18 16       	cp	r1, r24
    3202:	0c f0       	brlt	.+2      	; 0x3206 <LCD_void_Init+0x1e8>
    3204:	7b c0       	rjmp	.+246    	; 0x32fc <LCD_void_Init+0x2de>
	{
		_delay_ms(__us / 1000.0);
    3206:	6b ad       	ldd	r22, Y+59	; 0x3b
    3208:	7c ad       	ldd	r23, Y+60	; 0x3c
    320a:	8d ad       	ldd	r24, Y+61	; 0x3d
    320c:	9e ad       	ldd	r25, Y+62	; 0x3e
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	4a e7       	ldi	r20, 0x7A	; 122
    3214:	54 e4       	ldi	r21, 0x44	; 68
    3216:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	8a ab       	std	Y+50, r24	; 0x32
    3220:	9b ab       	std	Y+51, r25	; 0x33
    3222:	ac ab       	std	Y+52, r26	; 0x34
    3224:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3226:	6a a9       	ldd	r22, Y+50	; 0x32
    3228:	7b a9       	ldd	r23, Y+51	; 0x33
    322a:	8c a9       	ldd	r24, Y+52	; 0x34
    322c:	9d a9       	ldd	r25, Y+53	; 0x35
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	4a ef       	ldi	r20, 0xFA	; 250
    3234:	54 e4       	ldi	r21, 0x44	; 68
    3236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	8e a7       	std	Y+46, r24	; 0x2e
    3240:	9f a7       	std	Y+47, r25	; 0x2f
    3242:	a8 ab       	std	Y+48, r26	; 0x30
    3244:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    3246:	6e a5       	ldd	r22, Y+46	; 0x2e
    3248:	7f a5       	ldd	r23, Y+47	; 0x2f
    324a:	88 a9       	ldd	r24, Y+48	; 0x30
    324c:	99 a9       	ldd	r25, Y+49	; 0x31
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	40 e8       	ldi	r20, 0x80	; 128
    3254:	5f e3       	ldi	r21, 0x3F	; 63
    3256:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    325a:	88 23       	and	r24, r24
    325c:	2c f4       	brge	.+10     	; 0x3268 <LCD_void_Init+0x24a>
		__ticks = 1;
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	9d a7       	std	Y+45, r25	; 0x2d
    3264:	8c a7       	std	Y+44, r24	; 0x2c
    3266:	3f c0       	rjmp	.+126    	; 0x32e6 <LCD_void_Init+0x2c8>
	else if (__tmp > 65535)
    3268:	6e a5       	ldd	r22, Y+46	; 0x2e
    326a:	7f a5       	ldd	r23, Y+47	; 0x2f
    326c:	88 a9       	ldd	r24, Y+48	; 0x30
    326e:	99 a9       	ldd	r25, Y+49	; 0x31
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	3f ef       	ldi	r19, 0xFF	; 255
    3274:	4f e7       	ldi	r20, 0x7F	; 127
    3276:	57 e4       	ldi	r21, 0x47	; 71
    3278:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    327c:	18 16       	cp	r1, r24
    327e:	4c f5       	brge	.+82     	; 0x32d2 <LCD_void_Init+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3280:	6a a9       	ldd	r22, Y+50	; 0x32
    3282:	7b a9       	ldd	r23, Y+51	; 0x33
    3284:	8c a9       	ldd	r24, Y+52	; 0x34
    3286:	9d a9       	ldd	r25, Y+53	; 0x35
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	40 e2       	ldi	r20, 0x20	; 32
    328e:	51 e4       	ldi	r21, 0x41	; 65
    3290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3294:	dc 01       	movw	r26, r24
    3296:	cb 01       	movw	r24, r22
    3298:	bc 01       	movw	r22, r24
    329a:	cd 01       	movw	r24, r26
    329c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	9d a7       	std	Y+45, r25	; 0x2d
    32a6:	8c a7       	std	Y+44, r24	; 0x2c
    32a8:	0f c0       	rjmp	.+30     	; 0x32c8 <LCD_void_Init+0x2aa>
    32aa:	88 ec       	ldi	r24, 0xC8	; 200
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	9b a7       	std	Y+43, r25	; 0x2b
    32b0:	8a a7       	std	Y+42, r24	; 0x2a
    32b2:	8a a5       	ldd	r24, Y+42	; 0x2a
    32b4:	9b a5       	ldd	r25, Y+43	; 0x2b
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	f1 f7       	brne	.-4      	; 0x32b6 <LCD_void_Init+0x298>
    32ba:	9b a7       	std	Y+43, r25	; 0x2b
    32bc:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32be:	8c a5       	ldd	r24, Y+44	; 0x2c
    32c0:	9d a5       	ldd	r25, Y+45	; 0x2d
    32c2:	01 97       	sbiw	r24, 0x01	; 1
    32c4:	9d a7       	std	Y+45, r25	; 0x2d
    32c6:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32c8:	8c a5       	ldd	r24, Y+44	; 0x2c
    32ca:	9d a5       	ldd	r25, Y+45	; 0x2d
    32cc:	00 97       	sbiw	r24, 0x00	; 0
    32ce:	69 f7       	brne	.-38     	; 0x32aa <LCD_void_Init+0x28c>
    32d0:	24 c0       	rjmp	.+72     	; 0x331a <LCD_void_Init+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d2:	6e a5       	ldd	r22, Y+46	; 0x2e
    32d4:	7f a5       	ldd	r23, Y+47	; 0x2f
    32d6:	88 a9       	ldd	r24, Y+48	; 0x30
    32d8:	99 a9       	ldd	r25, Y+49	; 0x31
    32da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	9d a7       	std	Y+45, r25	; 0x2d
    32e4:	8c a7       	std	Y+44, r24	; 0x2c
    32e6:	8c a5       	ldd	r24, Y+44	; 0x2c
    32e8:	9d a5       	ldd	r25, Y+45	; 0x2d
    32ea:	99 a7       	std	Y+41, r25	; 0x29
    32ec:	88 a7       	std	Y+40, r24	; 0x28
    32ee:	88 a5       	ldd	r24, Y+40	; 0x28
    32f0:	99 a5       	ldd	r25, Y+41	; 0x29
    32f2:	01 97       	sbiw	r24, 0x01	; 1
    32f4:	f1 f7       	brne	.-4      	; 0x32f2 <LCD_void_Init+0x2d4>
    32f6:	99 a7       	std	Y+41, r25	; 0x29
    32f8:	88 a7       	std	Y+40, r24	; 0x28
    32fa:	0f c0       	rjmp	.+30     	; 0x331a <LCD_void_Init+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32fc:	6f a9       	ldd	r22, Y+55	; 0x37
    32fe:	78 ad       	ldd	r23, Y+56	; 0x38
    3300:	89 ad       	ldd	r24, Y+57	; 0x39
    3302:	9a ad       	ldd	r25, Y+58	; 0x3a
    3304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	8e ab       	std	Y+54, r24	; 0x36
    330e:	8e a9       	ldd	r24, Y+54	; 0x36
    3310:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3312:	8f a1       	ldd	r24, Y+39	; 0x27
    3314:	8a 95       	dec	r24
    3316:	f1 f7       	brne	.-4      	; 0x3314 <LCD_void_Init+0x2f6>
    3318:	8f a3       	std	Y+39, r24	; 0x27
		/*delay more than 39us*/
		_delay_us(40);
		/*send cursor mode */
		LCD_void_Write_CMD(LCD_Cursor_OFF);
    331a:	8c e0       	ldi	r24, 0x0C	; 12
    331c:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <LCD_void_Write_CMD>
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	a0 e2       	ldi	r26, 0x20	; 32
    3326:	b2 e4       	ldi	r27, 0x42	; 66
    3328:	8b a3       	std	Y+35, r24	; 0x23
    332a:	9c a3       	std	Y+36, r25	; 0x24
    332c:	ad a3       	std	Y+37, r26	; 0x25
    332e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3330:	6b a1       	ldd	r22, Y+35	; 0x23
    3332:	7c a1       	ldd	r23, Y+36	; 0x24
    3334:	8d a1       	ldd	r24, Y+37	; 0x25
    3336:	9e a1       	ldd	r25, Y+38	; 0x26
    3338:	2b ea       	ldi	r18, 0xAB	; 171
    333a:	3a ea       	ldi	r19, 0xAA	; 170
    333c:	4a e2       	ldi	r20, 0x2A	; 42
    333e:	50 e4       	ldi	r21, 0x40	; 64
    3340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3344:	dc 01       	movw	r26, r24
    3346:	cb 01       	movw	r24, r22
    3348:	8f 8f       	std	Y+31, r24	; 0x1f
    334a:	98 a3       	std	Y+32, r25	; 0x20
    334c:	a9 a3       	std	Y+33, r26	; 0x21
    334e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3350:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3352:	78 a1       	ldd	r23, Y+32	; 0x20
    3354:	89 a1       	ldd	r24, Y+33	; 0x21
    3356:	9a a1       	ldd	r25, Y+34	; 0x22
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	40 e8       	ldi	r20, 0x80	; 128
    335e:	5f e3       	ldi	r21, 0x3F	; 63
    3360:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3364:	88 23       	and	r24, r24
    3366:	1c f4       	brge	.+6      	; 0x336e <LCD_void_Init+0x350>
		__ticks = 1;
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	8e 8f       	std	Y+30, r24	; 0x1e
    336c:	91 c0       	rjmp	.+290    	; 0x3490 <LCD_void_Init+0x472>
	else if (__tmp > 255)
    336e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3370:	78 a1       	ldd	r23, Y+32	; 0x20
    3372:	89 a1       	ldd	r24, Y+33	; 0x21
    3374:	9a a1       	ldd	r25, Y+34	; 0x22
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	4f e7       	ldi	r20, 0x7F	; 127
    337c:	53 e4       	ldi	r21, 0x43	; 67
    337e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3382:	18 16       	cp	r1, r24
    3384:	0c f0       	brlt	.+2      	; 0x3388 <LCD_void_Init+0x36a>
    3386:	7b c0       	rjmp	.+246    	; 0x347e <LCD_void_Init+0x460>
	{
		_delay_ms(__us / 1000.0);
    3388:	6b a1       	ldd	r22, Y+35	; 0x23
    338a:	7c a1       	ldd	r23, Y+36	; 0x24
    338c:	8d a1       	ldd	r24, Y+37	; 0x25
    338e:	9e a1       	ldd	r25, Y+38	; 0x26
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	4a e7       	ldi	r20, 0x7A	; 122
    3396:	54 e4       	ldi	r21, 0x44	; 68
    3398:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	8a 8f       	std	Y+26, r24	; 0x1a
    33a2:	9b 8f       	std	Y+27, r25	; 0x1b
    33a4:	ac 8f       	std	Y+28, r26	; 0x1c
    33a6:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33a8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    33aa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    33ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    33ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	4a ef       	ldi	r20, 0xFA	; 250
    33b6:	54 e4       	ldi	r21, 0x44	; 68
    33b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	8e 8b       	std	Y+22, r24	; 0x16
    33c2:	9f 8b       	std	Y+23, r25	; 0x17
    33c4:	a8 8f       	std	Y+24, r26	; 0x18
    33c6:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    33c8:	6e 89       	ldd	r22, Y+22	; 0x16
    33ca:	7f 89       	ldd	r23, Y+23	; 0x17
    33cc:	88 8d       	ldd	r24, Y+24	; 0x18
    33ce:	99 8d       	ldd	r25, Y+25	; 0x19
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	40 e8       	ldi	r20, 0x80	; 128
    33d6:	5f e3       	ldi	r21, 0x3F	; 63
    33d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33dc:	88 23       	and	r24, r24
    33de:	2c f4       	brge	.+10     	; 0x33ea <LCD_void_Init+0x3cc>
		__ticks = 1;
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	9d 8b       	std	Y+21, r25	; 0x15
    33e6:	8c 8b       	std	Y+20, r24	; 0x14
    33e8:	3f c0       	rjmp	.+126    	; 0x3468 <LCD_void_Init+0x44a>
	else if (__tmp > 65535)
    33ea:	6e 89       	ldd	r22, Y+22	; 0x16
    33ec:	7f 89       	ldd	r23, Y+23	; 0x17
    33ee:	88 8d       	ldd	r24, Y+24	; 0x18
    33f0:	99 8d       	ldd	r25, Y+25	; 0x19
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	3f ef       	ldi	r19, 0xFF	; 255
    33f6:	4f e7       	ldi	r20, 0x7F	; 127
    33f8:	57 e4       	ldi	r21, 0x47	; 71
    33fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33fe:	18 16       	cp	r1, r24
    3400:	4c f5       	brge	.+82     	; 0x3454 <LCD_void_Init+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3402:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3404:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3406:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3408:	9d 8d       	ldd	r25, Y+29	; 0x1d
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	40 e2       	ldi	r20, 0x20	; 32
    3410:	51 e4       	ldi	r21, 0x41	; 65
    3412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	bc 01       	movw	r22, r24
    341c:	cd 01       	movw	r24, r26
    341e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	9d 8b       	std	Y+21, r25	; 0x15
    3428:	8c 8b       	std	Y+20, r24	; 0x14
    342a:	0f c0       	rjmp	.+30     	; 0x344a <LCD_void_Init+0x42c>
    342c:	88 ec       	ldi	r24, 0xC8	; 200
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	9b 8b       	std	Y+19, r25	; 0x13
    3432:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3434:	8a 89       	ldd	r24, Y+18	; 0x12
    3436:	9b 89       	ldd	r25, Y+19	; 0x13
    3438:	01 97       	sbiw	r24, 0x01	; 1
    343a:	f1 f7       	brne	.-4      	; 0x3438 <LCD_void_Init+0x41a>
    343c:	9b 8b       	std	Y+19, r25	; 0x13
    343e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3440:	8c 89       	ldd	r24, Y+20	; 0x14
    3442:	9d 89       	ldd	r25, Y+21	; 0x15
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	9d 8b       	std	Y+21, r25	; 0x15
    3448:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    344a:	8c 89       	ldd	r24, Y+20	; 0x14
    344c:	9d 89       	ldd	r25, Y+21	; 0x15
    344e:	00 97       	sbiw	r24, 0x00	; 0
    3450:	69 f7       	brne	.-38     	; 0x342c <LCD_void_Init+0x40e>
    3452:	24 c0       	rjmp	.+72     	; 0x349c <LCD_void_Init+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3454:	6e 89       	ldd	r22, Y+22	; 0x16
    3456:	7f 89       	ldd	r23, Y+23	; 0x17
    3458:	88 8d       	ldd	r24, Y+24	; 0x18
    345a:	99 8d       	ldd	r25, Y+25	; 0x19
    345c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	9d 8b       	std	Y+21, r25	; 0x15
    3466:	8c 8b       	std	Y+20, r24	; 0x14
    3468:	8c 89       	ldd	r24, Y+20	; 0x14
    346a:	9d 89       	ldd	r25, Y+21	; 0x15
    346c:	99 8b       	std	Y+17, r25	; 0x11
    346e:	88 8b       	std	Y+16, r24	; 0x10
    3470:	88 89       	ldd	r24, Y+16	; 0x10
    3472:	99 89       	ldd	r25, Y+17	; 0x11
    3474:	01 97       	sbiw	r24, 0x01	; 1
    3476:	f1 f7       	brne	.-4      	; 0x3474 <LCD_void_Init+0x456>
    3478:	99 8b       	std	Y+17, r25	; 0x11
    347a:	88 8b       	std	Y+16, r24	; 0x10
    347c:	0f c0       	rjmp	.+30     	; 0x349c <LCD_void_Init+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    347e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3480:	78 a1       	ldd	r23, Y+32	; 0x20
    3482:	89 a1       	ldd	r24, Y+33	; 0x21
    3484:	9a a1       	ldd	r25, Y+34	; 0x22
    3486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	8e 8f       	std	Y+30, r24	; 0x1e
    3490:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3492:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3494:	8f 85       	ldd	r24, Y+15	; 0x0f
    3496:	8a 95       	dec	r24
    3498:	f1 f7       	brne	.-4      	; 0x3496 <LCD_void_Init+0x478>
    349a:	8f 87       	std	Y+15, r24	; 0x0f
		/*delay more than 39us*/
		_delay_us(40);
		/*send command clear display*/
		LCD_void_Write_CMD(LCD_Clear_Display_Screen);
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <LCD_void_Write_CMD>
    34a2:	80 e0       	ldi	r24, 0x00	; 0
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	a0 e0       	ldi	r26, 0x00	; 0
    34a8:	b0 e4       	ldi	r27, 0x40	; 64
    34aa:	8b 87       	std	Y+11, r24	; 0x0b
    34ac:	9c 87       	std	Y+12, r25	; 0x0c
    34ae:	ad 87       	std	Y+13, r26	; 0x0d
    34b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    34b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    34b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	4a ef       	ldi	r20, 0xFA	; 250
    34c0:	54 e4       	ldi	r21, 0x44	; 68
    34c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	8f 83       	std	Y+7, r24	; 0x07
    34cc:	98 87       	std	Y+8, r25	; 0x08
    34ce:	a9 87       	std	Y+9, r26	; 0x09
    34d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34d2:	6f 81       	ldd	r22, Y+7	; 0x07
    34d4:	78 85       	ldd	r23, Y+8	; 0x08
    34d6:	89 85       	ldd	r24, Y+9	; 0x09
    34d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	40 e8       	ldi	r20, 0x80	; 128
    34e0:	5f e3       	ldi	r21, 0x3F	; 63
    34e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34e6:	88 23       	and	r24, r24
    34e8:	2c f4       	brge	.+10     	; 0x34f4 <LCD_void_Init+0x4d6>
		__ticks = 1;
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	9e 83       	std	Y+6, r25	; 0x06
    34f0:	8d 83       	std	Y+5, r24	; 0x05
    34f2:	3f c0       	rjmp	.+126    	; 0x3572 <LCD_void_Init+0x554>
	else if (__tmp > 65535)
    34f4:	6f 81       	ldd	r22, Y+7	; 0x07
    34f6:	78 85       	ldd	r23, Y+8	; 0x08
    34f8:	89 85       	ldd	r24, Y+9	; 0x09
    34fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	3f ef       	ldi	r19, 0xFF	; 255
    3500:	4f e7       	ldi	r20, 0x7F	; 127
    3502:	57 e4       	ldi	r21, 0x47	; 71
    3504:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3508:	18 16       	cp	r1, r24
    350a:	4c f5       	brge	.+82     	; 0x355e <LCD_void_Init+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    350c:	6b 85       	ldd	r22, Y+11	; 0x0b
    350e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3510:	8d 85       	ldd	r24, Y+13	; 0x0d
    3512:	9e 85       	ldd	r25, Y+14	; 0x0e
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	40 e2       	ldi	r20, 0x20	; 32
    351a:	51 e4       	ldi	r21, 0x41	; 65
    351c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3520:	dc 01       	movw	r26, r24
    3522:	cb 01       	movw	r24, r22
    3524:	bc 01       	movw	r22, r24
    3526:	cd 01       	movw	r24, r26
    3528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    352c:	dc 01       	movw	r26, r24
    352e:	cb 01       	movw	r24, r22
    3530:	9e 83       	std	Y+6, r25	; 0x06
    3532:	8d 83       	std	Y+5, r24	; 0x05
    3534:	0f c0       	rjmp	.+30     	; 0x3554 <LCD_void_Init+0x536>
    3536:	88 ec       	ldi	r24, 0xC8	; 200
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	9c 83       	std	Y+4, r25	; 0x04
    353c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    353e:	8b 81       	ldd	r24, Y+3	; 0x03
    3540:	9c 81       	ldd	r25, Y+4	; 0x04
    3542:	01 97       	sbiw	r24, 0x01	; 1
    3544:	f1 f7       	brne	.-4      	; 0x3542 <LCD_void_Init+0x524>
    3546:	9c 83       	std	Y+4, r25	; 0x04
    3548:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    354a:	8d 81       	ldd	r24, Y+5	; 0x05
    354c:	9e 81       	ldd	r25, Y+6	; 0x06
    354e:	01 97       	sbiw	r24, 0x01	; 1
    3550:	9e 83       	std	Y+6, r25	; 0x06
    3552:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3554:	8d 81       	ldd	r24, Y+5	; 0x05
    3556:	9e 81       	ldd	r25, Y+6	; 0x06
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	69 f7       	brne	.-38     	; 0x3536 <LCD_void_Init+0x518>
    355c:	14 c0       	rjmp	.+40     	; 0x3586 <LCD_void_Init+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    355e:	6f 81       	ldd	r22, Y+7	; 0x07
    3560:	78 85       	ldd	r23, Y+8	; 0x08
    3562:	89 85       	ldd	r24, Y+9	; 0x09
    3564:	9a 85       	ldd	r25, Y+10	; 0x0a
    3566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	9e 83       	std	Y+6, r25	; 0x06
    3570:	8d 83       	std	Y+5, r24	; 0x05
    3572:	8d 81       	ldd	r24, Y+5	; 0x05
    3574:	9e 81       	ldd	r25, Y+6	; 0x06
    3576:	9a 83       	std	Y+2, r25	; 0x02
    3578:	89 83       	std	Y+1, r24	; 0x01
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	9a 81       	ldd	r25, Y+2	; 0x02
    357e:	01 97       	sbiw	r24, 0x01	; 1
    3580:	f1 f7       	brne	.-4      	; 0x357e <LCD_void_Init+0x560>
    3582:	9a 83       	std	Y+2, r25	; 0x02
    3584:	89 83       	std	Y+1, r24	; 0x01
		/*delay more than 1.53ms*/
		_delay_ms(2);
		/*increment cursor*/
		LCD_void_Write_CMD(LCD_Cursor_Increment);
    3586:	86 e0       	ldi	r24, 0x06	; 6
    3588:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <LCD_void_Write_CMD>
#endif




}
    358c:	c4 5b       	subi	r28, 0xB4	; 180
    358e:	df 4f       	sbci	r29, 0xFF	; 255
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	f8 94       	cli
    3594:	de bf       	out	0x3e, r29	; 62
    3596:	0f be       	out	0x3f, r0	; 63
    3598:	cd bf       	out	0x3d, r28	; 61
    359a:	cf 91       	pop	r28
    359c:	df 91       	pop	r29
    359e:	1f 91       	pop	r17
    35a0:	0f 91       	pop	r16
    35a2:	08 95       	ret

000035a4 <LCD_void_Write_CMD>:

void LCD_void_Write_CMD(u8 Copy_u8_CMD){
    35a4:	df 93       	push	r29
    35a6:	cf 93       	push	r28
    35a8:	0f 92       	push	r0
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
    35ae:	89 83       	std	Y+1, r24	; 0x01
	/*RW=0*/
	/*write a command*/
	/*E=1*/
	/*E=0*/
//	DIO_U8_Set_Pin_Dir(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_OUTPUT);
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_LOW);
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	60 e0       	ldi	r22, 0x00	; 0
    35b4:	40 e0       	ldi	r20, 0x00	; 0
    35b6:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>

	LCD_void_Write(Copy_u8_CMD);
    35ba:	89 81       	ldd	r24, Y+1	; 0x01
    35bc:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <LCD_void_Write>

}
    35c0:	0f 90       	pop	r0
    35c2:	cf 91       	pop	r28
    35c4:	df 91       	pop	r29
    35c6:	08 95       	ret

000035c8 <LCD_void_Write>:



void LCD_void_Write(u8 Copy_u8_val){
    35c8:	df 93       	push	r29
    35ca:	cf 93       	push	r28
    35cc:	cd b7       	in	r28, 0x3d	; 61
    35ce:	de b7       	in	r29, 0x3e	; 62
    35d0:	69 97       	sbiw	r28, 0x19	; 25
    35d2:	0f b6       	in	r0, 0x3f	; 63
    35d4:	f8 94       	cli
    35d6:	de bf       	out	0x3e, r29	; 62
    35d8:	0f be       	out	0x3f, r0	; 63
    35da:	cd bf       	out	0x3d, r28	; 61
    35dc:	89 8f       	std	Y+25, r24	; 0x19

	/*RW=0*/
		DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,PIN_LOW);
    35de:	80 e0       	ldi	r24, 0x00	; 0
    35e0:	61 e0       	ldi	r22, 0x01	; 1
    35e2:	40 e0       	ldi	r20, 0x00	; 0
    35e4:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>

#if LCD_U8_MODE==LCD_U8_8_BIT_MODE

	/*WRITE */
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN0,Get_Bit(Copy_u8_val,DIO_U8_PIN0));
    35e8:	89 8d       	ldd	r24, Y+25	; 0x19
    35ea:	98 2f       	mov	r25, r24
    35ec:	91 70       	andi	r25, 0x01	; 1
    35ee:	82 e0       	ldi	r24, 0x02	; 2
    35f0:	60 e0       	ldi	r22, 0x00	; 0
    35f2:	49 2f       	mov	r20, r25
    35f4:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN1,Get_Bit(Copy_u8_val,DIO_U8_PIN1));
    35f8:	89 8d       	ldd	r24, Y+25	; 0x19
    35fa:	86 95       	lsr	r24
    35fc:	98 2f       	mov	r25, r24
    35fe:	91 70       	andi	r25, 0x01	; 1
    3600:	82 e0       	ldi	r24, 0x02	; 2
    3602:	61 e0       	ldi	r22, 0x01	; 1
    3604:	49 2f       	mov	r20, r25
    3606:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN2,Get_Bit(Copy_u8_val,DIO_U8_PIN2));
    360a:	89 8d       	ldd	r24, Y+25	; 0x19
    360c:	86 95       	lsr	r24
    360e:	86 95       	lsr	r24
    3610:	98 2f       	mov	r25, r24
    3612:	91 70       	andi	r25, 0x01	; 1
    3614:	82 e0       	ldi	r24, 0x02	; 2
    3616:	62 e0       	ldi	r22, 0x02	; 2
    3618:	49 2f       	mov	r20, r25
    361a:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN3,Get_Bit(Copy_u8_val,DIO_U8_PIN3));
    361e:	89 8d       	ldd	r24, Y+25	; 0x19
    3620:	86 95       	lsr	r24
    3622:	86 95       	lsr	r24
    3624:	86 95       	lsr	r24
    3626:	98 2f       	mov	r25, r24
    3628:	91 70       	andi	r25, 0x01	; 1
    362a:	82 e0       	ldi	r24, 0x02	; 2
    362c:	63 e0       	ldi	r22, 0x03	; 3
    362e:	49 2f       	mov	r20, r25
    3630:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN4,Get_Bit(Copy_u8_val,DIO_U8_PIN4));
    3634:	89 8d       	ldd	r24, Y+25	; 0x19
    3636:	82 95       	swap	r24
    3638:	8f 70       	andi	r24, 0x0F	; 15
    363a:	98 2f       	mov	r25, r24
    363c:	91 70       	andi	r25, 0x01	; 1
    363e:	82 e0       	ldi	r24, 0x02	; 2
    3640:	64 e0       	ldi	r22, 0x04	; 4
    3642:	49 2f       	mov	r20, r25
    3644:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN5,Get_Bit(Copy_u8_val,DIO_U8_PIN5));
    3648:	89 8d       	ldd	r24, Y+25	; 0x19
    364a:	82 95       	swap	r24
    364c:	86 95       	lsr	r24
    364e:	87 70       	andi	r24, 0x07	; 7
    3650:	98 2f       	mov	r25, r24
    3652:	91 70       	andi	r25, 0x01	; 1
    3654:	82 e0       	ldi	r24, 0x02	; 2
    3656:	65 e0       	ldi	r22, 0x05	; 5
    3658:	49 2f       	mov	r20, r25
    365a:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN6,Get_Bit(Copy_u8_val,DIO_U8_PIN6));
    365e:	89 8d       	ldd	r24, Y+25	; 0x19
    3660:	82 95       	swap	r24
    3662:	86 95       	lsr	r24
    3664:	86 95       	lsr	r24
    3666:	83 70       	andi	r24, 0x03	; 3
    3668:	98 2f       	mov	r25, r24
    366a:	91 70       	andi	r25, 0x01	; 1
    366c:	82 e0       	ldi	r24, 0x02	; 2
    366e:	66 e0       	ldi	r22, 0x06	; 6
    3670:	49 2f       	mov	r20, r25
    3672:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN7,Get_Bit(Copy_u8_val,DIO_U8_PIN7));
    3676:	89 8d       	ldd	r24, Y+25	; 0x19
    3678:	98 2f       	mov	r25, r24
    367a:	99 1f       	adc	r25, r25
    367c:	99 27       	eor	r25, r25
    367e:	99 1f       	adc	r25, r25
    3680:	82 e0       	ldi	r24, 0x02	; 2
    3682:	67 e0       	ldi	r22, 0x07	; 7
    3684:	49 2f       	mov	r20, r25
    3686:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
	/*E=1*/
	/*E=0*/
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_HIGH);
    368a:	80 e0       	ldi	r24, 0x00	; 0
    368c:	62 e0       	ldi	r22, 0x02	; 2
    368e:	41 e0       	ldi	r20, 0x01	; 1
    3690:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
    3694:	80 e0       	ldi	r24, 0x00	; 0
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	a0 e8       	ldi	r26, 0x80	; 128
    369a:	bf e3       	ldi	r27, 0x3F	; 63
    369c:	8d 8b       	std	Y+21, r24	; 0x15
    369e:	9e 8b       	std	Y+22, r25	; 0x16
    36a0:	af 8b       	std	Y+23, r26	; 0x17
    36a2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    36a4:	6d 89       	ldd	r22, Y+21	; 0x15
    36a6:	7e 89       	ldd	r23, Y+22	; 0x16
    36a8:	8f 89       	ldd	r24, Y+23	; 0x17
    36aa:	98 8d       	ldd	r25, Y+24	; 0x18
    36ac:	2b ea       	ldi	r18, 0xAB	; 171
    36ae:	3a ea       	ldi	r19, 0xAA	; 170
    36b0:	4a e2       	ldi	r20, 0x2A	; 42
    36b2:	50 e4       	ldi	r21, 0x40	; 64
    36b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	89 8b       	std	Y+17, r24	; 0x11
    36be:	9a 8b       	std	Y+18, r25	; 0x12
    36c0:	ab 8b       	std	Y+19, r26	; 0x13
    36c2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    36c4:	69 89       	ldd	r22, Y+17	; 0x11
    36c6:	7a 89       	ldd	r23, Y+18	; 0x12
    36c8:	8b 89       	ldd	r24, Y+19	; 0x13
    36ca:	9c 89       	ldd	r25, Y+20	; 0x14
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	40 e8       	ldi	r20, 0x80	; 128
    36d2:	5f e3       	ldi	r21, 0x3F	; 63
    36d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36d8:	88 23       	and	r24, r24
    36da:	1c f4       	brge	.+6      	; 0x36e2 <LCD_void_Write+0x11a>
		__ticks = 1;
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	88 8b       	std	Y+16, r24	; 0x10
    36e0:	91 c0       	rjmp	.+290    	; 0x3804 <LCD_void_Write+0x23c>
	else if (__tmp > 255)
    36e2:	69 89       	ldd	r22, Y+17	; 0x11
    36e4:	7a 89       	ldd	r23, Y+18	; 0x12
    36e6:	8b 89       	ldd	r24, Y+19	; 0x13
    36e8:	9c 89       	ldd	r25, Y+20	; 0x14
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	4f e7       	ldi	r20, 0x7F	; 127
    36f0:	53 e4       	ldi	r21, 0x43	; 67
    36f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36f6:	18 16       	cp	r1, r24
    36f8:	0c f0       	brlt	.+2      	; 0x36fc <LCD_void_Write+0x134>
    36fa:	7b c0       	rjmp	.+246    	; 0x37f2 <LCD_void_Write+0x22a>
	{
		_delay_ms(__us / 1000.0);
    36fc:	6d 89       	ldd	r22, Y+21	; 0x15
    36fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3700:	8f 89       	ldd	r24, Y+23	; 0x17
    3702:	98 8d       	ldd	r25, Y+24	; 0x18
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	4a e7       	ldi	r20, 0x7A	; 122
    370a:	54 e4       	ldi	r21, 0x44	; 68
    370c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	8c 87       	std	Y+12, r24	; 0x0c
    3716:	9d 87       	std	Y+13, r25	; 0x0d
    3718:	ae 87       	std	Y+14, r26	; 0x0e
    371a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    371c:	6c 85       	ldd	r22, Y+12	; 0x0c
    371e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3720:	8e 85       	ldd	r24, Y+14	; 0x0e
    3722:	9f 85       	ldd	r25, Y+15	; 0x0f
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	4a ef       	ldi	r20, 0xFA	; 250
    372a:	54 e4       	ldi	r21, 0x44	; 68
    372c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3730:	dc 01       	movw	r26, r24
    3732:	cb 01       	movw	r24, r22
    3734:	88 87       	std	Y+8, r24	; 0x08
    3736:	99 87       	std	Y+9, r25	; 0x09
    3738:	aa 87       	std	Y+10, r26	; 0x0a
    373a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    373c:	68 85       	ldd	r22, Y+8	; 0x08
    373e:	79 85       	ldd	r23, Y+9	; 0x09
    3740:	8a 85       	ldd	r24, Y+10	; 0x0a
    3742:	9b 85       	ldd	r25, Y+11	; 0x0b
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	40 e8       	ldi	r20, 0x80	; 128
    374a:	5f e3       	ldi	r21, 0x3F	; 63
    374c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3750:	88 23       	and	r24, r24
    3752:	2c f4       	brge	.+10     	; 0x375e <LCD_void_Write+0x196>
		__ticks = 1;
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	9f 83       	std	Y+7, r25	; 0x07
    375a:	8e 83       	std	Y+6, r24	; 0x06
    375c:	3f c0       	rjmp	.+126    	; 0x37dc <LCD_void_Write+0x214>
	else if (__tmp > 65535)
    375e:	68 85       	ldd	r22, Y+8	; 0x08
    3760:	79 85       	ldd	r23, Y+9	; 0x09
    3762:	8a 85       	ldd	r24, Y+10	; 0x0a
    3764:	9b 85       	ldd	r25, Y+11	; 0x0b
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	3f ef       	ldi	r19, 0xFF	; 255
    376a:	4f e7       	ldi	r20, 0x7F	; 127
    376c:	57 e4       	ldi	r21, 0x47	; 71
    376e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3772:	18 16       	cp	r1, r24
    3774:	4c f5       	brge	.+82     	; 0x37c8 <LCD_void_Write+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3776:	6c 85       	ldd	r22, Y+12	; 0x0c
    3778:	7d 85       	ldd	r23, Y+13	; 0x0d
    377a:	8e 85       	ldd	r24, Y+14	; 0x0e
    377c:	9f 85       	ldd	r25, Y+15	; 0x0f
    377e:	20 e0       	ldi	r18, 0x00	; 0
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	40 e2       	ldi	r20, 0x20	; 32
    3784:	51 e4       	ldi	r21, 0x41	; 65
    3786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    378a:	dc 01       	movw	r26, r24
    378c:	cb 01       	movw	r24, r22
    378e:	bc 01       	movw	r22, r24
    3790:	cd 01       	movw	r24, r26
    3792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3796:	dc 01       	movw	r26, r24
    3798:	cb 01       	movw	r24, r22
    379a:	9f 83       	std	Y+7, r25	; 0x07
    379c:	8e 83       	std	Y+6, r24	; 0x06
    379e:	0f c0       	rjmp	.+30     	; 0x37be <LCD_void_Write+0x1f6>
    37a0:	88 ec       	ldi	r24, 0xC8	; 200
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	9d 83       	std	Y+5, r25	; 0x05
    37a6:	8c 83       	std	Y+4, r24	; 0x04
    37a8:	8c 81       	ldd	r24, Y+4	; 0x04
    37aa:	9d 81       	ldd	r25, Y+5	; 0x05
    37ac:	01 97       	sbiw	r24, 0x01	; 1
    37ae:	f1 f7       	brne	.-4      	; 0x37ac <LCD_void_Write+0x1e4>
    37b0:	9d 83       	std	Y+5, r25	; 0x05
    37b2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37b4:	8e 81       	ldd	r24, Y+6	; 0x06
    37b6:	9f 81       	ldd	r25, Y+7	; 0x07
    37b8:	01 97       	sbiw	r24, 0x01	; 1
    37ba:	9f 83       	std	Y+7, r25	; 0x07
    37bc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37be:	8e 81       	ldd	r24, Y+6	; 0x06
    37c0:	9f 81       	ldd	r25, Y+7	; 0x07
    37c2:	00 97       	sbiw	r24, 0x00	; 0
    37c4:	69 f7       	brne	.-38     	; 0x37a0 <LCD_void_Write+0x1d8>
    37c6:	24 c0       	rjmp	.+72     	; 0x3810 <LCD_void_Write+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37c8:	68 85       	ldd	r22, Y+8	; 0x08
    37ca:	79 85       	ldd	r23, Y+9	; 0x09
    37cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    37ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    37d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d4:	dc 01       	movw	r26, r24
    37d6:	cb 01       	movw	r24, r22
    37d8:	9f 83       	std	Y+7, r25	; 0x07
    37da:	8e 83       	std	Y+6, r24	; 0x06
    37dc:	8e 81       	ldd	r24, Y+6	; 0x06
    37de:	9f 81       	ldd	r25, Y+7	; 0x07
    37e0:	9b 83       	std	Y+3, r25	; 0x03
    37e2:	8a 83       	std	Y+2, r24	; 0x02
    37e4:	8a 81       	ldd	r24, Y+2	; 0x02
    37e6:	9b 81       	ldd	r25, Y+3	; 0x03
    37e8:	01 97       	sbiw	r24, 0x01	; 1
    37ea:	f1 f7       	brne	.-4      	; 0x37e8 <LCD_void_Write+0x220>
    37ec:	9b 83       	std	Y+3, r25	; 0x03
    37ee:	8a 83       	std	Y+2, r24	; 0x02
    37f0:	0f c0       	rjmp	.+30     	; 0x3810 <LCD_void_Write+0x248>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    37f2:	69 89       	ldd	r22, Y+17	; 0x11
    37f4:	7a 89       	ldd	r23, Y+18	; 0x12
    37f6:	8b 89       	ldd	r24, Y+19	; 0x13
    37f8:	9c 89       	ldd	r25, Y+20	; 0x14
    37fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	88 8b       	std	Y+16, r24	; 0x10
    3804:	88 89       	ldd	r24, Y+16	; 0x10
    3806:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3808:	89 81       	ldd	r24, Y+1	; 0x01
    380a:	8a 95       	dec	r24
    380c:	f1 f7       	brne	.-4      	; 0x380a <LCD_void_Write+0x242>
    380e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_LOW);
    3810:	80 e0       	ldi	r24, 0x00	; 0
    3812:	62 e0       	ldi	r22, 0x02	; 2
    3814:	40 e0       	ldi	r20, 0x00	; 0
    3816:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
		DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_LOW);

#endif


}
    381a:	69 96       	adiw	r28, 0x19	; 25
    381c:	0f b6       	in	r0, 0x3f	; 63
    381e:	f8 94       	cli
    3820:	de bf       	out	0x3e, r29	; 62
    3822:	0f be       	out	0x3f, r0	; 63
    3824:	cd bf       	out	0x3d, r28	; 61
    3826:	cf 91       	pop	r28
    3828:	df 91       	pop	r29
    382a:	08 95       	ret

0000382c <LCD_void_Write_Data>:


void LCD_void_Write_Data(u8 Copy_u8_char)
{
    382c:	df 93       	push	r29
    382e:	cf 93       	push	r28
    3830:	0f 92       	push	r0
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    3836:	89 83       	std	Y+1, r24	; 0x01
	/*steps*/
		/*RS=1*/
//	DIO_U8_Set_Pin_Dir(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_OUTPUT);
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_HIGH);
    3838:	80 e0       	ldi	r24, 0x00	; 0
    383a:	60 e0       	ldi	r22, 0x00	; 0
    383c:	41 e0       	ldi	r20, 0x01	; 1
    383e:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8_Set_Pin_value>
		/*RW=0*/
		/*write a data*/
		/*E=1*/
		/*E=0*/
	LCD_void_Write(Copy_u8_char);
    3842:	89 81       	ldd	r24, Y+1	; 0x01
    3844:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <LCD_void_Write>
}
    3848:	0f 90       	pop	r0
    384a:	cf 91       	pop	r28
    384c:	df 91       	pop	r29
    384e:	08 95       	ret

00003850 <LCD_void_Write_String>:




void LCD_void_Write_String(u8 *str)
{
    3850:	df 93       	push	r29
    3852:	cf 93       	push	r28
    3854:	00 d0       	rcall	.+0      	; 0x3856 <LCD_void_Write_String+0x6>
    3856:	cd b7       	in	r28, 0x3d	; 61
    3858:	de b7       	in	r29, 0x3e	; 62
    385a:	9a 83       	std	Y+2, r25	; 0x02
    385c:	89 83       	std	Y+1, r24	; 0x01
    385e:	0a c0       	rjmp	.+20     	; 0x3874 <LCD_void_Write_String+0x24>
	while( *str!='\0')
	{
		LCD_void_Write_Data(*str);
    3860:	e9 81       	ldd	r30, Y+1	; 0x01
    3862:	fa 81       	ldd	r31, Y+2	; 0x02
    3864:	80 81       	ld	r24, Z
    3866:	0e 94 16 1c 	call	0x382c	; 0x382c <LCD_void_Write_Data>
		str++;
    386a:	89 81       	ldd	r24, Y+1	; 0x01
    386c:	9a 81       	ldd	r25, Y+2	; 0x02
    386e:	01 96       	adiw	r24, 0x01	; 1
    3870:	9a 83       	std	Y+2, r25	; 0x02
    3872:	89 83       	std	Y+1, r24	; 0x01



void LCD_void_Write_String(u8 *str)
{
	while( *str!='\0')
    3874:	e9 81       	ldd	r30, Y+1	; 0x01
    3876:	fa 81       	ldd	r31, Y+2	; 0x02
    3878:	80 81       	ld	r24, Z
    387a:	88 23       	and	r24, r24
    387c:	89 f7       	brne	.-30     	; 0x3860 <LCD_void_Write_String+0x10>
	{
		LCD_void_Write_Data(*str);
		str++;
	}
}
    387e:	0f 90       	pop	r0
    3880:	0f 90       	pop	r0
    3882:	cf 91       	pop	r28
    3884:	df 91       	pop	r29
    3886:	08 95       	ret

00003888 <LCD_void_Write_Numbers>:


void LCD_void_Write_Numbers(u32 Copy_U8_Number)
{
    3888:	df 93       	push	r29
    388a:	cf 93       	push	r28
    388c:	cd b7       	in	r28, 0x3d	; 61
    388e:	de b7       	in	r29, 0x3e	; 62
    3890:	6a 97       	sbiw	r28, 0x1a	; 26
    3892:	0f b6       	in	r0, 0x3f	; 63
    3894:	f8 94       	cli
    3896:	de bf       	out	0x3e, r29	; 62
    3898:	0f be       	out	0x3f, r0	; 63
    389a:	cd bf       	out	0x3d, r28	; 61
    389c:	6f 8b       	std	Y+23, r22	; 0x17
    389e:	78 8f       	std	Y+24, r23	; 0x18
    38a0:	89 8f       	std	Y+25, r24	; 0x19
    38a2:	9a 8f       	std	Y+26, r25	; 0x1a
	u8 rem ;
	u8 index=0 ;
    38a4:	19 82       	std	Y+1, r1	; 0x01
	u8 arr[BITSET_NUMBER];
	if(Copy_U8_Number == 0){
    38a6:	8f 89       	ldd	r24, Y+23	; 0x17
    38a8:	98 8d       	ldd	r25, Y+24	; 0x18
    38aa:	a9 8d       	ldd	r26, Y+25	; 0x19
    38ac:	ba 8d       	ldd	r27, Y+26	; 0x1a
    38ae:	00 97       	sbiw	r24, 0x00	; 0
    38b0:	a1 05       	cpc	r26, r1
    38b2:	b1 05       	cpc	r27, r1
    38b4:	f1 f5       	brne	.+124    	; 0x3932 <LCD_void_Write_Numbers+0xaa>
		arr[index]='0';
    38b6:	89 81       	ldd	r24, Y+1	; 0x01
    38b8:	28 2f       	mov	r18, r24
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	ce 01       	movw	r24, r28
    38be:	03 96       	adiw	r24, 0x03	; 3
    38c0:	fc 01       	movw	r30, r24
    38c2:	e2 0f       	add	r30, r18
    38c4:	f3 1f       	adc	r31, r19
    38c6:	80 e3       	ldi	r24, 0x30	; 48
    38c8:	80 83       	st	Z, r24
		index++;
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
    38cc:	8f 5f       	subi	r24, 0xFF	; 255
    38ce:	89 83       	std	Y+1, r24	; 0x01
    38d0:	30 c0       	rjmp	.+96     	; 0x3932 <LCD_void_Write_Numbers+0xaa>
	}
	while(Copy_U8_Number!=0)
	{
		rem=Copy_U8_Number%10;
    38d2:	8f 89       	ldd	r24, Y+23	; 0x17
    38d4:	98 8d       	ldd	r25, Y+24	; 0x18
    38d6:	a9 8d       	ldd	r26, Y+25	; 0x19
    38d8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    38da:	2a e0       	ldi	r18, 0x0A	; 10
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	40 e0       	ldi	r20, 0x00	; 0
    38e0:	50 e0       	ldi	r21, 0x00	; 0
    38e2:	bc 01       	movw	r22, r24
    38e4:	cd 01       	movw	r24, r26
    38e6:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <__udivmodsi4>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	8a 83       	std	Y+2, r24	; 0x02
		arr[index]=rem+'0';
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
    38f2:	28 2f       	mov	r18, r24
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	8a 81       	ldd	r24, Y+2	; 0x02
    38f8:	48 2f       	mov	r20, r24
    38fa:	40 5d       	subi	r20, 0xD0	; 208
    38fc:	ce 01       	movw	r24, r28
    38fe:	03 96       	adiw	r24, 0x03	; 3
    3900:	fc 01       	movw	r30, r24
    3902:	e2 0f       	add	r30, r18
    3904:	f3 1f       	adc	r31, r19
    3906:	40 83       	st	Z, r20
		index++;
    3908:	89 81       	ldd	r24, Y+1	; 0x01
    390a:	8f 5f       	subi	r24, 0xFF	; 255
    390c:	89 83       	std	Y+1, r24	; 0x01
		Copy_U8_Number/=10;
    390e:	8f 89       	ldd	r24, Y+23	; 0x17
    3910:	98 8d       	ldd	r25, Y+24	; 0x18
    3912:	a9 8d       	ldd	r26, Y+25	; 0x19
    3914:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3916:	2a e0       	ldi	r18, 0x0A	; 10
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	40 e0       	ldi	r20, 0x00	; 0
    391c:	50 e0       	ldi	r21, 0x00	; 0
    391e:	bc 01       	movw	r22, r24
    3920:	cd 01       	movw	r24, r26
    3922:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <__udivmodsi4>
    3926:	da 01       	movw	r26, r20
    3928:	c9 01       	movw	r24, r18
    392a:	8f 8b       	std	Y+23, r24	; 0x17
    392c:	98 8f       	std	Y+24, r25	; 0x18
    392e:	a9 8f       	std	Y+25, r26	; 0x19
    3930:	ba 8f       	std	Y+26, r27	; 0x1a
	u8 arr[BITSET_NUMBER];
	if(Copy_U8_Number == 0){
		arr[index]='0';
		index++;
	}
	while(Copy_U8_Number!=0)
    3932:	8f 89       	ldd	r24, Y+23	; 0x17
    3934:	98 8d       	ldd	r25, Y+24	; 0x18
    3936:	a9 8d       	ldd	r26, Y+25	; 0x19
    3938:	ba 8d       	ldd	r27, Y+26	; 0x1a
    393a:	00 97       	sbiw	r24, 0x00	; 0
    393c:	a1 05       	cpc	r26, r1
    393e:	b1 05       	cpc	r27, r1
    3940:	41 f6       	brne	.-112    	; 0x38d2 <LCD_void_Write_Numbers+0x4a>
		rem=Copy_U8_Number%10;
		arr[index]=rem+'0';
		index++;
		Copy_U8_Number/=10;
	}
	arr[index]='\0';
    3942:	89 81       	ldd	r24, Y+1	; 0x01
    3944:	28 2f       	mov	r18, r24
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	ce 01       	movw	r24, r28
    394a:	03 96       	adiw	r24, 0x03	; 3
    394c:	fc 01       	movw	r30, r24
    394e:	e2 0f       	add	r30, r18
    3950:	f3 1f       	adc	r31, r19
    3952:	10 82       	st	Z, r1
	reverse(arr,index);
    3954:	ce 01       	movw	r24, r28
    3956:	03 96       	adiw	r24, 0x03	; 3
    3958:	69 81       	ldd	r22, Y+1	; 0x01
    395a:	0e 94 bc 1c 	call	0x3978	; 0x3978 <reverse>
	LCD_void_Write_String(arr);
    395e:	ce 01       	movw	r24, r28
    3960:	03 96       	adiw	r24, 0x03	; 3
    3962:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>

}
    3966:	6a 96       	adiw	r28, 0x1a	; 26
    3968:	0f b6       	in	r0, 0x3f	; 63
    396a:	f8 94       	cli
    396c:	de bf       	out	0x3e, r29	; 62
    396e:	0f be       	out	0x3f, r0	; 63
    3970:	cd bf       	out	0x3d, r28	; 61
    3972:	cf 91       	pop	r28
    3974:	df 91       	pop	r29
    3976:	08 95       	ret

00003978 <reverse>:

void reverse(u8 *ptr , u8 element)
{
    3978:	df 93       	push	r29
    397a:	cf 93       	push	r28
    397c:	cd b7       	in	r28, 0x3d	; 61
    397e:	de b7       	in	r29, 0x3e	; 62
    3980:	29 97       	sbiw	r28, 0x09	; 9
    3982:	0f b6       	in	r0, 0x3f	; 63
    3984:	f8 94       	cli
    3986:	de bf       	out	0x3e, r29	; 62
    3988:	0f be       	out	0x3f, r0	; 63
    398a:	cd bf       	out	0x3d, r28	; 61
    398c:	98 87       	std	Y+8, r25	; 0x08
    398e:	8f 83       	std	Y+7, r24	; 0x07
    3990:	69 87       	std	Y+9, r22	; 0x09
	u8 start = 0;
    3992:	1e 82       	std	Y+6, r1	; 0x06
	u8 end = element-1;
    3994:	89 85       	ldd	r24, Y+9	; 0x09
    3996:	81 50       	subi	r24, 0x01	; 1
    3998:	8d 83       	std	Y+5, r24	; 0x05
    399a:	33 c0       	rjmp	.+102    	; 0x3a02 <reverse+0x8a>
	while(start<end)
	{
		u32 temp = ptr[start];
    399c:	8e 81       	ldd	r24, Y+6	; 0x06
    399e:	28 2f       	mov	r18, r24
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	8f 81       	ldd	r24, Y+7	; 0x07
    39a4:	98 85       	ldd	r25, Y+8	; 0x08
    39a6:	fc 01       	movw	r30, r24
    39a8:	e2 0f       	add	r30, r18
    39aa:	f3 1f       	adc	r31, r19
    39ac:	80 81       	ld	r24, Z
    39ae:	88 2f       	mov	r24, r24
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	a0 e0       	ldi	r26, 0x00	; 0
    39b4:	b0 e0       	ldi	r27, 0x00	; 0
    39b6:	89 83       	std	Y+1, r24	; 0x01
    39b8:	9a 83       	std	Y+2, r25	; 0x02
    39ba:	ab 83       	std	Y+3, r26	; 0x03
    39bc:	bc 83       	std	Y+4, r27	; 0x04
		ptr[start]=ptr[end];
    39be:	8e 81       	ldd	r24, Y+6	; 0x06
    39c0:	28 2f       	mov	r18, r24
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	8f 81       	ldd	r24, Y+7	; 0x07
    39c6:	98 85       	ldd	r25, Y+8	; 0x08
    39c8:	dc 01       	movw	r26, r24
    39ca:	a2 0f       	add	r26, r18
    39cc:	b3 1f       	adc	r27, r19
    39ce:	8d 81       	ldd	r24, Y+5	; 0x05
    39d0:	28 2f       	mov	r18, r24
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	8f 81       	ldd	r24, Y+7	; 0x07
    39d6:	98 85       	ldd	r25, Y+8	; 0x08
    39d8:	fc 01       	movw	r30, r24
    39da:	e2 0f       	add	r30, r18
    39dc:	f3 1f       	adc	r31, r19
    39de:	80 81       	ld	r24, Z
    39e0:	8c 93       	st	X, r24
		ptr[end]=temp;
    39e2:	8d 81       	ldd	r24, Y+5	; 0x05
    39e4:	28 2f       	mov	r18, r24
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	8f 81       	ldd	r24, Y+7	; 0x07
    39ea:	98 85       	ldd	r25, Y+8	; 0x08
    39ec:	fc 01       	movw	r30, r24
    39ee:	e2 0f       	add	r30, r18
    39f0:	f3 1f       	adc	r31, r19
    39f2:	89 81       	ldd	r24, Y+1	; 0x01
    39f4:	80 83       	st	Z, r24
		start++;
    39f6:	8e 81       	ldd	r24, Y+6	; 0x06
    39f8:	8f 5f       	subi	r24, 0xFF	; 255
    39fa:	8e 83       	std	Y+6, r24	; 0x06
		end--;
    39fc:	8d 81       	ldd	r24, Y+5	; 0x05
    39fe:	81 50       	subi	r24, 0x01	; 1
    3a00:	8d 83       	std	Y+5, r24	; 0x05

void reverse(u8 *ptr , u8 element)
{
	u8 start = 0;
	u8 end = element-1;
	while(start<end)
    3a02:	9e 81       	ldd	r25, Y+6	; 0x06
    3a04:	8d 81       	ldd	r24, Y+5	; 0x05
    3a06:	98 17       	cp	r25, r24
    3a08:	48 f2       	brcs	.-110    	; 0x399c <reverse+0x24>
		ptr[end]=temp;
		start++;
		end--;

	}
}
    3a0a:	29 96       	adiw	r28, 0x09	; 9
    3a0c:	0f b6       	in	r0, 0x3f	; 63
    3a0e:	f8 94       	cli
    3a10:	de bf       	out	0x3e, r29	; 62
    3a12:	0f be       	out	0x3f, r0	; 63
    3a14:	cd bf       	out	0x3d, r28	; 61
    3a16:	cf 91       	pop	r28
    3a18:	df 91       	pop	r29
    3a1a:	08 95       	ret

00003a1c <LCD_void_DDRAM_Address>:


void LCD_void_DDRAM_Address(u8 Copy_u8_Line , u8 Copy_u8_Location)
{
    3a1c:	df 93       	push	r29
    3a1e:	cf 93       	push	r28
    3a20:	00 d0       	rcall	.+0      	; 0x3a22 <LCD_void_DDRAM_Address+0x6>
    3a22:	0f 92       	push	r0
    3a24:	cd b7       	in	r28, 0x3d	; 61
    3a26:	de b7       	in	r29, 0x3e	; 62
    3a28:	8a 83       	std	Y+2, r24	; 0x02
    3a2a:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_Address = (Copy_u8_Location+(64*Copy_u8_Line));
    3a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a2e:	88 2f       	mov	r24, r24
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	00 24       	eor	r0, r0
    3a34:	96 95       	lsr	r25
    3a36:	87 95       	ror	r24
    3a38:	07 94       	ror	r0
    3a3a:	96 95       	lsr	r25
    3a3c:	87 95       	ror	r24
    3a3e:	07 94       	ror	r0
    3a40:	98 2f       	mov	r25, r24
    3a42:	80 2d       	mov	r24, r0
    3a44:	98 2f       	mov	r25, r24
    3a46:	8b 81       	ldd	r24, Y+3	; 0x03
    3a48:	89 0f       	add	r24, r25
    3a4a:	89 83       	std	Y+1, r24	; 0x01
	DDRAM_Address|=0b10000000;
    3a4c:	89 81       	ldd	r24, Y+1	; 0x01
    3a4e:	80 68       	ori	r24, 0x80	; 128
    3a50:	89 83       	std	Y+1, r24	; 0x01
	LCD_void_Write_CMD(DDRAM_Address);
    3a52:	89 81       	ldd	r24, Y+1	; 0x01
    3a54:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <LCD_void_Write_CMD>
}
    3a58:	0f 90       	pop	r0
    3a5a:	0f 90       	pop	r0
    3a5c:	0f 90       	pop	r0
    3a5e:	cf 91       	pop	r28
    3a60:	df 91       	pop	r29
    3a62:	08 95       	ret

00003a64 <LCD_void_Set_CGRAM_Address>:


void LCD_void_Set_CGRAM_Address(u8 Address , u8 *ptr)
{
    3a64:	df 93       	push	r29
    3a66:	cf 93       	push	r28
    3a68:	00 d0       	rcall	.+0      	; 0x3a6a <LCD_void_Set_CGRAM_Address+0x6>
    3a6a:	00 d0       	rcall	.+0      	; 0x3a6c <LCD_void_Set_CGRAM_Address+0x8>
    3a6c:	cd b7       	in	r28, 0x3d	; 61
    3a6e:	de b7       	in	r29, 0x3e	; 62
    3a70:	8a 83       	std	Y+2, r24	; 0x02
    3a72:	7c 83       	std	Y+4, r23	; 0x04
    3a74:	6b 83       	std	Y+3, r22	; 0x03
	LCD_void_Write_CMD(Address);
    3a76:	8a 81       	ldd	r24, Y+2	; 0x02
    3a78:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <LCD_void_Write_CMD>
	for(u8 i =0 ; i<8 ; i++)
    3a7c:	19 82       	std	Y+1, r1	; 0x01
    3a7e:	0d c0       	rjmp	.+26     	; 0x3a9a <LCD_void_Set_CGRAM_Address+0x36>
	{
		LCD_void_Write_Data(*ptr);
    3a80:	eb 81       	ldd	r30, Y+3	; 0x03
    3a82:	fc 81       	ldd	r31, Y+4	; 0x04
    3a84:	80 81       	ld	r24, Z
    3a86:	0e 94 16 1c 	call	0x382c	; 0x382c <LCD_void_Write_Data>
		ptr++;
    3a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a8e:	01 96       	adiw	r24, 0x01	; 1
    3a90:	9c 83       	std	Y+4, r25	; 0x04
    3a92:	8b 83       	std	Y+3, r24	; 0x03


void LCD_void_Set_CGRAM_Address(u8 Address , u8 *ptr)
{
	LCD_void_Write_CMD(Address);
	for(u8 i =0 ; i<8 ; i++)
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	8f 5f       	subi	r24, 0xFF	; 255
    3a98:	89 83       	std	Y+1, r24	; 0x01
    3a9a:	89 81       	ldd	r24, Y+1	; 0x01
    3a9c:	88 30       	cpi	r24, 0x08	; 8
    3a9e:	80 f3       	brcs	.-32     	; 0x3a80 <LCD_void_Set_CGRAM_Address+0x1c>
	{
		LCD_void_Write_Data(*ptr);
		ptr++;
	}

}
    3aa0:	0f 90       	pop	r0
    3aa2:	0f 90       	pop	r0
    3aa4:	0f 90       	pop	r0
    3aa6:	0f 90       	pop	r0
    3aa8:	cf 91       	pop	r28
    3aaa:	df 91       	pop	r29
    3aac:	08 95       	ret

00003aae <LCD_void_Clear_Screen>:

void LCD_void_Clear_Screen(void)
{
    3aae:	df 93       	push	r29
    3ab0:	cf 93       	push	r28
    3ab2:	cd b7       	in	r28, 0x3d	; 61
    3ab4:	de b7       	in	r29, 0x3e	; 62
    3ab6:	2e 97       	sbiw	r28, 0x0e	; 14
    3ab8:	0f b6       	in	r0, 0x3f	; 63
    3aba:	f8 94       	cli
    3abc:	de bf       	out	0x3e, r29	; 62
    3abe:	0f be       	out	0x3f, r0	; 63
    3ac0:	cd bf       	out	0x3d, r28	; 61
	LCD_void_Write_CMD(LCD_Clear_Display_Screen);
    3ac2:	81 e0       	ldi	r24, 0x01	; 1
    3ac4:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <LCD_void_Write_CMD>
    3ac8:	80 e0       	ldi	r24, 0x00	; 0
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	a0 e0       	ldi	r26, 0x00	; 0
    3ace:	b0 e4       	ldi	r27, 0x40	; 64
    3ad0:	8b 87       	std	Y+11, r24	; 0x0b
    3ad2:	9c 87       	std	Y+12, r25	; 0x0c
    3ad4:	ad 87       	std	Y+13, r26	; 0x0d
    3ad6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ada:	7c 85       	ldd	r23, Y+12	; 0x0c
    3adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ade:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	4a ef       	ldi	r20, 0xFA	; 250
    3ae6:	54 e4       	ldi	r21, 0x44	; 68
    3ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aec:	dc 01       	movw	r26, r24
    3aee:	cb 01       	movw	r24, r22
    3af0:	8f 83       	std	Y+7, r24	; 0x07
    3af2:	98 87       	std	Y+8, r25	; 0x08
    3af4:	a9 87       	std	Y+9, r26	; 0x09
    3af6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3af8:	6f 81       	ldd	r22, Y+7	; 0x07
    3afa:	78 85       	ldd	r23, Y+8	; 0x08
    3afc:	89 85       	ldd	r24, Y+9	; 0x09
    3afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b00:	20 e0       	ldi	r18, 0x00	; 0
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	40 e8       	ldi	r20, 0x80	; 128
    3b06:	5f e3       	ldi	r21, 0x3F	; 63
    3b08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b0c:	88 23       	and	r24, r24
    3b0e:	2c f4       	brge	.+10     	; 0x3b1a <LCD_void_Clear_Screen+0x6c>
		__ticks = 1;
    3b10:	81 e0       	ldi	r24, 0x01	; 1
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	9e 83       	std	Y+6, r25	; 0x06
    3b16:	8d 83       	std	Y+5, r24	; 0x05
    3b18:	3f c0       	rjmp	.+126    	; 0x3b98 <LCD_void_Clear_Screen+0xea>
	else if (__tmp > 65535)
    3b1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b1c:	78 85       	ldd	r23, Y+8	; 0x08
    3b1e:	89 85       	ldd	r24, Y+9	; 0x09
    3b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b22:	20 e0       	ldi	r18, 0x00	; 0
    3b24:	3f ef       	ldi	r19, 0xFF	; 255
    3b26:	4f e7       	ldi	r20, 0x7F	; 127
    3b28:	57 e4       	ldi	r21, 0x47	; 71
    3b2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b2e:	18 16       	cp	r1, r24
    3b30:	4c f5       	brge	.+82     	; 0x3b84 <LCD_void_Clear_Screen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b32:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b34:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	40 e2       	ldi	r20, 0x20	; 32
    3b40:	51 e4       	ldi	r21, 0x41	; 65
    3b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b46:	dc 01       	movw	r26, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	bc 01       	movw	r22, r24
    3b4c:	cd 01       	movw	r24, r26
    3b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b52:	dc 01       	movw	r26, r24
    3b54:	cb 01       	movw	r24, r22
    3b56:	9e 83       	std	Y+6, r25	; 0x06
    3b58:	8d 83       	std	Y+5, r24	; 0x05
    3b5a:	0f c0       	rjmp	.+30     	; 0x3b7a <LCD_void_Clear_Screen+0xcc>
    3b5c:	88 ec       	ldi	r24, 0xC8	; 200
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	9c 83       	std	Y+4, r25	; 0x04
    3b62:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b64:	8b 81       	ldd	r24, Y+3	; 0x03
    3b66:	9c 81       	ldd	r25, Y+4	; 0x04
    3b68:	01 97       	sbiw	r24, 0x01	; 1
    3b6a:	f1 f7       	brne	.-4      	; 0x3b68 <LCD_void_Clear_Screen+0xba>
    3b6c:	9c 83       	std	Y+4, r25	; 0x04
    3b6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b70:	8d 81       	ldd	r24, Y+5	; 0x05
    3b72:	9e 81       	ldd	r25, Y+6	; 0x06
    3b74:	01 97       	sbiw	r24, 0x01	; 1
    3b76:	9e 83       	std	Y+6, r25	; 0x06
    3b78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b7e:	00 97       	sbiw	r24, 0x00	; 0
    3b80:	69 f7       	brne	.-38     	; 0x3b5c <LCD_void_Clear_Screen+0xae>
    3b82:	14 c0       	rjmp	.+40     	; 0x3bac <LCD_void_Clear_Screen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b84:	6f 81       	ldd	r22, Y+7	; 0x07
    3b86:	78 85       	ldd	r23, Y+8	; 0x08
    3b88:	89 85       	ldd	r24, Y+9	; 0x09
    3b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	9e 83       	std	Y+6, r25	; 0x06
    3b96:	8d 83       	std	Y+5, r24	; 0x05
    3b98:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b9c:	9a 83       	std	Y+2, r25	; 0x02
    3b9e:	89 83       	std	Y+1, r24	; 0x01
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba4:	01 97       	sbiw	r24, 0x01	; 1
    3ba6:	f1 f7       	brne	.-4      	; 0x3ba4 <LCD_void_Clear_Screen+0xf6>
    3ba8:	9a 83       	std	Y+2, r25	; 0x02
    3baa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3bac:	2e 96       	adiw	r28, 0x0e	; 14
    3bae:	0f b6       	in	r0, 0x3f	; 63
    3bb0:	f8 94       	cli
    3bb2:	de bf       	out	0x3e, r29	; 62
    3bb4:	0f be       	out	0x3f, r0	; 63
    3bb6:	cd bf       	out	0x3d, r28	; 61
    3bb8:	cf 91       	pop	r28
    3bba:	df 91       	pop	r29
    3bbc:	08 95       	ret

00003bbe <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    3bbe:	df 93       	push	r29
    3bc0:	cf 93       	push	r28
    3bc2:	cd b7       	in	r28, 0x3d	; 61
    3bc4:	de b7       	in	r29, 0x3e	; 62
    3bc6:	62 97       	sbiw	r28, 0x12	; 18
    3bc8:	0f b6       	in	r0, 0x3f	; 63
    3bca:	f8 94       	cli
    3bcc:	de bf       	out	0x3e, r29	; 62
    3bce:	0f be       	out	0x3f, r0	; 63
    3bd0:	cd bf       	out	0x3d, r28	; 61
    3bd2:	9a 8b       	std	Y+18, r25	; 0x12
    3bd4:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   /* store the integer number to arr & 10 is for decimal numbering system*/
   itoa(data,arr,10);
    3bd6:	89 89       	ldd	r24, Y+17	; 0x11
    3bd8:	9a 89       	ldd	r25, Y+18	; 0x12
    3bda:	9e 01       	movw	r18, r28
    3bdc:	2f 5f       	subi	r18, 0xFF	; 255
    3bde:	3f 4f       	sbci	r19, 0xFF	; 255
    3be0:	b9 01       	movw	r22, r18
    3be2:	4a e0       	ldi	r20, 0x0A	; 10
    3be4:	50 e0       	ldi	r21, 0x00	; 0
    3be6:	0e 94 39 20 	call	0x4072	; 0x4072 <itoa>

   LCD_void_Write_String(arr);
    3bea:	ce 01       	movw	r24, r28
    3bec:	01 96       	adiw	r24, 0x01	; 1
    3bee:	0e 94 28 1c 	call	0x3850	; 0x3850 <LCD_void_Write_String>
}
    3bf2:	62 96       	adiw	r28, 0x12	; 18
    3bf4:	0f b6       	in	r0, 0x3f	; 63
    3bf6:	f8 94       	cli
    3bf8:	de bf       	out	0x3e, r29	; 62
    3bfa:	0f be       	out	0x3f, r0	; 63
    3bfc:	cd bf       	out	0x3d, r28	; 61
    3bfe:	cf 91       	pop	r28
    3c00:	df 91       	pop	r29
    3c02:	08 95       	ret

00003c04 <SERVO_void_Enable>:
u16 TOP ;
u16 Counts ;
f32 Seconds ;

void SERVO_void_Enable(u8 Copy_U8_Angle , u8 Copy_u8_OC_PIN)
{
    3c04:	df 93       	push	r29
    3c06:	cf 93       	push	r28
    3c08:	00 d0       	rcall	.+0      	; 0x3c0a <SERVO_void_Enable+0x6>
    3c0a:	cd b7       	in	r28, 0x3d	; 61
    3c0c:	de b7       	in	r29, 0x3e	; 62
    3c0e:	89 83       	std	Y+1, r24	; 0x01
    3c10:	6a 83       	std	Y+2, r22	; 0x02
	Seconds = (2*Copy_U8_Angle)/180 ;
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	88 2f       	mov	r24, r24
    3c16:	90 e0       	ldi	r25, 0x00	; 0
    3c18:	88 0f       	add	r24, r24
    3c1a:	99 1f       	adc	r25, r25
    3c1c:	24 eb       	ldi	r18, 0xB4	; 180
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	b9 01       	movw	r22, r18
    3c22:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__divmodhi4>
    3c26:	cb 01       	movw	r24, r22
    3c28:	aa 27       	eor	r26, r26
    3c2a:	97 fd       	sbrc	r25, 7
    3c2c:	a0 95       	com	r26
    3c2e:	ba 2f       	mov	r27, r26
    3c30:	bc 01       	movw	r22, r24
    3c32:	cd 01       	movw	r24, r26
    3c34:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3c38:	dc 01       	movw	r26, r24
    3c3a:	cb 01       	movw	r24, r22
    3c3c:	80 93 46 03 	sts	0x0346, r24
    3c40:	90 93 47 03 	sts	0x0347, r25
    3c44:	a0 93 48 03 	sts	0x0348, r26
    3c48:	b0 93 49 03 	sts	0x0349, r27
	Counts = (Seconds * 65536)/Time_OVF ;
    3c4c:	80 91 46 03 	lds	r24, 0x0346
    3c50:	90 91 47 03 	lds	r25, 0x0347
    3c54:	a0 91 48 03 	lds	r26, 0x0348
    3c58:	b0 91 49 03 	lds	r27, 0x0349
    3c5c:	bc 01       	movw	r22, r24
    3c5e:	cd 01       	movw	r24, r26
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	40 e8       	ldi	r20, 0x80	; 128
    3c66:	57 e4       	ldi	r21, 0x47	; 71
    3c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	20 91 3e 03 	lds	r18, 0x033E
    3c74:	30 91 3f 03 	lds	r19, 0x033F
    3c78:	40 91 40 03 	lds	r20, 0x0340
    3c7c:	50 91 41 03 	lds	r21, 0x0341
    3c80:	bc 01       	movw	r22, r24
    3c82:	cd 01       	movw	r24, r26
    3c84:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3c88:	dc 01       	movw	r26, r24
    3c8a:	cb 01       	movw	r24, r22
    3c8c:	bc 01       	movw	r22, r24
    3c8e:	cd 01       	movw	r24, r26
    3c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c94:	dc 01       	movw	r26, r24
    3c96:	cb 01       	movw	r24, r22
    3c98:	90 93 43 03 	sts	0x0343, r25
    3c9c:	80 93 42 03 	sts	0x0342, r24
	if( Copy_u8_OC_PIN == SERVO_OC1A )
    3ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca2:	81 30       	cpi	r24, 0x01	; 1
    3ca4:	71 f4       	brne	.+28     	; 0x3cc2 <SERVO_void_Enable+0xbe>
	{
		DIO_U8_Set_Pin_Dir(PORTD_ID,DIO_U8_PIN5,PIN_OUTPUT);
    3ca6:	83 e0       	ldi	r24, 0x03	; 3
    3ca8:	65 e0       	ldi	r22, 0x05	; 5
    3caa:	41 e0       	ldi	r20, 0x01	; 1
    3cac:	0e 94 55 08 	call	0x10aa	; 0x10aa <DIO_U8_Set_Pin_Dir>
		TIMER_U8_OCR1AL = Counts;
    3cb0:	ea e4       	ldi	r30, 0x4A	; 74
    3cb2:	f0 e0       	ldi	r31, 0x00	; 0
    3cb4:	80 91 42 03 	lds	r24, 0x0342
    3cb8:	90 91 43 03 	lds	r25, 0x0343
    3cbc:	91 83       	std	Z+1, r25	; 0x01
    3cbe:	80 83       	st	Z, r24
    3cc0:	10 c0       	rjmp	.+32     	; 0x3ce2 <SERVO_void_Enable+0xde>
	}

	else if (Copy_u8_OC_PIN == SERVO_OC1B)
    3cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc4:	82 30       	cpi	r24, 0x02	; 2
    3cc6:	69 f4       	brne	.+26     	; 0x3ce2 <SERVO_void_Enable+0xde>
	{
		DIO_U8_Set_Pin_Dir(PORTD_ID,DIO_U8_PIN4,PIN_OUTPUT);
    3cc8:	83 e0       	ldi	r24, 0x03	; 3
    3cca:	64 e0       	ldi	r22, 0x04	; 4
    3ccc:	41 e0       	ldi	r20, 0x01	; 1
    3cce:	0e 94 55 08 	call	0x10aa	; 0x10aa <DIO_U8_Set_Pin_Dir>
		TIMER_U8_OCR1BL = Counts;
    3cd2:	e8 e4       	ldi	r30, 0x48	; 72
    3cd4:	f0 e0       	ldi	r31, 0x00	; 0
    3cd6:	80 91 42 03 	lds	r24, 0x0342
    3cda:	90 91 43 03 	lds	r25, 0x0343
    3cde:	91 83       	std	Z+1, r25	; 0x01
    3ce0:	80 83       	st	Z, r24
	}


}
    3ce2:	0f 90       	pop	r0
    3ce4:	0f 90       	pop	r0
    3ce6:	cf 91       	pop	r28
    3ce8:	df 91       	pop	r29
    3cea:	08 95       	ret

00003cec <SERVO_void_Init>:
void SERVO_void_Init(void)
{
    3cec:	df 93       	push	r29
    3cee:	cf 93       	push	r28
    3cf0:	cd b7       	in	r28, 0x3d	; 61
    3cf2:	de b7       	in	r29, 0x3e	; 62
	Time_OVF = (65536*TIMER1_PRESCALER_VAL)*1000/Freq_System ;
    3cf4:	8c e9       	ldi	r24, 0x9C	; 156
    3cf6:	93 e5       	ldi	r25, 0x53	; 83
    3cf8:	a9 e4       	ldi	r26, 0x49	; 73
    3cfa:	b1 ec       	ldi	r27, 0xC1	; 193
    3cfc:	80 93 3e 03 	sts	0x033E, r24
    3d00:	90 93 3f 03 	sts	0x033F, r25
    3d04:	a0 93 40 03 	sts	0x0340, r26
    3d08:	b0 93 41 03 	sts	0x0341, r27
	TOP = (20*65536)/Time_OVF ;
    3d0c:	20 91 3e 03 	lds	r18, 0x033E
    3d10:	30 91 3f 03 	lds	r19, 0x033F
    3d14:	40 91 40 03 	lds	r20, 0x0340
    3d18:	50 91 41 03 	lds	r21, 0x0341
    3d1c:	60 e0       	ldi	r22, 0x00	; 0
    3d1e:	70 e0       	ldi	r23, 0x00	; 0
    3d20:	80 ea       	ldi	r24, 0xA0	; 160
    3d22:	99 e4       	ldi	r25, 0x49	; 73
    3d24:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d28:	dc 01       	movw	r26, r24
    3d2a:	cb 01       	movw	r24, r22
    3d2c:	bc 01       	movw	r22, r24
    3d2e:	cd 01       	movw	r24, r26
    3d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d34:	dc 01       	movw	r26, r24
    3d36:	cb 01       	movw	r24, r22
    3d38:	90 93 45 03 	sts	0x0345, r25
    3d3c:	80 93 44 03 	sts	0x0344, r24
	TIMER1_void_Init();
    3d40:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <TIMER1_void_Init>
	TIMER_U8_ICR1L = TOP ;
    3d44:	e6 e4       	ldi	r30, 0x46	; 70
    3d46:	f0 e0       	ldi	r31, 0x00	; 0
    3d48:	80 91 44 03 	lds	r24, 0x0344
    3d4c:	90 91 45 03 	lds	r25, 0x0345
    3d50:	91 83       	std	Z+1, r25	; 0x01
    3d52:	80 83       	st	Z, r24
}
    3d54:	cf 91       	pop	r28
    3d56:	df 91       	pop	r29
    3d58:	08 95       	ret

00003d5a <TIMER1_void_Init>:




void TIMER1_void_Init(void)
{
    3d5a:	df 93       	push	r29
    3d5c:	cf 93       	push	r28
    3d5e:	cd b7       	in	r28, 0x3d	; 61
    3d60:	de b7       	in	r29, 0x3e	; 62
#if TIMER1_MODE == FAST_MODE_WITH_ICR1
	/*waveform generatoin mode*/
	Assign_Bit(TIMER_U8_TCCR1A,DIO_U8_PIN0,Get_Bit(FAST_MODE_WITH_ICR1,0));
    3d62:	af e4       	ldi	r26, 0x4F	; 79
    3d64:	b0 e0       	ldi	r27, 0x00	; 0
    3d66:	ef e4       	ldi	r30, 0x4F	; 79
    3d68:	f0 e0       	ldi	r31, 0x00	; 0
    3d6a:	80 81       	ld	r24, Z
    3d6c:	8e 7f       	andi	r24, 0xFE	; 254
    3d6e:	8c 93       	st	X, r24
	Assign_Bit(TIMER_U8_TCCR1A,DIO_U8_PIN1,Get_Bit(FAST_MODE_WITH_ICR1,1));
    3d70:	af e4       	ldi	r26, 0x4F	; 79
    3d72:	b0 e0       	ldi	r27, 0x00	; 0
    3d74:	ef e4       	ldi	r30, 0x4F	; 79
    3d76:	f0 e0       	ldi	r31, 0x00	; 0
    3d78:	80 81       	ld	r24, Z
    3d7a:	82 60       	ori	r24, 0x02	; 2
    3d7c:	8c 93       	st	X, r24
	Assign_Bit(TIMER_U8_TCCR1B,DIO_U8_PIN3,Get_Bit(FAST_MODE_WITH_ICR1,2));
    3d7e:	ae e4       	ldi	r26, 0x4E	; 78
    3d80:	b0 e0       	ldi	r27, 0x00	; 0
    3d82:	ee e4       	ldi	r30, 0x4E	; 78
    3d84:	f0 e0       	ldi	r31, 0x00	; 0
    3d86:	80 81       	ld	r24, Z
    3d88:	88 60       	ori	r24, 0x08	; 8
    3d8a:	8c 93       	st	X, r24
	Assign_Bit(TIMER_U8_TCCR1B,DIO_U8_PIN4,Get_Bit(FAST_MODE_WITH_ICR1,3));
    3d8c:	ae e4       	ldi	r26, 0x4E	; 78
    3d8e:	b0 e0       	ldi	r27, 0x00	; 0
    3d90:	ee e4       	ldi	r30, 0x4E	; 78
    3d92:	f0 e0       	ldi	r31, 0x00	; 0
    3d94:	80 81       	ld	r24, Z
    3d96:	80 61       	ori	r24, 0x10	; 16
    3d98:	8c 93       	st	X, r24
	/*forec compare match*/
	Clear_Bit(TIMER_U8_TCCR1A,2);
    3d9a:	af e4       	ldi	r26, 0x4F	; 79
    3d9c:	b0 e0       	ldi	r27, 0x00	; 0
    3d9e:	ef e4       	ldi	r30, 0x4F	; 79
    3da0:	f0 e0       	ldi	r31, 0x00	; 0
    3da2:	80 81       	ld	r24, Z
    3da4:	8b 7f       	andi	r24, 0xFB	; 251
    3da6:	8c 93       	st	X, r24
	Clear_Bit(TIMER_U8_TCCR1A,3);
    3da8:	af e4       	ldi	r26, 0x4F	; 79
    3daa:	b0 e0       	ldi	r27, 0x00	; 0
    3dac:	ef e4       	ldi	r30, 0x4F	; 79
    3dae:	f0 e0       	ldi	r31, 0x00	; 0
    3db0:	80 81       	ld	r24, Z
    3db2:	87 7f       	andi	r24, 0xF7	; 247
    3db4:	8c 93       	st	X, r24
	/*output of oc1a and oc1b*/
	Assign_Bit(TIMER_U8_TCCR1A,DIO_U8_PIN4,Get_Bit(TIMER1_OUTPUT_OC1B,0));
    3db6:	af e4       	ldi	r26, 0x4F	; 79
    3db8:	b0 e0       	ldi	r27, 0x00	; 0
    3dba:	ef e4       	ldi	r30, 0x4F	; 79
    3dbc:	f0 e0       	ldi	r31, 0x00	; 0
    3dbe:	80 81       	ld	r24, Z
    3dc0:	8f 7e       	andi	r24, 0xEF	; 239
    3dc2:	8c 93       	st	X, r24
	Assign_Bit(TIMER_U8_TCCR1A,DIO_U8_PIN5,Get_Bit(TIMER1_OUTPUT_OC1B,1));
    3dc4:	af e4       	ldi	r26, 0x4F	; 79
    3dc6:	b0 e0       	ldi	r27, 0x00	; 0
    3dc8:	ef e4       	ldi	r30, 0x4F	; 79
    3dca:	f0 e0       	ldi	r31, 0x00	; 0
    3dcc:	80 81       	ld	r24, Z
    3dce:	80 62       	ori	r24, 0x20	; 32
    3dd0:	8c 93       	st	X, r24
	Assign_Bit(TIMER_U8_TCCR1A,DIO_U8_PIN6,Get_Bit(TIMER1_OUTPUT_OC1A,0));
    3dd2:	af e4       	ldi	r26, 0x4F	; 79
    3dd4:	b0 e0       	ldi	r27, 0x00	; 0
    3dd6:	ef e4       	ldi	r30, 0x4F	; 79
    3dd8:	f0 e0       	ldi	r31, 0x00	; 0
    3dda:	80 81       	ld	r24, Z
    3ddc:	8f 7b       	andi	r24, 0xBF	; 191
    3dde:	8c 93       	st	X, r24
	Assign_Bit(TIMER_U8_TCCR1A,DIO_U8_PIN7,Get_Bit(TIMER1_OUTPUT_OC1A,1));
    3de0:	af e4       	ldi	r26, 0x4F	; 79
    3de2:	b0 e0       	ldi	r27, 0x00	; 0
    3de4:	ef e4       	ldi	r30, 0x4F	; 79
    3de6:	f0 e0       	ldi	r31, 0x00	; 0
    3de8:	80 81       	ld	r24, Z
    3dea:	80 68       	ori	r24, 0x80	; 128
    3dec:	8c 93       	st	X, r24
	/*set prescaler*/
	Assign_Bit(TIMER_U8_TCCR1B,DIO_U8_PIN0,Get_Bit(TIMER1_PRESCALER,0));
    3dee:	ae e4       	ldi	r26, 0x4E	; 78
    3df0:	b0 e0       	ldi	r27, 0x00	; 0
    3df2:	ee e4       	ldi	r30, 0x4E	; 78
    3df4:	f0 e0       	ldi	r31, 0x00	; 0
    3df6:	80 81       	ld	r24, Z
    3df8:	81 60       	ori	r24, 0x01	; 1
    3dfa:	8c 93       	st	X, r24
	Assign_Bit(TIMER_U8_TCCR1B,DIO_U8_PIN1,Get_Bit(TIMER1_PRESCALER,1));
    3dfc:	ae e4       	ldi	r26, 0x4E	; 78
    3dfe:	b0 e0       	ldi	r27, 0x00	; 0
    3e00:	ee e4       	ldi	r30, 0x4E	; 78
    3e02:	f0 e0       	ldi	r31, 0x00	; 0
    3e04:	80 81       	ld	r24, Z
    3e06:	82 60       	ori	r24, 0x02	; 2
    3e08:	8c 93       	st	X, r24
	Assign_Bit(TIMER_U8_TCCR1B,DIO_U8_PIN2,Get_Bit(TIMER1_PRESCALER,2));
    3e0a:	ae e4       	ldi	r26, 0x4E	; 78
    3e0c:	b0 e0       	ldi	r27, 0x00	; 0
    3e0e:	ee e4       	ldi	r30, 0x4E	; 78
    3e10:	f0 e0       	ldi	r31, 0x00	; 0
    3e12:	80 81       	ld	r24, Z
    3e14:	8b 7f       	andi	r24, 0xFB	; 251
    3e16:	8c 93       	st	X, r24

	TIMER_U8_ICR1L=2500;
    3e18:	e6 e4       	ldi	r30, 0x46	; 70
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	84 ec       	ldi	r24, 0xC4	; 196
    3e1e:	99 e0       	ldi	r25, 0x09	; 9
    3e20:	91 83       	std	Z+1, r25	; 0x01
    3e22:	80 83       	st	Z, r24
	TIMER_U8_OCR1AL=125;
    3e24:	ea e4       	ldi	r30, 0x4A	; 74
    3e26:	f0 e0       	ldi	r31, 0x00	; 0
    3e28:	8d e7       	ldi	r24, 0x7D	; 125
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	91 83       	std	Z+1, r25	; 0x01
    3e2e:	80 83       	st	Z, r24




#endif
}
    3e30:	cf 91       	pop	r28
    3e32:	df 91       	pop	r29
    3e34:	08 95       	ret

00003e36 <UART_void_Init>:
#include"UART_config.h"
#include"UART_private.h"
#include"UART_interface.h"

void UART_void_Init(void)
{
    3e36:	df 93       	push	r29
    3e38:	cf 93       	push	r28
    3e3a:	cd b7       	in	r28, 0x3d	; 61
    3e3c:	de b7       	in	r29, 0x3e	; 62
	UART_U8_UBRRH = 0 ;    // Reg select is UBRRH
    3e3e:	e0 e4       	ldi	r30, 0x40	; 64
    3e40:	f0 e0       	ldi	r31, 0x00	; 0
    3e42:	10 82       	st	Z, r1
	UART_U8_UBRRL = 51 ;   // UBRR value = (system frq / (16*bude rate) ) -1
    3e44:	e9 e2       	ldi	r30, 0x29	; 41
    3e46:	f0 e0       	ldi	r31, 0x00	; 0
    3e48:	83 e3       	ldi	r24, 0x33	; 51
    3e4a:	80 83       	st	Z, r24
	UART_U8_UCSRC = 0b10000110; // REG select is UCSRC
    3e4c:	e0 e4       	ldi	r30, 0x40	; 64
    3e4e:	f0 e0       	ldi	r31, 0x00	; 0
    3e50:	86 e8       	ldi	r24, 0x86	; 134
    3e52:	80 83       	st	Z, r24
								// Asynch
								// no parity
								// stop bit


	UART_U8_UCSRB=0b00011000;   // receiver enable , tx enable
    3e54:	ea e2       	ldi	r30, 0x2A	; 42
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	88 e1       	ldi	r24, 0x18	; 24
    3e5a:	80 83       	st	Z, r24
								// 8 bits --> data bits


}
    3e5c:	cf 91       	pop	r28
    3e5e:	df 91       	pop	r29
    3e60:	08 95       	ret

00003e62 <UART_void_Send_Char>:
void UART_void_Send_Char(u8 Copy_U8_Data)
{
    3e62:	df 93       	push	r29
    3e64:	cf 93       	push	r28
    3e66:	0f 92       	push	r0
    3e68:	cd b7       	in	r28, 0x3d	; 61
    3e6a:	de b7       	in	r29, 0x3e	; 62
    3e6c:	89 83       	std	Y+1, r24	; 0x01
	while(Get_Bit(UART_U8_UCSRA,5)==0);
    3e6e:	eb e2       	ldi	r30, 0x2B	; 43
    3e70:	f0 e0       	ldi	r31, 0x00	; 0
    3e72:	80 81       	ld	r24, Z
    3e74:	82 95       	swap	r24
    3e76:	86 95       	lsr	r24
    3e78:	87 70       	andi	r24, 0x07	; 7
    3e7a:	88 2f       	mov	r24, r24
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	81 70       	andi	r24, 0x01	; 1
    3e80:	90 70       	andi	r25, 0x00	; 0
    3e82:	00 97       	sbiw	r24, 0x00	; 0
    3e84:	a1 f3       	breq	.-24     	; 0x3e6e <UART_void_Send_Char+0xc>
//	Set_Bit(UART_U8_UCSRA,5);
	UART_U8_UDR = Copy_U8_Data ;
    3e86:	ec e2       	ldi	r30, 0x2C	; 44
    3e88:	f0 e0       	ldi	r31, 0x00	; 0
    3e8a:	89 81       	ldd	r24, Y+1	; 0x01
    3e8c:	80 83       	st	Z, r24

}
    3e8e:	0f 90       	pop	r0
    3e90:	cf 91       	pop	r28
    3e92:	df 91       	pop	r29
    3e94:	08 95       	ret

00003e96 <UART_U8_Receive_Char>:

u8 UART_U8_Receive_Char(void)
{
    3e96:	df 93       	push	r29
    3e98:	cf 93       	push	r28
    3e9a:	cd b7       	in	r28, 0x3d	; 61
    3e9c:	de b7       	in	r29, 0x3e	; 62
	while(Get_Bit(UART_U8_UCSRA,7)==0);
    3e9e:	eb e2       	ldi	r30, 0x2B	; 43
    3ea0:	f0 e0       	ldi	r31, 0x00	; 0
    3ea2:	80 81       	ld	r24, Z
    3ea4:	88 23       	and	r24, r24
    3ea6:	dc f7       	brge	.-10     	; 0x3e9e <UART_U8_Receive_Char+0x8>
	return UART_U8_UDR ;
    3ea8:	ec e2       	ldi	r30, 0x2C	; 44
    3eaa:	f0 e0       	ldi	r31, 0x00	; 0
    3eac:	80 81       	ld	r24, Z
}
    3eae:	cf 91       	pop	r28
    3eb0:	df 91       	pop	r29
    3eb2:	08 95       	ret

00003eb4 <UART_void_Send_String>:

void UART_void_Send_String(u8 *Copy_U8_Str)
{
    3eb4:	df 93       	push	r29
    3eb6:	cf 93       	push	r28
    3eb8:	00 d0       	rcall	.+0      	; 0x3eba <UART_void_Send_String+0x6>
    3eba:	cd b7       	in	r28, 0x3d	; 61
    3ebc:	de b7       	in	r29, 0x3e	; 62
    3ebe:	9a 83       	std	Y+2, r25	; 0x02
    3ec0:	89 83       	std	Y+1, r24	; 0x01
    3ec2:	0a c0       	rjmp	.+20     	; 0x3ed8 <UART_void_Send_String+0x24>
	while(*Copy_U8_Str != '\0')
	{
		UART_void_Send_Char(*Copy_U8_Str);
    3ec4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ec6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ec8:	80 81       	ld	r24, Z
    3eca:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <UART_void_Send_Char>
		Copy_U8_Str++;
    3ece:	89 81       	ldd	r24, Y+1	; 0x01
    3ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed2:	01 96       	adiw	r24, 0x01	; 1
    3ed4:	9a 83       	std	Y+2, r25	; 0x02
    3ed6:	89 83       	std	Y+1, r24	; 0x01
	return UART_U8_UDR ;
}

void UART_void_Send_String(u8 *Copy_U8_Str)
{
	while(*Copy_U8_Str != '\0')
    3ed8:	e9 81       	ldd	r30, Y+1	; 0x01
    3eda:	fa 81       	ldd	r31, Y+2	; 0x02
    3edc:	80 81       	ld	r24, Z
    3ede:	88 23       	and	r24, r24
    3ee0:	89 f7       	brne	.-30     	; 0x3ec4 <UART_void_Send_String+0x10>
	{
		UART_void_Send_Char(*Copy_U8_Str);
		Copy_U8_Str++;
	}
}
    3ee2:	0f 90       	pop	r0
    3ee4:	0f 90       	pop	r0
    3ee6:	cf 91       	pop	r28
    3ee8:	df 91       	pop	r29
    3eea:	08 95       	ret

00003eec <UART_void_Receive_String>:
void UART_void_Receive_String(u8 *Copy_U8_arr)
{
    3eec:	0f 93       	push	r16
    3eee:	1f 93       	push	r17
    3ef0:	df 93       	push	r29
    3ef2:	cf 93       	push	r28
    3ef4:	00 d0       	rcall	.+0      	; 0x3ef6 <UART_void_Receive_String+0xa>
    3ef6:	0f 92       	push	r0
    3ef8:	cd b7       	in	r28, 0x3d	; 61
    3efa:	de b7       	in	r29, 0x3e	; 62
    3efc:	9b 83       	std	Y+3, r25	; 0x03
    3efe:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    3f00:	19 82       	std	Y+1, r1	; 0x01
	// use do while
	Copy_U8_arr[i] = UART_U8_Receive_Char();
    3f02:	89 81       	ldd	r24, Y+1	; 0x01
    3f04:	28 2f       	mov	r18, r24
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	8a 81       	ldd	r24, Y+2	; 0x02
    3f0a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f0c:	8c 01       	movw	r16, r24
    3f0e:	02 0f       	add	r16, r18
    3f10:	13 1f       	adc	r17, r19
    3f12:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <UART_U8_Receive_Char>
    3f16:	f8 01       	movw	r30, r16
    3f18:	80 83       	st	Z, r24
    3f1a:	0f c0       	rjmp	.+30     	; 0x3f3a <UART_void_Receive_String+0x4e>
	while(Copy_U8_arr[i]!='s')
	{
	i++;
    3f1c:	89 81       	ldd	r24, Y+1	; 0x01
    3f1e:	8f 5f       	subi	r24, 0xFF	; 255
    3f20:	89 83       	std	Y+1, r24	; 0x01
	Copy_U8_arr[i] = UART_U8_Receive_Char();
    3f22:	89 81       	ldd	r24, Y+1	; 0x01
    3f24:	28 2f       	mov	r18, r24
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	8a 81       	ldd	r24, Y+2	; 0x02
    3f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f2c:	8c 01       	movw	r16, r24
    3f2e:	02 0f       	add	r16, r18
    3f30:	13 1f       	adc	r17, r19
    3f32:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <UART_U8_Receive_Char>
    3f36:	f8 01       	movw	r30, r16
    3f38:	80 83       	st	Z, r24
void UART_void_Receive_String(u8 *Copy_U8_arr)
{
	u8 i=0;
	// use do while
	Copy_U8_arr[i] = UART_U8_Receive_Char();
	while(Copy_U8_arr[i]!='s')
    3f3a:	89 81       	ldd	r24, Y+1	; 0x01
    3f3c:	28 2f       	mov	r18, r24
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	8a 81       	ldd	r24, Y+2	; 0x02
    3f42:	9b 81       	ldd	r25, Y+3	; 0x03
    3f44:	fc 01       	movw	r30, r24
    3f46:	e2 0f       	add	r30, r18
    3f48:	f3 1f       	adc	r31, r19
    3f4a:	80 81       	ld	r24, Z
    3f4c:	83 37       	cpi	r24, 0x73	; 115
    3f4e:	31 f7       	brne	.-52     	; 0x3f1c <UART_void_Receive_String+0x30>
	{
	i++;
	Copy_U8_arr[i] = UART_U8_Receive_Char();
	}
}
    3f50:	0f 90       	pop	r0
    3f52:	0f 90       	pop	r0
    3f54:	0f 90       	pop	r0
    3f56:	cf 91       	pop	r28
    3f58:	df 91       	pop	r29
    3f5a:	1f 91       	pop	r17
    3f5c:	0f 91       	pop	r16
    3f5e:	08 95       	ret

00003f60 <main>:
 *  Created on: Feb 3, 2024
 *      Author: Administrator
 */
#include"Door.h"
void main(void)
{
    3f60:	df 93       	push	r29
    3f62:	cf 93       	push	r28
    3f64:	cd b7       	in	r28, 0x3d	; 61
    3f66:	de b7       	in	r29, 0x3e	; 62
	DOOR_INIT();
    3f68:	0e 94 99 0b 	call	0x1732	; 0x1732 <DOOR_INIT>
	WelcomeMainScreen();
    3f6c:	0e 94 ae 0b 	call	0x175c	; 0x175c <WelcomeMainScreen>
    3f70:	ff cf       	rjmp	.-2      	; 0x3f70 <main+0x10>

00003f72 <__divmodhi4>:
    3f72:	97 fb       	bst	r25, 7
    3f74:	09 2e       	mov	r0, r25
    3f76:	07 26       	eor	r0, r23
    3f78:	0a d0       	rcall	.+20     	; 0x3f8e <__divmodhi4_neg1>
    3f7a:	77 fd       	sbrc	r23, 7
    3f7c:	04 d0       	rcall	.+8      	; 0x3f86 <__divmodhi4_neg2>
    3f7e:	2e d0       	rcall	.+92     	; 0x3fdc <__udivmodhi4>
    3f80:	06 d0       	rcall	.+12     	; 0x3f8e <__divmodhi4_neg1>
    3f82:	00 20       	and	r0, r0
    3f84:	1a f4       	brpl	.+6      	; 0x3f8c <__divmodhi4_exit>

00003f86 <__divmodhi4_neg2>:
    3f86:	70 95       	com	r23
    3f88:	61 95       	neg	r22
    3f8a:	7f 4f       	sbci	r23, 0xFF	; 255

00003f8c <__divmodhi4_exit>:
    3f8c:	08 95       	ret

00003f8e <__divmodhi4_neg1>:
    3f8e:	f6 f7       	brtc	.-4      	; 0x3f8c <__divmodhi4_exit>
    3f90:	90 95       	com	r25
    3f92:	81 95       	neg	r24
    3f94:	9f 4f       	sbci	r25, 0xFF	; 255
    3f96:	08 95       	ret

00003f98 <__udivmodsi4>:
    3f98:	a1 e2       	ldi	r26, 0x21	; 33
    3f9a:	1a 2e       	mov	r1, r26
    3f9c:	aa 1b       	sub	r26, r26
    3f9e:	bb 1b       	sub	r27, r27
    3fa0:	fd 01       	movw	r30, r26
    3fa2:	0d c0       	rjmp	.+26     	; 0x3fbe <__udivmodsi4_ep>

00003fa4 <__udivmodsi4_loop>:
    3fa4:	aa 1f       	adc	r26, r26
    3fa6:	bb 1f       	adc	r27, r27
    3fa8:	ee 1f       	adc	r30, r30
    3faa:	ff 1f       	adc	r31, r31
    3fac:	a2 17       	cp	r26, r18
    3fae:	b3 07       	cpc	r27, r19
    3fb0:	e4 07       	cpc	r30, r20
    3fb2:	f5 07       	cpc	r31, r21
    3fb4:	20 f0       	brcs	.+8      	; 0x3fbe <__udivmodsi4_ep>
    3fb6:	a2 1b       	sub	r26, r18
    3fb8:	b3 0b       	sbc	r27, r19
    3fba:	e4 0b       	sbc	r30, r20
    3fbc:	f5 0b       	sbc	r31, r21

00003fbe <__udivmodsi4_ep>:
    3fbe:	66 1f       	adc	r22, r22
    3fc0:	77 1f       	adc	r23, r23
    3fc2:	88 1f       	adc	r24, r24
    3fc4:	99 1f       	adc	r25, r25
    3fc6:	1a 94       	dec	r1
    3fc8:	69 f7       	brne	.-38     	; 0x3fa4 <__udivmodsi4_loop>
    3fca:	60 95       	com	r22
    3fcc:	70 95       	com	r23
    3fce:	80 95       	com	r24
    3fd0:	90 95       	com	r25
    3fd2:	9b 01       	movw	r18, r22
    3fd4:	ac 01       	movw	r20, r24
    3fd6:	bd 01       	movw	r22, r26
    3fd8:	cf 01       	movw	r24, r30
    3fda:	08 95       	ret

00003fdc <__udivmodhi4>:
    3fdc:	aa 1b       	sub	r26, r26
    3fde:	bb 1b       	sub	r27, r27
    3fe0:	51 e1       	ldi	r21, 0x11	; 17
    3fe2:	07 c0       	rjmp	.+14     	; 0x3ff2 <__udivmodhi4_ep>

00003fe4 <__udivmodhi4_loop>:
    3fe4:	aa 1f       	adc	r26, r26
    3fe6:	bb 1f       	adc	r27, r27
    3fe8:	a6 17       	cp	r26, r22
    3fea:	b7 07       	cpc	r27, r23
    3fec:	10 f0       	brcs	.+4      	; 0x3ff2 <__udivmodhi4_ep>
    3fee:	a6 1b       	sub	r26, r22
    3ff0:	b7 0b       	sbc	r27, r23

00003ff2 <__udivmodhi4_ep>:
    3ff2:	88 1f       	adc	r24, r24
    3ff4:	99 1f       	adc	r25, r25
    3ff6:	5a 95       	dec	r21
    3ff8:	a9 f7       	brne	.-22     	; 0x3fe4 <__udivmodhi4_loop>
    3ffa:	80 95       	com	r24
    3ffc:	90 95       	com	r25
    3ffe:	bc 01       	movw	r22, r24
    4000:	cd 01       	movw	r24, r26
    4002:	08 95       	ret

00004004 <__prologue_saves__>:
    4004:	2f 92       	push	r2
    4006:	3f 92       	push	r3
    4008:	4f 92       	push	r4
    400a:	5f 92       	push	r5
    400c:	6f 92       	push	r6
    400e:	7f 92       	push	r7
    4010:	8f 92       	push	r8
    4012:	9f 92       	push	r9
    4014:	af 92       	push	r10
    4016:	bf 92       	push	r11
    4018:	cf 92       	push	r12
    401a:	df 92       	push	r13
    401c:	ef 92       	push	r14
    401e:	ff 92       	push	r15
    4020:	0f 93       	push	r16
    4022:	1f 93       	push	r17
    4024:	cf 93       	push	r28
    4026:	df 93       	push	r29
    4028:	cd b7       	in	r28, 0x3d	; 61
    402a:	de b7       	in	r29, 0x3e	; 62
    402c:	ca 1b       	sub	r28, r26
    402e:	db 0b       	sbc	r29, r27
    4030:	0f b6       	in	r0, 0x3f	; 63
    4032:	f8 94       	cli
    4034:	de bf       	out	0x3e, r29	; 62
    4036:	0f be       	out	0x3f, r0	; 63
    4038:	cd bf       	out	0x3d, r28	; 61
    403a:	09 94       	ijmp

0000403c <__epilogue_restores__>:
    403c:	2a 88       	ldd	r2, Y+18	; 0x12
    403e:	39 88       	ldd	r3, Y+17	; 0x11
    4040:	48 88       	ldd	r4, Y+16	; 0x10
    4042:	5f 84       	ldd	r5, Y+15	; 0x0f
    4044:	6e 84       	ldd	r6, Y+14	; 0x0e
    4046:	7d 84       	ldd	r7, Y+13	; 0x0d
    4048:	8c 84       	ldd	r8, Y+12	; 0x0c
    404a:	9b 84       	ldd	r9, Y+11	; 0x0b
    404c:	aa 84       	ldd	r10, Y+10	; 0x0a
    404e:	b9 84       	ldd	r11, Y+9	; 0x09
    4050:	c8 84       	ldd	r12, Y+8	; 0x08
    4052:	df 80       	ldd	r13, Y+7	; 0x07
    4054:	ee 80       	ldd	r14, Y+6	; 0x06
    4056:	fd 80       	ldd	r15, Y+5	; 0x05
    4058:	0c 81       	ldd	r16, Y+4	; 0x04
    405a:	1b 81       	ldd	r17, Y+3	; 0x03
    405c:	aa 81       	ldd	r26, Y+2	; 0x02
    405e:	b9 81       	ldd	r27, Y+1	; 0x01
    4060:	ce 0f       	add	r28, r30
    4062:	d1 1d       	adc	r29, r1
    4064:	0f b6       	in	r0, 0x3f	; 63
    4066:	f8 94       	cli
    4068:	de bf       	out	0x3e, r29	; 62
    406a:	0f be       	out	0x3f, r0	; 63
    406c:	cd bf       	out	0x3d, r28	; 61
    406e:	ed 01       	movw	r28, r26
    4070:	08 95       	ret

00004072 <itoa>:
    4072:	fb 01       	movw	r30, r22
    4074:	9f 01       	movw	r18, r30
    4076:	e8 94       	clt
    4078:	42 30       	cpi	r20, 0x02	; 2
    407a:	c4 f0       	brlt	.+48     	; 0x40ac <itoa+0x3a>
    407c:	45 32       	cpi	r20, 0x25	; 37
    407e:	b4 f4       	brge	.+44     	; 0x40ac <itoa+0x3a>
    4080:	4a 30       	cpi	r20, 0x0A	; 10
    4082:	29 f4       	brne	.+10     	; 0x408e <itoa+0x1c>
    4084:	97 fb       	bst	r25, 7
    4086:	1e f4       	brtc	.+6      	; 0x408e <itoa+0x1c>
    4088:	90 95       	com	r25
    408a:	81 95       	neg	r24
    408c:	9f 4f       	sbci	r25, 0xFF	; 255
    408e:	64 2f       	mov	r22, r20
    4090:	77 27       	eor	r23, r23
    4092:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <__udivmodhi4>
    4096:	80 5d       	subi	r24, 0xD0	; 208
    4098:	8a 33       	cpi	r24, 0x3A	; 58
    409a:	0c f0       	brlt	.+2      	; 0x409e <itoa+0x2c>
    409c:	89 5d       	subi	r24, 0xD9	; 217
    409e:	81 93       	st	Z+, r24
    40a0:	cb 01       	movw	r24, r22
    40a2:	00 97       	sbiw	r24, 0x00	; 0
    40a4:	a1 f7       	brne	.-24     	; 0x408e <itoa+0x1c>
    40a6:	16 f4       	brtc	.+4      	; 0x40ac <itoa+0x3a>
    40a8:	5d e2       	ldi	r21, 0x2D	; 45
    40aa:	51 93       	st	Z+, r21
    40ac:	10 82       	st	Z, r1
    40ae:	c9 01       	movw	r24, r18
    40b0:	0c 94 5a 20 	jmp	0x40b4	; 0x40b4 <strrev>

000040b4 <strrev>:
    40b4:	dc 01       	movw	r26, r24
    40b6:	fc 01       	movw	r30, r24
    40b8:	67 2f       	mov	r22, r23
    40ba:	71 91       	ld	r23, Z+
    40bc:	77 23       	and	r23, r23
    40be:	e1 f7       	brne	.-8      	; 0x40b8 <strrev+0x4>
    40c0:	32 97       	sbiw	r30, 0x02	; 2
    40c2:	04 c0       	rjmp	.+8      	; 0x40cc <strrev+0x18>
    40c4:	7c 91       	ld	r23, X
    40c6:	6d 93       	st	X+, r22
    40c8:	70 83       	st	Z, r23
    40ca:	62 91       	ld	r22, -Z
    40cc:	ae 17       	cp	r26, r30
    40ce:	bf 07       	cpc	r27, r31
    40d0:	c8 f3       	brcs	.-14     	; 0x40c4 <strrev+0x10>
    40d2:	08 95       	ret

000040d4 <_exit>:
    40d4:	f8 94       	cli

000040d6 <__stop_program>:
    40d6:	ff cf       	rjmp	.-2      	; 0x40d6 <__stop_program>
