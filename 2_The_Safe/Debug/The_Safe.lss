
The_Safe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000320c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  0000320c  000032a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080013c  0080013c  0000337c  2**0
                  ALLOC
  3 .stab         000028ec  00000000  00000000  0000337c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e28  00000000  00000000  00005c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ae48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000afc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b28a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bb18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 33       	cpi	r26, 0x3D	; 61
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5d 18 	call	0x30ba	; 0x30ba <main>
      8a:	0c 94 04 19 	jmp	0x3208	; 0x3208 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 88 18 	jmp	0x3110	; 0x3110 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e1       	ldi	r26, 0x17	; 23
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 88 18 	jmp	0x3110	; 0x3110 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e1       	ldi	r24, 0x17	; 23
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e1       	ldi	r22, 0x17	; 23
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 98 18 	jmp	0x3130	; 0x3130 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <INTIAL_DIR>:
/*****************************************************************************/
/***********************************fucntion**********************************/
/********************************************************************************/

u8 INTIAL_DIR(u8 p0 , u8 p1 , u8 p2 , u8 p3 , u8 p4 , u8 p5 , u8 p6 , u8 p7)
{
     c9e:	af 92       	push	r10
     ca0:	cf 92       	push	r12
     ca2:	ef 92       	push	r14
     ca4:	0f 93       	push	r16
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	29 97       	sbiw	r28, 0x09	; 9
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	8a 83       	std	Y+2, r24	; 0x02
     cbc:	6b 83       	std	Y+3, r22	; 0x03
     cbe:	4c 83       	std	Y+4, r20	; 0x04
     cc0:	2d 83       	std	Y+5, r18	; 0x05
     cc2:	0e 83       	std	Y+6, r16	; 0x06
     cc4:	ef 82       	std	Y+7, r14	; 0x07
     cc6:	c8 86       	std	Y+8, r12	; 0x08
     cc8:	a9 86       	std	Y+9, r10	; 0x09
	u8 port = 0x00 ;
     cca:	19 82       	std	Y+1, r1	; 0x01
	Assign_Bit(port,DIO_U8_PIN0,p0);
     ccc:	8a 81       	ldd	r24, Y+2	; 0x02
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	21 f4       	brne	.+8      	; 0xcda <INTIAL_DIR+0x3c>
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	81 60       	ori	r24, 0x01	; 1
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	03 c0       	rjmp	.+6      	; 0xce0 <INTIAL_DIR+0x42>
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	8e 7f       	andi	r24, 0xFE	; 254
     cde:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN1,p1);
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	21 f4       	brne	.+8      	; 0xcee <INTIAL_DIR+0x50>
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	82 60       	ori	r24, 0x02	; 2
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	03 c0       	rjmp	.+6      	; 0xcf4 <INTIAL_DIR+0x56>
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	8d 7f       	andi	r24, 0xFD	; 253
     cf2:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN2,p2);
     cf4:	8c 81       	ldd	r24, Y+4	; 0x04
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	21 f4       	brne	.+8      	; 0xd02 <INTIAL_DIR+0x64>
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	84 60       	ori	r24, 0x04	; 4
     cfe:	89 83       	std	Y+1, r24	; 0x01
     d00:	03 c0       	rjmp	.+6      	; 0xd08 <INTIAL_DIR+0x6a>
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	8b 7f       	andi	r24, 0xFB	; 251
     d06:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN3,p3);
     d08:	8d 81       	ldd	r24, Y+5	; 0x05
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	21 f4       	brne	.+8      	; 0xd16 <INTIAL_DIR+0x78>
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	88 60       	ori	r24, 0x08	; 8
     d12:	89 83       	std	Y+1, r24	; 0x01
     d14:	03 c0       	rjmp	.+6      	; 0xd1c <INTIAL_DIR+0x7e>
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	87 7f       	andi	r24, 0xF7	; 247
     d1a:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN4,p4);
     d1c:	8e 81       	ldd	r24, Y+6	; 0x06
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	21 f4       	brne	.+8      	; 0xd2a <INTIAL_DIR+0x8c>
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	80 61       	ori	r24, 0x10	; 16
     d26:	89 83       	std	Y+1, r24	; 0x01
     d28:	03 c0       	rjmp	.+6      	; 0xd30 <INTIAL_DIR+0x92>
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	8f 7e       	andi	r24, 0xEF	; 239
     d2e:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN5,p5);
     d30:	8f 81       	ldd	r24, Y+7	; 0x07
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	21 f4       	brne	.+8      	; 0xd3e <INTIAL_DIR+0xa0>
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	80 62       	ori	r24, 0x20	; 32
     d3a:	89 83       	std	Y+1, r24	; 0x01
     d3c:	03 c0       	rjmp	.+6      	; 0xd44 <INTIAL_DIR+0xa6>
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	8f 7d       	andi	r24, 0xDF	; 223
     d42:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN6,p6);
     d44:	88 85       	ldd	r24, Y+8	; 0x08
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	21 f4       	brne	.+8      	; 0xd52 <INTIAL_DIR+0xb4>
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	80 64       	ori	r24, 0x40	; 64
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	03 c0       	rjmp	.+6      	; 0xd58 <INTIAL_DIR+0xba>
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	8f 7b       	andi	r24, 0xBF	; 191
     d56:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN7,p7);
     d58:	89 85       	ldd	r24, Y+9	; 0x09
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	21 f4       	brne	.+8      	; 0xd66 <INTIAL_DIR+0xc8>
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	80 68       	ori	r24, 0x80	; 128
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	03 c0       	rjmp	.+6      	; 0xd6c <INTIAL_DIR+0xce>
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	8f 77       	andi	r24, 0x7F	; 127
     d6a:	89 83       	std	Y+1, r24	; 0x01
	return port;
     d6c:	89 81       	ldd	r24, Y+1	; 0x01

}
     d6e:	29 96       	adiw	r28, 0x09	; 9
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	0f 91       	pop	r16
     d80:	ef 90       	pop	r14
     d82:	cf 90       	pop	r12
     d84:	af 90       	pop	r10
     d86:	08 95       	ret

00000d88 <DIO_void_Init>:


void DIO_void_Init(void)
{
     d88:	8f 92       	push	r8
     d8a:	9f 92       	push	r9
     d8c:	af 92       	push	r10
     d8e:	cf 92       	push	r12
     d90:	ef 92       	push	r14
     d92:	0f 93       	push	r16
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
	/*direction*/
	DIO_U8_DDRA =INTIAL_DIR(DIO_u8_PA0_INTIAL_DIR,DIO_u8_PA1_INTIAL_DIR,DIO_u8_PA2_INTIAL_DIR,DIO_u8_PA3_INTIAL_DIR,DIO_u8_PA4_INTIAL_DIR,DIO_u8_PA5_INTIAL_DIR,DIO_u8_PA6_INTIAL_DIR,DIO_u8_PA7_INTIAL_DIR);
     d9c:	0f 2e       	mov	r0, r31
     d9e:	fa e3       	ldi	r31, 0x3A	; 58
     da0:	8f 2e       	mov	r8, r31
     da2:	99 24       	eor	r9, r9
     da4:	f0 2d       	mov	r31, r0
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	41 e0       	ldi	r20, 0x01	; 1
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	00 e0       	ldi	r16, 0x00	; 0
     db0:	ee 24       	eor	r14, r14
     db2:	cc 24       	eor	r12, r12
     db4:	aa 24       	eor	r10, r10
     db6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <INTIAL_DIR>
     dba:	f4 01       	movw	r30, r8
     dbc:	80 83       	st	Z, r24
	DIO_U8_DDRB =INTIAL_DIR(DIO_u8_PB0_INTIAL_DIR,DIO_u8_PB1_INTIAL_DIR,DIO_u8_PB2_INTIAL_DIR,DIO_u8_PB3_INTIAL_DIR,DIO_u8_PB4_INTIAL_DIR,DIO_u8_PB5_INTIAL_DIR,DIO_u8_PB6_INTIAL_DIR,DIO_u8_PB7_INTIAL_DIR);
     dbe:	0f 2e       	mov	r0, r31
     dc0:	f7 e3       	ldi	r31, 0x37	; 55
     dc2:	8f 2e       	mov	r8, r31
     dc4:	99 24       	eor	r9, r9
     dc6:	f0 2d       	mov	r31, r0
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	41 e0       	ldi	r20, 0x01	; 1
     dce:	21 e0       	ldi	r18, 0x01	; 1
     dd0:	01 e0       	ldi	r16, 0x01	; 1
     dd2:	ee 24       	eor	r14, r14
     dd4:	e3 94       	inc	r14
     dd6:	cc 24       	eor	r12, r12
     dd8:	c3 94       	inc	r12
     dda:	aa 24       	eor	r10, r10
     ddc:	a3 94       	inc	r10
     dde:	0e 94 4f 06 	call	0xc9e	; 0xc9e <INTIAL_DIR>
     de2:	f4 01       	movw	r30, r8
     de4:	80 83       	st	Z, r24
	DIO_U8_DDRC =INTIAL_DIR(DIO_u8_PC0_INTIAL_DIR,DIO_u8_PC1_INTIAL_DIR,DIO_u8_PC2_INTIAL_DIR,DIO_u8_PC3_INTIAL_DIR,DIO_u8_PC4_INTIAL_DIR,DIO_u8_PC5_INTIAL_DIR,DIO_u8_PC6_INTIAL_DIR,DIO_u8_PC7_INTIAL_DIR);
     de6:	0f 2e       	mov	r0, r31
     de8:	f4 e3       	ldi	r31, 0x34	; 52
     dea:	8f 2e       	mov	r8, r31
     dec:	99 24       	eor	r9, r9
     dee:	f0 2d       	mov	r31, r0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	61 e0       	ldi	r22, 0x01	; 1
     df4:	41 e0       	ldi	r20, 0x01	; 1
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	00 e0       	ldi	r16, 0x00	; 0
     dfa:	ee 24       	eor	r14, r14
     dfc:	cc 24       	eor	r12, r12
     dfe:	aa 24       	eor	r10, r10
     e00:	0e 94 4f 06 	call	0xc9e	; 0xc9e <INTIAL_DIR>
     e04:	f4 01       	movw	r30, r8
     e06:	80 83       	st	Z, r24
	DIO_U8_DDRD =INTIAL_DIR(DIO_u8_PD0_INTIAL_DIR,DIO_u8_PD1_INTIAL_DIR,DIO_u8_PD2_INTIAL_DIR,DIO_u8_PD3_INTIAL_DIR,DIO_u8_PD4_INTIAL_DIR,DIO_u8_PD5_INTIAL_DIR,DIO_u8_PD6_INTIAL_DIR,DIO_u8_PD7_INTIAL_DIR);
     e08:	0f 2e       	mov	r0, r31
     e0a:	f1 e3       	ldi	r31, 0x31	; 49
     e0c:	8f 2e       	mov	r8, r31
     e0e:	99 24       	eor	r9, r9
     e10:	f0 2d       	mov	r31, r0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	41 e0       	ldi	r20, 0x01	; 1
     e18:	21 e0       	ldi	r18, 0x01	; 1
     e1a:	00 e0       	ldi	r16, 0x00	; 0
     e1c:	ee 24       	eor	r14, r14
     e1e:	cc 24       	eor	r12, r12
     e20:	aa 24       	eor	r10, r10
     e22:	0e 94 4f 06 	call	0xc9e	; 0xc9e <INTIAL_DIR>
     e26:	f4 01       	movw	r30, r8
     e28:	80 83       	st	Z, r24
}
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	0f 91       	pop	r16
     e30:	ef 90       	pop	r14
     e32:	cf 90       	pop	r12
     e34:	af 90       	pop	r10
     e36:	9f 90       	pop	r9
     e38:	8f 90       	pop	r8
     e3a:	08 95       	ret

00000e3c <DIO_U8_Set_Pin_Dir>:

u8 DIO_U8_Set_Pin_Dir(u8 Copy_U8_Port_ID , u8 Copy_U8_Pin_ID , u8 Copy_U8_Pin_Dir)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	00 d0       	rcall	.+0      	; 0xe42 <DIO_U8_Set_Pin_Dir+0x6>
     e42:	00 d0       	rcall	.+0      	; 0xe44 <DIO_U8_Set_Pin_Dir+0x8>
     e44:	00 d0       	rcall	.+0      	; 0xe46 <DIO_U8_Set_Pin_Dir+0xa>
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	6a 83       	std	Y+2, r22	; 0x02
     e4e:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	84 30       	cpi	r24, 0x04	; 4
     e54:	08 f0       	brcs	.+2      	; 0xe58 <DIO_U8_Set_Pin_Dir+0x1c>
     e56:	e4 c0       	rjmp	.+456    	; 0x1020 <DIO_U8_Set_Pin_Dir+0x1e4>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	88 30       	cpi	r24, 0x08	; 8
     e5c:	08 f0       	brcs	.+2      	; 0xe60 <DIO_U8_Set_Pin_Dir+0x24>
     e5e:	dd c0       	rjmp	.+442    	; 0x101a <DIO_U8_Set_Pin_Dir+0x1de>
		{
			if((Copy_U8_Pin_Dir==PIN_INPUT)||(Copy_U8_Pin_Dir==PIN_OUTPUT))
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	88 23       	and	r24, r24
     e64:	21 f0       	breq	.+8      	; 0xe6e <DIO_U8_Set_Pin_Dir+0x32>
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	09 f0       	breq	.+2      	; 0xe6e <DIO_U8_Set_Pin_Dir+0x32>
     e6c:	d4 c0       	rjmp	.+424    	; 0x1016 <DIO_U8_Set_Pin_Dir+0x1da>
			{
				switch(Copy_U8_Port_ID)
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	3e 83       	std	Y+6, r19	; 0x06
     e76:	2d 83       	std	Y+5, r18	; 0x05
     e78:	8d 81       	ldd	r24, Y+5	; 0x05
     e7a:	9e 81       	ldd	r25, Y+6	; 0x06
     e7c:	81 30       	cpi	r24, 0x01	; 1
     e7e:	91 05       	cpc	r25, r1
     e80:	09 f4       	brne	.+2      	; 0xe84 <DIO_U8_Set_Pin_Dir+0x48>
     e82:	43 c0       	rjmp	.+134    	; 0xf0a <DIO_U8_Set_Pin_Dir+0xce>
     e84:	2d 81       	ldd	r18, Y+5	; 0x05
     e86:	3e 81       	ldd	r19, Y+6	; 0x06
     e88:	22 30       	cpi	r18, 0x02	; 2
     e8a:	31 05       	cpc	r19, r1
     e8c:	2c f4       	brge	.+10     	; 0xe98 <DIO_U8_Set_Pin_Dir+0x5c>
     e8e:	8d 81       	ldd	r24, Y+5	; 0x05
     e90:	9e 81       	ldd	r25, Y+6	; 0x06
     e92:	00 97       	sbiw	r24, 0x00	; 0
     e94:	71 f0       	breq	.+28     	; 0xeb2 <DIO_U8_Set_Pin_Dir+0x76>
     e96:	bc c0       	rjmp	.+376    	; 0x1010 <DIO_U8_Set_Pin_Dir+0x1d4>
     e98:	2d 81       	ldd	r18, Y+5	; 0x05
     e9a:	3e 81       	ldd	r19, Y+6	; 0x06
     e9c:	22 30       	cpi	r18, 0x02	; 2
     e9e:	31 05       	cpc	r19, r1
     ea0:	09 f4       	brne	.+2      	; 0xea4 <DIO_U8_Set_Pin_Dir+0x68>
     ea2:	5f c0       	rjmp	.+190    	; 0xf62 <DIO_U8_Set_Pin_Dir+0x126>
     ea4:	8d 81       	ldd	r24, Y+5	; 0x05
     ea6:	9e 81       	ldd	r25, Y+6	; 0x06
     ea8:	83 30       	cpi	r24, 0x03	; 3
     eaa:	91 05       	cpc	r25, r1
     eac:	09 f4       	brne	.+2      	; 0xeb0 <DIO_U8_Set_Pin_Dir+0x74>
     eae:	85 c0       	rjmp	.+266    	; 0xfba <DIO_U8_Set_Pin_Dir+0x17e>
     eb0:	af c0       	rjmp	.+350    	; 0x1010 <DIO_U8_Set_Pin_Dir+0x1d4>
				{
				case PORTA_ID:
					Assign_Bit(DIO_U8_DDRA,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
     eb2:	8b 81       	ldd	r24, Y+3	; 0x03
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	a1 f4       	brne	.+40     	; 0xee0 <DIO_U8_Set_Pin_Dir+0xa4>
     eb8:	aa e3       	ldi	r26, 0x3A	; 58
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	ea e3       	ldi	r30, 0x3A	; 58
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_U8_Set_Pin_Dir+0x9a>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <DIO_U8_Set_Pin_Dir+0x96>
     eda:	84 2b       	or	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	98 c0       	rjmp	.+304    	; 0x1010 <DIO_U8_Set_Pin_Dir+0x1d4>
     ee0:	aa e3       	ldi	r26, 0x3A	; 58
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	ea e3       	ldi	r30, 0x3A	; 58
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_U8_Set_Pin_Dir+0xc2>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <DIO_U8_Set_Pin_Dir+0xbe>
     f02:	80 95       	com	r24
     f04:	84 23       	and	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	83 c0       	rjmp	.+262    	; 0x1010 <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTB_ID:
					Assign_Bit(DIO_U8_DDRB,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	a1 f4       	brne	.+40     	; 0xf38 <DIO_U8_Set_Pin_Dir+0xfc>
     f10:	a7 e3       	ldi	r26, 0x37	; 55
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e7 e3       	ldi	r30, 0x37	; 55
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_U8_Set_Pin_Dir+0xf2>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_U8_Set_Pin_Dir+0xee>
     f32:	84 2b       	or	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	6c c0       	rjmp	.+216    	; 0x1010 <DIO_U8_Set_Pin_Dir+0x1d4>
     f38:	a7 e3       	ldi	r26, 0x37	; 55
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e7 e3       	ldi	r30, 0x37	; 55
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <DIO_U8_Set_Pin_Dir+0x11a>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <DIO_U8_Set_Pin_Dir+0x116>
     f5a:	80 95       	com	r24
     f5c:	84 23       	and	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	57 c0       	rjmp	.+174    	; 0x1010 <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTC_ID:
					Assign_Bit(DIO_U8_DDRC,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	a1 f4       	brne	.+40     	; 0xf90 <DIO_U8_Set_Pin_Dir+0x154>
     f68:	a4 e3       	ldi	r26, 0x34	; 52
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e4 e3       	ldi	r30, 0x34	; 52
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	02 2e       	mov	r0, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_U8_Set_Pin_Dir+0x14a>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	0a 94       	dec	r0
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_U8_Set_Pin_Dir+0x146>
     f8a:	84 2b       	or	r24, r20
     f8c:	8c 93       	st	X, r24
     f8e:	40 c0       	rjmp	.+128    	; 0x1010 <DIO_U8_Set_Pin_Dir+0x1d4>
     f90:	a4 e3       	ldi	r26, 0x34	; 52
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e4 e3       	ldi	r30, 0x34	; 52
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_U8_Set_Pin_Dir+0x172>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_U8_Set_Pin_Dir+0x16e>
     fb2:	80 95       	com	r24
     fb4:	84 23       	and	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	2b c0       	rjmp	.+86     	; 0x1010 <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTD_ID:
					Assign_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	a1 f4       	brne	.+40     	; 0xfe8 <DIO_U8_Set_Pin_Dir+0x1ac>
     fc0:	a1 e3       	ldi	r26, 0x31	; 49
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e1 e3       	ldi	r30, 0x31	; 49
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_U8_Set_Pin_Dir+0x1a2>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_U8_Set_Pin_Dir+0x19e>
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	14 c0       	rjmp	.+40     	; 0x1010 <DIO_U8_Set_Pin_Dir+0x1d4>
     fe8:	a1 e3       	ldi	r26, 0x31	; 49
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e1 e3       	ldi	r30, 0x31	; 49
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_U8_Set_Pin_Dir+0x1ca>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_U8_Set_Pin_Dir+0x1c6>
    100a:	80 95       	com	r24
    100c:	84 23       	and	r24, r20
    100e:	8c 93       	st	X, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    1010:	93 e0       	ldi	r25, 0x03	; 3
    1012:	9c 83       	std	Y+4, r25	; 0x04
    1014:	07 c0       	rjmp	.+14     	; 0x1024 <DIO_U8_Set_Pin_Dir+0x1e8>

				}
			}
			else
			{
				return WRONG_PIN_DIR;
    1016:	1c 82       	std	Y+4, r1	; 0x04
    1018:	05 c0       	rjmp	.+10     	; 0x1024 <DIO_U8_Set_Pin_Dir+0x1e8>
			}
		}
		else{
			return WRONG_PIN;
    101a:	21 e0       	ldi	r18, 0x01	; 1
    101c:	2c 83       	std	Y+4, r18	; 0x04
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO_U8_Set_Pin_Dir+0x1e8>


	}
	else
	{
		return WRONG_PORT;
    1020:	32 e0       	ldi	r19, 0x02	; 2
    1022:	3c 83       	std	Y+4, r19	; 0x04
    1024:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    1026:	26 96       	adiw	r28, 0x06	; 6
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <DIO_U8_Set_Port_Dir>:




u8 DIO_U8_Set_Port_Dir(u8 Copy_U8_Port_ID  , u16 Copy_U8_PORT_Dir)
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	00 d0       	rcall	.+0      	; 0x103e <DIO_U8_Set_Port_Dir+0x6>
    103e:	00 d0       	rcall	.+0      	; 0x1040 <DIO_U8_Set_Port_Dir+0x8>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <DIO_U8_Set_Port_Dir+0xa>
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	7b 83       	std	Y+3, r23	; 0x03
    104a:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	84 30       	cpi	r24, 0x04	; 4
    1050:	08 f0       	brcs	.+2      	; 0x1054 <DIO_U8_Set_Port_Dir+0x1c>
    1052:	3d c0       	rjmp	.+122    	; 0x10ce <DIO_U8_Set_Port_Dir+0x96>
	{
		if((Copy_U8_PORT_Dir)>=MIN_DIR_OR_VALUE&&(Copy_U8_PORT_Dir)<=MAX_DIR_OR_VALUE)
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	9b 81       	ldd	r25, Y+3	; 0x03
    1058:	8f 3f       	cpi	r24, 0xFF	; 255
    105a:	91 05       	cpc	r25, r1
    105c:	09 f0       	breq	.+2      	; 0x1060 <DIO_U8_Set_Port_Dir+0x28>
    105e:	a8 f5       	brcc	.+106    	; 0x10ca <DIO_U8_Set_Port_Dir+0x92>
		{
				switch(Copy_U8_Port_ID)
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	3e 83       	std	Y+6, r19	; 0x06
    1068:	2d 83       	std	Y+5, r18	; 0x05
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	9e 81       	ldd	r25, Y+6	; 0x06
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	91 05       	cpc	r25, r1
    1072:	d1 f0       	breq	.+52     	; 0x10a8 <DIO_U8_Set_Port_Dir+0x70>
    1074:	2d 81       	ldd	r18, Y+5	; 0x05
    1076:	3e 81       	ldd	r19, Y+6	; 0x06
    1078:	22 30       	cpi	r18, 0x02	; 2
    107a:	31 05       	cpc	r19, r1
    107c:	2c f4       	brge	.+10     	; 0x1088 <DIO_U8_Set_Port_Dir+0x50>
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	61 f0       	breq	.+24     	; 0x109e <DIO_U8_Set_Port_Dir+0x66>
    1086:	1e c0       	rjmp	.+60     	; 0x10c4 <DIO_U8_Set_Port_Dir+0x8c>
    1088:	2d 81       	ldd	r18, Y+5	; 0x05
    108a:	3e 81       	ldd	r19, Y+6	; 0x06
    108c:	22 30       	cpi	r18, 0x02	; 2
    108e:	31 05       	cpc	r19, r1
    1090:	81 f0       	breq	.+32     	; 0x10b2 <DIO_U8_Set_Port_Dir+0x7a>
    1092:	8d 81       	ldd	r24, Y+5	; 0x05
    1094:	9e 81       	ldd	r25, Y+6	; 0x06
    1096:	83 30       	cpi	r24, 0x03	; 3
    1098:	91 05       	cpc	r25, r1
    109a:	81 f0       	breq	.+32     	; 0x10bc <DIO_U8_Set_Port_Dir+0x84>
    109c:	13 c0       	rjmp	.+38     	; 0x10c4 <DIO_U8_Set_Port_Dir+0x8c>
				{
				case PORTA_ID:
					DIO_U8_DDRA=Copy_U8_PORT_Dir;
    109e:	ea e3       	ldi	r30, 0x3A	; 58
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	80 83       	st	Z, r24
    10a6:	0e c0       	rjmp	.+28     	; 0x10c4 <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTB_ID:
					DIO_U8_DDRB=Copy_U8_PORT_Dir;
    10a8:	e7 e3       	ldi	r30, 0x37	; 55
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	80 83       	st	Z, r24
    10b0:	09 c0       	rjmp	.+18     	; 0x10c4 <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTC_ID:
					DIO_U8_DDRC=Copy_U8_PORT_Dir;
    10b2:	e4 e3       	ldi	r30, 0x34	; 52
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	80 83       	st	Z, r24
    10ba:	04 c0       	rjmp	.+8      	; 0x10c4 <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTD_ID:
					DIO_U8_DDRD=Copy_U8_PORT_Dir;
    10bc:	e1 e3       	ldi	r30, 0x31	; 49
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	80 83       	st	Z, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    10c4:	93 e0       	ldi	r25, 0x03	; 3
    10c6:	9c 83       	std	Y+4, r25	; 0x04
    10c8:	04 c0       	rjmp	.+8      	; 0x10d2 <DIO_U8_Set_Port_Dir+0x9a>

				}
		}
		else
		{
			return WRONG_PORT_DIR;
    10ca:	1c 82       	std	Y+4, r1	; 0x04
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <DIO_U8_Set_Port_Dir+0x9a>
		}

	}
	else
	{
		return WRONG_PORT;
    10ce:	22 e0       	ldi	r18, 0x02	; 2
    10d0:	2c 83       	std	Y+4, r18	; 0x04
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    10d4:	26 96       	adiw	r28, 0x06	; 6
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <DIO_U8_Set_Pin_value>:




u8 DIO_U8_Set_Pin_value(u8 Copy_U8_Port_ID , u8 Copy_U8_Pin_ID , u8 Copy_U8_Pin_value)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <DIO_U8_Set_Pin_value+0x6>
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <DIO_U8_Set_Pin_value+0x8>
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <DIO_U8_Set_Pin_value+0xa>
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	89 83       	std	Y+1, r24	; 0x01
    10f6:	6a 83       	std	Y+2, r22	; 0x02
    10f8:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	84 30       	cpi	r24, 0x04	; 4
    10fe:	08 f0       	brcs	.+2      	; 0x1102 <DIO_U8_Set_Pin_value+0x1c>
    1100:	e4 c0       	rjmp	.+456    	; 0x12ca <DIO_U8_Set_Pin_value+0x1e4>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	88 30       	cpi	r24, 0x08	; 8
    1106:	08 f0       	brcs	.+2      	; 0x110a <DIO_U8_Set_Pin_value+0x24>
    1108:	dd c0       	rjmp	.+442    	; 0x12c4 <DIO_U8_Set_Pin_value+0x1de>
		{
			if((Copy_U8_Pin_value==PIN_LOW)||(Copy_U8_Pin_value==PIN_HIGH))
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	88 23       	and	r24, r24
    110e:	21 f0       	breq	.+8      	; 0x1118 <DIO_U8_Set_Pin_value+0x32>
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	09 f0       	breq	.+2      	; 0x1118 <DIO_U8_Set_Pin_value+0x32>
    1116:	d4 c0       	rjmp	.+424    	; 0x12c0 <DIO_U8_Set_Pin_value+0x1da>
			{
				switch(Copy_U8_Port_ID)
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	3e 83       	std	Y+6, r19	; 0x06
    1120:	2d 83       	std	Y+5, r18	; 0x05
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	91 05       	cpc	r25, r1
    112a:	09 f4       	brne	.+2      	; 0x112e <DIO_U8_Set_Pin_value+0x48>
    112c:	43 c0       	rjmp	.+134    	; 0x11b4 <DIO_U8_Set_Pin_value+0xce>
    112e:	2d 81       	ldd	r18, Y+5	; 0x05
    1130:	3e 81       	ldd	r19, Y+6	; 0x06
    1132:	22 30       	cpi	r18, 0x02	; 2
    1134:	31 05       	cpc	r19, r1
    1136:	2c f4       	brge	.+10     	; 0x1142 <DIO_U8_Set_Pin_value+0x5c>
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	71 f0       	breq	.+28     	; 0x115c <DIO_U8_Set_Pin_value+0x76>
    1140:	bc c0       	rjmp	.+376    	; 0x12ba <DIO_U8_Set_Pin_value+0x1d4>
    1142:	2d 81       	ldd	r18, Y+5	; 0x05
    1144:	3e 81       	ldd	r19, Y+6	; 0x06
    1146:	22 30       	cpi	r18, 0x02	; 2
    1148:	31 05       	cpc	r19, r1
    114a:	09 f4       	brne	.+2      	; 0x114e <DIO_U8_Set_Pin_value+0x68>
    114c:	5f c0       	rjmp	.+190    	; 0x120c <DIO_U8_Set_Pin_value+0x126>
    114e:	8d 81       	ldd	r24, Y+5	; 0x05
    1150:	9e 81       	ldd	r25, Y+6	; 0x06
    1152:	83 30       	cpi	r24, 0x03	; 3
    1154:	91 05       	cpc	r25, r1
    1156:	09 f4       	brne	.+2      	; 0x115a <DIO_U8_Set_Pin_value+0x74>
    1158:	85 c0       	rjmp	.+266    	; 0x1264 <DIO_U8_Set_Pin_value+0x17e>
    115a:	af c0       	rjmp	.+350    	; 0x12ba <DIO_U8_Set_Pin_value+0x1d4>
				{
				case PORTA_ID:
					Assign_Bit(DIO_U8_PORTA,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	a1 f4       	brne	.+40     	; 0x118a <DIO_U8_Set_Pin_value+0xa4>
    1162:	ab e3       	ldi	r26, 0x3B	; 59
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	eb e3       	ldi	r30, 0x3B	; 59
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_U8_Set_Pin_value+0x9a>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_U8_Set_Pin_value+0x96>
    1184:	84 2b       	or	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	98 c0       	rjmp	.+304    	; 0x12ba <DIO_U8_Set_Pin_value+0x1d4>
    118a:	ab e3       	ldi	r26, 0x3B	; 59
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	eb e3       	ldi	r30, 0x3B	; 59
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <DIO_U8_Set_Pin_value+0xc2>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <DIO_U8_Set_Pin_value+0xbe>
    11ac:	80 95       	com	r24
    11ae:	84 23       	and	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	83 c0       	rjmp	.+262    	; 0x12ba <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTB_ID:
					Assign_Bit(DIO_U8_PORTB,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	a1 f4       	brne	.+40     	; 0x11e2 <DIO_U8_Set_Pin_value+0xfc>
    11ba:	a8 e3       	ldi	r26, 0x38	; 56
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e8 e3       	ldi	r30, 0x38	; 56
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_U8_Set_Pin_value+0xf2>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_U8_Set_Pin_value+0xee>
    11dc:	84 2b       	or	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	6c c0       	rjmp	.+216    	; 0x12ba <DIO_U8_Set_Pin_value+0x1d4>
    11e2:	a8 e3       	ldi	r26, 0x38	; 56
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e8 e3       	ldi	r30, 0x38	; 56
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_U8_Set_Pin_value+0x11a>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO_U8_Set_Pin_value+0x116>
    1204:	80 95       	com	r24
    1206:	84 23       	and	r24, r20
    1208:	8c 93       	st	X, r24
    120a:	57 c0       	rjmp	.+174    	; 0x12ba <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTC_ID:
					Assign_Bit(DIO_U8_PORTC,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	a1 f4       	brne	.+40     	; 0x123a <DIO_U8_Set_Pin_value+0x154>
    1212:	a5 e3       	ldi	r26, 0x35	; 53
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e5 e3       	ldi	r30, 0x35	; 53
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_U8_Set_Pin_value+0x14a>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <DIO_U8_Set_Pin_value+0x146>
    1234:	84 2b       	or	r24, r20
    1236:	8c 93       	st	X, r24
    1238:	40 c0       	rjmp	.+128    	; 0x12ba <DIO_U8_Set_Pin_value+0x1d4>
    123a:	a5 e3       	ldi	r26, 0x35	; 53
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e5 e3       	ldi	r30, 0x35	; 53
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 2e       	mov	r0, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <DIO_U8_Set_Pin_value+0x172>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <DIO_U8_Set_Pin_value+0x16e>
    125c:	80 95       	com	r24
    125e:	84 23       	and	r24, r20
    1260:	8c 93       	st	X, r24
    1262:	2b c0       	rjmp	.+86     	; 0x12ba <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTD_ID:
					Assign_Bit(DIO_U8_PORTD,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	a1 f4       	brne	.+40     	; 0x1292 <DIO_U8_Set_Pin_value+0x1ac>
    126a:	a2 e3       	ldi	r26, 0x32	; 50
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e2 e3       	ldi	r30, 0x32	; 50
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_U8_Set_Pin_value+0x1a2>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_U8_Set_Pin_value+0x19e>
    128c:	84 2b       	or	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	14 c0       	rjmp	.+40     	; 0x12ba <DIO_U8_Set_Pin_value+0x1d4>
    1292:	a2 e3       	ldi	r26, 0x32	; 50
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e2 e3       	ldi	r30, 0x32	; 50
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_U8_Set_Pin_value+0x1ca>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_U8_Set_Pin_value+0x1c6>
    12b4:	80 95       	com	r24
    12b6:	84 23       	and	r24, r20
    12b8:	8c 93       	st	X, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    12ba:	93 e0       	ldi	r25, 0x03	; 3
    12bc:	9c 83       	std	Y+4, r25	; 0x04
    12be:	07 c0       	rjmp	.+14     	; 0x12ce <DIO_U8_Set_Pin_value+0x1e8>

				}
			}
			else
			{
				return WRONG_PIN_value;
    12c0:	1c 82       	std	Y+4, r1	; 0x04
    12c2:	05 c0       	rjmp	.+10     	; 0x12ce <DIO_U8_Set_Pin_value+0x1e8>
			}
		}
		else{
			return WRONG_PIN;
    12c4:	21 e0       	ldi	r18, 0x01	; 1
    12c6:	2c 83       	std	Y+4, r18	; 0x04
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_U8_Set_Pin_value+0x1e8>


	}
	else
	{
		return WRONG_PORT;
    12ca:	32 e0       	ldi	r19, 0x02	; 2
    12cc:	3c 83       	std	Y+4, r19	; 0x04
    12ce:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    12d0:	26 96       	adiw	r28, 0x06	; 6
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <DIO_U8_Set_Port_Value>:




u8 DIO_U8_Set_Port_Value(u8 Copy_U8_Port_ID  , u16 Copy_U8_PORT_value)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <DIO_U8_Set_Port_Value+0x6>
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <DIO_U8_Set_Port_Value+0x8>
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <DIO_U8_Set_Port_Value+0xa>
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	7b 83       	std	Y+3, r23	; 0x03
    12f4:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_PORT_value>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_PORT_value<=DIO_MAX_U8_PROT_ID))
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	9b 81       	ldd	r25, Y+3	; 0x03
    12fa:	84 30       	cpi	r24, 0x04	; 4
    12fc:	91 05       	cpc	r25, r1
    12fe:	08 f0       	brcs	.+2      	; 0x1302 <DIO_U8_Set_Port_Value+0x20>
    1300:	3d c0       	rjmp	.+122    	; 0x137c <DIO_U8_Set_Port_Value+0x9a>
	{
			if((Copy_U8_PORT_value)>=MIN_DIR_OR_VALUE&&(Copy_U8_PORT_value)<=MAX_DIR_OR_VALUE)
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	9b 81       	ldd	r25, Y+3	; 0x03
    1306:	8f 3f       	cpi	r24, 0xFF	; 255
    1308:	91 05       	cpc	r25, r1
    130a:	09 f0       	breq	.+2      	; 0x130e <DIO_U8_Set_Port_Value+0x2c>
    130c:	a8 f5       	brcc	.+106    	; 0x1378 <DIO_U8_Set_Port_Value+0x96>
			{
				switch(Copy_U8_Port_ID)
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	3e 83       	std	Y+6, r19	; 0x06
    1316:	2d 83       	std	Y+5, r18	; 0x05
    1318:	8d 81       	ldd	r24, Y+5	; 0x05
    131a:	9e 81       	ldd	r25, Y+6	; 0x06
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	91 05       	cpc	r25, r1
    1320:	d1 f0       	breq	.+52     	; 0x1356 <DIO_U8_Set_Port_Value+0x74>
    1322:	2d 81       	ldd	r18, Y+5	; 0x05
    1324:	3e 81       	ldd	r19, Y+6	; 0x06
    1326:	22 30       	cpi	r18, 0x02	; 2
    1328:	31 05       	cpc	r19, r1
    132a:	2c f4       	brge	.+10     	; 0x1336 <DIO_U8_Set_Port_Value+0x54>
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	9e 81       	ldd	r25, Y+6	; 0x06
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	61 f0       	breq	.+24     	; 0x134c <DIO_U8_Set_Port_Value+0x6a>
    1334:	1e c0       	rjmp	.+60     	; 0x1372 <DIO_U8_Set_Port_Value+0x90>
    1336:	2d 81       	ldd	r18, Y+5	; 0x05
    1338:	3e 81       	ldd	r19, Y+6	; 0x06
    133a:	22 30       	cpi	r18, 0x02	; 2
    133c:	31 05       	cpc	r19, r1
    133e:	81 f0       	breq	.+32     	; 0x1360 <DIO_U8_Set_Port_Value+0x7e>
    1340:	8d 81       	ldd	r24, Y+5	; 0x05
    1342:	9e 81       	ldd	r25, Y+6	; 0x06
    1344:	83 30       	cpi	r24, 0x03	; 3
    1346:	91 05       	cpc	r25, r1
    1348:	81 f0       	breq	.+32     	; 0x136a <DIO_U8_Set_Port_Value+0x88>
    134a:	13 c0       	rjmp	.+38     	; 0x1372 <DIO_U8_Set_Port_Value+0x90>
				{
				case PORTA_ID:
					DIO_U8_PORTA=Copy_U8_PORT_value;
    134c:	eb e3       	ldi	r30, 0x3B	; 59
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	80 83       	st	Z, r24
    1354:	0e c0       	rjmp	.+28     	; 0x1372 <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTB_ID:
					DIO_U8_PORTB=Copy_U8_PORT_value;
    1356:	e8 e3       	ldi	r30, 0x38	; 56
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	80 83       	st	Z, r24
    135e:	09 c0       	rjmp	.+18     	; 0x1372 <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTC_ID:
					DIO_U8_PORTC=Copy_U8_PORT_value;
    1360:	e5 e3       	ldi	r30, 0x35	; 53
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	80 83       	st	Z, r24
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTD_ID:
					DIO_U8_PORTD=Copy_U8_PORT_value;
    136a:	e2 e3       	ldi	r30, 0x32	; 50
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	80 83       	st	Z, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    1372:	93 e0       	ldi	r25, 0x03	; 3
    1374:	9c 83       	std	Y+4, r25	; 0x04
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <DIO_U8_Set_Port_Value+0x9e>

				}
			}
			else
			{
				return WRONG_PORT_VALUE;
    1378:	1c 82       	std	Y+4, r1	; 0x04
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_U8_Set_Port_Value+0x9e>


	}
	else
	{
		return WRONG_PORT;
    137c:	22 e0       	ldi	r18, 0x02	; 2
    137e:	2c 83       	std	Y+4, r18	; 0x04
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    1382:	26 96       	adiw	r28, 0x06	; 6
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <DIO_U8_Get_pin_value>:




u8 DIO_U8_Get_pin_value(u8 Copy_U8_Port_ID,u8 Copy_U8_Pin_ID , u8 *Copy_U8_Pin_Value)
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	28 97       	sbiw	r28, 0x08	; 8
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	6a 83       	std	Y+2, r22	; 0x02
    13ac:	5c 83       	std	Y+4, r21	; 0x04
    13ae:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	84 30       	cpi	r24, 0x04	; 4
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <DIO_U8_Get_pin_value+0x24>
    13b6:	78 c0       	rjmp	.+240    	; 0x14a8 <DIO_U8_Get_pin_value+0x114>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	88 30       	cpi	r24, 0x08	; 8
    13bc:	08 f0       	brcs	.+2      	; 0x13c0 <DIO_U8_Get_pin_value+0x2c>
    13be:	71 c0       	rjmp	.+226    	; 0x14a2 <DIO_U8_Get_pin_value+0x10e>
		{

			switch(Copy_U8_Port_ID)
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	3f 83       	std	Y+7, r19	; 0x07
    13c8:	2e 83       	std	Y+6, r18	; 0x06
    13ca:	4e 81       	ldd	r20, Y+6	; 0x06
    13cc:	5f 81       	ldd	r21, Y+7	; 0x07
    13ce:	41 30       	cpi	r20, 0x01	; 1
    13d0:	51 05       	cpc	r21, r1
    13d2:	59 f1       	breq	.+86     	; 0x142a <DIO_U8_Get_pin_value+0x96>
    13d4:	8e 81       	ldd	r24, Y+6	; 0x06
    13d6:	9f 81       	ldd	r25, Y+7	; 0x07
    13d8:	82 30       	cpi	r24, 0x02	; 2
    13da:	91 05       	cpc	r25, r1
    13dc:	34 f4       	brge	.+12     	; 0x13ea <DIO_U8_Get_pin_value+0x56>
    13de:	2e 81       	ldd	r18, Y+6	; 0x06
    13e0:	3f 81       	ldd	r19, Y+7	; 0x07
    13e2:	21 15       	cp	r18, r1
    13e4:	31 05       	cpc	r19, r1
    13e6:	69 f0       	breq	.+26     	; 0x1402 <DIO_U8_Get_pin_value+0x6e>
    13e8:	5b c0       	rjmp	.+182    	; 0x14a0 <DIO_U8_Get_pin_value+0x10c>
    13ea:	4e 81       	ldd	r20, Y+6	; 0x06
    13ec:	5f 81       	ldd	r21, Y+7	; 0x07
    13ee:	42 30       	cpi	r20, 0x02	; 2
    13f0:	51 05       	cpc	r21, r1
    13f2:	79 f1       	breq	.+94     	; 0x1452 <DIO_U8_Get_pin_value+0xbe>
    13f4:	8e 81       	ldd	r24, Y+6	; 0x06
    13f6:	9f 81       	ldd	r25, Y+7	; 0x07
    13f8:	83 30       	cpi	r24, 0x03	; 3
    13fa:	91 05       	cpc	r25, r1
    13fc:	09 f4       	brne	.+2      	; 0x1400 <DIO_U8_Get_pin_value+0x6c>
    13fe:	3d c0       	rjmp	.+122    	; 0x147a <DIO_U8_Get_pin_value+0xe6>
    1400:	4f c0       	rjmp	.+158    	; 0x14a0 <DIO_U8_Get_pin_value+0x10c>
							{
				case PORTA_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINA,Copy_U8_Pin_ID);
    1402:	e9 e3       	ldi	r30, 0x39	; 57
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	a9 01       	movw	r20, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_U8_Get_pin_value+0x86>
    1416:	55 95       	asr	r21
    1418:	47 95       	ror	r20
    141a:	8a 95       	dec	r24
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO_U8_Get_pin_value+0x82>
    141e:	ca 01       	movw	r24, r20
    1420:	81 70       	andi	r24, 0x01	; 1
    1422:	eb 81       	ldd	r30, Y+3	; 0x03
    1424:	fc 81       	ldd	r31, Y+4	; 0x04
    1426:	80 83       	st	Z, r24
    1428:	3b c0       	rjmp	.+118    	; 0x14a0 <DIO_U8_Get_pin_value+0x10c>
					break;
				case PORTB_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINB,Copy_U8_Pin_ID);
    142a:	e6 e3       	ldi	r30, 0x36	; 54
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a9 01       	movw	r20, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_U8_Get_pin_value+0xae>
    143e:	55 95       	asr	r21
    1440:	47 95       	ror	r20
    1442:	8a 95       	dec	r24
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DIO_U8_Get_pin_value+0xaa>
    1446:	ca 01       	movw	r24, r20
    1448:	81 70       	andi	r24, 0x01	; 1
    144a:	eb 81       	ldd	r30, Y+3	; 0x03
    144c:	fc 81       	ldd	r31, Y+4	; 0x04
    144e:	80 83       	st	Z, r24
    1450:	27 c0       	rjmp	.+78     	; 0x14a0 <DIO_U8_Get_pin_value+0x10c>
					break;
				case PORTC_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINC,Copy_U8_Pin_ID);
    1452:	e3 e3       	ldi	r30, 0x33	; 51
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	a9 01       	movw	r20, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <DIO_U8_Get_pin_value+0xd6>
    1466:	55 95       	asr	r21
    1468:	47 95       	ror	r20
    146a:	8a 95       	dec	r24
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <DIO_U8_Get_pin_value+0xd2>
    146e:	ca 01       	movw	r24, r20
    1470:	81 70       	andi	r24, 0x01	; 1
    1472:	eb 81       	ldd	r30, Y+3	; 0x03
    1474:	fc 81       	ldd	r31, Y+4	; 0x04
    1476:	80 83       	st	Z, r24
    1478:	13 c0       	rjmp	.+38     	; 0x14a0 <DIO_U8_Get_pin_value+0x10c>
					break;
				case PORTD_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
    147a:	e0 e3       	ldi	r30, 0x30	; 48
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	a9 01       	movw	r20, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <DIO_U8_Get_pin_value+0xfe>
    148e:	55 95       	asr	r21
    1490:	47 95       	ror	r20
    1492:	8a 95       	dec	r24
    1494:	e2 f7       	brpl	.-8      	; 0x148e <DIO_U8_Get_pin_value+0xfa>
    1496:	ca 01       	movw	r24, r20
    1498:	81 70       	andi	r24, 0x01	; 1
    149a:	eb 81       	ldd	r30, Y+3	; 0x03
    149c:	fc 81       	ldd	r31, Y+4	; 0x04
    149e:	80 83       	st	Z, r24
    14a0:	07 c0       	rjmp	.+14     	; 0x14b0 <DIO_U8_Get_pin_value+0x11c>
					break;
							}
		}
		else
		{
			return WRONG_PIN;
    14a2:	51 e0       	ldi	r21, 0x01	; 1
    14a4:	5d 83       	std	Y+5, r21	; 0x05
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_U8_Get_pin_value+0x118>
		}
	}
	else
	{
		return WRONG_PORT;
    14a8:	82 e0       	ldi	r24, 0x02	; 2
    14aa:	8d 83       	std	Y+5, r24	; 0x05
    14ac:	9d 81       	ldd	r25, Y+5	; 0x05
    14ae:	98 87       	std	Y+8, r25	; 0x08
	}
}
    14b0:	88 85       	ldd	r24, Y+8	; 0x08
    14b2:	28 96       	adiw	r28, 0x08	; 8
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <KPD_Init>:
/****************************************< GLOABAL FUNCTION DEFINTION >****************************/
/**************************************************************************************/


void KPD_Init()
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <KPD_Init+0x6>
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
	u8 COL_Index , ROW_Index ;

	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    14ce:	1a 82       	std	Y+2, r1	; 0x02
    14d0:	0f c0       	rjmp	.+30     	; 0x14f0 <KPD_Init+0x2c>
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_COLS_PORT  , KPD_AU8_COLS_PINS[COL_Index] , PIN_OUTPUT  ) ;
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	88 2f       	mov	r24, r24
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	fc 01       	movw	r30, r24
    14da:	ed 5d       	subi	r30, 0xDD	; 221
    14dc:	fe 4f       	sbci	r31, 0xFE	; 254
    14de:	90 81       	ld	r25, Z
    14e0:	83 e0       	ldi	r24, 0x03	; 3
    14e2:	69 2f       	mov	r22, r25
    14e4:	41 e0       	ldi	r20, 0x01	; 1
    14e6:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DIO_U8_Set_Pin_Dir>

void KPD_Init()
{
	u8 COL_Index , ROW_Index ;

	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	8f 5f       	subi	r24, 0xFF	; 255
    14ee:	8a 83       	std	Y+2, r24	; 0x02
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	84 30       	cpi	r24, 0x04	; 4
    14f4:	70 f3       	brcs	.-36     	; 0x14d2 <KPD_Init+0xe>
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_COLS_PORT  , KPD_AU8_COLS_PINS[COL_Index] , PIN_OUTPUT  ) ;
	}

	for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    14f6:	19 82       	std	Y+1, r1	; 0x01
    14f8:	1b c0       	rjmp	.+54     	; 0x1530 <KPD_Init+0x6c>
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_ROWS_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , PIN_INPUT ) ;
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	88 2f       	mov	r24, r24
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	fc 01       	movw	r30, r24
    1502:	e1 5e       	subi	r30, 0xE1	; 225
    1504:	fe 4f       	sbci	r31, 0xFE	; 254
    1506:	90 81       	ld	r25, Z
    1508:	83 e0       	ldi	r24, 0x03	; 3
    150a:	69 2f       	mov	r22, r25
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <DIO_U8_Set_Pin_Dir>
		DIO_U8_Set_Pin_value( KPD_U8_ROWS_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , PIN_HIGH ) ;
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	88 2f       	mov	r24, r24
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	fc 01       	movw	r30, r24
    151a:	e1 5e       	subi	r30, 0xE1	; 225
    151c:	fe 4f       	sbci	r31, 0xFE	; 254
    151e:	90 81       	ld	r25, Z
    1520:	83 e0       	ldi	r24, 0x03	; 3
    1522:	69 2f       	mov	r22, r25
    1524:	41 e0       	ldi	r20, 0x01	; 1
    1526:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_COLS_PORT  , KPD_AU8_COLS_PINS[COL_Index] , PIN_OUTPUT  ) ;
	}

	for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	8f 5f       	subi	r24, 0xFF	; 255
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	84 30       	cpi	r24, 0x04	; 4
    1534:	10 f3       	brcs	.-60     	; 0x14fa <KPD_Init+0x36>
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_ROWS_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , PIN_INPUT ) ;
		DIO_U8_Set_Pin_value( KPD_U8_ROWS_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , PIN_HIGH ) ;
	}
}
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <KPD_Void_GET_Status>:




u8 KPD_Void_GET_Status ( void )
{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	00 d0       	rcall	.+0      	; 0x1546 <KPD_Void_GET_Status+0x6>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <KPD_Void_GET_Status+0x8>
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
	u8 COL_Index , ROW_Index ;
	u8  KPD_Status , Presskey = KPD_Key_NotPressed ;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	89 83       	std	Y+1, r24	; 0x01
	static u8 KPD_ARR [KPD_ROWS][KPD_COLS] = KPD_KEYS ;
while(1)
{
	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    1550:	1b 82       	std	Y+3, r1	; 0x03
    1552:	63 c0       	rjmp	.+198    	; 0x161a <KPD_Void_GET_Status+0xda>
	{
		DIO_U8_Set_Pin_value( KPD_U8_COLS_PORT , KPD_AU8_COLS_PINS[COL_Index] , PIN_LOW  ) ;
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	88 2f       	mov	r24, r24
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	fc 01       	movw	r30, r24
    155c:	ed 5d       	subi	r30, 0xDD	; 221
    155e:	fe 4f       	sbci	r31, 0xFE	; 254
    1560:	90 81       	ld	r25, Z
    1562:	83 e0       	ldi	r24, 0x03	; 3
    1564:	69 2f       	mov	r22, r25
    1566:	40 e0       	ldi	r20, 0x00	; 0
    1568:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>

		for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    156c:	1a 82       	std	Y+2, r1	; 0x02
    156e:	42 c0       	rjmp	.+132    	; 0x15f4 <KPD_Void_GET_Status+0xb4>
		{
			// Key_Num = COL_Index + ( ROW_Index * KPD_ROWS ) ;
			DIO_U8_Get_pin_value ( KPD_U8_ROWS_PORT , KPD_AU8_ROWS_PINS[ROW_Index] , &KPD_Status ) ;
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	88 2f       	mov	r24, r24
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	fc 01       	movw	r30, r24
    1578:	e1 5e       	subi	r30, 0xE1	; 225
    157a:	fe 4f       	sbci	r31, 0xFE	; 254
    157c:	90 81       	ld	r25, Z
    157e:	9e 01       	movw	r18, r28
    1580:	2c 5f       	subi	r18, 0xFC	; 252
    1582:	3f 4f       	sbci	r19, 0xFF	; 255
    1584:	83 e0       	ldi	r24, 0x03	; 3
    1586:	69 2f       	mov	r22, r25
    1588:	a9 01       	movw	r20, r18
    158a:	0e 94 ca 09 	call	0x1394	; 0x1394 <DIO_U8_Get_pin_value>

			if ( KPD_Status == KPD_Key_Pressed )
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	88 23       	and	r24, r24
    1592:	69 f5       	brne	.+90     	; 0x15ee <KPD_Void_GET_Status+0xae>
			{
				Presskey = KPD_ARR[ROW_Index][COL_Index] ;
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	48 2f       	mov	r20, r24
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	ca 01       	movw	r24, r20
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	82 0f       	add	r24, r18
    15ac:	93 1f       	adc	r25, r19
    15ae:	fc 01       	movw	r30, r24
    15b0:	e9 5d       	subi	r30, 0xD9	; 217
    15b2:	fe 4f       	sbci	r31, 0xFE	; 254
    15b4:	80 81       	ld	r24, Z
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	0f c0       	rjmp	.+30     	; 0x15d8 <KPD_Void_GET_Status+0x98>

			while (KPD_Status == KPD_Key_Pressed)
			{
				DIO_U8_Get_pin_value( KPD_U8_ROWS_PORT , KPD_AU8_ROWS_PINS[ROW_Index] , &KPD_Status ) ;
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	88 2f       	mov	r24, r24
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	fc 01       	movw	r30, r24
    15c2:	e1 5e       	subi	r30, 0xE1	; 225
    15c4:	fe 4f       	sbci	r31, 0xFE	; 254
    15c6:	90 81       	ld	r25, Z
    15c8:	9e 01       	movw	r18, r28
    15ca:	2c 5f       	subi	r18, 0xFC	; 252
    15cc:	3f 4f       	sbci	r19, 0xFF	; 255
    15ce:	83 e0       	ldi	r24, 0x03	; 3
    15d0:	69 2f       	mov	r22, r25
    15d2:	a9 01       	movw	r20, r18
    15d4:	0e 94 ca 09 	call	0x1394	; 0x1394 <DIO_U8_Get_pin_value>

			if ( KPD_Status == KPD_Key_Pressed )
			{
				Presskey = KPD_ARR[ROW_Index][COL_Index] ;

			while (KPD_Status == KPD_Key_Pressed)
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	88 23       	and	r24, r24
    15dc:	71 f3       	breq	.-36     	; 0x15ba <KPD_Void_GET_Status+0x7a>
			{
				DIO_U8_Get_pin_value( KPD_U8_ROWS_PORT , KPD_AU8_ROWS_PINS[ROW_Index] , &KPD_Status ) ;
			}
			return Presskey ;
    15de:	89 81       	ldd	r24, Y+1	; 0x01
		}

		DIO_U8_Set_Pin_value( KPD_U8_COLS_PORT , KPD_AU8_COLS_PINS[COL_Index] , PIN_HIGH ) ;
	}
}
}
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret
{
	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
	{
		DIO_U8_Set_Pin_value( KPD_U8_COLS_PORT , KPD_AU8_COLS_PINS[COL_Index] , PIN_LOW  ) ;

		for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	8f 5f       	subi	r24, 0xFF	; 255
    15f2:	8a 83       	std	Y+2, r24	; 0x02
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	84 30       	cpi	r24, 0x04	; 4
    15f8:	08 f4       	brcc	.+2      	; 0x15fc <KPD_Void_GET_Status+0xbc>
    15fa:	ba cf       	rjmp	.-140    	; 0x1570 <KPD_Void_GET_Status+0x30>
			return Presskey ;
			}

		}

		DIO_U8_Set_Pin_value( KPD_U8_COLS_PORT , KPD_AU8_COLS_PINS[COL_Index] , PIN_HIGH ) ;
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	88 2f       	mov	r24, r24
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	fc 01       	movw	r30, r24
    1604:	ed 5d       	subi	r30, 0xDD	; 221
    1606:	fe 4f       	sbci	r31, 0xFE	; 254
    1608:	90 81       	ld	r25, Z
    160a:	83 e0       	ldi	r24, 0x03	; 3
    160c:	69 2f       	mov	r22, r25
    160e:	41 e0       	ldi	r20, 0x01	; 1
    1610:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
	u8 COL_Index , ROW_Index ;
	u8  KPD_Status , Presskey = KPD_Key_NotPressed ;
	static u8 KPD_ARR [KPD_ROWS][KPD_COLS] = KPD_KEYS ;
while(1)
{
	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	8f 5f       	subi	r24, 0xFF	; 255
    1618:	8b 83       	std	Y+3, r24	; 0x03
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	84 30       	cpi	r24, 0x04	; 4
    161e:	08 f4       	brcc	.+2      	; 0x1622 <KPD_Void_GET_Status+0xe2>
    1620:	99 cf       	rjmp	.-206    	; 0x1554 <KPD_Void_GET_Status+0x14>
    1622:	96 cf       	rjmp	.-212    	; 0x1550 <KPD_Void_GET_Status+0x10>

00001624 <LCD_void_Init>:
#include"LCD_private.h"




void LCD_void_Init(void){
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	cc 54       	subi	r28, 0x4C	; 76
    1632:	d0 40       	sbci	r29, 0x00	; 0
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	fe 01       	movw	r30, r28
    1640:	e7 5b       	subi	r30, 0xB7	; 183
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	ac e0       	ldi	r26, 0x0C	; 12
    164a:	b2 e4       	ldi	r27, 0x42	; 66
    164c:	80 83       	st	Z, r24
    164e:	91 83       	std	Z+1, r25	; 0x01
    1650:	a2 83       	std	Z+2, r26	; 0x02
    1652:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1654:	8e 01       	movw	r16, r28
    1656:	0b 5b       	subi	r16, 0xBB	; 187
    1658:	1f 4f       	sbci	r17, 0xFF	; 255
    165a:	fe 01       	movw	r30, r28
    165c:	e7 5b       	subi	r30, 0xB7	; 183
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	60 81       	ld	r22, Z
    1662:	71 81       	ldd	r23, Z+1	; 0x01
    1664:	82 81       	ldd	r24, Z+2	; 0x02
    1666:	93 81       	ldd	r25, Z+3	; 0x03
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	4a ef       	ldi	r20, 0xFA	; 250
    166e:	54 e4       	ldi	r21, 0x44	; 68
    1670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	f8 01       	movw	r30, r16
    167a:	80 83       	st	Z, r24
    167c:	91 83       	std	Z+1, r25	; 0x01
    167e:	a2 83       	std	Z+2, r26	; 0x02
    1680:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1682:	fe 01       	movw	r30, r28
    1684:	eb 5b       	subi	r30, 0xBB	; 187
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	60 81       	ld	r22, Z
    168a:	71 81       	ldd	r23, Z+1	; 0x01
    168c:	82 81       	ldd	r24, Z+2	; 0x02
    168e:	93 81       	ldd	r25, Z+3	; 0x03
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e8       	ldi	r20, 0x80	; 128
    1696:	5f e3       	ldi	r21, 0x3F	; 63
    1698:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    169c:	88 23       	and	r24, r24
    169e:	44 f4       	brge	.+16     	; 0x16b0 <LCD_void_Init+0x8c>
		__ticks = 1;
    16a0:	fe 01       	movw	r30, r28
    16a2:	ed 5b       	subi	r30, 0xBD	; 189
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	91 83       	std	Z+1, r25	; 0x01
    16ac:	80 83       	st	Z, r24
    16ae:	64 c0       	rjmp	.+200    	; 0x1778 <LCD_void_Init+0x154>
	else if (__tmp > 65535)
    16b0:	fe 01       	movw	r30, r28
    16b2:	eb 5b       	subi	r30, 0xBB	; 187
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	60 81       	ld	r22, Z
    16b8:	71 81       	ldd	r23, Z+1	; 0x01
    16ba:	82 81       	ldd	r24, Z+2	; 0x02
    16bc:	93 81       	ldd	r25, Z+3	; 0x03
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	3f ef       	ldi	r19, 0xFF	; 255
    16c2:	4f e7       	ldi	r20, 0x7F	; 127
    16c4:	57 e4       	ldi	r21, 0x47	; 71
    16c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16ca:	18 16       	cp	r1, r24
    16cc:	0c f0       	brlt	.+2      	; 0x16d0 <LCD_void_Init+0xac>
    16ce:	43 c0       	rjmp	.+134    	; 0x1756 <LCD_void_Init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d0:	fe 01       	movw	r30, r28
    16d2:	e7 5b       	subi	r30, 0xB7	; 183
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	60 81       	ld	r22, Z
    16d8:	71 81       	ldd	r23, Z+1	; 0x01
    16da:	82 81       	ldd	r24, Z+2	; 0x02
    16dc:	93 81       	ldd	r25, Z+3	; 0x03
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e2       	ldi	r20, 0x20	; 32
    16e4:	51 e4       	ldi	r21, 0x41	; 65
    16e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	8e 01       	movw	r16, r28
    16f0:	0d 5b       	subi	r16, 0xBD	; 189
    16f2:	1f 4f       	sbci	r17, 0xFF	; 255
    16f4:	bc 01       	movw	r22, r24
    16f6:	cd 01       	movw	r24, r26
    16f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	f8 01       	movw	r30, r16
    1702:	91 83       	std	Z+1, r25	; 0x01
    1704:	80 83       	st	Z, r24
    1706:	1f c0       	rjmp	.+62     	; 0x1746 <LCD_void_Init+0x122>
    1708:	fe 01       	movw	r30, r28
    170a:	ef 5b       	subi	r30, 0xBF	; 191
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	88 ec       	ldi	r24, 0xC8	; 200
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	91 83       	std	Z+1, r25	; 0x01
    1714:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1716:	fe 01       	movw	r30, r28
    1718:	ef 5b       	subi	r30, 0xBF	; 191
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	80 81       	ld	r24, Z
    171e:	91 81       	ldd	r25, Z+1	; 0x01
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <LCD_void_Init+0xfc>
    1724:	fe 01       	movw	r30, r28
    1726:	ef 5b       	subi	r30, 0xBF	; 191
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	91 83       	std	Z+1, r25	; 0x01
    172c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172e:	de 01       	movw	r26, r28
    1730:	ad 5b       	subi	r26, 0xBD	; 189
    1732:	bf 4f       	sbci	r27, 0xFF	; 255
    1734:	fe 01       	movw	r30, r28
    1736:	ed 5b       	subi	r30, 0xBD	; 189
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	80 81       	ld	r24, Z
    173c:	91 81       	ldd	r25, Z+1	; 0x01
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	11 96       	adiw	r26, 0x01	; 1
    1742:	9c 93       	st	X, r25
    1744:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1746:	fe 01       	movw	r30, r28
    1748:	ed 5b       	subi	r30, 0xBD	; 189
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	80 81       	ld	r24, Z
    174e:	91 81       	ldd	r25, Z+1	; 0x01
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	d1 f6       	brne	.-76     	; 0x1708 <LCD_void_Init+0xe4>
    1754:	24 c0       	rjmp	.+72     	; 0x179e <LCD_void_Init+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1756:	8e 01       	movw	r16, r28
    1758:	0d 5b       	subi	r16, 0xBD	; 189
    175a:	1f 4f       	sbci	r17, 0xFF	; 255
    175c:	fe 01       	movw	r30, r28
    175e:	eb 5b       	subi	r30, 0xBB	; 187
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	60 81       	ld	r22, Z
    1764:	71 81       	ldd	r23, Z+1	; 0x01
    1766:	82 81       	ldd	r24, Z+2	; 0x02
    1768:	93 81       	ldd	r25, Z+3	; 0x03
    176a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	f8 01       	movw	r30, r16
    1774:	91 83       	std	Z+1, r25	; 0x01
    1776:	80 83       	st	Z, r24
    1778:	fe 01       	movw	r30, r28
    177a:	ed 5b       	subi	r30, 0xBD	; 189
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	80 81       	ld	r24, Z
    1780:	91 81       	ldd	r25, Z+1	; 0x01
    1782:	fe 01       	movw	r30, r28
    1784:	ff 96       	adiw	r30, 0x3f	; 63
    1786:	91 83       	std	Z+1, r25	; 0x01
    1788:	80 83       	st	Z, r24
    178a:	fe 01       	movw	r30, r28
    178c:	ff 96       	adiw	r30, 0x3f	; 63
    178e:	80 81       	ld	r24, Z
    1790:	91 81       	ldd	r25, Z+1	; 0x01
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	f1 f7       	brne	.-4      	; 0x1792 <LCD_void_Init+0x16e>
    1796:	fe 01       	movw	r30, r28
    1798:	ff 96       	adiw	r30, 0x3f	; 63
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	80 83       	st	Z, r24
#elif LCD_U8_MODE==LCD_U8_4_BIT_MODE
		/*code of send intializtion of 4 bit mode*/
		/*delay more than 30ms*/
		_delay_ms(35);
		/*send function set */
		LCD_void_Write_CMD(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    179e:	83 e3       	ldi	r24, 0x33	; 51
    17a0:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_void_Write_CMD>
		LCD_void_Write_CMD(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    17a4:	82 e3       	ldi	r24, 0x32	; 50
    17a6:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_void_Write_CMD>
		LCD_void_Write_CMD(LCD_Function_set_4_bit_2_line_mode);
    17aa:	88 e2       	ldi	r24, 0x28	; 40
    17ac:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_void_Write_CMD>
		LCD_void_Write_CMD(LCD_Function_set_4_bit_2_line_mode);
    17b0:	88 e2       	ldi	r24, 0x28	; 40
    17b2:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_void_Write_CMD>
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	a0 e2       	ldi	r26, 0x20	; 32
    17bc:	b2 e4       	ldi	r27, 0x42	; 66
    17be:	8b af       	std	Y+59, r24	; 0x3b
    17c0:	9c af       	std	Y+60, r25	; 0x3c
    17c2:	ad af       	std	Y+61, r26	; 0x3d
    17c4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17c6:	6b ad       	ldd	r22, Y+59	; 0x3b
    17c8:	7c ad       	ldd	r23, Y+60	; 0x3c
    17ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    17cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    17ce:	2b ea       	ldi	r18, 0xAB	; 171
    17d0:	3a ea       	ldi	r19, 0xAA	; 170
    17d2:	4a e2       	ldi	r20, 0x2A	; 42
    17d4:	50 e4       	ldi	r21, 0x40	; 64
    17d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	8f ab       	std	Y+55, r24	; 0x37
    17e0:	98 af       	std	Y+56, r25	; 0x38
    17e2:	a9 af       	std	Y+57, r26	; 0x39
    17e4:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    17e6:	6f a9       	ldd	r22, Y+55	; 0x37
    17e8:	78 ad       	ldd	r23, Y+56	; 0x38
    17ea:	89 ad       	ldd	r24, Y+57	; 0x39
    17ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e8       	ldi	r20, 0x80	; 128
    17f4:	5f e3       	ldi	r21, 0x3F	; 63
    17f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17fa:	88 23       	and	r24, r24
    17fc:	1c f4       	brge	.+6      	; 0x1804 <LCD_void_Init+0x1e0>
		__ticks = 1;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	8e ab       	std	Y+54, r24	; 0x36
    1802:	91 c0       	rjmp	.+290    	; 0x1926 <LCD_void_Init+0x302>
	else if (__tmp > 255)
    1804:	6f a9       	ldd	r22, Y+55	; 0x37
    1806:	78 ad       	ldd	r23, Y+56	; 0x38
    1808:	89 ad       	ldd	r24, Y+57	; 0x39
    180a:	9a ad       	ldd	r25, Y+58	; 0x3a
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	4f e7       	ldi	r20, 0x7F	; 127
    1812:	53 e4       	ldi	r21, 0x43	; 67
    1814:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1818:	18 16       	cp	r1, r24
    181a:	0c f0       	brlt	.+2      	; 0x181e <LCD_void_Init+0x1fa>
    181c:	7b c0       	rjmp	.+246    	; 0x1914 <LCD_void_Init+0x2f0>
	{
		_delay_ms(__us / 1000.0);
    181e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1820:	7c ad       	ldd	r23, Y+60	; 0x3c
    1822:	8d ad       	ldd	r24, Y+61	; 0x3d
    1824:	9e ad       	ldd	r25, Y+62	; 0x3e
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	4a e7       	ldi	r20, 0x7A	; 122
    182c:	54 e4       	ldi	r21, 0x44	; 68
    182e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	8a ab       	std	Y+50, r24	; 0x32
    1838:	9b ab       	std	Y+51, r25	; 0x33
    183a:	ac ab       	std	Y+52, r26	; 0x34
    183c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183e:	6a a9       	ldd	r22, Y+50	; 0x32
    1840:	7b a9       	ldd	r23, Y+51	; 0x33
    1842:	8c a9       	ldd	r24, Y+52	; 0x34
    1844:	9d a9       	ldd	r25, Y+53	; 0x35
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	4a ef       	ldi	r20, 0xFA	; 250
    184c:	54 e4       	ldi	r21, 0x44	; 68
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	8e a7       	std	Y+46, r24	; 0x2e
    1858:	9f a7       	std	Y+47, r25	; 0x2f
    185a:	a8 ab       	std	Y+48, r26	; 0x30
    185c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    185e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1860:	7f a5       	ldd	r23, Y+47	; 0x2f
    1862:	88 a9       	ldd	r24, Y+48	; 0x30
    1864:	99 a9       	ldd	r25, Y+49	; 0x31
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e8       	ldi	r20, 0x80	; 128
    186c:	5f e3       	ldi	r21, 0x3F	; 63
    186e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1872:	88 23       	and	r24, r24
    1874:	2c f4       	brge	.+10     	; 0x1880 <LCD_void_Init+0x25c>
		__ticks = 1;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	9d a7       	std	Y+45, r25	; 0x2d
    187c:	8c a7       	std	Y+44, r24	; 0x2c
    187e:	3f c0       	rjmp	.+126    	; 0x18fe <LCD_void_Init+0x2da>
	else if (__tmp > 65535)
    1880:	6e a5       	ldd	r22, Y+46	; 0x2e
    1882:	7f a5       	ldd	r23, Y+47	; 0x2f
    1884:	88 a9       	ldd	r24, Y+48	; 0x30
    1886:	99 a9       	ldd	r25, Y+49	; 0x31
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	3f ef       	ldi	r19, 0xFF	; 255
    188c:	4f e7       	ldi	r20, 0x7F	; 127
    188e:	57 e4       	ldi	r21, 0x47	; 71
    1890:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1894:	18 16       	cp	r1, r24
    1896:	4c f5       	brge	.+82     	; 0x18ea <LCD_void_Init+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1898:	6a a9       	ldd	r22, Y+50	; 0x32
    189a:	7b a9       	ldd	r23, Y+51	; 0x33
    189c:	8c a9       	ldd	r24, Y+52	; 0x34
    189e:	9d a9       	ldd	r25, Y+53	; 0x35
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e2       	ldi	r20, 0x20	; 32
    18a6:	51 e4       	ldi	r21, 0x41	; 65
    18a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	bc 01       	movw	r22, r24
    18b2:	cd 01       	movw	r24, r26
    18b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	9d a7       	std	Y+45, r25	; 0x2d
    18be:	8c a7       	std	Y+44, r24	; 0x2c
    18c0:	0f c0       	rjmp	.+30     	; 0x18e0 <LCD_void_Init+0x2bc>
    18c2:	88 ec       	ldi	r24, 0xC8	; 200
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	9b a7       	std	Y+43, r25	; 0x2b
    18c8:	8a a7       	std	Y+42, r24	; 0x2a
    18ca:	8a a5       	ldd	r24, Y+42	; 0x2a
    18cc:	9b a5       	ldd	r25, Y+43	; 0x2b
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <LCD_void_Init+0x2aa>
    18d2:	9b a7       	std	Y+43, r25	; 0x2b
    18d4:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d6:	8c a5       	ldd	r24, Y+44	; 0x2c
    18d8:	9d a5       	ldd	r25, Y+45	; 0x2d
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	9d a7       	std	Y+45, r25	; 0x2d
    18de:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e0:	8c a5       	ldd	r24, Y+44	; 0x2c
    18e2:	9d a5       	ldd	r25, Y+45	; 0x2d
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	69 f7       	brne	.-38     	; 0x18c2 <LCD_void_Init+0x29e>
    18e8:	24 c0       	rjmp	.+72     	; 0x1932 <LCD_void_Init+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ea:	6e a5       	ldd	r22, Y+46	; 0x2e
    18ec:	7f a5       	ldd	r23, Y+47	; 0x2f
    18ee:	88 a9       	ldd	r24, Y+48	; 0x30
    18f0:	99 a9       	ldd	r25, Y+49	; 0x31
    18f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	9d a7       	std	Y+45, r25	; 0x2d
    18fc:	8c a7       	std	Y+44, r24	; 0x2c
    18fe:	8c a5       	ldd	r24, Y+44	; 0x2c
    1900:	9d a5       	ldd	r25, Y+45	; 0x2d
    1902:	99 a7       	std	Y+41, r25	; 0x29
    1904:	88 a7       	std	Y+40, r24	; 0x28
    1906:	88 a5       	ldd	r24, Y+40	; 0x28
    1908:	99 a5       	ldd	r25, Y+41	; 0x29
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	f1 f7       	brne	.-4      	; 0x190a <LCD_void_Init+0x2e6>
    190e:	99 a7       	std	Y+41, r25	; 0x29
    1910:	88 a7       	std	Y+40, r24	; 0x28
    1912:	0f c0       	rjmp	.+30     	; 0x1932 <LCD_void_Init+0x30e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1914:	6f a9       	ldd	r22, Y+55	; 0x37
    1916:	78 ad       	ldd	r23, Y+56	; 0x38
    1918:	89 ad       	ldd	r24, Y+57	; 0x39
    191a:	9a ad       	ldd	r25, Y+58	; 0x3a
    191c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	8e ab       	std	Y+54, r24	; 0x36
    1926:	8e a9       	ldd	r24, Y+54	; 0x36
    1928:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    192a:	8f a1       	ldd	r24, Y+39	; 0x27
    192c:	8a 95       	dec	r24
    192e:	f1 f7       	brne	.-4      	; 0x192c <LCD_void_Init+0x308>
    1930:	8f a3       	std	Y+39, r24	; 0x27
			/*delay more than 39us*/
		_delay_us(40);
		/*send cursor mode */
		LCD_void_Write_CMD(LCD_Cursor_OFF);
    1932:	8c e0       	ldi	r24, 0x0C	; 12
    1934:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_void_Write_CMD>
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	a0 e2       	ldi	r26, 0x20	; 32
    193e:	b2 e4       	ldi	r27, 0x42	; 66
    1940:	8b a3       	std	Y+35, r24	; 0x23
    1942:	9c a3       	std	Y+36, r25	; 0x24
    1944:	ad a3       	std	Y+37, r26	; 0x25
    1946:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1948:	6b a1       	ldd	r22, Y+35	; 0x23
    194a:	7c a1       	ldd	r23, Y+36	; 0x24
    194c:	8d a1       	ldd	r24, Y+37	; 0x25
    194e:	9e a1       	ldd	r25, Y+38	; 0x26
    1950:	2b ea       	ldi	r18, 0xAB	; 171
    1952:	3a ea       	ldi	r19, 0xAA	; 170
    1954:	4a e2       	ldi	r20, 0x2A	; 42
    1956:	50 e4       	ldi	r21, 0x40	; 64
    1958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	8f 8f       	std	Y+31, r24	; 0x1f
    1962:	98 a3       	std	Y+32, r25	; 0x20
    1964:	a9 a3       	std	Y+33, r26	; 0x21
    1966:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1968:	6f 8d       	ldd	r22, Y+31	; 0x1f
    196a:	78 a1       	ldd	r23, Y+32	; 0x20
    196c:	89 a1       	ldd	r24, Y+33	; 0x21
    196e:	9a a1       	ldd	r25, Y+34	; 0x22
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e8       	ldi	r20, 0x80	; 128
    1976:	5f e3       	ldi	r21, 0x3F	; 63
    1978:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    197c:	88 23       	and	r24, r24
    197e:	1c f4       	brge	.+6      	; 0x1986 <LCD_void_Init+0x362>
		__ticks = 1;
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	8e 8f       	std	Y+30, r24	; 0x1e
    1984:	91 c0       	rjmp	.+290    	; 0x1aa8 <LCD_void_Init+0x484>
	else if (__tmp > 255)
    1986:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1988:	78 a1       	ldd	r23, Y+32	; 0x20
    198a:	89 a1       	ldd	r24, Y+33	; 0x21
    198c:	9a a1       	ldd	r25, Y+34	; 0x22
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	4f e7       	ldi	r20, 0x7F	; 127
    1994:	53 e4       	ldi	r21, 0x43	; 67
    1996:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    199a:	18 16       	cp	r1, r24
    199c:	0c f0       	brlt	.+2      	; 0x19a0 <LCD_void_Init+0x37c>
    199e:	7b c0       	rjmp	.+246    	; 0x1a96 <LCD_void_Init+0x472>
	{
		_delay_ms(__us / 1000.0);
    19a0:	6b a1       	ldd	r22, Y+35	; 0x23
    19a2:	7c a1       	ldd	r23, Y+36	; 0x24
    19a4:	8d a1       	ldd	r24, Y+37	; 0x25
    19a6:	9e a1       	ldd	r25, Y+38	; 0x26
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	4a e7       	ldi	r20, 0x7A	; 122
    19ae:	54 e4       	ldi	r21, 0x44	; 68
    19b0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	8a 8f       	std	Y+26, r24	; 0x1a
    19ba:	9b 8f       	std	Y+27, r25	; 0x1b
    19bc:	ac 8f       	std	Y+28, r26	; 0x1c
    19be:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    19c2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    19c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19c6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	4a ef       	ldi	r20, 0xFA	; 250
    19ce:	54 e4       	ldi	r21, 0x44	; 68
    19d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	8e 8b       	std	Y+22, r24	; 0x16
    19da:	9f 8b       	std	Y+23, r25	; 0x17
    19dc:	a8 8f       	std	Y+24, r26	; 0x18
    19de:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    19e0:	6e 89       	ldd	r22, Y+22	; 0x16
    19e2:	7f 89       	ldd	r23, Y+23	; 0x17
    19e4:	88 8d       	ldd	r24, Y+24	; 0x18
    19e6:	99 8d       	ldd	r25, Y+25	; 0x19
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e8       	ldi	r20, 0x80	; 128
    19ee:	5f e3       	ldi	r21, 0x3F	; 63
    19f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <LCD_void_Init+0x3de>
		__ticks = 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9d 8b       	std	Y+21, r25	; 0x15
    19fe:	8c 8b       	std	Y+20, r24	; 0x14
    1a00:	3f c0       	rjmp	.+126    	; 0x1a80 <LCD_void_Init+0x45c>
	else if (__tmp > 65535)
    1a02:	6e 89       	ldd	r22, Y+22	; 0x16
    1a04:	7f 89       	ldd	r23, Y+23	; 0x17
    1a06:	88 8d       	ldd	r24, Y+24	; 0x18
    1a08:	99 8d       	ldd	r25, Y+25	; 0x19
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	3f ef       	ldi	r19, 0xFF	; 255
    1a0e:	4f e7       	ldi	r20, 0x7F	; 127
    1a10:	57 e4       	ldi	r21, 0x47	; 71
    1a12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a16:	18 16       	cp	r1, r24
    1a18:	4c f5       	brge	.+82     	; 0x1a6c <LCD_void_Init+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a1c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a1e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a20:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e2       	ldi	r20, 0x20	; 32
    1a28:	51 e4       	ldi	r21, 0x41	; 65
    1a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	bc 01       	movw	r22, r24
    1a34:	cd 01       	movw	r24, r26
    1a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	9d 8b       	std	Y+21, r25	; 0x15
    1a40:	8c 8b       	std	Y+20, r24	; 0x14
    1a42:	0f c0       	rjmp	.+30     	; 0x1a62 <LCD_void_Init+0x43e>
    1a44:	88 ec       	ldi	r24, 0xC8	; 200
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9b 8b       	std	Y+19, r25	; 0x13
    1a4a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a4c:	8a 89       	ldd	r24, Y+18	; 0x12
    1a4e:	9b 89       	ldd	r25, Y+19	; 0x13
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <LCD_void_Init+0x42c>
    1a54:	9b 8b       	std	Y+19, r25	; 0x13
    1a56:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a58:	8c 89       	ldd	r24, Y+20	; 0x14
    1a5a:	9d 89       	ldd	r25, Y+21	; 0x15
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	9d 8b       	std	Y+21, r25	; 0x15
    1a60:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a62:	8c 89       	ldd	r24, Y+20	; 0x14
    1a64:	9d 89       	ldd	r25, Y+21	; 0x15
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	69 f7       	brne	.-38     	; 0x1a44 <LCD_void_Init+0x420>
    1a6a:	24 c0       	rjmp	.+72     	; 0x1ab4 <LCD_void_Init+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6c:	6e 89       	ldd	r22, Y+22	; 0x16
    1a6e:	7f 89       	ldd	r23, Y+23	; 0x17
    1a70:	88 8d       	ldd	r24, Y+24	; 0x18
    1a72:	99 8d       	ldd	r25, Y+25	; 0x19
    1a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9d 8b       	std	Y+21, r25	; 0x15
    1a7e:	8c 8b       	std	Y+20, r24	; 0x14
    1a80:	8c 89       	ldd	r24, Y+20	; 0x14
    1a82:	9d 89       	ldd	r25, Y+21	; 0x15
    1a84:	99 8b       	std	Y+17, r25	; 0x11
    1a86:	88 8b       	std	Y+16, r24	; 0x10
    1a88:	88 89       	ldd	r24, Y+16	; 0x10
    1a8a:	99 89       	ldd	r25, Y+17	; 0x11
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_void_Init+0x468>
    1a90:	99 8b       	std	Y+17, r25	; 0x11
    1a92:	88 8b       	std	Y+16, r24	; 0x10
    1a94:	0f c0       	rjmp	.+30     	; 0x1ab4 <LCD_void_Init+0x490>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a96:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a98:	78 a1       	ldd	r23, Y+32	; 0x20
    1a9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	8e 8f       	std	Y+30, r24	; 0x1e
    1aa8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1aaa:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1aac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aae:	8a 95       	dec	r24
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_void_Init+0x48a>
    1ab2:	8f 87       	std	Y+15, r24	; 0x0f
		/*delay more than 39us*/
		_delay_us(40);
		/*send command clear display*/
		LCD_void_Write_CMD(LCD_Clear_Display_Screen);
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_void_Write_CMD>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	a0 e0       	ldi	r26, 0x00	; 0
    1ac0:	b0 e4       	ldi	r27, 0x40	; 64
    1ac2:	8b 87       	std	Y+11, r24	; 0x0b
    1ac4:	9c 87       	std	Y+12, r25	; 0x0c
    1ac6:	ad 87       	std	Y+13, r26	; 0x0d
    1ac8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1acc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ace:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	4a ef       	ldi	r20, 0xFA	; 250
    1ad8:	54 e4       	ldi	r21, 0x44	; 68
    1ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	8f 83       	std	Y+7, r24	; 0x07
    1ae4:	98 87       	std	Y+8, r25	; 0x08
    1ae6:	a9 87       	std	Y+9, r26	; 0x09
    1ae8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aea:	6f 81       	ldd	r22, Y+7	; 0x07
    1aec:	78 85       	ldd	r23, Y+8	; 0x08
    1aee:	89 85       	ldd	r24, Y+9	; 0x09
    1af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e8       	ldi	r20, 0x80	; 128
    1af8:	5f e3       	ldi	r21, 0x3F	; 63
    1afa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1afe:	88 23       	and	r24, r24
    1b00:	2c f4       	brge	.+10     	; 0x1b0c <LCD_void_Init+0x4e8>
		__ticks = 1;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
    1b0a:	3f c0       	rjmp	.+126    	; 0x1b8a <LCD_void_Init+0x566>
	else if (__tmp > 65535)
    1b0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0e:	78 85       	ldd	r23, Y+8	; 0x08
    1b10:	89 85       	ldd	r24, Y+9	; 0x09
    1b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	3f ef       	ldi	r19, 0xFF	; 255
    1b18:	4f e7       	ldi	r20, 0x7F	; 127
    1b1a:	57 e4       	ldi	r21, 0x47	; 71
    1b1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b20:	18 16       	cp	r1, r24
    1b22:	4c f5       	brge	.+82     	; 0x1b76 <LCD_void_Init+0x552>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e2       	ldi	r20, 0x20	; 32
    1b32:	51 e4       	ldi	r21, 0x41	; 65
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	9e 83       	std	Y+6, r25	; 0x06
    1b4a:	8d 83       	std	Y+5, r24	; 0x05
    1b4c:	0f c0       	rjmp	.+30     	; 0x1b6c <LCD_void_Init+0x548>
    1b4e:	88 ec       	ldi	r24, 0xC8	; 200
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	9c 83       	std	Y+4, r25	; 0x04
    1b54:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <LCD_void_Init+0x536>
    1b5e:	9c 83       	std	Y+4, r25	; 0x04
    1b60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b62:	8d 81       	ldd	r24, Y+5	; 0x05
    1b64:	9e 81       	ldd	r25, Y+6	; 0x06
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	9e 83       	std	Y+6, r25	; 0x06
    1b6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	69 f7       	brne	.-38     	; 0x1b4e <LCD_void_Init+0x52a>
    1b74:	14 c0       	rjmp	.+40     	; 0x1b9e <LCD_void_Init+0x57a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b76:	6f 81       	ldd	r22, Y+7	; 0x07
    1b78:	78 85       	ldd	r23, Y+8	; 0x08
    1b7a:	89 85       	ldd	r24, Y+9	; 0x09
    1b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9e 83       	std	Y+6, r25	; 0x06
    1b88:	8d 83       	std	Y+5, r24	; 0x05
    1b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8e:	9a 83       	std	Y+2, r25	; 0x02
    1b90:	89 83       	std	Y+1, r24	; 0x01
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	9a 81       	ldd	r25, Y+2	; 0x02
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <LCD_void_Init+0x572>
    1b9a:	9a 83       	std	Y+2, r25	; 0x02
    1b9c:	89 83       	std	Y+1, r24	; 0x01
		/*delay more than 1.53ms*/
		_delay_ms(2);
		/*increment cursor*/
		LCD_void_Write_CMD(LCD_Cursor_Increment);
    1b9e:	86 e0       	ldi	r24, 0x06	; 6
    1ba0:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_void_Write_CMD>
#endif




}
    1ba4:	c4 5b       	subi	r28, 0xB4	; 180
    1ba6:	df 4f       	sbci	r29, 0xFF	; 255
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	08 95       	ret

00001bbc <LCD_void_Write_CMD>:

void LCD_void_Write_CMD(u8 Copy_u8_CMD){
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	0f 92       	push	r0
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	89 83       	std	Y+1, r24	; 0x01
	/*RW=0*/
	/*write a command*/
	/*E=1*/
	/*E=0*/
//	DIO_U8_Set_Pin_Dir(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_OUTPUT);
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_LOW);
    1bc8:	82 e0       	ldi	r24, 0x02	; 2
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>

	LCD_void_Write(Copy_u8_CMD);
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LCD_void_Write>

}
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <LCD_void_Write>:



void LCD_void_Write(u8 Copy_u8_val){
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	e1 97       	sbiw	r28, 0x31	; 49
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	cd bf       	out	0x3d, r28	; 61
    1bf4:	89 ab       	std	Y+49, r24	; 0x31

	/*RW=0*/
		DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,PIN_LOW);
    1bf6:	82 e0       	ldi	r24, 0x02	; 2
    1bf8:	61 e0       	ldi	r22, 0x01	; 1
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>

#elif LCD_U8_MODE==LCD_U8_4_BIT_MODE
		/*code of send intializtion of 4 bit mode*/
/*MSB*/

		DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN4,Get_Bit(Copy_u8_val,DIO_U8_PIN4));
    1c00:	89 a9       	ldd	r24, Y+49	; 0x31
    1c02:	82 95       	swap	r24
    1c04:	8f 70       	andi	r24, 0x0F	; 15
    1c06:	98 2f       	mov	r25, r24
    1c08:	91 70       	andi	r25, 0x01	; 1
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	64 e0       	ldi	r22, 0x04	; 4
    1c0e:	49 2f       	mov	r20, r25
    1c10:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
		DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN5,Get_Bit(Copy_u8_val,DIO_U8_PIN5));
    1c14:	89 a9       	ldd	r24, Y+49	; 0x31
    1c16:	82 95       	swap	r24
    1c18:	86 95       	lsr	r24
    1c1a:	87 70       	andi	r24, 0x07	; 7
    1c1c:	98 2f       	mov	r25, r24
    1c1e:	91 70       	andi	r25, 0x01	; 1
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	65 e0       	ldi	r22, 0x05	; 5
    1c24:	49 2f       	mov	r20, r25
    1c26:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
		DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN6,Get_Bit(Copy_u8_val,DIO_U8_PIN6));
    1c2a:	89 a9       	ldd	r24, Y+49	; 0x31
    1c2c:	82 95       	swap	r24
    1c2e:	86 95       	lsr	r24
    1c30:	86 95       	lsr	r24
    1c32:	83 70       	andi	r24, 0x03	; 3
    1c34:	98 2f       	mov	r25, r24
    1c36:	91 70       	andi	r25, 0x01	; 1
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	66 e0       	ldi	r22, 0x06	; 6
    1c3c:	49 2f       	mov	r20, r25
    1c3e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
		DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN7,Get_Bit(Copy_u8_val,DIO_U8_PIN7));
    1c42:	89 a9       	ldd	r24, Y+49	; 0x31
    1c44:	98 2f       	mov	r25, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	99 27       	eor	r25, r25
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	67 e0       	ldi	r22, 0x07	; 7
    1c50:	49 2f       	mov	r20, r25
    1c52:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
		/*E=1*/
		/*E=0*/
		DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_HIGH);
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	62 e0       	ldi	r22, 0x02	; 2
    1c5a:	41 e0       	ldi	r20, 0x01	; 1
    1c5c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	a0 e8       	ldi	r26, 0x80	; 128
    1c66:	bf e3       	ldi	r27, 0x3F	; 63
    1c68:	8d a7       	std	Y+45, r24	; 0x2d
    1c6a:	9e a7       	std	Y+46, r25	; 0x2e
    1c6c:	af a7       	std	Y+47, r26	; 0x2f
    1c6e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c70:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c72:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c76:	98 a9       	ldd	r25, Y+48	; 0x30
    1c78:	2b ea       	ldi	r18, 0xAB	; 171
    1c7a:	3a ea       	ldi	r19, 0xAA	; 170
    1c7c:	4a e2       	ldi	r20, 0x2A	; 42
    1c7e:	50 e4       	ldi	r21, 0x40	; 64
    1c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	89 a7       	std	Y+41, r24	; 0x29
    1c8a:	9a a7       	std	Y+42, r25	; 0x2a
    1c8c:	ab a7       	std	Y+43, r26	; 0x2b
    1c8e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1c90:	69 a5       	ldd	r22, Y+41	; 0x29
    1c92:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c94:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c96:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e8       	ldi	r20, 0x80	; 128
    1c9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ca0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca4:	88 23       	and	r24, r24
    1ca6:	1c f4       	brge	.+6      	; 0x1cae <LCD_void_Write+0xce>
		__ticks = 1;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	88 a7       	std	Y+40, r24	; 0x28
    1cac:	91 c0       	rjmp	.+290    	; 0x1dd0 <LCD_void_Write+0x1f0>
	else if (__tmp > 255)
    1cae:	69 a5       	ldd	r22, Y+41	; 0x29
    1cb0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1cb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cb4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	4f e7       	ldi	r20, 0x7F	; 127
    1cbc:	53 e4       	ldi	r21, 0x43	; 67
    1cbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc2:	18 16       	cp	r1, r24
    1cc4:	0c f0       	brlt	.+2      	; 0x1cc8 <LCD_void_Write+0xe8>
    1cc6:	7b c0       	rjmp	.+246    	; 0x1dbe <LCD_void_Write+0x1de>
	{
		_delay_ms(__us / 1000.0);
    1cc8:	6d a5       	ldd	r22, Y+45	; 0x2d
    1cca:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ccc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cce:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	4a e7       	ldi	r20, 0x7A	; 122
    1cd6:	54 e4       	ldi	r21, 0x44	; 68
    1cd8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	8c a3       	std	Y+36, r24	; 0x24
    1ce2:	9d a3       	std	Y+37, r25	; 0x25
    1ce4:	ae a3       	std	Y+38, r26	; 0x26
    1ce6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce8:	6c a1       	ldd	r22, Y+36	; 0x24
    1cea:	7d a1       	ldd	r23, Y+37	; 0x25
    1cec:	8e a1       	ldd	r24, Y+38	; 0x26
    1cee:	9f a1       	ldd	r25, Y+39	; 0x27
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	4a ef       	ldi	r20, 0xFA	; 250
    1cf6:	54 e4       	ldi	r21, 0x44	; 68
    1cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	88 a3       	std	Y+32, r24	; 0x20
    1d02:	99 a3       	std	Y+33, r25	; 0x21
    1d04:	aa a3       	std	Y+34, r26	; 0x22
    1d06:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1d08:	68 a1       	ldd	r22, Y+32	; 0x20
    1d0a:	79 a1       	ldd	r23, Y+33	; 0x21
    1d0c:	8a a1       	ldd	r24, Y+34	; 0x22
    1d0e:	9b a1       	ldd	r25, Y+35	; 0x23
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e8       	ldi	r20, 0x80	; 128
    1d16:	5f e3       	ldi	r21, 0x3F	; 63
    1d18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d1c:	88 23       	and	r24, r24
    1d1e:	2c f4       	brge	.+10     	; 0x1d2a <LCD_void_Write+0x14a>
		__ticks = 1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9f 8f       	std	Y+31, r25	; 0x1f
    1d26:	8e 8f       	std	Y+30, r24	; 0x1e
    1d28:	3f c0       	rjmp	.+126    	; 0x1da8 <LCD_void_Write+0x1c8>
	else if (__tmp > 65535)
    1d2a:	68 a1       	ldd	r22, Y+32	; 0x20
    1d2c:	79 a1       	ldd	r23, Y+33	; 0x21
    1d2e:	8a a1       	ldd	r24, Y+34	; 0x22
    1d30:	9b a1       	ldd	r25, Y+35	; 0x23
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	3f ef       	ldi	r19, 0xFF	; 255
    1d36:	4f e7       	ldi	r20, 0x7F	; 127
    1d38:	57 e4       	ldi	r21, 0x47	; 71
    1d3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d3e:	18 16       	cp	r1, r24
    1d40:	4c f5       	brge	.+82     	; 0x1d94 <LCD_void_Write+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d42:	6c a1       	ldd	r22, Y+36	; 0x24
    1d44:	7d a1       	ldd	r23, Y+37	; 0x25
    1d46:	8e a1       	ldd	r24, Y+38	; 0x26
    1d48:	9f a1       	ldd	r25, Y+39	; 0x27
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e2       	ldi	r20, 0x20	; 32
    1d50:	51 e4       	ldi	r21, 0x41	; 65
    1d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	9f 8f       	std	Y+31, r25	; 0x1f
    1d68:	8e 8f       	std	Y+30, r24	; 0x1e
    1d6a:	0f c0       	rjmp	.+30     	; 0x1d8a <LCD_void_Write+0x1aa>
    1d6c:	88 ec       	ldi	r24, 0xC8	; 200
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	9d 8f       	std	Y+29, r25	; 0x1d
    1d72:	8c 8f       	std	Y+28, r24	; 0x1c
    1d74:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d76:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <LCD_void_Write+0x198>
    1d7c:	9d 8f       	std	Y+29, r25	; 0x1d
    1d7e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d80:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d82:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	9f 8f       	std	Y+31, r25	; 0x1f
    1d88:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d8c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	69 f7       	brne	.-38     	; 0x1d6c <LCD_void_Write+0x18c>
    1d92:	24 c0       	rjmp	.+72     	; 0x1ddc <LCD_void_Write+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d94:	68 a1       	ldd	r22, Y+32	; 0x20
    1d96:	79 a1       	ldd	r23, Y+33	; 0x21
    1d98:	8a a1       	ldd	r24, Y+34	; 0x22
    1d9a:	9b a1       	ldd	r25, Y+35	; 0x23
    1d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9f 8f       	std	Y+31, r25	; 0x1f
    1da6:	8e 8f       	std	Y+30, r24	; 0x1e
    1da8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1daa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1dac:	9b 8f       	std	Y+27, r25	; 0x1b
    1dae:	8a 8f       	std	Y+26, r24	; 0x1a
    1db0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1db2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <LCD_void_Write+0x1d4>
    1db8:	9b 8f       	std	Y+27, r25	; 0x1b
    1dba:	8a 8f       	std	Y+26, r24	; 0x1a
    1dbc:	0f c0       	rjmp	.+30     	; 0x1ddc <LCD_void_Write+0x1fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dbe:	69 a5       	ldd	r22, Y+41	; 0x29
    1dc0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1dc2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dc4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	88 a7       	std	Y+40, r24	; 0x28
    1dd0:	88 a5       	ldd	r24, Y+40	; 0x28
    1dd2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dd4:	89 8d       	ldd	r24, Y+25	; 0x19
    1dd6:	8a 95       	dec	r24
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <LCD_void_Write+0x1f6>
    1dda:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(1);
		DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_LOW);
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	62 e0       	ldi	r22, 0x02	; 2
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
/*LSB*/
		DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN4,Get_Bit(Copy_u8_val,DIO_U8_PIN0));
    1de6:	89 a9       	ldd	r24, Y+49	; 0x31
    1de8:	98 2f       	mov	r25, r24
    1dea:	91 70       	andi	r25, 0x01	; 1
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	64 e0       	ldi	r22, 0x04	; 4
    1df0:	49 2f       	mov	r20, r25
    1df2:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
		DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN5,Get_Bit(Copy_u8_val,DIO_U8_PIN1));
    1df6:	89 a9       	ldd	r24, Y+49	; 0x31
    1df8:	86 95       	lsr	r24
    1dfa:	98 2f       	mov	r25, r24
    1dfc:	91 70       	andi	r25, 0x01	; 1
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	65 e0       	ldi	r22, 0x05	; 5
    1e02:	49 2f       	mov	r20, r25
    1e04:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
		DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN6,Get_Bit(Copy_u8_val,DIO_U8_PIN2));
    1e08:	89 a9       	ldd	r24, Y+49	; 0x31
    1e0a:	86 95       	lsr	r24
    1e0c:	86 95       	lsr	r24
    1e0e:	98 2f       	mov	r25, r24
    1e10:	91 70       	andi	r25, 0x01	; 1
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	66 e0       	ldi	r22, 0x06	; 6
    1e16:	49 2f       	mov	r20, r25
    1e18:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
		DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN7,Get_Bit(Copy_u8_val,DIO_U8_PIN3));
    1e1c:	89 a9       	ldd	r24, Y+49	; 0x31
    1e1e:	86 95       	lsr	r24
    1e20:	86 95       	lsr	r24
    1e22:	86 95       	lsr	r24
    1e24:	98 2f       	mov	r25, r24
    1e26:	91 70       	andi	r25, 0x01	; 1
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	67 e0       	ldi	r22, 0x07	; 7
    1e2c:	49 2f       	mov	r20, r25
    1e2e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
		/*E=1*/
		/*E=0*/
		DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_HIGH);
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	62 e0       	ldi	r22, 0x02	; 2
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a0 e8       	ldi	r26, 0x80	; 128
    1e42:	bf e3       	ldi	r27, 0x3F	; 63
    1e44:	8d 8b       	std	Y+21, r24	; 0x15
    1e46:	9e 8b       	std	Y+22, r25	; 0x16
    1e48:	af 8b       	std	Y+23, r26	; 0x17
    1e4a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e50:	8f 89       	ldd	r24, Y+23	; 0x17
    1e52:	98 8d       	ldd	r25, Y+24	; 0x18
    1e54:	2b ea       	ldi	r18, 0xAB	; 171
    1e56:	3a ea       	ldi	r19, 0xAA	; 170
    1e58:	4a e2       	ldi	r20, 0x2A	; 42
    1e5a:	50 e4       	ldi	r21, 0x40	; 64
    1e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	89 8b       	std	Y+17, r24	; 0x11
    1e66:	9a 8b       	std	Y+18, r25	; 0x12
    1e68:	ab 8b       	std	Y+19, r26	; 0x13
    1e6a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e6c:	69 89       	ldd	r22, Y+17	; 0x11
    1e6e:	7a 89       	ldd	r23, Y+18	; 0x12
    1e70:	8b 89       	ldd	r24, Y+19	; 0x13
    1e72:	9c 89       	ldd	r25, Y+20	; 0x14
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e8       	ldi	r20, 0x80	; 128
    1e7a:	5f e3       	ldi	r21, 0x3F	; 63
    1e7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e80:	88 23       	and	r24, r24
    1e82:	1c f4       	brge	.+6      	; 0x1e8a <LCD_void_Write+0x2aa>
		__ticks = 1;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	88 8b       	std	Y+16, r24	; 0x10
    1e88:	91 c0       	rjmp	.+290    	; 0x1fac <LCD_void_Write+0x3cc>
	else if (__tmp > 255)
    1e8a:	69 89       	ldd	r22, Y+17	; 0x11
    1e8c:	7a 89       	ldd	r23, Y+18	; 0x12
    1e8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e90:	9c 89       	ldd	r25, Y+20	; 0x14
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	4f e7       	ldi	r20, 0x7F	; 127
    1e98:	53 e4       	ldi	r21, 0x43	; 67
    1e9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e9e:	18 16       	cp	r1, r24
    1ea0:	0c f0       	brlt	.+2      	; 0x1ea4 <LCD_void_Write+0x2c4>
    1ea2:	7b c0       	rjmp	.+246    	; 0x1f9a <LCD_void_Write+0x3ba>
	{
		_delay_ms(__us / 1000.0);
    1ea4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eaa:	98 8d       	ldd	r25, Y+24	; 0x18
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	4a e7       	ldi	r20, 0x7A	; 122
    1eb2:	54 e4       	ldi	r21, 0x44	; 68
    1eb4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	8c 87       	std	Y+12, r24	; 0x0c
    1ebe:	9d 87       	std	Y+13, r25	; 0x0d
    1ec0:	ae 87       	std	Y+14, r26	; 0x0e
    1ec2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ec6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ec8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1eca:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	4a ef       	ldi	r20, 0xFA	; 250
    1ed2:	54 e4       	ldi	r21, 0x44	; 68
    1ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	88 87       	std	Y+8, r24	; 0x08
    1ede:	99 87       	std	Y+9, r25	; 0x09
    1ee0:	aa 87       	std	Y+10, r26	; 0x0a
    1ee2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ee4:	68 85       	ldd	r22, Y+8	; 0x08
    1ee6:	79 85       	ldd	r23, Y+9	; 0x09
    1ee8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eea:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e8       	ldi	r20, 0x80	; 128
    1ef2:	5f e3       	ldi	r21, 0x3F	; 63
    1ef4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef8:	88 23       	and	r24, r24
    1efa:	2c f4       	brge	.+10     	; 0x1f06 <LCD_void_Write+0x326>
		__ticks = 1;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9f 83       	std	Y+7, r25	; 0x07
    1f02:	8e 83       	std	Y+6, r24	; 0x06
    1f04:	3f c0       	rjmp	.+126    	; 0x1f84 <LCD_void_Write+0x3a4>
	else if (__tmp > 65535)
    1f06:	68 85       	ldd	r22, Y+8	; 0x08
    1f08:	79 85       	ldd	r23, Y+9	; 0x09
    1f0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	3f ef       	ldi	r19, 0xFF	; 255
    1f12:	4f e7       	ldi	r20, 0x7F	; 127
    1f14:	57 e4       	ldi	r21, 0x47	; 71
    1f16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f1a:	18 16       	cp	r1, r24
    1f1c:	4c f5       	brge	.+82     	; 0x1f70 <LCD_void_Write+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f20:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f22:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f24:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	40 e2       	ldi	r20, 0x20	; 32
    1f2c:	51 e4       	ldi	r21, 0x41	; 65
    1f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	bc 01       	movw	r22, r24
    1f38:	cd 01       	movw	r24, r26
    1f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	9f 83       	std	Y+7, r25	; 0x07
    1f44:	8e 83       	std	Y+6, r24	; 0x06
    1f46:	0f c0       	rjmp	.+30     	; 0x1f66 <LCD_void_Write+0x386>
    1f48:	88 ec       	ldi	r24, 0xC8	; 200
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9d 83       	std	Y+5, r25	; 0x05
    1f4e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f50:	8c 81       	ldd	r24, Y+4	; 0x04
    1f52:	9d 81       	ldd	r25, Y+5	; 0x05
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <LCD_void_Write+0x374>
    1f58:	9d 83       	std	Y+5, r25	; 0x05
    1f5a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	9f 83       	std	Y+7, r25	; 0x07
    1f64:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f66:	8e 81       	ldd	r24, Y+6	; 0x06
    1f68:	9f 81       	ldd	r25, Y+7	; 0x07
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	69 f7       	brne	.-38     	; 0x1f48 <LCD_void_Write+0x368>
    1f6e:	24 c0       	rjmp	.+72     	; 0x1fb8 <LCD_void_Write+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f70:	68 85       	ldd	r22, Y+8	; 0x08
    1f72:	79 85       	ldd	r23, Y+9	; 0x09
    1f74:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f76:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	9f 83       	std	Y+7, r25	; 0x07
    1f82:	8e 83       	std	Y+6, r24	; 0x06
    1f84:	8e 81       	ldd	r24, Y+6	; 0x06
    1f86:	9f 81       	ldd	r25, Y+7	; 0x07
    1f88:	9b 83       	std	Y+3, r25	; 0x03
    1f8a:	8a 83       	std	Y+2, r24	; 0x02
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <LCD_void_Write+0x3b0>
    1f94:	9b 83       	std	Y+3, r25	; 0x03
    1f96:	8a 83       	std	Y+2, r24	; 0x02
    1f98:	0f c0       	rjmp	.+30     	; 0x1fb8 <LCD_void_Write+0x3d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f9a:	69 89       	ldd	r22, Y+17	; 0x11
    1f9c:	7a 89       	ldd	r23, Y+18	; 0x12
    1f9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	88 8b       	std	Y+16, r24	; 0x10
    1fac:	88 89       	ldd	r24, Y+16	; 0x10
    1fae:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	8a 95       	dec	r24
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <LCD_void_Write+0x3d2>
    1fb6:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_LOW);
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	62 e0       	ldi	r22, 0x02	; 2
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>

#endif


}
    1fc2:	e1 96       	adiw	r28, 0x31	; 49
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <LCD_void_Write_Data>:


void LCD_void_Write_Data(u8 Copy_u8_char)
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	0f 92       	push	r0
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	89 83       	std	Y+1, r24	; 0x01
	/*steps*/
		/*RS=1*/
//	DIO_U8_Set_Pin_Dir(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_OUTPUT);
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_HIGH);
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	41 e0       	ldi	r20, 0x01	; 1
    1fe6:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
		/*RW=0*/
		/*write a data*/
		/*E=1*/
		/*E=0*/
	LCD_void_Write(Copy_u8_char);
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LCD_void_Write>
}
    1ff0:	0f 90       	pop	r0
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <LCD_void_Write_String>:




void LCD_void_Write_String(u8 *str)
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <LCD_void_Write_String+0x6>
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
    2002:	9a 83       	std	Y+2, r25	; 0x02
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	0a c0       	rjmp	.+20     	; 0x201c <LCD_void_Write_String+0x24>
	while( *str!='\0')
	{
		LCD_void_Write_Data(*str);
    2008:	e9 81       	ldd	r30, Y+1	; 0x01
    200a:	fa 81       	ldd	r31, Y+2	; 0x02
    200c:	80 81       	ld	r24, Z
    200e:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <LCD_void_Write_Data>
		str++;
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	9a 81       	ldd	r25, Y+2	; 0x02
    2016:	01 96       	adiw	r24, 0x01	; 1
    2018:	9a 83       	std	Y+2, r25	; 0x02
    201a:	89 83       	std	Y+1, r24	; 0x01



void LCD_void_Write_String(u8 *str)
{
	while( *str!='\0')
    201c:	e9 81       	ldd	r30, Y+1	; 0x01
    201e:	fa 81       	ldd	r31, Y+2	; 0x02
    2020:	80 81       	ld	r24, Z
    2022:	88 23       	and	r24, r24
    2024:	89 f7       	brne	.-30     	; 0x2008 <LCD_void_Write_String+0x10>
	{
		LCD_void_Write_Data(*str);
		str++;
	}
}
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	08 95       	ret

00002030 <LCD_void_Write_Numbers>:


void LCD_void_Write_Numbers(u32 Copy_U8_Number)
{
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	6a 97       	sbiw	r28, 0x1a	; 26
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	de bf       	out	0x3e, r29	; 62
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	cd bf       	out	0x3d, r28	; 61
    2044:	6f 8b       	std	Y+23, r22	; 0x17
    2046:	78 8f       	std	Y+24, r23	; 0x18
    2048:	89 8f       	std	Y+25, r24	; 0x19
    204a:	9a 8f       	std	Y+26, r25	; 0x1a
	u8 rem ;
	u8 index=0 ;
    204c:	19 82       	std	Y+1, r1	; 0x01
	u8 arr[BITSET_NUMBER];
	if(Copy_U8_Number == 0){
    204e:	8f 89       	ldd	r24, Y+23	; 0x17
    2050:	98 8d       	ldd	r25, Y+24	; 0x18
    2052:	a9 8d       	ldd	r26, Y+25	; 0x19
    2054:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	a1 05       	cpc	r26, r1
    205a:	b1 05       	cpc	r27, r1
    205c:	f1 f5       	brne	.+124    	; 0x20da <LCD_void_Write_Numbers+0xaa>
		arr[index]='0';
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	ce 01       	movw	r24, r28
    2066:	03 96       	adiw	r24, 0x03	; 3
    2068:	fc 01       	movw	r30, r24
    206a:	e2 0f       	add	r30, r18
    206c:	f3 1f       	adc	r31, r19
    206e:	80 e3       	ldi	r24, 0x30	; 48
    2070:	80 83       	st	Z, r24
		index++;
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	8f 5f       	subi	r24, 0xFF	; 255
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	30 c0       	rjmp	.+96     	; 0x20da <LCD_void_Write_Numbers+0xaa>
	}
	while(Copy_U8_Number!=0)
	{
		rem=Copy_U8_Number%10;
    207a:	8f 89       	ldd	r24, Y+23	; 0x17
    207c:	98 8d       	ldd	r25, Y+24	; 0x18
    207e:	a9 8d       	ldd	r26, Y+25	; 0x19
    2080:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2082:	2a e0       	ldi	r18, 0x0A	; 10
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	50 e0       	ldi	r21, 0x00	; 0
    208a:	bc 01       	movw	r22, r24
    208c:	cd 01       	movw	r24, r26
    208e:	0e 94 66 18 	call	0x30cc	; 0x30cc <__udivmodsi4>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	8a 83       	std	Y+2, r24	; 0x02
		arr[index]=rem+'0';
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	28 2f       	mov	r18, r24
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	48 2f       	mov	r20, r24
    20a2:	40 5d       	subi	r20, 0xD0	; 208
    20a4:	ce 01       	movw	r24, r28
    20a6:	03 96       	adiw	r24, 0x03	; 3
    20a8:	fc 01       	movw	r30, r24
    20aa:	e2 0f       	add	r30, r18
    20ac:	f3 1f       	adc	r31, r19
    20ae:	40 83       	st	Z, r20
		index++;
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	8f 5f       	subi	r24, 0xFF	; 255
    20b4:	89 83       	std	Y+1, r24	; 0x01
		Copy_U8_Number/=10;
    20b6:	8f 89       	ldd	r24, Y+23	; 0x17
    20b8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ba:	a9 8d       	ldd	r26, Y+25	; 0x19
    20bc:	ba 8d       	ldd	r27, Y+26	; 0x1a
    20be:	2a e0       	ldi	r18, 0x0A	; 10
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 e0       	ldi	r20, 0x00	; 0
    20c4:	50 e0       	ldi	r21, 0x00	; 0
    20c6:	bc 01       	movw	r22, r24
    20c8:	cd 01       	movw	r24, r26
    20ca:	0e 94 66 18 	call	0x30cc	; 0x30cc <__udivmodsi4>
    20ce:	da 01       	movw	r26, r20
    20d0:	c9 01       	movw	r24, r18
    20d2:	8f 8b       	std	Y+23, r24	; 0x17
    20d4:	98 8f       	std	Y+24, r25	; 0x18
    20d6:	a9 8f       	std	Y+25, r26	; 0x19
    20d8:	ba 8f       	std	Y+26, r27	; 0x1a
	u8 arr[BITSET_NUMBER];
	if(Copy_U8_Number == 0){
		arr[index]='0';
		index++;
	}
	while(Copy_U8_Number!=0)
    20da:	8f 89       	ldd	r24, Y+23	; 0x17
    20dc:	98 8d       	ldd	r25, Y+24	; 0x18
    20de:	a9 8d       	ldd	r26, Y+25	; 0x19
    20e0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	a1 05       	cpc	r26, r1
    20e6:	b1 05       	cpc	r27, r1
    20e8:	41 f6       	brne	.-112    	; 0x207a <LCD_void_Write_Numbers+0x4a>
		rem=Copy_U8_Number%10;
		arr[index]=rem+'0';
		index++;
		Copy_U8_Number/=10;
	}
	arr[index]='\0';
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	28 2f       	mov	r18, r24
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	ce 01       	movw	r24, r28
    20f2:	03 96       	adiw	r24, 0x03	; 3
    20f4:	fc 01       	movw	r30, r24
    20f6:	e2 0f       	add	r30, r18
    20f8:	f3 1f       	adc	r31, r19
    20fa:	10 82       	st	Z, r1
	reverse(arr,index);
    20fc:	ce 01       	movw	r24, r28
    20fe:	03 96       	adiw	r24, 0x03	; 3
    2100:	69 81       	ldd	r22, Y+1	; 0x01
    2102:	0e 94 90 10 	call	0x2120	; 0x2120 <reverse>
	LCD_void_Write_String(arr);
    2106:	ce 01       	movw	r24, r28
    2108:	03 96       	adiw	r24, 0x03	; 3
    210a:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_void_Write_String>

}
    210e:	6a 96       	adiw	r28, 0x1a	; 26
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	f8 94       	cli
    2114:	de bf       	out	0x3e, r29	; 62
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	cd bf       	out	0x3d, r28	; 61
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <reverse>:

void reverse(u8 *ptr , u8 element)
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	29 97       	sbiw	r28, 0x09	; 9
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	98 87       	std	Y+8, r25	; 0x08
    2136:	8f 83       	std	Y+7, r24	; 0x07
    2138:	69 87       	std	Y+9, r22	; 0x09
	u8 start = 0;
    213a:	1e 82       	std	Y+6, r1	; 0x06
	u8 end = element-1;
    213c:	89 85       	ldd	r24, Y+9	; 0x09
    213e:	81 50       	subi	r24, 0x01	; 1
    2140:	8d 83       	std	Y+5, r24	; 0x05
    2142:	33 c0       	rjmp	.+102    	; 0x21aa <reverse+0x8a>
	while(start<end)
	{
		u32 temp = ptr[start];
    2144:	8e 81       	ldd	r24, Y+6	; 0x06
    2146:	28 2f       	mov	r18, r24
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	8f 81       	ldd	r24, Y+7	; 0x07
    214c:	98 85       	ldd	r25, Y+8	; 0x08
    214e:	fc 01       	movw	r30, r24
    2150:	e2 0f       	add	r30, r18
    2152:	f3 1f       	adc	r31, r19
    2154:	80 81       	ld	r24, Z
    2156:	88 2f       	mov	r24, r24
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	a0 e0       	ldi	r26, 0x00	; 0
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	9a 83       	std	Y+2, r25	; 0x02
    2162:	ab 83       	std	Y+3, r26	; 0x03
    2164:	bc 83       	std	Y+4, r27	; 0x04
		ptr[start]=ptr[end];
    2166:	8e 81       	ldd	r24, Y+6	; 0x06
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	8f 81       	ldd	r24, Y+7	; 0x07
    216e:	98 85       	ldd	r25, Y+8	; 0x08
    2170:	dc 01       	movw	r26, r24
    2172:	a2 0f       	add	r26, r18
    2174:	b3 1f       	adc	r27, r19
    2176:	8d 81       	ldd	r24, Y+5	; 0x05
    2178:	28 2f       	mov	r18, r24
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	8f 81       	ldd	r24, Y+7	; 0x07
    217e:	98 85       	ldd	r25, Y+8	; 0x08
    2180:	fc 01       	movw	r30, r24
    2182:	e2 0f       	add	r30, r18
    2184:	f3 1f       	adc	r31, r19
    2186:	80 81       	ld	r24, Z
    2188:	8c 93       	st	X, r24
		ptr[end]=temp;
    218a:	8d 81       	ldd	r24, Y+5	; 0x05
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	8f 81       	ldd	r24, Y+7	; 0x07
    2192:	98 85       	ldd	r25, Y+8	; 0x08
    2194:	fc 01       	movw	r30, r24
    2196:	e2 0f       	add	r30, r18
    2198:	f3 1f       	adc	r31, r19
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	80 83       	st	Z, r24
		start++;
    219e:	8e 81       	ldd	r24, Y+6	; 0x06
    21a0:	8f 5f       	subi	r24, 0xFF	; 255
    21a2:	8e 83       	std	Y+6, r24	; 0x06
		end--;
    21a4:	8d 81       	ldd	r24, Y+5	; 0x05
    21a6:	81 50       	subi	r24, 0x01	; 1
    21a8:	8d 83       	std	Y+5, r24	; 0x05

void reverse(u8 *ptr , u8 element)
{
	u8 start = 0;
	u8 end = element-1;
	while(start<end)
    21aa:	9e 81       	ldd	r25, Y+6	; 0x06
    21ac:	8d 81       	ldd	r24, Y+5	; 0x05
    21ae:	98 17       	cp	r25, r24
    21b0:	48 f2       	brcs	.-110    	; 0x2144 <reverse+0x24>
		ptr[end]=temp;
		start++;
		end--;

	}
}
    21b2:	29 96       	adiw	r28, 0x09	; 9
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <LCD_void_DDRAM_Address>:


void LCD_void_DDRAM_Address(u8 Copy_u8_Line , u8 Copy_u8_Location)
{
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <LCD_void_DDRAM_Address+0x6>
    21ca:	0f 92       	push	r0
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	8a 83       	std	Y+2, r24	; 0x02
    21d2:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_Address = (Copy_u8_Location+(64*Copy_u8_Line));
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	88 2f       	mov	r24, r24
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	00 24       	eor	r0, r0
    21dc:	96 95       	lsr	r25
    21de:	87 95       	ror	r24
    21e0:	07 94       	ror	r0
    21e2:	96 95       	lsr	r25
    21e4:	87 95       	ror	r24
    21e6:	07 94       	ror	r0
    21e8:	98 2f       	mov	r25, r24
    21ea:	80 2d       	mov	r24, r0
    21ec:	98 2f       	mov	r25, r24
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	89 0f       	add	r24, r25
    21f2:	89 83       	std	Y+1, r24	; 0x01
	DDRAM_Address|=0b10000000;
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	80 68       	ori	r24, 0x80	; 128
    21f8:	89 83       	std	Y+1, r24	; 0x01
	LCD_void_Write_CMD(DDRAM_Address);
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_void_Write_CMD>
}
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	08 95       	ret

0000220c <LCD_void_Set_CGRAM_Address>:


void LCD_void_Set_CGRAM_Address(u8 Address , u8 *ptr)
{
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	00 d0       	rcall	.+0      	; 0x2212 <LCD_void_Set_CGRAM_Address+0x6>
    2212:	00 d0       	rcall	.+0      	; 0x2214 <LCD_void_Set_CGRAM_Address+0x8>
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	8a 83       	std	Y+2, r24	; 0x02
    221a:	7c 83       	std	Y+4, r23	; 0x04
    221c:	6b 83       	std	Y+3, r22	; 0x03
	LCD_void_Write_CMD(Address);
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_void_Write_CMD>
	for(u8 i =0 ; i<8 ; i++)
    2224:	19 82       	std	Y+1, r1	; 0x01
    2226:	0d c0       	rjmp	.+26     	; 0x2242 <LCD_void_Set_CGRAM_Address+0x36>
	{
		LCD_void_Write_Data(*ptr);
    2228:	eb 81       	ldd	r30, Y+3	; 0x03
    222a:	fc 81       	ldd	r31, Y+4	; 0x04
    222c:	80 81       	ld	r24, Z
    222e:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <LCD_void_Write_Data>
		ptr++;
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	9c 81       	ldd	r25, Y+4	; 0x04
    2236:	01 96       	adiw	r24, 0x01	; 1
    2238:	9c 83       	std	Y+4, r25	; 0x04
    223a:	8b 83       	std	Y+3, r24	; 0x03


void LCD_void_Set_CGRAM_Address(u8 Address , u8 *ptr)
{
	LCD_void_Write_CMD(Address);
	for(u8 i =0 ; i<8 ; i++)
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	8f 5f       	subi	r24, 0xFF	; 255
    2240:	89 83       	std	Y+1, r24	; 0x01
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	88 30       	cpi	r24, 0x08	; 8
    2246:	80 f3       	brcs	.-32     	; 0x2228 <LCD_void_Set_CGRAM_Address+0x1c>
	{
		LCD_void_Write_Data(*ptr);
		ptr++;
	}

}
    2248:	0f 90       	pop	r0
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	08 95       	ret

00002256 <LCD_void_Clear_Screen>:

void LCD_void_Clear_Screen(void)
{
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	2e 97       	sbiw	r28, 0x0e	; 14
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	cd bf       	out	0x3d, r28	; 61
	LCD_void_Write_CMD(LCD_Clear_Display_Screen);
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_void_Write_CMD>
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	a0 e0       	ldi	r26, 0x00	; 0
    2276:	b0 e4       	ldi	r27, 0x40	; 64
    2278:	8b 87       	std	Y+11, r24	; 0x0b
    227a:	9c 87       	std	Y+12, r25	; 0x0c
    227c:	ad 87       	std	Y+13, r26	; 0x0d
    227e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2280:	6b 85       	ldd	r22, Y+11	; 0x0b
    2282:	7c 85       	ldd	r23, Y+12	; 0x0c
    2284:	8d 85       	ldd	r24, Y+13	; 0x0d
    2286:	9e 85       	ldd	r25, Y+14	; 0x0e
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	4a ef       	ldi	r20, 0xFA	; 250
    228e:	54 e4       	ldi	r21, 0x44	; 68
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	8f 83       	std	Y+7, r24	; 0x07
    229a:	98 87       	std	Y+8, r25	; 0x08
    229c:	a9 87       	std	Y+9, r26	; 0x09
    229e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22a0:	6f 81       	ldd	r22, Y+7	; 0x07
    22a2:	78 85       	ldd	r23, Y+8	; 0x08
    22a4:	89 85       	ldd	r24, Y+9	; 0x09
    22a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e8       	ldi	r20, 0x80	; 128
    22ae:	5f e3       	ldi	r21, 0x3F	; 63
    22b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22b4:	88 23       	and	r24, r24
    22b6:	2c f4       	brge	.+10     	; 0x22c2 <LCD_void_Clear_Screen+0x6c>
		__ticks = 1;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9e 83       	std	Y+6, r25	; 0x06
    22be:	8d 83       	std	Y+5, r24	; 0x05
    22c0:	3f c0       	rjmp	.+126    	; 0x2340 <LCD_void_Clear_Screen+0xea>
	else if (__tmp > 65535)
    22c2:	6f 81       	ldd	r22, Y+7	; 0x07
    22c4:	78 85       	ldd	r23, Y+8	; 0x08
    22c6:	89 85       	ldd	r24, Y+9	; 0x09
    22c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	3f ef       	ldi	r19, 0xFF	; 255
    22ce:	4f e7       	ldi	r20, 0x7F	; 127
    22d0:	57 e4       	ldi	r21, 0x47	; 71
    22d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22d6:	18 16       	cp	r1, r24
    22d8:	4c f5       	brge	.+82     	; 0x232c <LCD_void_Clear_Screen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22da:	6b 85       	ldd	r22, Y+11	; 0x0b
    22dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22de:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e2       	ldi	r20, 0x20	; 32
    22e8:	51 e4       	ldi	r21, 0x41	; 65
    22ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	9e 83       	std	Y+6, r25	; 0x06
    2300:	8d 83       	std	Y+5, r24	; 0x05
    2302:	0f c0       	rjmp	.+30     	; 0x2322 <LCD_void_Clear_Screen+0xcc>
    2304:	88 ec       	ldi	r24, 0xC8	; 200
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9c 83       	std	Y+4, r25	; 0x04
    230a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	9c 81       	ldd	r25, Y+4	; 0x04
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <LCD_void_Clear_Screen+0xba>
    2314:	9c 83       	std	Y+4, r25	; 0x04
    2316:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2318:	8d 81       	ldd	r24, Y+5	; 0x05
    231a:	9e 81       	ldd	r25, Y+6	; 0x06
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	9e 83       	std	Y+6, r25	; 0x06
    2320:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2322:	8d 81       	ldd	r24, Y+5	; 0x05
    2324:	9e 81       	ldd	r25, Y+6	; 0x06
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	69 f7       	brne	.-38     	; 0x2304 <LCD_void_Clear_Screen+0xae>
    232a:	14 c0       	rjmp	.+40     	; 0x2354 <LCD_void_Clear_Screen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232c:	6f 81       	ldd	r22, Y+7	; 0x07
    232e:	78 85       	ldd	r23, Y+8	; 0x08
    2330:	89 85       	ldd	r24, Y+9	; 0x09
    2332:	9a 85       	ldd	r25, Y+10	; 0x0a
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
    2340:	8d 81       	ldd	r24, Y+5	; 0x05
    2342:	9e 81       	ldd	r25, Y+6	; 0x06
    2344:	9a 83       	std	Y+2, r25	; 0x02
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	9a 81       	ldd	r25, Y+2	; 0x02
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <LCD_void_Clear_Screen+0xf6>
    2350:	9a 83       	std	Y+2, r25	; 0x02
    2352:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2354:	2e 96       	adiw	r28, 0x0e	; 14
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	cd bf       	out	0x3d, r28	; 61
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	08 95       	ret

00002366 <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    236e:	62 97       	sbiw	r28, 0x12	; 18
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	9a 8b       	std	Y+18, r25	; 0x12
    237c:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   /* store the integer number to arr & 10 is for decimal numbering system*/
   itoa(data,arr,10);
    237e:	89 89       	ldd	r24, Y+17	; 0x11
    2380:	9a 89       	ldd	r25, Y+18	; 0x12
    2382:	9e 01       	movw	r18, r28
    2384:	2f 5f       	subi	r18, 0xFF	; 255
    2386:	3f 4f       	sbci	r19, 0xFF	; 255
    2388:	b9 01       	movw	r22, r18
    238a:	4a e0       	ldi	r20, 0x0A	; 10
    238c:	50 e0       	ldi	r21, 0x00	; 0
    238e:	0e 94 bf 18 	call	0x317e	; 0x317e <itoa>

   LCD_void_Write_String(arr);
    2392:	ce 01       	movw	r24, r28
    2394:	01 96       	adiw	r24, 0x01	; 1
    2396:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_void_Write_String>
}
    239a:	62 96       	adiw	r28, 0x12	; 18
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <APP_voidInit>:
static void APP_voidWrongPasswordScreen(u8 lletrations);
static void APP_voidThiefAlert();
static void APP_voidTruePasswordScreen();


void APP_voidInit(){
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
		DIO_void_Init();
    23b4:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_void_Init>
		LCD_void_Init();
    23b8:	0e 94 12 0b 	call	0x1624	; 0x1624 <LCD_void_Init>
		KPD_Init();
    23bc:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <KPD_Init>
}
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <APP_voidWelcomeScreen>:

void APP_voidWelcomeScreen()
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	2e 97       	sbiw	r28, 0x0e	; 14
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	f8 94       	cli
    23d4:	de bf       	out	0x3e, r29	; 62
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	cd bf       	out	0x3d, r28	; 61
	LCD_void_Clear_Screen();
    23da:	0e 94 2b 11 	call	0x2256	; 0x2256 <LCD_void_Clear_Screen>
	LCD_void_Write_String("welcome my user");
    23de:	80 e6       	ldi	r24, 0x60	; 96
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_void_Write_String>
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	aa e7       	ldi	r26, 0x7A	; 122
    23ec:	b5 e4       	ldi	r27, 0x45	; 69
    23ee:	8b 87       	std	Y+11, r24	; 0x0b
    23f0:	9c 87       	std	Y+12, r25	; 0x0c
    23f2:	ad 87       	std	Y+13, r26	; 0x0d
    23f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    23fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	4a ef       	ldi	r20, 0xFA	; 250
    2404:	54 e4       	ldi	r21, 0x44	; 68
    2406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	8f 83       	std	Y+7, r24	; 0x07
    2410:	98 87       	std	Y+8, r25	; 0x08
    2412:	a9 87       	std	Y+9, r26	; 0x09
    2414:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2416:	6f 81       	ldd	r22, Y+7	; 0x07
    2418:	78 85       	ldd	r23, Y+8	; 0x08
    241a:	89 85       	ldd	r24, Y+9	; 0x09
    241c:	9a 85       	ldd	r25, Y+10	; 0x0a
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e8       	ldi	r20, 0x80	; 128
    2424:	5f e3       	ldi	r21, 0x3F	; 63
    2426:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    242a:	88 23       	and	r24, r24
    242c:	2c f4       	brge	.+10     	; 0x2438 <APP_voidWelcomeScreen+0x72>
		__ticks = 1;
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9e 83       	std	Y+6, r25	; 0x06
    2434:	8d 83       	std	Y+5, r24	; 0x05
    2436:	3f c0       	rjmp	.+126    	; 0x24b6 <APP_voidWelcomeScreen+0xf0>
	else if (__tmp > 65535)
    2438:	6f 81       	ldd	r22, Y+7	; 0x07
    243a:	78 85       	ldd	r23, Y+8	; 0x08
    243c:	89 85       	ldd	r24, Y+9	; 0x09
    243e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	3f ef       	ldi	r19, 0xFF	; 255
    2444:	4f e7       	ldi	r20, 0x7F	; 127
    2446:	57 e4       	ldi	r21, 0x47	; 71
    2448:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    244c:	18 16       	cp	r1, r24
    244e:	4c f5       	brge	.+82     	; 0x24a2 <APP_voidWelcomeScreen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2450:	6b 85       	ldd	r22, Y+11	; 0x0b
    2452:	7c 85       	ldd	r23, Y+12	; 0x0c
    2454:	8d 85       	ldd	r24, Y+13	; 0x0d
    2456:	9e 85       	ldd	r25, Y+14	; 0x0e
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	40 e2       	ldi	r20, 0x20	; 32
    245e:	51 e4       	ldi	r21, 0x41	; 65
    2460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	bc 01       	movw	r22, r24
    246a:	cd 01       	movw	r24, r26
    246c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	9e 83       	std	Y+6, r25	; 0x06
    2476:	8d 83       	std	Y+5, r24	; 0x05
    2478:	0f c0       	rjmp	.+30     	; 0x2498 <APP_voidWelcomeScreen+0xd2>
    247a:	88 ec       	ldi	r24, 0xC8	; 200
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	9c 83       	std	Y+4, r25	; 0x04
    2480:	8b 83       	std	Y+3, r24	; 0x03
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	9c 81       	ldd	r25, Y+4	; 0x04
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <APP_voidWelcomeScreen+0xc0>
    248a:	9c 83       	std	Y+4, r25	; 0x04
    248c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248e:	8d 81       	ldd	r24, Y+5	; 0x05
    2490:	9e 81       	ldd	r25, Y+6	; 0x06
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2498:	8d 81       	ldd	r24, Y+5	; 0x05
    249a:	9e 81       	ldd	r25, Y+6	; 0x06
    249c:	00 97       	sbiw	r24, 0x00	; 0
    249e:	69 f7       	brne	.-38     	; 0x247a <APP_voidWelcomeScreen+0xb4>
    24a0:	14 c0       	rjmp	.+40     	; 0x24ca <APP_voidWelcomeScreen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a2:	6f 81       	ldd	r22, Y+7	; 0x07
    24a4:	78 85       	ldd	r23, Y+8	; 0x08
    24a6:	89 85       	ldd	r24, Y+9	; 0x09
    24a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	9e 83       	std	Y+6, r25	; 0x06
    24b4:	8d 83       	std	Y+5, r24	; 0x05
    24b6:	8d 81       	ldd	r24, Y+5	; 0x05
    24b8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ba:	9a 83       	std	Y+2, r25	; 0x02
    24bc:	89 83       	std	Y+1, r24	; 0x01
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	9a 81       	ldd	r25, Y+2	; 0x02
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	f1 f7       	brne	.-4      	; 0x24c2 <APP_voidWelcomeScreen+0xfc>
    24c6:	9a 83       	std	Y+2, r25	; 0x02
    24c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(LONG_DELAY);
	APP_voidMainMenuScreen();
    24ca:	0e 94 70 12 	call	0x24e0	; 0x24e0 <APP_voidMainMenuScreen>
}
    24ce:	2e 96       	adiw	r28, 0x0e	; 14
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <APP_voidMainMenuScreen>:


static void APP_voidMainMenuScreen()
{
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
    24e8:	ab 97       	sbiw	r28, 0x2b	; 43
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
	LCD_void_Clear_Screen();
    24f4:	0e 94 2b 11 	call	0x2256	; 0x2256 <LCD_void_Clear_Screen>
	LCD_void_Write_String("1] Open Safe");
    24f8:	80 e7       	ldi	r24, 0x70	; 112
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_void_Write_String>
	LCD_void_DDRAM_Address(1,0);
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_void_DDRAM_Address>
	LCD_void_Write_String("2] Change Pass");
    2508:	8d e7       	ldi	r24, 0x7D	; 125
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_void_Write_String>


	u8 pressedkey = KPD_Void_GET_Status();
    2510:	0e 94 a0 0a 	call	0x1540	; 0x1540 <KPD_Void_GET_Status>
    2514:	8b a7       	std	Y+43, r24	; 0x2b

	if(pressedkey =='1')
    2516:	8b a5       	ldd	r24, Y+43	; 0x2b
    2518:	81 33       	cpi	r24, 0x31	; 49
    251a:	19 f4       	brne	.+6      	; 0x2522 <APP_voidMainMenuScreen+0x42>
	{
		APP_voidOpenSafeScreen();
    251c:	0e 94 0c 14 	call	0x2818	; 0x2818 <APP_voidOpenSafeScreen>
    2520:	72 c1       	rjmp	.+740    	; 0x2806 <APP_voidMainMenuScreen+0x326>
	}
	else if (pressedkey =='2')
    2522:	8b a5       	ldd	r24, Y+43	; 0x2b
    2524:	82 33       	cpi	r24, 0x32	; 50
    2526:	19 f4       	brne	.+6      	; 0x252e <APP_voidMainMenuScreen+0x4e>
	{
		APP_voidChangePasswordScreen();
    2528:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <APP_voidChangePasswordScreen>
    252c:	6c c1       	rjmp	.+728    	; 0x2806 <APP_voidMainMenuScreen+0x326>
	}
	else
	{
		LCD_void_Clear_Screen();
    252e:	0e 94 2b 11 	call	0x2256	; 0x2256 <LCD_void_Clear_Screen>
		LCD_void_Write_String("wrong input");
    2532:	8c e8       	ldi	r24, 0x8C	; 140
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_void_Write_String>
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	aa ef       	ldi	r26, 0xFA	; 250
    2540:	b4 e4       	ldi	r27, 0x44	; 68
    2542:	8f a3       	std	Y+39, r24	; 0x27
    2544:	98 a7       	std	Y+40, r25	; 0x28
    2546:	a9 a7       	std	Y+41, r26	; 0x29
    2548:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254a:	6f a1       	ldd	r22, Y+39	; 0x27
    254c:	78 a5       	ldd	r23, Y+40	; 0x28
    254e:	89 a5       	ldd	r24, Y+41	; 0x29
    2550:	9a a5       	ldd	r25, Y+42	; 0x2a
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	4a ef       	ldi	r20, 0xFA	; 250
    2558:	54 e4       	ldi	r21, 0x44	; 68
    255a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	8b a3       	std	Y+35, r24	; 0x23
    2564:	9c a3       	std	Y+36, r25	; 0x24
    2566:	ad a3       	std	Y+37, r26	; 0x25
    2568:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    256a:	6b a1       	ldd	r22, Y+35	; 0x23
    256c:	7c a1       	ldd	r23, Y+36	; 0x24
    256e:	8d a1       	ldd	r24, Y+37	; 0x25
    2570:	9e a1       	ldd	r25, Y+38	; 0x26
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e8       	ldi	r20, 0x80	; 128
    2578:	5f e3       	ldi	r21, 0x3F	; 63
    257a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    257e:	88 23       	and	r24, r24
    2580:	2c f4       	brge	.+10     	; 0x258c <APP_voidMainMenuScreen+0xac>
		__ticks = 1;
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	9a a3       	std	Y+34, r25	; 0x22
    2588:	89 a3       	std	Y+33, r24	; 0x21
    258a:	3f c0       	rjmp	.+126    	; 0x260a <APP_voidMainMenuScreen+0x12a>
	else if (__tmp > 65535)
    258c:	6b a1       	ldd	r22, Y+35	; 0x23
    258e:	7c a1       	ldd	r23, Y+36	; 0x24
    2590:	8d a1       	ldd	r24, Y+37	; 0x25
    2592:	9e a1       	ldd	r25, Y+38	; 0x26
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	3f ef       	ldi	r19, 0xFF	; 255
    2598:	4f e7       	ldi	r20, 0x7F	; 127
    259a:	57 e4       	ldi	r21, 0x47	; 71
    259c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25a0:	18 16       	cp	r1, r24
    25a2:	4c f5       	brge	.+82     	; 0x25f6 <APP_voidMainMenuScreen+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a4:	6f a1       	ldd	r22, Y+39	; 0x27
    25a6:	78 a5       	ldd	r23, Y+40	; 0x28
    25a8:	89 a5       	ldd	r24, Y+41	; 0x29
    25aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e2       	ldi	r20, 0x20	; 32
    25b2:	51 e4       	ldi	r21, 0x41	; 65
    25b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	bc 01       	movw	r22, r24
    25be:	cd 01       	movw	r24, r26
    25c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	9a a3       	std	Y+34, r25	; 0x22
    25ca:	89 a3       	std	Y+33, r24	; 0x21
    25cc:	0f c0       	rjmp	.+30     	; 0x25ec <APP_voidMainMenuScreen+0x10c>
    25ce:	88 ec       	ldi	r24, 0xC8	; 200
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	98 a3       	std	Y+32, r25	; 0x20
    25d4:	8f 8f       	std	Y+31, r24	; 0x1f
    25d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25d8:	98 a1       	ldd	r25, Y+32	; 0x20
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <APP_voidMainMenuScreen+0xfa>
    25de:	98 a3       	std	Y+32, r25	; 0x20
    25e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e2:	89 a1       	ldd	r24, Y+33	; 0x21
    25e4:	9a a1       	ldd	r25, Y+34	; 0x22
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	9a a3       	std	Y+34, r25	; 0x22
    25ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ec:	89 a1       	ldd	r24, Y+33	; 0x21
    25ee:	9a a1       	ldd	r25, Y+34	; 0x22
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	69 f7       	brne	.-38     	; 0x25ce <APP_voidMainMenuScreen+0xee>
    25f4:	14 c0       	rjmp	.+40     	; 0x261e <APP_voidMainMenuScreen+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f6:	6b a1       	ldd	r22, Y+35	; 0x23
    25f8:	7c a1       	ldd	r23, Y+36	; 0x24
    25fa:	8d a1       	ldd	r24, Y+37	; 0x25
    25fc:	9e a1       	ldd	r25, Y+38	; 0x26
    25fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	9a a3       	std	Y+34, r25	; 0x22
    2608:	89 a3       	std	Y+33, r24	; 0x21
    260a:	89 a1       	ldd	r24, Y+33	; 0x21
    260c:	9a a1       	ldd	r25, Y+34	; 0x22
    260e:	9e 8f       	std	Y+30, r25	; 0x1e
    2610:	8d 8f       	std	Y+29, r24	; 0x1d
    2612:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2614:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <APP_voidMainMenuScreen+0x136>
    261a:	9e 8f       	std	Y+30, r25	; 0x1e
    261c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(SHORT_DELAY);
		LCD_void_Clear_Screen();
    261e:	0e 94 2b 11 	call	0x2256	; 0x2256 <LCD_void_Clear_Screen>
		LCD_void_Write_String("Reset.");
    2622:	88 e9       	ldi	r24, 0x98	; 152
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_void_Write_String>
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	aa e7       	ldi	r26, 0x7A	; 122
    2630:	b4 e4       	ldi	r27, 0x44	; 68
    2632:	89 8f       	std	Y+25, r24	; 0x19
    2634:	9a 8f       	std	Y+26, r25	; 0x1a
    2636:	ab 8f       	std	Y+27, r26	; 0x1b
    2638:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263a:	69 8d       	ldd	r22, Y+25	; 0x19
    263c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    263e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2640:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	4a ef       	ldi	r20, 0xFA	; 250
    2648:	54 e4       	ldi	r21, 0x44	; 68
    264a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	8d 8b       	std	Y+21, r24	; 0x15
    2654:	9e 8b       	std	Y+22, r25	; 0x16
    2656:	af 8b       	std	Y+23, r26	; 0x17
    2658:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    265a:	6d 89       	ldd	r22, Y+21	; 0x15
    265c:	7e 89       	ldd	r23, Y+22	; 0x16
    265e:	8f 89       	ldd	r24, Y+23	; 0x17
    2660:	98 8d       	ldd	r25, Y+24	; 0x18
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e8       	ldi	r20, 0x80	; 128
    2668:	5f e3       	ldi	r21, 0x3F	; 63
    266a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    266e:	88 23       	and	r24, r24
    2670:	2c f4       	brge	.+10     	; 0x267c <APP_voidMainMenuScreen+0x19c>
		__ticks = 1;
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	9c 8b       	std	Y+20, r25	; 0x14
    2678:	8b 8b       	std	Y+19, r24	; 0x13
    267a:	3f c0       	rjmp	.+126    	; 0x26fa <APP_voidMainMenuScreen+0x21a>
	else if (__tmp > 65535)
    267c:	6d 89       	ldd	r22, Y+21	; 0x15
    267e:	7e 89       	ldd	r23, Y+22	; 0x16
    2680:	8f 89       	ldd	r24, Y+23	; 0x17
    2682:	98 8d       	ldd	r25, Y+24	; 0x18
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	3f ef       	ldi	r19, 0xFF	; 255
    2688:	4f e7       	ldi	r20, 0x7F	; 127
    268a:	57 e4       	ldi	r21, 0x47	; 71
    268c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2690:	18 16       	cp	r1, r24
    2692:	4c f5       	brge	.+82     	; 0x26e6 <APP_voidMainMenuScreen+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2694:	69 8d       	ldd	r22, Y+25	; 0x19
    2696:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2698:	8b 8d       	ldd	r24, Y+27	; 0x1b
    269a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e2       	ldi	r20, 0x20	; 32
    26a2:	51 e4       	ldi	r21, 0x41	; 65
    26a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	bc 01       	movw	r22, r24
    26ae:	cd 01       	movw	r24, r26
    26b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	9c 8b       	std	Y+20, r25	; 0x14
    26ba:	8b 8b       	std	Y+19, r24	; 0x13
    26bc:	0f c0       	rjmp	.+30     	; 0x26dc <APP_voidMainMenuScreen+0x1fc>
    26be:	88 ec       	ldi	r24, 0xC8	; 200
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	9a 8b       	std	Y+18, r25	; 0x12
    26c4:	89 8b       	std	Y+17, r24	; 0x11
    26c6:	89 89       	ldd	r24, Y+17	; 0x11
    26c8:	9a 89       	ldd	r25, Y+18	; 0x12
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <APP_voidMainMenuScreen+0x1ea>
    26ce:	9a 8b       	std	Y+18, r25	; 0x12
    26d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d2:	8b 89       	ldd	r24, Y+19	; 0x13
    26d4:	9c 89       	ldd	r25, Y+20	; 0x14
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	9c 8b       	std	Y+20, r25	; 0x14
    26da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26dc:	8b 89       	ldd	r24, Y+19	; 0x13
    26de:	9c 89       	ldd	r25, Y+20	; 0x14
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	69 f7       	brne	.-38     	; 0x26be <APP_voidMainMenuScreen+0x1de>
    26e4:	14 c0       	rjmp	.+40     	; 0x270e <APP_voidMainMenuScreen+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e6:	6d 89       	ldd	r22, Y+21	; 0x15
    26e8:	7e 89       	ldd	r23, Y+22	; 0x16
    26ea:	8f 89       	ldd	r24, Y+23	; 0x17
    26ec:	98 8d       	ldd	r25, Y+24	; 0x18
    26ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	9c 8b       	std	Y+20, r25	; 0x14
    26f8:	8b 8b       	std	Y+19, r24	; 0x13
    26fa:	8b 89       	ldd	r24, Y+19	; 0x13
    26fc:	9c 89       	ldd	r25, Y+20	; 0x14
    26fe:	98 8b       	std	Y+16, r25	; 0x10
    2700:	8f 87       	std	Y+15, r24	; 0x0f
    2702:	8f 85       	ldd	r24, Y+15	; 0x0f
    2704:	98 89       	ldd	r25, Y+16	; 0x10
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	f1 f7       	brne	.-4      	; 0x2706 <APP_voidMainMenuScreen+0x226>
    270a:	98 8b       	std	Y+16, r25	; 0x10
    270c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(SHORT_SHORT_DELAY);
		LCD_void_Write_String("Reset..");
    270e:	8f e9       	ldi	r24, 0x9F	; 159
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_void_Write_String>
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	aa e7       	ldi	r26, 0x7A	; 122
    271c:	b4 e4       	ldi	r27, 0x44	; 68
    271e:	8b 87       	std	Y+11, r24	; 0x0b
    2720:	9c 87       	std	Y+12, r25	; 0x0c
    2722:	ad 87       	std	Y+13, r26	; 0x0d
    2724:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2726:	6b 85       	ldd	r22, Y+11	; 0x0b
    2728:	7c 85       	ldd	r23, Y+12	; 0x0c
    272a:	8d 85       	ldd	r24, Y+13	; 0x0d
    272c:	9e 85       	ldd	r25, Y+14	; 0x0e
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	4a ef       	ldi	r20, 0xFA	; 250
    2734:	54 e4       	ldi	r21, 0x44	; 68
    2736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	8f 83       	std	Y+7, r24	; 0x07
    2740:	98 87       	std	Y+8, r25	; 0x08
    2742:	a9 87       	std	Y+9, r26	; 0x09
    2744:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2746:	6f 81       	ldd	r22, Y+7	; 0x07
    2748:	78 85       	ldd	r23, Y+8	; 0x08
    274a:	89 85       	ldd	r24, Y+9	; 0x09
    274c:	9a 85       	ldd	r25, Y+10	; 0x0a
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e8       	ldi	r20, 0x80	; 128
    2754:	5f e3       	ldi	r21, 0x3F	; 63
    2756:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    275a:	88 23       	and	r24, r24
    275c:	2c f4       	brge	.+10     	; 0x2768 <APP_voidMainMenuScreen+0x288>
		__ticks = 1;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	9e 83       	std	Y+6, r25	; 0x06
    2764:	8d 83       	std	Y+5, r24	; 0x05
    2766:	3f c0       	rjmp	.+126    	; 0x27e6 <APP_voidMainMenuScreen+0x306>
	else if (__tmp > 65535)
    2768:	6f 81       	ldd	r22, Y+7	; 0x07
    276a:	78 85       	ldd	r23, Y+8	; 0x08
    276c:	89 85       	ldd	r24, Y+9	; 0x09
    276e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	3f ef       	ldi	r19, 0xFF	; 255
    2774:	4f e7       	ldi	r20, 0x7F	; 127
    2776:	57 e4       	ldi	r21, 0x47	; 71
    2778:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    277c:	18 16       	cp	r1, r24
    277e:	4c f5       	brge	.+82     	; 0x27d2 <APP_voidMainMenuScreen+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2780:	6b 85       	ldd	r22, Y+11	; 0x0b
    2782:	7c 85       	ldd	r23, Y+12	; 0x0c
    2784:	8d 85       	ldd	r24, Y+13	; 0x0d
    2786:	9e 85       	ldd	r25, Y+14	; 0x0e
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e2       	ldi	r20, 0x20	; 32
    278e:	51 e4       	ldi	r21, 0x41	; 65
    2790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	9e 83       	std	Y+6, r25	; 0x06
    27a6:	8d 83       	std	Y+5, r24	; 0x05
    27a8:	0f c0       	rjmp	.+30     	; 0x27c8 <APP_voidMainMenuScreen+0x2e8>
    27aa:	88 ec       	ldi	r24, 0xC8	; 200
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	9c 83       	std	Y+4, r25	; 0x04
    27b0:	8b 83       	std	Y+3, r24	; 0x03
    27b2:	8b 81       	ldd	r24, Y+3	; 0x03
    27b4:	9c 81       	ldd	r25, Y+4	; 0x04
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <APP_voidMainMenuScreen+0x2d6>
    27ba:	9c 83       	std	Y+4, r25	; 0x04
    27bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	9e 83       	std	Y+6, r25	; 0x06
    27c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ca:	9e 81       	ldd	r25, Y+6	; 0x06
    27cc:	00 97       	sbiw	r24, 0x00	; 0
    27ce:	69 f7       	brne	.-38     	; 0x27aa <APP_voidMainMenuScreen+0x2ca>
    27d0:	14 c0       	rjmp	.+40     	; 0x27fa <APP_voidMainMenuScreen+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d2:	6f 81       	ldd	r22, Y+7	; 0x07
    27d4:	78 85       	ldd	r23, Y+8	; 0x08
    27d6:	89 85       	ldd	r24, Y+9	; 0x09
    27d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	9e 83       	std	Y+6, r25	; 0x06
    27e4:	8d 83       	std	Y+5, r24	; 0x05
    27e6:	8d 81       	ldd	r24, Y+5	; 0x05
    27e8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ea:	9a 83       	std	Y+2, r25	; 0x02
    27ec:	89 83       	std	Y+1, r24	; 0x01
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	9a 81       	ldd	r25, Y+2	; 0x02
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	f1 f7       	brne	.-4      	; 0x27f2 <APP_voidMainMenuScreen+0x312>
    27f6:	9a 83       	std	Y+2, r25	; 0x02
    27f8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(SHORT_SHORT_DELAY);
		LCD_void_Write_String("Reset...");
    27fa:	87 ea       	ldi	r24, 0xA7	; 167
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_void_Write_String>

		APP_voidWelcomeScreen();
    2802:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <APP_voidWelcomeScreen>
	}

}
    2806:	ab 96       	adiw	r28, 0x2b	; 43
    2808:	0f b6       	in	r0, 0x3f	; 63
    280a:	f8 94       	cli
    280c:	de bf       	out	0x3e, r29	; 62
    280e:	0f be       	out	0x3f, r0	; 63
    2810:	cd bf       	out	0x3d, r28	; 61
    2812:	cf 91       	pop	r28
    2814:	df 91       	pop	r29
    2816:	08 95       	ret

00002818 <APP_voidOpenSafeScreen>:


static void APP_voidOpenSafeScreen()
{
    2818:	0f 93       	push	r16
    281a:	1f 93       	push	r17
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	66 97       	sbiw	r28, 0x16	; 22
    2826:	0f b6       	in	r0, 0x3f	; 63
    2828:	f8 94       	cli
    282a:	de bf       	out	0x3e, r29	; 62
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	cd bf       	out	0x3d, r28	; 61

 u8 Enter_Password[4] ;
 u8 state = WRONG_PASSWORD ;
    2830:	1a 8a       	std	Y+18, r1	; 0x12
 	 for(u8 i = 0 ; (i<3 && state==WRONG_PASSWORD) ; i++)
    2832:	19 8a       	std	Y+17, r1	; 0x11
    2834:	ba c0       	rjmp	.+372    	; 0x29aa <APP_voidOpenSafeScreen+0x192>
 	 {
 		 LCD_void_Clear_Screen();
    2836:	0e 94 2b 11 	call	0x2256	; 0x2256 <LCD_void_Clear_Screen>
 		 LCD_void_Write_String("Plz Enter Pass");
    283a:	80 eb       	ldi	r24, 0xB0	; 176
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_void_Write_String>
 		 LCD_void_DDRAM_Address(1,0);
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	60 e0       	ldi	r22, 0x00	; 0
    2846:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_void_DDRAM_Address>
 		 /*get password*/
 		 for(u8 j = 0 ; j<4 ; j++)
    284a:	18 8a       	std	Y+16, r1	; 0x10
    284c:	84 c0       	rjmp	.+264    	; 0x2956 <APP_voidOpenSafeScreen+0x13e>
 		 {
 			Enter_Password[j] = KPD_Void_GET_Status();
    284e:	88 89       	ldd	r24, Y+16	; 0x10
    2850:	08 2f       	mov	r16, r24
    2852:	10 e0       	ldi	r17, 0x00	; 0
    2854:	0e 94 a0 0a 	call	0x1540	; 0x1540 <KPD_Void_GET_Status>
    2858:	28 2f       	mov	r18, r24
    285a:	ce 01       	movw	r24, r28
    285c:	43 96       	adiw	r24, 0x13	; 19
    285e:	fc 01       	movw	r30, r24
    2860:	e0 0f       	add	r30, r16
    2862:	f1 1f       	adc	r31, r17
    2864:	20 83       	st	Z, r18
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	a8 e4       	ldi	r26, 0x48	; 72
    286c:	b3 e4       	ldi	r27, 0x43	; 67
    286e:	8b 87       	std	Y+11, r24	; 0x0b
    2870:	9c 87       	std	Y+12, r25	; 0x0c
    2872:	ad 87       	std	Y+13, r26	; 0x0d
    2874:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2876:	6b 85       	ldd	r22, Y+11	; 0x0b
    2878:	7c 85       	ldd	r23, Y+12	; 0x0c
    287a:	8d 85       	ldd	r24, Y+13	; 0x0d
    287c:	9e 85       	ldd	r25, Y+14	; 0x0e
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	4a ef       	ldi	r20, 0xFA	; 250
    2884:	54 e4       	ldi	r21, 0x44	; 68
    2886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	8f 83       	std	Y+7, r24	; 0x07
    2890:	98 87       	std	Y+8, r25	; 0x08
    2892:	a9 87       	std	Y+9, r26	; 0x09
    2894:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2896:	6f 81       	ldd	r22, Y+7	; 0x07
    2898:	78 85       	ldd	r23, Y+8	; 0x08
    289a:	89 85       	ldd	r24, Y+9	; 0x09
    289c:	9a 85       	ldd	r25, Y+10	; 0x0a
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	40 e8       	ldi	r20, 0x80	; 128
    28a4:	5f e3       	ldi	r21, 0x3F	; 63
    28a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28aa:	88 23       	and	r24, r24
    28ac:	2c f4       	brge	.+10     	; 0x28b8 <APP_voidOpenSafeScreen+0xa0>
		__ticks = 1;
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	9e 83       	std	Y+6, r25	; 0x06
    28b4:	8d 83       	std	Y+5, r24	; 0x05
    28b6:	3f c0       	rjmp	.+126    	; 0x2936 <APP_voidOpenSafeScreen+0x11e>
	else if (__tmp > 65535)
    28b8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ba:	78 85       	ldd	r23, Y+8	; 0x08
    28bc:	89 85       	ldd	r24, Y+9	; 0x09
    28be:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	3f ef       	ldi	r19, 0xFF	; 255
    28c4:	4f e7       	ldi	r20, 0x7F	; 127
    28c6:	57 e4       	ldi	r21, 0x47	; 71
    28c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28cc:	18 16       	cp	r1, r24
    28ce:	4c f5       	brge	.+82     	; 0x2922 <APP_voidOpenSafeScreen+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	40 e2       	ldi	r20, 0x20	; 32
    28de:	51 e4       	ldi	r21, 0x41	; 65
    28e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	bc 01       	movw	r22, r24
    28ea:	cd 01       	movw	r24, r26
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	9e 83       	std	Y+6, r25	; 0x06
    28f6:	8d 83       	std	Y+5, r24	; 0x05
    28f8:	0f c0       	rjmp	.+30     	; 0x2918 <APP_voidOpenSafeScreen+0x100>
    28fa:	88 ec       	ldi	r24, 0xC8	; 200
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	9c 83       	std	Y+4, r25	; 0x04
    2900:	8b 83       	std	Y+3, r24	; 0x03
    2902:	8b 81       	ldd	r24, Y+3	; 0x03
    2904:	9c 81       	ldd	r25, Y+4	; 0x04
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	f1 f7       	brne	.-4      	; 0x2906 <APP_voidOpenSafeScreen+0xee>
    290a:	9c 83       	std	Y+4, r25	; 0x04
    290c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    290e:	8d 81       	ldd	r24, Y+5	; 0x05
    2910:	9e 81       	ldd	r25, Y+6	; 0x06
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	9e 83       	std	Y+6, r25	; 0x06
    2916:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2918:	8d 81       	ldd	r24, Y+5	; 0x05
    291a:	9e 81       	ldd	r25, Y+6	; 0x06
    291c:	00 97       	sbiw	r24, 0x00	; 0
    291e:	69 f7       	brne	.-38     	; 0x28fa <APP_voidOpenSafeScreen+0xe2>
    2920:	14 c0       	rjmp	.+40     	; 0x294a <APP_voidOpenSafeScreen+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2922:	6f 81       	ldd	r22, Y+7	; 0x07
    2924:	78 85       	ldd	r23, Y+8	; 0x08
    2926:	89 85       	ldd	r24, Y+9	; 0x09
    2928:	9a 85       	ldd	r25, Y+10	; 0x0a
    292a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	9e 83       	std	Y+6, r25	; 0x06
    2934:	8d 83       	std	Y+5, r24	; 0x05
    2936:	8d 81       	ldd	r24, Y+5	; 0x05
    2938:	9e 81       	ldd	r25, Y+6	; 0x06
    293a:	9a 83       	std	Y+2, r25	; 0x02
    293c:	89 83       	std	Y+1, r24	; 0x01
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	9a 81       	ldd	r25, Y+2	; 0x02
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	f1 f7       	brne	.-4      	; 0x2942 <APP_voidOpenSafeScreen+0x12a>
    2946:	9a 83       	std	Y+2, r25	; 0x02
    2948:	89 83       	std	Y+1, r24	; 0x01
 			_delay_ms(200);
 			LCD_void_Write_Data('*');
    294a:	8a e2       	ldi	r24, 0x2A	; 42
    294c:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <LCD_void_Write_Data>
 	 {
 		 LCD_void_Clear_Screen();
 		 LCD_void_Write_String("Plz Enter Pass");
 		 LCD_void_DDRAM_Address(1,0);
 		 /*get password*/
 		 for(u8 j = 0 ; j<4 ; j++)
    2950:	88 89       	ldd	r24, Y+16	; 0x10
    2952:	8f 5f       	subi	r24, 0xFF	; 255
    2954:	88 8b       	std	Y+16, r24	; 0x10
    2956:	88 89       	ldd	r24, Y+16	; 0x10
    2958:	84 30       	cpi	r24, 0x04	; 4
    295a:	08 f4       	brcc	.+2      	; 0x295e <APP_voidOpenSafeScreen+0x146>
    295c:	78 cf       	rjmp	.-272    	; 0x284e <APP_voidOpenSafeScreen+0x36>
 			Enter_Password[j] = KPD_Void_GET_Status();
 			_delay_ms(200);
 			LCD_void_Write_Data('*');
 		 }

 		 state = CORRECT_PASSWORD;
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	8a 8b       	std	Y+18, r24	; 0x12

 		 /*check password*/
 		 for(u8 j = 0 ; j<4 ; j++)
    2962:	1f 86       	std	Y+15, r1	; 0x0f
    2964:	1c c0       	rjmp	.+56     	; 0x299e <APP_voidOpenSafeScreen+0x186>
 		 {
 			 if(Enter_Password[j]!=password[j])
    2966:	8f 85       	ldd	r24, Y+15	; 0x0f
    2968:	28 2f       	mov	r18, r24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	ce 01       	movw	r24, r28
    296e:	43 96       	adiw	r24, 0x13	; 19
    2970:	fc 01       	movw	r30, r24
    2972:	e2 0f       	add	r30, r18
    2974:	f3 1f       	adc	r31, r19
    2976:	20 81       	ld	r18, Z
    2978:	8f 85       	ldd	r24, Y+15	; 0x0f
    297a:	88 2f       	mov	r24, r24
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	fc 01       	movw	r30, r24
    2980:	e9 5c       	subi	r30, 0xC9	; 201
    2982:	fe 4f       	sbci	r31, 0xFE	; 254
    2984:	80 81       	ld	r24, Z
    2986:	28 17       	cp	r18, r24
    2988:	39 f0       	breq	.+14     	; 0x2998 <APP_voidOpenSafeScreen+0x180>
 			 {
 				state =WRONG_PASSWORD;
    298a:	1a 8a       	std	Y+18, r1	; 0x12
 				APP_voidWrongPasswordScreen(2-i);
    298c:	82 e0       	ldi	r24, 0x02	; 2
    298e:	99 89       	ldd	r25, Y+17	; 0x11
    2990:	89 1b       	sub	r24, r25
    2992:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <APP_voidWrongPasswordScreen>
    2996:	06 c0       	rjmp	.+12     	; 0x29a4 <APP_voidOpenSafeScreen+0x18c>
 		 }

 		 state = CORRECT_PASSWORD;

 		 /*check password*/
 		 for(u8 j = 0 ; j<4 ; j++)
    2998:	8f 85       	ldd	r24, Y+15	; 0x0f
    299a:	8f 5f       	subi	r24, 0xFF	; 255
    299c:	8f 87       	std	Y+15, r24	; 0x0f
    299e:	8f 85       	ldd	r24, Y+15	; 0x0f
    29a0:	84 30       	cpi	r24, 0x04	; 4
    29a2:	08 f3       	brcs	.-62     	; 0x2966 <APP_voidOpenSafeScreen+0x14e>
static void APP_voidOpenSafeScreen()
{

 u8 Enter_Password[4] ;
 u8 state = WRONG_PASSWORD ;
 	 for(u8 i = 0 ; (i<3 && state==WRONG_PASSWORD) ; i++)
    29a4:	89 89       	ldd	r24, Y+17	; 0x11
    29a6:	8f 5f       	subi	r24, 0xFF	; 255
    29a8:	89 8b       	std	Y+17, r24	; 0x11
    29aa:	89 89       	ldd	r24, Y+17	; 0x11
    29ac:	83 30       	cpi	r24, 0x03	; 3
    29ae:	20 f4       	brcc	.+8      	; 0x29b8 <APP_voidOpenSafeScreen+0x1a0>
    29b0:	8a 89       	ldd	r24, Y+18	; 0x12
    29b2:	88 23       	and	r24, r24
    29b4:	09 f4       	brne	.+2      	; 0x29b8 <APP_voidOpenSafeScreen+0x1a0>
    29b6:	3f cf       	rjmp	.-386    	; 0x2836 <APP_voidOpenSafeScreen+0x1e>
 				APP_voidWrongPasswordScreen(2-i);
 				break;
 			 }
 		 }
 	 }
 	 if(state == CORRECT_PASSWORD)
    29b8:	8a 89       	ldd	r24, Y+18	; 0x12
    29ba:	81 30       	cpi	r24, 0x01	; 1
    29bc:	29 f4       	brne	.+10     	; 0x29c8 <APP_voidOpenSafeScreen+0x1b0>
 	 {
 		APP_voidTruePasswordScreen();
    29be:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <APP_voidTruePasswordScreen>
 		APP_voidMainMenuScreen();
    29c2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <APP_voidMainMenuScreen>
    29c6:	04 c0       	rjmp	.+8      	; 0x29d0 <APP_voidOpenSafeScreen+0x1b8>
 	 }
 	 else
 	 {
 		APP_voidThiefAlert();
    29c8:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <APP_voidThiefAlert>
 		APP_voidMainMenuScreen();
    29cc:	0e 94 70 12 	call	0x24e0	; 0x24e0 <APP_voidMainMenuScreen>
 	 }

}
    29d0:	66 96       	adiw	r28, 0x16	; 22
    29d2:	0f b6       	in	r0, 0x3f	; 63
    29d4:	f8 94       	cli
    29d6:	de bf       	out	0x3e, r29	; 62
    29d8:	0f be       	out	0x3f, r0	; 63
    29da:	cd bf       	out	0x3d, r28	; 61
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	1f 91       	pop	r17
    29e2:	0f 91       	pop	r16
    29e4:	08 95       	ret

000029e6 <APP_voidWrongPasswordScreen>:




static void APP_voidWrongPasswordScreen(u8 illetrations)
{
    29e6:	df 93       	push	r29
    29e8:	cf 93       	push	r28
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
    29ee:	2f 97       	sbiw	r28, 0x0f	; 15
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_void_Clear_Screen();
    29fc:	0e 94 2b 11 	call	0x2256	; 0x2256 <LCD_void_Clear_Screen>
	LCD_void_Write_String("wrong password");
    2a00:	8f eb       	ldi	r24, 0xBF	; 191
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_void_Write_String>
	LCD_void_DDRAM_Address(1,0);
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	60 e0       	ldi	r22, 0x00	; 0
    2a0c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_void_DDRAM_Address>
	LCD_void_Write_String("Tires Left ");
    2a10:	8e ec       	ldi	r24, 0xCE	; 206
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_void_Write_String>
	LCD_void_Write_Numbers(illetrations);
    2a18:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a1a:	88 2f       	mov	r24, r24
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	a0 e0       	ldi	r26, 0x00	; 0
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	bc 01       	movw	r22, r24
    2a24:	cd 01       	movw	r24, r26
    2a26:	0e 94 18 10 	call	0x2030	; 0x2030 <LCD_void_Write_Numbers>

	DIO_U8_Set_Pin_value(LED_RED_PORT , LED_RED_PIN , PIN_HIGH);
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	60 e0       	ldi	r22, 0x00	; 0
    2a2e:	41 e0       	ldi	r20, 0x01	; 1
    2a30:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	aa ef       	ldi	r26, 0xFA	; 250
    2a3a:	b4 e4       	ldi	r27, 0x44	; 68
    2a3c:	8b 87       	std	Y+11, r24	; 0x0b
    2a3e:	9c 87       	std	Y+12, r25	; 0x0c
    2a40:	ad 87       	std	Y+13, r26	; 0x0d
    2a42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	4a ef       	ldi	r20, 0xFA	; 250
    2a52:	54 e4       	ldi	r21, 0x44	; 68
    2a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	8f 83       	std	Y+7, r24	; 0x07
    2a5e:	98 87       	std	Y+8, r25	; 0x08
    2a60:	a9 87       	std	Y+9, r26	; 0x09
    2a62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a64:	6f 81       	ldd	r22, Y+7	; 0x07
    2a66:	78 85       	ldd	r23, Y+8	; 0x08
    2a68:	89 85       	ldd	r24, Y+9	; 0x09
    2a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e8       	ldi	r20, 0x80	; 128
    2a72:	5f e3       	ldi	r21, 0x3F	; 63
    2a74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a78:	88 23       	and	r24, r24
    2a7a:	2c f4       	brge	.+10     	; 0x2a86 <APP_voidWrongPasswordScreen+0xa0>
		__ticks = 1;
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	9e 83       	std	Y+6, r25	; 0x06
    2a82:	8d 83       	std	Y+5, r24	; 0x05
    2a84:	3f c0       	rjmp	.+126    	; 0x2b04 <APP_voidWrongPasswordScreen+0x11e>
	else if (__tmp > 65535)
    2a86:	6f 81       	ldd	r22, Y+7	; 0x07
    2a88:	78 85       	ldd	r23, Y+8	; 0x08
    2a8a:	89 85       	ldd	r24, Y+9	; 0x09
    2a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	3f ef       	ldi	r19, 0xFF	; 255
    2a92:	4f e7       	ldi	r20, 0x7F	; 127
    2a94:	57 e4       	ldi	r21, 0x47	; 71
    2a96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a9a:	18 16       	cp	r1, r24
    2a9c:	4c f5       	brge	.+82     	; 0x2af0 <APP_voidWrongPasswordScreen+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e2       	ldi	r20, 0x20	; 32
    2aac:	51 e4       	ldi	r21, 0x41	; 65
    2aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	cd 01       	movw	r24, r26
    2aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	9e 83       	std	Y+6, r25	; 0x06
    2ac4:	8d 83       	std	Y+5, r24	; 0x05
    2ac6:	0f c0       	rjmp	.+30     	; 0x2ae6 <APP_voidWrongPasswordScreen+0x100>
    2ac8:	88 ec       	ldi	r24, 0xC8	; 200
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	9c 83       	std	Y+4, r25	; 0x04
    2ace:	8b 83       	std	Y+3, r24	; 0x03
    2ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <APP_voidWrongPasswordScreen+0xee>
    2ad8:	9c 83       	std	Y+4, r25	; 0x04
    2ada:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2adc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ade:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	9e 83       	std	Y+6, r25	; 0x06
    2ae4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	69 f7       	brne	.-38     	; 0x2ac8 <APP_voidWrongPasswordScreen+0xe2>
    2aee:	14 c0       	rjmp	.+40     	; 0x2b18 <APP_voidWrongPasswordScreen+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af0:	6f 81       	ldd	r22, Y+7	; 0x07
    2af2:	78 85       	ldd	r23, Y+8	; 0x08
    2af4:	89 85       	ldd	r24, Y+9	; 0x09
    2af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	9e 83       	std	Y+6, r25	; 0x06
    2b02:	8d 83       	std	Y+5, r24	; 0x05
    2b04:	8d 81       	ldd	r24, Y+5	; 0x05
    2b06:	9e 81       	ldd	r25, Y+6	; 0x06
    2b08:	9a 83       	std	Y+2, r25	; 0x02
    2b0a:	89 83       	std	Y+1, r24	; 0x01
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	f1 f7       	brne	.-4      	; 0x2b10 <APP_voidWrongPasswordScreen+0x12a>
    2b14:	9a 83       	std	Y+2, r25	; 0x02
    2b16:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(SHORT_DELAY);
	DIO_U8_Set_Pin_value(LED_RED_PORT , LED_RED_PIN , PIN_LOW);
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	60 e0       	ldi	r22, 0x00	; 0
    2b1c:	40 e0       	ldi	r20, 0x00	; 0
    2b1e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
}
    2b22:	2f 96       	adiw	r28, 0x0f	; 15
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	08 95       	ret

00002b34 <APP_voidTruePasswordScreen>:


static void APP_voidTruePasswordScreen(){
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	2e 97       	sbiw	r28, 0x0e	; 14
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61
		LCD_void_Clear_Screen();
    2b48:	0e 94 2b 11 	call	0x2256	; 0x2256 <LCD_void_Clear_Screen>
		LCD_void_Write_String("True password!!");
    2b4c:	8a ed       	ldi	r24, 0xDA	; 218
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_void_Write_String>
		DIO_U8_Set_Pin_value(LED_GREEN_PORT , LED_GREEN_PIN , PIN_HIGH);
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	61 e0       	ldi	r22, 0x01	; 1
    2b58:	41 e0       	ldi	r20, 0x01	; 1
    2b5a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	aa e7       	ldi	r26, 0x7A	; 122
    2b64:	b5 e4       	ldi	r27, 0x45	; 69
    2b66:	8b 87       	std	Y+11, r24	; 0x0b
    2b68:	9c 87       	std	Y+12, r25	; 0x0c
    2b6a:	ad 87       	std	Y+13, r26	; 0x0d
    2b6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	4a ef       	ldi	r20, 0xFA	; 250
    2b7c:	54 e4       	ldi	r21, 0x44	; 68
    2b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	8f 83       	std	Y+7, r24	; 0x07
    2b88:	98 87       	std	Y+8, r25	; 0x08
    2b8a:	a9 87       	std	Y+9, r26	; 0x09
    2b8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b90:	78 85       	ldd	r23, Y+8	; 0x08
    2b92:	89 85       	ldd	r24, Y+9	; 0x09
    2b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	40 e8       	ldi	r20, 0x80	; 128
    2b9c:	5f e3       	ldi	r21, 0x3F	; 63
    2b9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ba2:	88 23       	and	r24, r24
    2ba4:	2c f4       	brge	.+10     	; 0x2bb0 <APP_voidTruePasswordScreen+0x7c>
		__ticks = 1;
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	9e 83       	std	Y+6, r25	; 0x06
    2bac:	8d 83       	std	Y+5, r24	; 0x05
    2bae:	3f c0       	rjmp	.+126    	; 0x2c2e <APP_voidTruePasswordScreen+0xfa>
	else if (__tmp > 65535)
    2bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb2:	78 85       	ldd	r23, Y+8	; 0x08
    2bb4:	89 85       	ldd	r24, Y+9	; 0x09
    2bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	3f ef       	ldi	r19, 0xFF	; 255
    2bbc:	4f e7       	ldi	r20, 0x7F	; 127
    2bbe:	57 e4       	ldi	r21, 0x47	; 71
    2bc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bc4:	18 16       	cp	r1, r24
    2bc6:	4c f5       	brge	.+82     	; 0x2c1a <APP_voidTruePasswordScreen+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e2       	ldi	r20, 0x20	; 32
    2bd6:	51 e4       	ldi	r21, 0x41	; 65
    2bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	bc 01       	movw	r22, r24
    2be2:	cd 01       	movw	r24, r26
    2be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	9e 83       	std	Y+6, r25	; 0x06
    2bee:	8d 83       	std	Y+5, r24	; 0x05
    2bf0:	0f c0       	rjmp	.+30     	; 0x2c10 <APP_voidTruePasswordScreen+0xdc>
    2bf2:	88 ec       	ldi	r24, 0xC8	; 200
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	9c 83       	std	Y+4, r25	; 0x04
    2bf8:	8b 83       	std	Y+3, r24	; 0x03
    2bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	f1 f7       	brne	.-4      	; 0x2bfe <APP_voidTruePasswordScreen+0xca>
    2c02:	9c 83       	std	Y+4, r25	; 0x04
    2c04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c06:	8d 81       	ldd	r24, Y+5	; 0x05
    2c08:	9e 81       	ldd	r25, Y+6	; 0x06
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	9e 83       	std	Y+6, r25	; 0x06
    2c0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c10:	8d 81       	ldd	r24, Y+5	; 0x05
    2c12:	9e 81       	ldd	r25, Y+6	; 0x06
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	69 f7       	brne	.-38     	; 0x2bf2 <APP_voidTruePasswordScreen+0xbe>
    2c18:	14 c0       	rjmp	.+40     	; 0x2c42 <APP_voidTruePasswordScreen+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1c:	78 85       	ldd	r23, Y+8	; 0x08
    2c1e:	89 85       	ldd	r24, Y+9	; 0x09
    2c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	9e 83       	std	Y+6, r25	; 0x06
    2c2c:	8d 83       	std	Y+5, r24	; 0x05
    2c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c30:	9e 81       	ldd	r25, Y+6	; 0x06
    2c32:	9a 83       	std	Y+2, r25	; 0x02
    2c34:	89 83       	std	Y+1, r24	; 0x01
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	f1 f7       	brne	.-4      	; 0x2c3a <APP_voidTruePasswordScreen+0x106>
    2c3e:	9a 83       	std	Y+2, r25	; 0x02
    2c40:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(LONG_DELAY);
		DIO_U8_Set_Pin_value(LED_GREEN_PORT , LED_GREEN_PIN , PIN_LOW);
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	61 e0       	ldi	r22, 0x01	; 1
    2c46:	40 e0       	ldi	r20, 0x00	; 0
    2c48:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
}
    2c4c:	2e 96       	adiw	r28, 0x0e	; 14
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61
    2c58:	cf 91       	pop	r28
    2c5a:	df 91       	pop	r29
    2c5c:	08 95       	ret

00002c5e <APP_voidThiefAlert>:

static void APP_voidThiefAlert(){
    2c5e:	df 93       	push	r29
    2c60:	cf 93       	push	r28
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	2e 97       	sbiw	r28, 0x0e	; 14
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
static u8 state = 0;
		LCD_void_Clear_Screen();
    2c72:	0e 94 2b 11 	call	0x2256	; 0x2256 <LCD_void_Clear_Screen>
		LCD_void_Write_String("Thief Alert !!");
    2c76:	8a ee       	ldi	r24, 0xEA	; 234
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_void_Write_String>
		DIO_U8_Set_Pin_value(LED_RED_PORT , LED_RED_PIN , PIN_HIGH );
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	60 e0       	ldi	r22, 0x00	; 0
    2c82:	41 e0       	ldi	r20, 0x01	; 1
    2c84:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
		DIO_U8_Set_Pin_value(BUZZER_PORT , BUZZER_PIN , PIN_HIGH);
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	62 e0       	ldi	r22, 0x02	; 2
    2c8c:	41 e0       	ldi	r20, 0x01	; 1
    2c8e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	aa e7       	ldi	r26, 0x7A	; 122
    2c98:	b5 e4       	ldi	r27, 0x45	; 69
    2c9a:	8b 87       	std	Y+11, r24	; 0x0b
    2c9c:	9c 87       	std	Y+12, r25	; 0x0c
    2c9e:	ad 87       	std	Y+13, r26	; 0x0d
    2ca0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	4a ef       	ldi	r20, 0xFA	; 250
    2cb0:	54 e4       	ldi	r21, 0x44	; 68
    2cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	8f 83       	std	Y+7, r24	; 0x07
    2cbc:	98 87       	std	Y+8, r25	; 0x08
    2cbe:	a9 87       	std	Y+9, r26	; 0x09
    2cc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc4:	78 85       	ldd	r23, Y+8	; 0x08
    2cc6:	89 85       	ldd	r24, Y+9	; 0x09
    2cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e8       	ldi	r20, 0x80	; 128
    2cd0:	5f e3       	ldi	r21, 0x3F	; 63
    2cd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cd6:	88 23       	and	r24, r24
    2cd8:	2c f4       	brge	.+10     	; 0x2ce4 <APP_voidThiefAlert+0x86>
		__ticks = 1;
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	9e 83       	std	Y+6, r25	; 0x06
    2ce0:	8d 83       	std	Y+5, r24	; 0x05
    2ce2:	3f c0       	rjmp	.+126    	; 0x2d62 <APP_voidThiefAlert+0x104>
	else if (__tmp > 65535)
    2ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce6:	78 85       	ldd	r23, Y+8	; 0x08
    2ce8:	89 85       	ldd	r24, Y+9	; 0x09
    2cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	3f ef       	ldi	r19, 0xFF	; 255
    2cf0:	4f e7       	ldi	r20, 0x7F	; 127
    2cf2:	57 e4       	ldi	r21, 0x47	; 71
    2cf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cf8:	18 16       	cp	r1, r24
    2cfa:	4c f5       	brge	.+82     	; 0x2d4e <APP_voidThiefAlert+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	40 e2       	ldi	r20, 0x20	; 32
    2d0a:	51 e4       	ldi	r21, 0x41	; 65
    2d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	bc 01       	movw	r22, r24
    2d16:	cd 01       	movw	r24, r26
    2d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	9e 83       	std	Y+6, r25	; 0x06
    2d22:	8d 83       	std	Y+5, r24	; 0x05
    2d24:	0f c0       	rjmp	.+30     	; 0x2d44 <APP_voidThiefAlert+0xe6>
    2d26:	88 ec       	ldi	r24, 0xC8	; 200
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	9c 83       	std	Y+4, r25	; 0x04
    2d2c:	8b 83       	std	Y+3, r24	; 0x03
    2d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d30:	9c 81       	ldd	r25, Y+4	; 0x04
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <APP_voidThiefAlert+0xd4>
    2d36:	9c 83       	std	Y+4, r25	; 0x04
    2d38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	9e 83       	std	Y+6, r25	; 0x06
    2d42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d44:	8d 81       	ldd	r24, Y+5	; 0x05
    2d46:	9e 81       	ldd	r25, Y+6	; 0x06
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	69 f7       	brne	.-38     	; 0x2d26 <APP_voidThiefAlert+0xc8>
    2d4c:	14 c0       	rjmp	.+40     	; 0x2d76 <APP_voidThiefAlert+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d50:	78 85       	ldd	r23, Y+8	; 0x08
    2d52:	89 85       	ldd	r24, Y+9	; 0x09
    2d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	9e 83       	std	Y+6, r25	; 0x06
    2d60:	8d 83       	std	Y+5, r24	; 0x05
    2d62:	8d 81       	ldd	r24, Y+5	; 0x05
    2d64:	9e 81       	ldd	r25, Y+6	; 0x06
    2d66:	9a 83       	std	Y+2, r25	; 0x02
    2d68:	89 83       	std	Y+1, r24	; 0x01
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <APP_voidThiefAlert+0x110>
    2d72:	9a 83       	std	Y+2, r25	; 0x02
    2d74:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(LONG_DELAY);
		DIO_U8_Set_Pin_value(BUZZER_PORT , BUZZER_PIN , PIN_LOW);
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	62 e0       	ldi	r22, 0x02	; 2
    2d7a:	40 e0       	ldi	r20, 0x00	; 0
    2d7c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
		DIO_U8_Set_Pin_value(LED_RED_PORT , LED_RED_PIN , PIN_LOW);
    2d80:	80 e0       	ldi	r24, 0x00	; 0
    2d82:	60 e0       	ldi	r22, 0x00	; 0
    2d84:	40 e0       	ldi	r20, 0x00	; 0
    2d86:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DIO_U8_Set_Pin_value>
}
    2d8a:	2e 96       	adiw	r28, 0x0e	; 14
    2d8c:	0f b6       	in	r0, 0x3f	; 63
    2d8e:	f8 94       	cli
    2d90:	de bf       	out	0x3e, r29	; 62
    2d92:	0f be       	out	0x3f, r0	; 63
    2d94:	cd bf       	out	0x3d, r28	; 61
    2d96:	cf 91       	pop	r28
    2d98:	df 91       	pop	r29
    2d9a:	08 95       	ret

00002d9c <APP_voidChangePasswordScreen>:


static void APP_voidChangePasswordScreen()
{
    2d9c:	0f 93       	push	r16
    2d9e:	1f 93       	push	r17
    2da0:	df 93       	push	r29
    2da2:	cf 93       	push	r28
    2da4:	cd b7       	in	r28, 0x3d	; 61
    2da6:	de b7       	in	r29, 0x3e	; 62
    2da8:	66 97       	sbiw	r28, 0x16	; 22
    2daa:	0f b6       	in	r0, 0x3f	; 63
    2dac:	f8 94       	cli
    2dae:	de bf       	out	0x3e, r29	; 62
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	cd bf       	out	0x3d, r28	; 61
	u8 old_password[4];
	u8 state = WRONG_PASSWORD ;
    2db4:	1a 8a       	std	Y+18, r1	; 0x12
	for(u8 i=0 ; (i<3 && state ==WRONG_PASSWORD) ; i++ )
    2db6:	19 8a       	std	Y+17, r1	; 0x11
    2db8:	ba c0       	rjmp	.+372    	; 0x2f2e <APP_voidChangePasswordScreen+0x192>
	{
		LCD_void_Clear_Screen();
    2dba:	0e 94 2b 11 	call	0x2256	; 0x2256 <LCD_void_Clear_Screen>
		LCD_void_Write_String("Enter old pass");
    2dbe:	89 ef       	ldi	r24, 0xF9	; 249
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_void_Write_String>
		LCD_void_DDRAM_Address(1,0);
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	60 e0       	ldi	r22, 0x00	; 0
    2dca:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_void_DDRAM_Address>
		/*get password*/
		for(u8 j = 0 ; j<4 ; j++)
    2dce:	18 8a       	std	Y+16, r1	; 0x10
    2dd0:	84 c0       	rjmp	.+264    	; 0x2eda <APP_voidChangePasswordScreen+0x13e>
		{
			old_password[j] = KPD_Void_GET_Status();
    2dd2:	88 89       	ldd	r24, Y+16	; 0x10
    2dd4:	08 2f       	mov	r16, r24
    2dd6:	10 e0       	ldi	r17, 0x00	; 0
    2dd8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <KPD_Void_GET_Status>
    2ddc:	28 2f       	mov	r18, r24
    2dde:	ce 01       	movw	r24, r28
    2de0:	43 96       	adiw	r24, 0x13	; 19
    2de2:	fc 01       	movw	r30, r24
    2de4:	e0 0f       	add	r30, r16
    2de6:	f1 1f       	adc	r31, r17
    2de8:	20 83       	st	Z, r18
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	a8 e4       	ldi	r26, 0x48	; 72
    2df0:	b3 e4       	ldi	r27, 0x43	; 67
    2df2:	8b 87       	std	Y+11, r24	; 0x0b
    2df4:	9c 87       	std	Y+12, r25	; 0x0c
    2df6:	ad 87       	std	Y+13, r26	; 0x0d
    2df8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	4a ef       	ldi	r20, 0xFA	; 250
    2e08:	54 e4       	ldi	r21, 0x44	; 68
    2e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	8f 83       	std	Y+7, r24	; 0x07
    2e14:	98 87       	std	Y+8, r25	; 0x08
    2e16:	a9 87       	std	Y+9, r26	; 0x09
    2e18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1c:	78 85       	ldd	r23, Y+8	; 0x08
    2e1e:	89 85       	ldd	r24, Y+9	; 0x09
    2e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	40 e8       	ldi	r20, 0x80	; 128
    2e28:	5f e3       	ldi	r21, 0x3F	; 63
    2e2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e2e:	88 23       	and	r24, r24
    2e30:	2c f4       	brge	.+10     	; 0x2e3c <APP_voidChangePasswordScreen+0xa0>
		__ticks = 1;
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	9e 83       	std	Y+6, r25	; 0x06
    2e38:	8d 83       	std	Y+5, r24	; 0x05
    2e3a:	3f c0       	rjmp	.+126    	; 0x2eba <APP_voidChangePasswordScreen+0x11e>
	else if (__tmp > 65535)
    2e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e3e:	78 85       	ldd	r23, Y+8	; 0x08
    2e40:	89 85       	ldd	r24, Y+9	; 0x09
    2e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	3f ef       	ldi	r19, 0xFF	; 255
    2e48:	4f e7       	ldi	r20, 0x7F	; 127
    2e4a:	57 e4       	ldi	r21, 0x47	; 71
    2e4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e50:	18 16       	cp	r1, r24
    2e52:	4c f5       	brge	.+82     	; 0x2ea6 <APP_voidChangePasswordScreen+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e2       	ldi	r20, 0x20	; 32
    2e62:	51 e4       	ldi	r21, 0x41	; 65
    2e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	bc 01       	movw	r22, r24
    2e6e:	cd 01       	movw	r24, r26
    2e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	9e 83       	std	Y+6, r25	; 0x06
    2e7a:	8d 83       	std	Y+5, r24	; 0x05
    2e7c:	0f c0       	rjmp	.+30     	; 0x2e9c <APP_voidChangePasswordScreen+0x100>
    2e7e:	88 ec       	ldi	r24, 0xC8	; 200
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	9c 83       	std	Y+4, r25	; 0x04
    2e84:	8b 83       	std	Y+3, r24	; 0x03
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8a:	01 97       	sbiw	r24, 0x01	; 1
    2e8c:	f1 f7       	brne	.-4      	; 0x2e8a <APP_voidChangePasswordScreen+0xee>
    2e8e:	9c 83       	std	Y+4, r25	; 0x04
    2e90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e92:	8d 81       	ldd	r24, Y+5	; 0x05
    2e94:	9e 81       	ldd	r25, Y+6	; 0x06
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	9e 83       	std	Y+6, r25	; 0x06
    2e9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea0:	00 97       	sbiw	r24, 0x00	; 0
    2ea2:	69 f7       	brne	.-38     	; 0x2e7e <APP_voidChangePasswordScreen+0xe2>
    2ea4:	14 c0       	rjmp	.+40     	; 0x2ece <APP_voidChangePasswordScreen+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea8:	78 85       	ldd	r23, Y+8	; 0x08
    2eaa:	89 85       	ldd	r24, Y+9	; 0x09
    2eac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	9e 83       	std	Y+6, r25	; 0x06
    2eb8:	8d 83       	std	Y+5, r24	; 0x05
    2eba:	8d 81       	ldd	r24, Y+5	; 0x05
    2ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ebe:	9a 83       	std	Y+2, r25	; 0x02
    2ec0:	89 83       	std	Y+1, r24	; 0x01
    2ec2:	89 81       	ldd	r24, Y+1	; 0x01
    2ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec6:	01 97       	sbiw	r24, 0x01	; 1
    2ec8:	f1 f7       	brne	.-4      	; 0x2ec6 <APP_voidChangePasswordScreen+0x12a>
    2eca:	9a 83       	std	Y+2, r25	; 0x02
    2ecc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(200);
			LCD_void_Write_Data('*');
    2ece:	8a e2       	ldi	r24, 0x2A	; 42
    2ed0:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <LCD_void_Write_Data>
	{
		LCD_void_Clear_Screen();
		LCD_void_Write_String("Enter old pass");
		LCD_void_DDRAM_Address(1,0);
		/*get password*/
		for(u8 j = 0 ; j<4 ; j++)
    2ed4:	88 89       	ldd	r24, Y+16	; 0x10
    2ed6:	8f 5f       	subi	r24, 0xFF	; 255
    2ed8:	88 8b       	std	Y+16, r24	; 0x10
    2eda:	88 89       	ldd	r24, Y+16	; 0x10
    2edc:	84 30       	cpi	r24, 0x04	; 4
    2ede:	08 f4       	brcc	.+2      	; 0x2ee2 <APP_voidChangePasswordScreen+0x146>
    2ee0:	78 cf       	rjmp	.-272    	; 0x2dd2 <APP_voidChangePasswordScreen+0x36>
		{
			old_password[j] = KPD_Void_GET_Status();
			_delay_ms(200);
			LCD_void_Write_Data('*');
		}
		state = CORRECT_PASSWORD ;
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	8a 8b       	std	Y+18, r24	; 0x12
		/*check password*/
		for(u8 j = 0 ; j<4 ; j++)
    2ee6:	1f 86       	std	Y+15, r1	; 0x0f
    2ee8:	1c c0       	rjmp	.+56     	; 0x2f22 <APP_voidChangePasswordScreen+0x186>
		{
			if(old_password[j] != password[j] )
    2eea:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eec:	28 2f       	mov	r18, r24
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	ce 01       	movw	r24, r28
    2ef2:	43 96       	adiw	r24, 0x13	; 19
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	e2 0f       	add	r30, r18
    2ef8:	f3 1f       	adc	r31, r19
    2efa:	20 81       	ld	r18, Z
    2efc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2efe:	88 2f       	mov	r24, r24
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	fc 01       	movw	r30, r24
    2f04:	e9 5c       	subi	r30, 0xC9	; 201
    2f06:	fe 4f       	sbci	r31, 0xFE	; 254
    2f08:	80 81       	ld	r24, Z
    2f0a:	28 17       	cp	r18, r24
    2f0c:	39 f0       	breq	.+14     	; 0x2f1c <APP_voidChangePasswordScreen+0x180>
			{
				state = WRONG_PASSWORD ;
    2f0e:	1a 8a       	std	Y+18, r1	; 0x12
				APP_voidWrongPasswordScreen(2-i);
    2f10:	82 e0       	ldi	r24, 0x02	; 2
    2f12:	99 89       	ldd	r25, Y+17	; 0x11
    2f14:	89 1b       	sub	r24, r25
    2f16:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <APP_voidWrongPasswordScreen>
    2f1a:	06 c0       	rjmp	.+12     	; 0x2f28 <APP_voidChangePasswordScreen+0x18c>
			_delay_ms(200);
			LCD_void_Write_Data('*');
		}
		state = CORRECT_PASSWORD ;
		/*check password*/
		for(u8 j = 0 ; j<4 ; j++)
    2f1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f1e:	8f 5f       	subi	r24, 0xFF	; 255
    2f20:	8f 87       	std	Y+15, r24	; 0x0f
    2f22:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f24:	84 30       	cpi	r24, 0x04	; 4
    2f26:	08 f3       	brcs	.-62     	; 0x2eea <APP_voidChangePasswordScreen+0x14e>

static void APP_voidChangePasswordScreen()
{
	u8 old_password[4];
	u8 state = WRONG_PASSWORD ;
	for(u8 i=0 ; (i<3 && state ==WRONG_PASSWORD) ; i++ )
    2f28:	89 89       	ldd	r24, Y+17	; 0x11
    2f2a:	8f 5f       	subi	r24, 0xFF	; 255
    2f2c:	89 8b       	std	Y+17, r24	; 0x11
    2f2e:	89 89       	ldd	r24, Y+17	; 0x11
    2f30:	83 30       	cpi	r24, 0x03	; 3
    2f32:	20 f4       	brcc	.+8      	; 0x2f3c <APP_voidChangePasswordScreen+0x1a0>
    2f34:	8a 89       	ldd	r24, Y+18	; 0x12
    2f36:	88 23       	and	r24, r24
    2f38:	09 f4       	brne	.+2      	; 0x2f3c <APP_voidChangePasswordScreen+0x1a0>
    2f3a:	3f cf       	rjmp	.-386    	; 0x2dba <APP_voidChangePasswordScreen+0x1e>
				break;
			}
		}

	}
	if(state == WRONG_PASSWORD)
    2f3c:	8a 89       	ldd	r24, Y+18	; 0x12
    2f3e:	88 23       	and	r24, r24
    2f40:	29 f4       	brne	.+10     	; 0x2f4c <APP_voidChangePasswordScreen+0x1b0>
	{
		APP_voidThiefAlert();
    2f42:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <APP_voidThiefAlert>
		APP_voidMainMenuScreen();
    2f46:	0e 94 70 12 	call	0x24e0	; 0x24e0 <APP_voidMainMenuScreen>
    2f4a:	04 c0       	rjmp	.+8      	; 0x2f54 <APP_voidChangePasswordScreen+0x1b8>
	}
	else
	{
		APP_voidChangePassword();
    2f4c:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <APP_voidChangePassword>
		APP_voidMainMenuScreen();
    2f50:	0e 94 70 12 	call	0x24e0	; 0x24e0 <APP_voidMainMenuScreen>
	}
}
    2f54:	66 96       	adiw	r28, 0x16	; 22
    2f56:	0f b6       	in	r0, 0x3f	; 63
    2f58:	f8 94       	cli
    2f5a:	de bf       	out	0x3e, r29	; 62
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	cd bf       	out	0x3d, r28	; 61
    2f60:	cf 91       	pop	r28
    2f62:	df 91       	pop	r29
    2f64:	1f 91       	pop	r17
    2f66:	0f 91       	pop	r16
    2f68:	08 95       	ret

00002f6a <APP_voidChangePassword>:


static void APP_voidChangePassword()
{
    2f6a:	0f 93       	push	r16
    2f6c:	1f 93       	push	r17
    2f6e:	df 93       	push	r29
    2f70:	cf 93       	push	r28
    2f72:	cd b7       	in	r28, 0x3d	; 61
    2f74:	de b7       	in	r29, 0x3e	; 62
    2f76:	2f 97       	sbiw	r28, 0x0f	; 15
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	cd bf       	out	0x3d, r28	; 61

	LCD_void_Clear_Screen();
    2f82:	0e 94 2b 11 	call	0x2256	; 0x2256 <LCD_void_Clear_Screen>
	LCD_void_Write_String("Enter New Pass");
    2f86:	88 e0       	ldi	r24, 0x08	; 8
    2f88:	91 e0       	ldi	r25, 0x01	; 1
    2f8a:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_void_Write_String>
	LCD_void_DDRAM_Address(1,0);
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	60 e0       	ldi	r22, 0x00	; 0
    2f92:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LCD_void_DDRAM_Address>

	for(u8 i=0 ; i<4 ; i++)
    2f96:	1f 86       	std	Y+15, r1	; 0x0f
    2f98:	81 c0       	rjmp	.+258    	; 0x309c <APP_voidChangePassword+0x132>
	{
		password[i] = KPD_Void_GET_Status();
    2f9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f9c:	08 2f       	mov	r16, r24
    2f9e:	10 e0       	ldi	r17, 0x00	; 0
    2fa0:	0e 94 a0 0a 	call	0x1540	; 0x1540 <KPD_Void_GET_Status>
    2fa4:	f8 01       	movw	r30, r16
    2fa6:	e9 5c       	subi	r30, 0xC9	; 201
    2fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    2faa:	80 83       	st	Z, r24
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	a8 e4       	ldi	r26, 0x48	; 72
    2fb2:	b3 e4       	ldi	r27, 0x43	; 67
    2fb4:	8b 87       	std	Y+11, r24	; 0x0b
    2fb6:	9c 87       	std	Y+12, r25	; 0x0c
    2fb8:	ad 87       	std	Y+13, r26	; 0x0d
    2fba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	4a ef       	ldi	r20, 0xFA	; 250
    2fca:	54 e4       	ldi	r21, 0x44	; 68
    2fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	8f 83       	std	Y+7, r24	; 0x07
    2fd6:	98 87       	std	Y+8, r25	; 0x08
    2fd8:	a9 87       	std	Y+9, r26	; 0x09
    2fda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2fde:	78 85       	ldd	r23, Y+8	; 0x08
    2fe0:	89 85       	ldd	r24, Y+9	; 0x09
    2fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	40 e8       	ldi	r20, 0x80	; 128
    2fea:	5f e3       	ldi	r21, 0x3F	; 63
    2fec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ff0:	88 23       	and	r24, r24
    2ff2:	2c f4       	brge	.+10     	; 0x2ffe <APP_voidChangePassword+0x94>
		__ticks = 1;
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	9e 83       	std	Y+6, r25	; 0x06
    2ffa:	8d 83       	std	Y+5, r24	; 0x05
    2ffc:	3f c0       	rjmp	.+126    	; 0x307c <APP_voidChangePassword+0x112>
	else if (__tmp > 65535)
    2ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    3000:	78 85       	ldd	r23, Y+8	; 0x08
    3002:	89 85       	ldd	r24, Y+9	; 0x09
    3004:	9a 85       	ldd	r25, Y+10	; 0x0a
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	3f ef       	ldi	r19, 0xFF	; 255
    300a:	4f e7       	ldi	r20, 0x7F	; 127
    300c:	57 e4       	ldi	r21, 0x47	; 71
    300e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3012:	18 16       	cp	r1, r24
    3014:	4c f5       	brge	.+82     	; 0x3068 <APP_voidChangePassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3016:	6b 85       	ldd	r22, Y+11	; 0x0b
    3018:	7c 85       	ldd	r23, Y+12	; 0x0c
    301a:	8d 85       	ldd	r24, Y+13	; 0x0d
    301c:	9e 85       	ldd	r25, Y+14	; 0x0e
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e2       	ldi	r20, 0x20	; 32
    3024:	51 e4       	ldi	r21, 0x41	; 65
    3026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	bc 01       	movw	r22, r24
    3030:	cd 01       	movw	r24, r26
    3032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	9e 83       	std	Y+6, r25	; 0x06
    303c:	8d 83       	std	Y+5, r24	; 0x05
    303e:	0f c0       	rjmp	.+30     	; 0x305e <APP_voidChangePassword+0xf4>
    3040:	88 ec       	ldi	r24, 0xC8	; 200
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	9c 83       	std	Y+4, r25	; 0x04
    3046:	8b 83       	std	Y+3, r24	; 0x03
    3048:	8b 81       	ldd	r24, Y+3	; 0x03
    304a:	9c 81       	ldd	r25, Y+4	; 0x04
    304c:	01 97       	sbiw	r24, 0x01	; 1
    304e:	f1 f7       	brne	.-4      	; 0x304c <APP_voidChangePassword+0xe2>
    3050:	9c 83       	std	Y+4, r25	; 0x04
    3052:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3054:	8d 81       	ldd	r24, Y+5	; 0x05
    3056:	9e 81       	ldd	r25, Y+6	; 0x06
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	9e 83       	std	Y+6, r25	; 0x06
    305c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    305e:	8d 81       	ldd	r24, Y+5	; 0x05
    3060:	9e 81       	ldd	r25, Y+6	; 0x06
    3062:	00 97       	sbiw	r24, 0x00	; 0
    3064:	69 f7       	brne	.-38     	; 0x3040 <APP_voidChangePassword+0xd6>
    3066:	14 c0       	rjmp	.+40     	; 0x3090 <APP_voidChangePassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3068:	6f 81       	ldd	r22, Y+7	; 0x07
    306a:	78 85       	ldd	r23, Y+8	; 0x08
    306c:	89 85       	ldd	r24, Y+9	; 0x09
    306e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	9e 83       	std	Y+6, r25	; 0x06
    307a:	8d 83       	std	Y+5, r24	; 0x05
    307c:	8d 81       	ldd	r24, Y+5	; 0x05
    307e:	9e 81       	ldd	r25, Y+6	; 0x06
    3080:	9a 83       	std	Y+2, r25	; 0x02
    3082:	89 83       	std	Y+1, r24	; 0x01
    3084:	89 81       	ldd	r24, Y+1	; 0x01
    3086:	9a 81       	ldd	r25, Y+2	; 0x02
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	f1 f7       	brne	.-4      	; 0x3088 <APP_voidChangePassword+0x11e>
    308c:	9a 83       	std	Y+2, r25	; 0x02
    308e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		LCD_void_Write_Data('*');
    3090:	8a e2       	ldi	r24, 0x2A	; 42
    3092:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <LCD_void_Write_Data>

	LCD_void_Clear_Screen();
	LCD_void_Write_String("Enter New Pass");
	LCD_void_DDRAM_Address(1,0);

	for(u8 i=0 ; i<4 ; i++)
    3096:	8f 85       	ldd	r24, Y+15	; 0x0f
    3098:	8f 5f       	subi	r24, 0xFF	; 255
    309a:	8f 87       	std	Y+15, r24	; 0x0f
    309c:	8f 85       	ldd	r24, Y+15	; 0x0f
    309e:	84 30       	cpi	r24, 0x04	; 4
    30a0:	08 f4       	brcc	.+2      	; 0x30a4 <APP_voidChangePassword+0x13a>
    30a2:	7b cf       	rjmp	.-266    	; 0x2f9a <APP_voidChangePassword+0x30>
		password[i] = KPD_Void_GET_Status();
		_delay_ms(200);
		LCD_void_Write_Data('*');
	}

}
    30a4:	2f 96       	adiw	r28, 0x0f	; 15
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	f8 94       	cli
    30aa:	de bf       	out	0x3e, r29	; 62
    30ac:	0f be       	out	0x3f, r0	; 63
    30ae:	cd bf       	out	0x3d, r28	; 61
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	1f 91       	pop	r17
    30b6:	0f 91       	pop	r16
    30b8:	08 95       	ret

000030ba <main>:


#include"app.h"

void main(void)
{
    30ba:	df 93       	push	r29
    30bc:	cf 93       	push	r28
    30be:	cd b7       	in	r28, 0x3d	; 61
    30c0:	de b7       	in	r29, 0x3e	; 62
	APP_voidInit();
    30c2:	0e 94 d6 11 	call	0x23ac	; 0x23ac <APP_voidInit>
	APP_voidWelcomeScreen();
    30c6:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <APP_voidWelcomeScreen>
    30ca:	ff cf       	rjmp	.-2      	; 0x30ca <main+0x10>

000030cc <__udivmodsi4>:
    30cc:	a1 e2       	ldi	r26, 0x21	; 33
    30ce:	1a 2e       	mov	r1, r26
    30d0:	aa 1b       	sub	r26, r26
    30d2:	bb 1b       	sub	r27, r27
    30d4:	fd 01       	movw	r30, r26
    30d6:	0d c0       	rjmp	.+26     	; 0x30f2 <__udivmodsi4_ep>

000030d8 <__udivmodsi4_loop>:
    30d8:	aa 1f       	adc	r26, r26
    30da:	bb 1f       	adc	r27, r27
    30dc:	ee 1f       	adc	r30, r30
    30de:	ff 1f       	adc	r31, r31
    30e0:	a2 17       	cp	r26, r18
    30e2:	b3 07       	cpc	r27, r19
    30e4:	e4 07       	cpc	r30, r20
    30e6:	f5 07       	cpc	r31, r21
    30e8:	20 f0       	brcs	.+8      	; 0x30f2 <__udivmodsi4_ep>
    30ea:	a2 1b       	sub	r26, r18
    30ec:	b3 0b       	sbc	r27, r19
    30ee:	e4 0b       	sbc	r30, r20
    30f0:	f5 0b       	sbc	r31, r21

000030f2 <__udivmodsi4_ep>:
    30f2:	66 1f       	adc	r22, r22
    30f4:	77 1f       	adc	r23, r23
    30f6:	88 1f       	adc	r24, r24
    30f8:	99 1f       	adc	r25, r25
    30fa:	1a 94       	dec	r1
    30fc:	69 f7       	brne	.-38     	; 0x30d8 <__udivmodsi4_loop>
    30fe:	60 95       	com	r22
    3100:	70 95       	com	r23
    3102:	80 95       	com	r24
    3104:	90 95       	com	r25
    3106:	9b 01       	movw	r18, r22
    3108:	ac 01       	movw	r20, r24
    310a:	bd 01       	movw	r22, r26
    310c:	cf 01       	movw	r24, r30
    310e:	08 95       	ret

00003110 <__prologue_saves__>:
    3110:	2f 92       	push	r2
    3112:	3f 92       	push	r3
    3114:	4f 92       	push	r4
    3116:	5f 92       	push	r5
    3118:	6f 92       	push	r6
    311a:	7f 92       	push	r7
    311c:	8f 92       	push	r8
    311e:	9f 92       	push	r9
    3120:	af 92       	push	r10
    3122:	bf 92       	push	r11
    3124:	cf 92       	push	r12
    3126:	df 92       	push	r13
    3128:	ef 92       	push	r14
    312a:	ff 92       	push	r15
    312c:	0f 93       	push	r16
    312e:	1f 93       	push	r17
    3130:	cf 93       	push	r28
    3132:	df 93       	push	r29
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	ca 1b       	sub	r28, r26
    313a:	db 0b       	sbc	r29, r27
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	de bf       	out	0x3e, r29	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	cd bf       	out	0x3d, r28	; 61
    3146:	09 94       	ijmp

00003148 <__epilogue_restores__>:
    3148:	2a 88       	ldd	r2, Y+18	; 0x12
    314a:	39 88       	ldd	r3, Y+17	; 0x11
    314c:	48 88       	ldd	r4, Y+16	; 0x10
    314e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3150:	6e 84       	ldd	r6, Y+14	; 0x0e
    3152:	7d 84       	ldd	r7, Y+13	; 0x0d
    3154:	8c 84       	ldd	r8, Y+12	; 0x0c
    3156:	9b 84       	ldd	r9, Y+11	; 0x0b
    3158:	aa 84       	ldd	r10, Y+10	; 0x0a
    315a:	b9 84       	ldd	r11, Y+9	; 0x09
    315c:	c8 84       	ldd	r12, Y+8	; 0x08
    315e:	df 80       	ldd	r13, Y+7	; 0x07
    3160:	ee 80       	ldd	r14, Y+6	; 0x06
    3162:	fd 80       	ldd	r15, Y+5	; 0x05
    3164:	0c 81       	ldd	r16, Y+4	; 0x04
    3166:	1b 81       	ldd	r17, Y+3	; 0x03
    3168:	aa 81       	ldd	r26, Y+2	; 0x02
    316a:	b9 81       	ldd	r27, Y+1	; 0x01
    316c:	ce 0f       	add	r28, r30
    316e:	d1 1d       	adc	r29, r1
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	f8 94       	cli
    3174:	de bf       	out	0x3e, r29	; 62
    3176:	0f be       	out	0x3f, r0	; 63
    3178:	cd bf       	out	0x3d, r28	; 61
    317a:	ed 01       	movw	r28, r26
    317c:	08 95       	ret

0000317e <itoa>:
    317e:	fb 01       	movw	r30, r22
    3180:	9f 01       	movw	r18, r30
    3182:	e8 94       	clt
    3184:	42 30       	cpi	r20, 0x02	; 2
    3186:	c4 f0       	brlt	.+48     	; 0x31b8 <itoa+0x3a>
    3188:	45 32       	cpi	r20, 0x25	; 37
    318a:	b4 f4       	brge	.+44     	; 0x31b8 <itoa+0x3a>
    318c:	4a 30       	cpi	r20, 0x0A	; 10
    318e:	29 f4       	brne	.+10     	; 0x319a <itoa+0x1c>
    3190:	97 fb       	bst	r25, 7
    3192:	1e f4       	brtc	.+6      	; 0x319a <itoa+0x1c>
    3194:	90 95       	com	r25
    3196:	81 95       	neg	r24
    3198:	9f 4f       	sbci	r25, 0xFF	; 255
    319a:	64 2f       	mov	r22, r20
    319c:	77 27       	eor	r23, r23
    319e:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <__udivmodhi4>
    31a2:	80 5d       	subi	r24, 0xD0	; 208
    31a4:	8a 33       	cpi	r24, 0x3A	; 58
    31a6:	0c f0       	brlt	.+2      	; 0x31aa <itoa+0x2c>
    31a8:	89 5d       	subi	r24, 0xD9	; 217
    31aa:	81 93       	st	Z+, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	00 97       	sbiw	r24, 0x00	; 0
    31b0:	a1 f7       	brne	.-24     	; 0x319a <itoa+0x1c>
    31b2:	16 f4       	brtc	.+4      	; 0x31b8 <itoa+0x3a>
    31b4:	5d e2       	ldi	r21, 0x2D	; 45
    31b6:	51 93       	st	Z+, r21
    31b8:	10 82       	st	Z, r1
    31ba:	c9 01       	movw	r24, r18
    31bc:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <strrev>

000031c0 <strrev>:
    31c0:	dc 01       	movw	r26, r24
    31c2:	fc 01       	movw	r30, r24
    31c4:	67 2f       	mov	r22, r23
    31c6:	71 91       	ld	r23, Z+
    31c8:	77 23       	and	r23, r23
    31ca:	e1 f7       	brne	.-8      	; 0x31c4 <strrev+0x4>
    31cc:	32 97       	sbiw	r30, 0x02	; 2
    31ce:	04 c0       	rjmp	.+8      	; 0x31d8 <strrev+0x18>
    31d0:	7c 91       	ld	r23, X
    31d2:	6d 93       	st	X+, r22
    31d4:	70 83       	st	Z, r23
    31d6:	62 91       	ld	r22, -Z
    31d8:	ae 17       	cp	r26, r30
    31da:	bf 07       	cpc	r27, r31
    31dc:	c8 f3       	brcs	.-14     	; 0x31d0 <strrev+0x10>
    31de:	08 95       	ret

000031e0 <__udivmodhi4>:
    31e0:	aa 1b       	sub	r26, r26
    31e2:	bb 1b       	sub	r27, r27
    31e4:	51 e1       	ldi	r21, 0x11	; 17
    31e6:	07 c0       	rjmp	.+14     	; 0x31f6 <__udivmodhi4_ep>

000031e8 <__udivmodhi4_loop>:
    31e8:	aa 1f       	adc	r26, r26
    31ea:	bb 1f       	adc	r27, r27
    31ec:	a6 17       	cp	r26, r22
    31ee:	b7 07       	cpc	r27, r23
    31f0:	10 f0       	brcs	.+4      	; 0x31f6 <__udivmodhi4_ep>
    31f2:	a6 1b       	sub	r26, r22
    31f4:	b7 0b       	sbc	r27, r23

000031f6 <__udivmodhi4_ep>:
    31f6:	88 1f       	adc	r24, r24
    31f8:	99 1f       	adc	r25, r25
    31fa:	5a 95       	dec	r21
    31fc:	a9 f7       	brne	.-22     	; 0x31e8 <__udivmodhi4_loop>
    31fe:	80 95       	com	r24
    3200:	90 95       	com	r25
    3202:	bc 01       	movw	r22, r24
    3204:	cd 01       	movw	r24, r26
    3206:	08 95       	ret

00003208 <_exit>:
    3208:	f8 94       	cli

0000320a <__stop_program>:
    320a:	ff cf       	rjmp	.-2      	; 0x320a <__stop_program>
