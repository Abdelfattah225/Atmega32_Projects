
Toggle_LED_TIMER0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000283e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  0000283e  000028d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800168  00800168  000029da  2**0
                  ALLOC
  3 .stab         00001944  00000000  00000000  000029dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c02  00000000  00000000  00004320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00004f22  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  000050e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  000052f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0000797c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  00008e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000a108  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0000a2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0000a5e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a3 37       	cpi	r26, 0x73	; 115
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee e3       	ldi	r30, 0x3E	; 62
      78:	f8 e2       	ldi	r31, 0x28	; 40
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 47 13 	call	0x268e	; 0x268e <main>
      8a:	0c 94 1d 14 	jmp	0x283a	; 0x283a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ad 13 	jmp	0x275a	; 0x275a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ad 13 	jmp	0x275a	; 0x275a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ad 13 	jmp	0x275a	; 0x275a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ad 13 	jmp	0x275a	; 0x275a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ad 13 	jmp	0x275a	; 0x275a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ad 13 	jmp	0x275a	; 0x275a <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e8 59       	subi	r30, 0x98	; 152
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <INTIAL_DIR>:
/*****************************************************************************/
/***********************************fucntion**********************************/
/********************************************************************************/

u8 INTIAL_DIR(u8 p0 , u8 p1 , u8 p2 , u8 p3 , u8 p4 , u8 p5 , u8 p6 , u8 p7)
{
     e8e:	af 92       	push	r10
     e90:	cf 92       	push	r12
     e92:	ef 92       	push	r14
     e94:	0f 93       	push	r16
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	29 97       	sbiw	r28, 0x09	; 9
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	8a 83       	std	Y+2, r24	; 0x02
     eac:	6b 83       	std	Y+3, r22	; 0x03
     eae:	4c 83       	std	Y+4, r20	; 0x04
     eb0:	2d 83       	std	Y+5, r18	; 0x05
     eb2:	0e 83       	std	Y+6, r16	; 0x06
     eb4:	ef 82       	std	Y+7, r14	; 0x07
     eb6:	c8 86       	std	Y+8, r12	; 0x08
     eb8:	a9 86       	std	Y+9, r10	; 0x09
	u8 port = 0x00 ;
     eba:	19 82       	std	Y+1, r1	; 0x01
	Assign_Bit(port,DIO_U8_PIN0,p0);
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	81 30       	cpi	r24, 0x01	; 1
     ec0:	21 f4       	brne	.+8      	; 0xeca <INTIAL_DIR+0x3c>
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	81 60       	ori	r24, 0x01	; 1
     ec6:	89 83       	std	Y+1, r24	; 0x01
     ec8:	03 c0       	rjmp	.+6      	; 0xed0 <INTIAL_DIR+0x42>
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	8e 7f       	andi	r24, 0xFE	; 254
     ece:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN1,p1);
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	21 f4       	brne	.+8      	; 0xede <INTIAL_DIR+0x50>
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	82 60       	ori	r24, 0x02	; 2
     eda:	89 83       	std	Y+1, r24	; 0x01
     edc:	03 c0       	rjmp	.+6      	; 0xee4 <INTIAL_DIR+0x56>
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	8d 7f       	andi	r24, 0xFD	; 253
     ee2:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN2,p2);
     ee4:	8c 81       	ldd	r24, Y+4	; 0x04
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	21 f4       	brne	.+8      	; 0xef2 <INTIAL_DIR+0x64>
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	84 60       	ori	r24, 0x04	; 4
     eee:	89 83       	std	Y+1, r24	; 0x01
     ef0:	03 c0       	rjmp	.+6      	; 0xef8 <INTIAL_DIR+0x6a>
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	8b 7f       	andi	r24, 0xFB	; 251
     ef6:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN3,p3);
     ef8:	8d 81       	ldd	r24, Y+5	; 0x05
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	21 f4       	brne	.+8      	; 0xf06 <INTIAL_DIR+0x78>
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	88 60       	ori	r24, 0x08	; 8
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	03 c0       	rjmp	.+6      	; 0xf0c <INTIAL_DIR+0x7e>
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	87 7f       	andi	r24, 0xF7	; 247
     f0a:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN4,p4);
     f0c:	8e 81       	ldd	r24, Y+6	; 0x06
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	21 f4       	brne	.+8      	; 0xf1a <INTIAL_DIR+0x8c>
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	80 61       	ori	r24, 0x10	; 16
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <INTIAL_DIR+0x92>
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	8f 7e       	andi	r24, 0xEF	; 239
     f1e:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN5,p5);
     f20:	8f 81       	ldd	r24, Y+7	; 0x07
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	21 f4       	brne	.+8      	; 0xf2e <INTIAL_DIR+0xa0>
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	80 62       	ori	r24, 0x20	; 32
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	03 c0       	rjmp	.+6      	; 0xf34 <INTIAL_DIR+0xa6>
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	8f 7d       	andi	r24, 0xDF	; 223
     f32:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN6,p6);
     f34:	88 85       	ldd	r24, Y+8	; 0x08
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	21 f4       	brne	.+8      	; 0xf42 <INTIAL_DIR+0xb4>
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	80 64       	ori	r24, 0x40	; 64
     f3e:	89 83       	std	Y+1, r24	; 0x01
     f40:	03 c0       	rjmp	.+6      	; 0xf48 <INTIAL_DIR+0xba>
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	8f 7b       	andi	r24, 0xBF	; 191
     f46:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN7,p7);
     f48:	89 85       	ldd	r24, Y+9	; 0x09
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	21 f4       	brne	.+8      	; 0xf56 <INTIAL_DIR+0xc8>
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	80 68       	ori	r24, 0x80	; 128
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <INTIAL_DIR+0xce>
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	8f 77       	andi	r24, 0x7F	; 127
     f5a:	89 83       	std	Y+1, r24	; 0x01
	return port;
     f5c:	89 81       	ldd	r24, Y+1	; 0x01

}
     f5e:	29 96       	adiw	r28, 0x09	; 9
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	0f 91       	pop	r16
     f70:	ef 90       	pop	r14
     f72:	cf 90       	pop	r12
     f74:	af 90       	pop	r10
     f76:	08 95       	ret

00000f78 <DIO_void_Init>:


void DIO_void_Init(void)
{
     f78:	8f 92       	push	r8
     f7a:	9f 92       	push	r9
     f7c:	af 92       	push	r10
     f7e:	cf 92       	push	r12
     f80:	ef 92       	push	r14
     f82:	0f 93       	push	r16
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
	/*direction*/
	DIO_U8_DDRA =INTIAL_DIR(DIO_u8_PA0_INTIAL_DIR,DIO_u8_PA1_INTIAL_DIR,DIO_u8_PA2_INTIAL_DIR,DIO_u8_PA3_INTIAL_DIR,DIO_u8_PA4_INTIAL_DIR,DIO_u8_PA5_INTIAL_DIR,DIO_u8_PA6_INTIAL_DIR,DIO_u8_PA7_INTIAL_DIR);
     f8c:	0f 2e       	mov	r0, r31
     f8e:	fa e3       	ldi	r31, 0x3A	; 58
     f90:	8f 2e       	mov	r8, r31
     f92:	99 24       	eor	r9, r9
     f94:	f0 2d       	mov	r31, r0
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	00 e0       	ldi	r16, 0x00	; 0
     fa0:	ee 24       	eor	r14, r14
     fa2:	cc 24       	eor	r12, r12
     fa4:	aa 24       	eor	r10, r10
     fa6:	0e 94 47 07 	call	0xe8e	; 0xe8e <INTIAL_DIR>
     faa:	f4 01       	movw	r30, r8
     fac:	80 83       	st	Z, r24
	DIO_U8_DDRB =INTIAL_DIR(DIO_u8_PB0_INTIAL_DIR,DIO_u8_PB1_INTIAL_DIR,DIO_u8_PB2_INTIAL_DIR,DIO_u8_PB3_INTIAL_DIR,DIO_u8_PB4_INTIAL_DIR,DIO_u8_PB5_INTIAL_DIR,DIO_u8_PB6_INTIAL_DIR,DIO_u8_PB7_INTIAL_DIR);
     fae:	0f 2e       	mov	r0, r31
     fb0:	f7 e3       	ldi	r31, 0x37	; 55
     fb2:	8f 2e       	mov	r8, r31
     fb4:	99 24       	eor	r9, r9
     fb6:	f0 2d       	mov	r31, r0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	41 e0       	ldi	r20, 0x01	; 1
     fbe:	21 e0       	ldi	r18, 0x01	; 1
     fc0:	01 e0       	ldi	r16, 0x01	; 1
     fc2:	ee 24       	eor	r14, r14
     fc4:	e3 94       	inc	r14
     fc6:	cc 24       	eor	r12, r12
     fc8:	c3 94       	inc	r12
     fca:	aa 24       	eor	r10, r10
     fcc:	a3 94       	inc	r10
     fce:	0e 94 47 07 	call	0xe8e	; 0xe8e <INTIAL_DIR>
     fd2:	f4 01       	movw	r30, r8
     fd4:	80 83       	st	Z, r24
	DIO_U8_DDRC =INTIAL_DIR(DIO_u8_PC0_INTIAL_DIR,DIO_u8_PC1_INTIAL_DIR,DIO_u8_PC2_INTIAL_DIR,DIO_u8_PC3_INTIAL_DIR,DIO_u8_PC4_INTIAL_DIR,DIO_u8_PC5_INTIAL_DIR,DIO_u8_PC6_INTIAL_DIR,DIO_u8_PC7_INTIAL_DIR);
     fd6:	0f 2e       	mov	r0, r31
     fd8:	f4 e3       	ldi	r31, 0x34	; 52
     fda:	8f 2e       	mov	r8, r31
     fdc:	99 24       	eor	r9, r9
     fde:	f0 2d       	mov	r31, r0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	61 e0       	ldi	r22, 0x01	; 1
     fe4:	41 e0       	ldi	r20, 0x01	; 1
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	00 e0       	ldi	r16, 0x00	; 0
     fea:	ee 24       	eor	r14, r14
     fec:	cc 24       	eor	r12, r12
     fee:	aa 24       	eor	r10, r10
     ff0:	0e 94 47 07 	call	0xe8e	; 0xe8e <INTIAL_DIR>
     ff4:	f4 01       	movw	r30, r8
     ff6:	80 83       	st	Z, r24
	DIO_U8_DDRD =INTIAL_DIR(DIO_u8_PD0_INTIAL_DIR,DIO_u8_PD1_INTIAL_DIR,DIO_u8_PD2_INTIAL_DIR,DIO_u8_PD3_INTIAL_DIR,DIO_u8_PD4_INTIAL_DIR,DIO_u8_PD5_INTIAL_DIR,DIO_u8_PD6_INTIAL_DIR,DIO_u8_PD7_INTIAL_DIR);
     ff8:	0f 2e       	mov	r0, r31
     ffa:	f1 e3       	ldi	r31, 0x31	; 49
     ffc:	8f 2e       	mov	r8, r31
     ffe:	99 24       	eor	r9, r9
    1000:	f0 2d       	mov	r31, r0
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	00 e0       	ldi	r16, 0x00	; 0
    100c:	ee 24       	eor	r14, r14
    100e:	cc 24       	eor	r12, r12
    1010:	aa 24       	eor	r10, r10
    1012:	0e 94 47 07 	call	0xe8e	; 0xe8e <INTIAL_DIR>
    1016:	f4 01       	movw	r30, r8
    1018:	80 83       	st	Z, r24
}
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	0f 91       	pop	r16
    1020:	ef 90       	pop	r14
    1022:	cf 90       	pop	r12
    1024:	af 90       	pop	r10
    1026:	9f 90       	pop	r9
    1028:	8f 90       	pop	r8
    102a:	08 95       	ret

0000102c <DIO_U8_Set_Pin_Dir>:

u8 DIO_U8_Set_Pin_Dir(u8 Copy_U8_Port_ID , u8 Copy_U8_Pin_ID , u8 Copy_U8_Pin_Dir)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <DIO_U8_Set_Pin_Dir+0x6>
    1032:	00 d0       	rcall	.+0      	; 0x1034 <DIO_U8_Set_Pin_Dir+0x8>
    1034:	00 d0       	rcall	.+0      	; 0x1036 <DIO_U8_Set_Pin_Dir+0xa>
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	6a 83       	std	Y+2, r22	; 0x02
    103e:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	84 30       	cpi	r24, 0x04	; 4
    1044:	08 f0       	brcs	.+2      	; 0x1048 <DIO_U8_Set_Pin_Dir+0x1c>
    1046:	e4 c0       	rjmp	.+456    	; 0x1210 <DIO_U8_Set_Pin_Dir+0x1e4>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	88 30       	cpi	r24, 0x08	; 8
    104c:	08 f0       	brcs	.+2      	; 0x1050 <DIO_U8_Set_Pin_Dir+0x24>
    104e:	dd c0       	rjmp	.+442    	; 0x120a <DIO_U8_Set_Pin_Dir+0x1de>
		{
			if((Copy_U8_Pin_Dir==PIN_INPUT)||(Copy_U8_Pin_Dir==PIN_OUTPUT))
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	88 23       	and	r24, r24
    1054:	21 f0       	breq	.+8      	; 0x105e <DIO_U8_Set_Pin_Dir+0x32>
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	09 f0       	breq	.+2      	; 0x105e <DIO_U8_Set_Pin_Dir+0x32>
    105c:	d4 c0       	rjmp	.+424    	; 0x1206 <DIO_U8_Set_Pin_Dir+0x1da>
			{
				switch(Copy_U8_Port_ID)
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	3e 83       	std	Y+6, r19	; 0x06
    1066:	2d 83       	std	Y+5, r18	; 0x05
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	91 05       	cpc	r25, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <DIO_U8_Set_Pin_Dir+0x48>
    1072:	43 c0       	rjmp	.+134    	; 0x10fa <DIO_U8_Set_Pin_Dir+0xce>
    1074:	2d 81       	ldd	r18, Y+5	; 0x05
    1076:	3e 81       	ldd	r19, Y+6	; 0x06
    1078:	22 30       	cpi	r18, 0x02	; 2
    107a:	31 05       	cpc	r19, r1
    107c:	2c f4       	brge	.+10     	; 0x1088 <DIO_U8_Set_Pin_Dir+0x5c>
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	71 f0       	breq	.+28     	; 0x10a2 <DIO_U8_Set_Pin_Dir+0x76>
    1086:	bc c0       	rjmp	.+376    	; 0x1200 <DIO_U8_Set_Pin_Dir+0x1d4>
    1088:	2d 81       	ldd	r18, Y+5	; 0x05
    108a:	3e 81       	ldd	r19, Y+6	; 0x06
    108c:	22 30       	cpi	r18, 0x02	; 2
    108e:	31 05       	cpc	r19, r1
    1090:	09 f4       	brne	.+2      	; 0x1094 <DIO_U8_Set_Pin_Dir+0x68>
    1092:	5f c0       	rjmp	.+190    	; 0x1152 <DIO_U8_Set_Pin_Dir+0x126>
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	83 30       	cpi	r24, 0x03	; 3
    109a:	91 05       	cpc	r25, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <DIO_U8_Set_Pin_Dir+0x74>
    109e:	85 c0       	rjmp	.+266    	; 0x11aa <DIO_U8_Set_Pin_Dir+0x17e>
    10a0:	af c0       	rjmp	.+350    	; 0x1200 <DIO_U8_Set_Pin_Dir+0x1d4>
				{
				case PORTA_ID:
					Assign_Bit(DIO_U8_DDRA,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	a1 f4       	brne	.+40     	; 0x10d0 <DIO_U8_Set_Pin_Dir+0xa4>
    10a8:	aa e3       	ldi	r26, 0x3A	; 58
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	ea e3       	ldi	r30, 0x3A	; 58
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_U8_Set_Pin_Dir+0x9a>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <DIO_U8_Set_Pin_Dir+0x96>
    10ca:	84 2b       	or	r24, r20
    10cc:	8c 93       	st	X, r24
    10ce:	98 c0       	rjmp	.+304    	; 0x1200 <DIO_U8_Set_Pin_Dir+0x1d4>
    10d0:	aa e3       	ldi	r26, 0x3A	; 58
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	ea e3       	ldi	r30, 0x3A	; 58
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <DIO_U8_Set_Pin_Dir+0xc2>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <DIO_U8_Set_Pin_Dir+0xbe>
    10f2:	80 95       	com	r24
    10f4:	84 23       	and	r24, r20
    10f6:	8c 93       	st	X, r24
    10f8:	83 c0       	rjmp	.+262    	; 0x1200 <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTB_ID:
					Assign_Bit(DIO_U8_DDRB,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	a1 f4       	brne	.+40     	; 0x1128 <DIO_U8_Set_Pin_Dir+0xfc>
    1100:	a7 e3       	ldi	r26, 0x37	; 55
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e7 e3       	ldi	r30, 0x37	; 55
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_U8_Set_Pin_Dir+0xf2>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <DIO_U8_Set_Pin_Dir+0xee>
    1122:	84 2b       	or	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	6c c0       	rjmp	.+216    	; 0x1200 <DIO_U8_Set_Pin_Dir+0x1d4>
    1128:	a7 e3       	ldi	r26, 0x37	; 55
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e7 e3       	ldi	r30, 0x37	; 55
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_U8_Set_Pin_Dir+0x11a>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_U8_Set_Pin_Dir+0x116>
    114a:	80 95       	com	r24
    114c:	84 23       	and	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	57 c0       	rjmp	.+174    	; 0x1200 <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTC_ID:
					Assign_Bit(DIO_U8_DDRC,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	a1 f4       	brne	.+40     	; 0x1180 <DIO_U8_Set_Pin_Dir+0x154>
    1158:	a4 e3       	ldi	r26, 0x34	; 52
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e4 e3       	ldi	r30, 0x34	; 52
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_U8_Set_Pin_Dir+0x14a>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_U8_Set_Pin_Dir+0x146>
    117a:	84 2b       	or	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	40 c0       	rjmp	.+128    	; 0x1200 <DIO_U8_Set_Pin_Dir+0x1d4>
    1180:	a4 e3       	ldi	r26, 0x34	; 52
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e4 e3       	ldi	r30, 0x34	; 52
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_U8_Set_Pin_Dir+0x172>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_U8_Set_Pin_Dir+0x16e>
    11a2:	80 95       	com	r24
    11a4:	84 23       	and	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	2b c0       	rjmp	.+86     	; 0x1200 <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTD_ID:
					Assign_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	a1 f4       	brne	.+40     	; 0x11d8 <DIO_U8_Set_Pin_Dir+0x1ac>
    11b0:	a1 e3       	ldi	r26, 0x31	; 49
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e1 e3       	ldi	r30, 0x31	; 49
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_U8_Set_Pin_Dir+0x1a2>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_U8_Set_Pin_Dir+0x19e>
    11d2:	84 2b       	or	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	14 c0       	rjmp	.+40     	; 0x1200 <DIO_U8_Set_Pin_Dir+0x1d4>
    11d8:	a1 e3       	ldi	r26, 0x31	; 49
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e1 e3       	ldi	r30, 0x31	; 49
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_U8_Set_Pin_Dir+0x1ca>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_U8_Set_Pin_Dir+0x1c6>
    11fa:	80 95       	com	r24
    11fc:	84 23       	and	r24, r20
    11fe:	8c 93       	st	X, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    1200:	93 e0       	ldi	r25, 0x03	; 3
    1202:	9c 83       	std	Y+4, r25	; 0x04
    1204:	07 c0       	rjmp	.+14     	; 0x1214 <DIO_U8_Set_Pin_Dir+0x1e8>

				}
			}
			else
			{
				return WRONG_PIN_DIR;
    1206:	1c 82       	std	Y+4, r1	; 0x04
    1208:	05 c0       	rjmp	.+10     	; 0x1214 <DIO_U8_Set_Pin_Dir+0x1e8>
			}
		}
		else{
			return WRONG_PIN;
    120a:	21 e0       	ldi	r18, 0x01	; 1
    120c:	2c 83       	std	Y+4, r18	; 0x04
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <DIO_U8_Set_Pin_Dir+0x1e8>


	}
	else
	{
		return WRONG_PORT;
    1210:	32 e0       	ldi	r19, 0x02	; 2
    1212:	3c 83       	std	Y+4, r19	; 0x04
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    1216:	26 96       	adiw	r28, 0x06	; 6
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <DIO_U8_Set_Port_Dir>:




u8 DIO_U8_Set_Port_Dir(u8 Copy_U8_Port_ID  , u16 Copy_U8_PORT_Dir)
{
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	00 d0       	rcall	.+0      	; 0x122e <DIO_U8_Set_Port_Dir+0x6>
    122e:	00 d0       	rcall	.+0      	; 0x1230 <DIO_U8_Set_Port_Dir+0x8>
    1230:	00 d0       	rcall	.+0      	; 0x1232 <DIO_U8_Set_Port_Dir+0xa>
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	7b 83       	std	Y+3, r23	; 0x03
    123a:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	84 30       	cpi	r24, 0x04	; 4
    1240:	08 f0       	brcs	.+2      	; 0x1244 <DIO_U8_Set_Port_Dir+0x1c>
    1242:	3d c0       	rjmp	.+122    	; 0x12be <DIO_U8_Set_Port_Dir+0x96>
	{
		if((Copy_U8_PORT_Dir)>=MIN_DIR_OR_VALUE&&(Copy_U8_PORT_Dir)<=MAX_DIR_OR_VALUE)
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	9b 81       	ldd	r25, Y+3	; 0x03
    1248:	8f 3f       	cpi	r24, 0xFF	; 255
    124a:	91 05       	cpc	r25, r1
    124c:	09 f0       	breq	.+2      	; 0x1250 <DIO_U8_Set_Port_Dir+0x28>
    124e:	a8 f5       	brcc	.+106    	; 0x12ba <DIO_U8_Set_Port_Dir+0x92>
		{
				switch(Copy_U8_Port_ID)
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	3e 83       	std	Y+6, r19	; 0x06
    1258:	2d 83       	std	Y+5, r18	; 0x05
    125a:	8d 81       	ldd	r24, Y+5	; 0x05
    125c:	9e 81       	ldd	r25, Y+6	; 0x06
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	91 05       	cpc	r25, r1
    1262:	d1 f0       	breq	.+52     	; 0x1298 <DIO_U8_Set_Port_Dir+0x70>
    1264:	2d 81       	ldd	r18, Y+5	; 0x05
    1266:	3e 81       	ldd	r19, Y+6	; 0x06
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	2c f4       	brge	.+10     	; 0x1278 <DIO_U8_Set_Port_Dir+0x50>
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	61 f0       	breq	.+24     	; 0x128e <DIO_U8_Set_Port_Dir+0x66>
    1276:	1e c0       	rjmp	.+60     	; 0x12b4 <DIO_U8_Set_Port_Dir+0x8c>
    1278:	2d 81       	ldd	r18, Y+5	; 0x05
    127a:	3e 81       	ldd	r19, Y+6	; 0x06
    127c:	22 30       	cpi	r18, 0x02	; 2
    127e:	31 05       	cpc	r19, r1
    1280:	81 f0       	breq	.+32     	; 0x12a2 <DIO_U8_Set_Port_Dir+0x7a>
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	83 30       	cpi	r24, 0x03	; 3
    1288:	91 05       	cpc	r25, r1
    128a:	81 f0       	breq	.+32     	; 0x12ac <DIO_U8_Set_Port_Dir+0x84>
    128c:	13 c0       	rjmp	.+38     	; 0x12b4 <DIO_U8_Set_Port_Dir+0x8c>
				{
				case PORTA_ID:
					DIO_U8_DDRA=Copy_U8_PORT_Dir;
    128e:	ea e3       	ldi	r30, 0x3A	; 58
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	80 83       	st	Z, r24
    1296:	0e c0       	rjmp	.+28     	; 0x12b4 <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTB_ID:
					DIO_U8_DDRB=Copy_U8_PORT_Dir;
    1298:	e7 e3       	ldi	r30, 0x37	; 55
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	80 83       	st	Z, r24
    12a0:	09 c0       	rjmp	.+18     	; 0x12b4 <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTC_ID:
					DIO_U8_DDRC=Copy_U8_PORT_Dir;
    12a2:	e4 e3       	ldi	r30, 0x34	; 52
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	80 83       	st	Z, r24
    12aa:	04 c0       	rjmp	.+8      	; 0x12b4 <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTD_ID:
					DIO_U8_DDRD=Copy_U8_PORT_Dir;
    12ac:	e1 e3       	ldi	r30, 0x31	; 49
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	80 83       	st	Z, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    12b4:	93 e0       	ldi	r25, 0x03	; 3
    12b6:	9c 83       	std	Y+4, r25	; 0x04
    12b8:	04 c0       	rjmp	.+8      	; 0x12c2 <DIO_U8_Set_Port_Dir+0x9a>

				}
		}
		else
		{
			return WRONG_PORT_DIR;
    12ba:	1c 82       	std	Y+4, r1	; 0x04
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_U8_Set_Port_Dir+0x9a>
		}

	}
	else
	{
		return WRONG_PORT;
    12be:	22 e0       	ldi	r18, 0x02	; 2
    12c0:	2c 83       	std	Y+4, r18	; 0x04
    12c2:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    12c4:	26 96       	adiw	r28, 0x06	; 6
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <DIO_U8_Set_Pin_value>:




u8 DIO_U8_Set_Pin_value(u8 Copy_U8_Port_ID , u8 Copy_U8_Pin_ID , u8 Copy_U8_Pin_value)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	00 d0       	rcall	.+0      	; 0x12dc <DIO_U8_Set_Pin_value+0x6>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <DIO_U8_Set_Pin_value+0x8>
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <DIO_U8_Set_Pin_value+0xa>
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	6a 83       	std	Y+2, r22	; 0x02
    12e8:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	84 30       	cpi	r24, 0x04	; 4
    12ee:	08 f0       	brcs	.+2      	; 0x12f2 <DIO_U8_Set_Pin_value+0x1c>
    12f0:	e4 c0       	rjmp	.+456    	; 0x14ba <DIO_U8_Set_Pin_value+0x1e4>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	88 30       	cpi	r24, 0x08	; 8
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <DIO_U8_Set_Pin_value+0x24>
    12f8:	dd c0       	rjmp	.+442    	; 0x14b4 <DIO_U8_Set_Pin_value+0x1de>
		{
			if((Copy_U8_Pin_value==PIN_LOW)||(Copy_U8_Pin_value==PIN_HIGH))
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	88 23       	and	r24, r24
    12fe:	21 f0       	breq	.+8      	; 0x1308 <DIO_U8_Set_Pin_value+0x32>
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	09 f0       	breq	.+2      	; 0x1308 <DIO_U8_Set_Pin_value+0x32>
    1306:	d4 c0       	rjmp	.+424    	; 0x14b0 <DIO_U8_Set_Pin_value+0x1da>
			{
				switch(Copy_U8_Port_ID)
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	3e 83       	std	Y+6, r19	; 0x06
    1310:	2d 83       	std	Y+5, r18	; 0x05
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	91 05       	cpc	r25, r1
    131a:	09 f4       	brne	.+2      	; 0x131e <DIO_U8_Set_Pin_value+0x48>
    131c:	43 c0       	rjmp	.+134    	; 0x13a4 <DIO_U8_Set_Pin_value+0xce>
    131e:	2d 81       	ldd	r18, Y+5	; 0x05
    1320:	3e 81       	ldd	r19, Y+6	; 0x06
    1322:	22 30       	cpi	r18, 0x02	; 2
    1324:	31 05       	cpc	r19, r1
    1326:	2c f4       	brge	.+10     	; 0x1332 <DIO_U8_Set_Pin_value+0x5c>
    1328:	8d 81       	ldd	r24, Y+5	; 0x05
    132a:	9e 81       	ldd	r25, Y+6	; 0x06
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	71 f0       	breq	.+28     	; 0x134c <DIO_U8_Set_Pin_value+0x76>
    1330:	bc c0       	rjmp	.+376    	; 0x14aa <DIO_U8_Set_Pin_value+0x1d4>
    1332:	2d 81       	ldd	r18, Y+5	; 0x05
    1334:	3e 81       	ldd	r19, Y+6	; 0x06
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	31 05       	cpc	r19, r1
    133a:	09 f4       	brne	.+2      	; 0x133e <DIO_U8_Set_Pin_value+0x68>
    133c:	5f c0       	rjmp	.+190    	; 0x13fc <DIO_U8_Set_Pin_value+0x126>
    133e:	8d 81       	ldd	r24, Y+5	; 0x05
    1340:	9e 81       	ldd	r25, Y+6	; 0x06
    1342:	83 30       	cpi	r24, 0x03	; 3
    1344:	91 05       	cpc	r25, r1
    1346:	09 f4       	brne	.+2      	; 0x134a <DIO_U8_Set_Pin_value+0x74>
    1348:	85 c0       	rjmp	.+266    	; 0x1454 <DIO_U8_Set_Pin_value+0x17e>
    134a:	af c0       	rjmp	.+350    	; 0x14aa <DIO_U8_Set_Pin_value+0x1d4>
				{
				case PORTA_ID:
					Assign_Bit(DIO_U8_PORTA,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	a1 f4       	brne	.+40     	; 0x137a <DIO_U8_Set_Pin_value+0xa4>
    1352:	ab e3       	ldi	r26, 0x3B	; 59
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	eb e3       	ldi	r30, 0x3B	; 59
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 2e       	mov	r0, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <DIO_U8_Set_Pin_value+0x9a>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	0a 94       	dec	r0
    1372:	e2 f7       	brpl	.-8      	; 0x136c <DIO_U8_Set_Pin_value+0x96>
    1374:	84 2b       	or	r24, r20
    1376:	8c 93       	st	X, r24
    1378:	98 c0       	rjmp	.+304    	; 0x14aa <DIO_U8_Set_Pin_value+0x1d4>
    137a:	ab e3       	ldi	r26, 0x3B	; 59
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	eb e3       	ldi	r30, 0x3B	; 59
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 2e       	mov	r0, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <DIO_U8_Set_Pin_value+0xc2>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <DIO_U8_Set_Pin_value+0xbe>
    139c:	80 95       	com	r24
    139e:	84 23       	and	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	83 c0       	rjmp	.+262    	; 0x14aa <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTB_ID:
					Assign_Bit(DIO_U8_PORTB,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	a1 f4       	brne	.+40     	; 0x13d2 <DIO_U8_Set_Pin_value+0xfc>
    13aa:	a8 e3       	ldi	r26, 0x38	; 56
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e8 e3       	ldi	r30, 0x38	; 56
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	02 2e       	mov	r0, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_U8_Set_Pin_value+0xf2>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_U8_Set_Pin_value+0xee>
    13cc:	84 2b       	or	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	6c c0       	rjmp	.+216    	; 0x14aa <DIO_U8_Set_Pin_value+0x1d4>
    13d2:	a8 e3       	ldi	r26, 0x38	; 56
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e8 e3       	ldi	r30, 0x38	; 56
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_U8_Set_Pin_value+0x11a>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_U8_Set_Pin_value+0x116>
    13f4:	80 95       	com	r24
    13f6:	84 23       	and	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	57 c0       	rjmp	.+174    	; 0x14aa <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTC_ID:
					Assign_Bit(DIO_U8_PORTC,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	a1 f4       	brne	.+40     	; 0x142a <DIO_U8_Set_Pin_value+0x154>
    1402:	a5 e3       	ldi	r26, 0x35	; 53
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e5 e3       	ldi	r30, 0x35	; 53
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_U8_Set_Pin_value+0x14a>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_U8_Set_Pin_value+0x146>
    1424:	84 2b       	or	r24, r20
    1426:	8c 93       	st	X, r24
    1428:	40 c0       	rjmp	.+128    	; 0x14aa <DIO_U8_Set_Pin_value+0x1d4>
    142a:	a5 e3       	ldi	r26, 0x35	; 53
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e5 e3       	ldi	r30, 0x35	; 53
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	48 2f       	mov	r20, r24
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 2e       	mov	r0, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <DIO_U8_Set_Pin_value+0x172>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	0a 94       	dec	r0
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <DIO_U8_Set_Pin_value+0x16e>
    144c:	80 95       	com	r24
    144e:	84 23       	and	r24, r20
    1450:	8c 93       	st	X, r24
    1452:	2b c0       	rjmp	.+86     	; 0x14aa <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTD_ID:
					Assign_Bit(DIO_U8_PORTD,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	a1 f4       	brne	.+40     	; 0x1482 <DIO_U8_Set_Pin_value+0x1ac>
    145a:	a2 e3       	ldi	r26, 0x32	; 50
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e2 e3       	ldi	r30, 0x32	; 50
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <DIO_U8_Set_Pin_value+0x1a2>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <DIO_U8_Set_Pin_value+0x19e>
    147c:	84 2b       	or	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	14 c0       	rjmp	.+40     	; 0x14aa <DIO_U8_Set_Pin_value+0x1d4>
    1482:	a2 e3       	ldi	r26, 0x32	; 50
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e2 e3       	ldi	r30, 0x32	; 50
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <DIO_U8_Set_Pin_value+0x1ca>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <DIO_U8_Set_Pin_value+0x1c6>
    14a4:	80 95       	com	r24
    14a6:	84 23       	and	r24, r20
    14a8:	8c 93       	st	X, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    14aa:	93 e0       	ldi	r25, 0x03	; 3
    14ac:	9c 83       	std	Y+4, r25	; 0x04
    14ae:	07 c0       	rjmp	.+14     	; 0x14be <DIO_U8_Set_Pin_value+0x1e8>

				}
			}
			else
			{
				return WRONG_PIN_value;
    14b0:	1c 82       	std	Y+4, r1	; 0x04
    14b2:	05 c0       	rjmp	.+10     	; 0x14be <DIO_U8_Set_Pin_value+0x1e8>
			}
		}
		else{
			return WRONG_PIN;
    14b4:	21 e0       	ldi	r18, 0x01	; 1
    14b6:	2c 83       	std	Y+4, r18	; 0x04
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <DIO_U8_Set_Pin_value+0x1e8>


	}
	else
	{
		return WRONG_PORT;
    14ba:	32 e0       	ldi	r19, 0x02	; 2
    14bc:	3c 83       	std	Y+4, r19	; 0x04
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    14c0:	26 96       	adiw	r28, 0x06	; 6
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <DIO_U8_Set_Port_Value>:




u8 DIO_U8_Set_Port_Value(u8 Copy_U8_Port_ID  , u16 Copy_U8_PORT_value)
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <DIO_U8_Set_Port_Value+0x6>
    14d8:	00 d0       	rcall	.+0      	; 0x14da <DIO_U8_Set_Port_Value+0x8>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <DIO_U8_Set_Port_Value+0xa>
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	7b 83       	std	Y+3, r23	; 0x03
    14e4:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_PORT_value>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_PORT_value<=DIO_MAX_U8_PROT_ID))
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ea:	84 30       	cpi	r24, 0x04	; 4
    14ec:	91 05       	cpc	r25, r1
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <DIO_U8_Set_Port_Value+0x20>
    14f0:	3d c0       	rjmp	.+122    	; 0x156c <DIO_U8_Set_Port_Value+0x9a>
	{
			if((Copy_U8_PORT_value)>=MIN_DIR_OR_VALUE&&(Copy_U8_PORT_value)<=MAX_DIR_OR_VALUE)
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	9b 81       	ldd	r25, Y+3	; 0x03
    14f6:	8f 3f       	cpi	r24, 0xFF	; 255
    14f8:	91 05       	cpc	r25, r1
    14fa:	09 f0       	breq	.+2      	; 0x14fe <DIO_U8_Set_Port_Value+0x2c>
    14fc:	a8 f5       	brcc	.+106    	; 0x1568 <DIO_U8_Set_Port_Value+0x96>
			{
				switch(Copy_U8_Port_ID)
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	3e 83       	std	Y+6, r19	; 0x06
    1506:	2d 83       	std	Y+5, r18	; 0x05
    1508:	8d 81       	ldd	r24, Y+5	; 0x05
    150a:	9e 81       	ldd	r25, Y+6	; 0x06
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	91 05       	cpc	r25, r1
    1510:	d1 f0       	breq	.+52     	; 0x1546 <DIO_U8_Set_Port_Value+0x74>
    1512:	2d 81       	ldd	r18, Y+5	; 0x05
    1514:	3e 81       	ldd	r19, Y+6	; 0x06
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	2c f4       	brge	.+10     	; 0x1526 <DIO_U8_Set_Port_Value+0x54>
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	9e 81       	ldd	r25, Y+6	; 0x06
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	61 f0       	breq	.+24     	; 0x153c <DIO_U8_Set_Port_Value+0x6a>
    1524:	1e c0       	rjmp	.+60     	; 0x1562 <DIO_U8_Set_Port_Value+0x90>
    1526:	2d 81       	ldd	r18, Y+5	; 0x05
    1528:	3e 81       	ldd	r19, Y+6	; 0x06
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	81 f0       	breq	.+32     	; 0x1550 <DIO_U8_Set_Port_Value+0x7e>
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	9e 81       	ldd	r25, Y+6	; 0x06
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	91 05       	cpc	r25, r1
    1538:	81 f0       	breq	.+32     	; 0x155a <DIO_U8_Set_Port_Value+0x88>
    153a:	13 c0       	rjmp	.+38     	; 0x1562 <DIO_U8_Set_Port_Value+0x90>
				{
				case PORTA_ID:
					DIO_U8_PORTA=Copy_U8_PORT_value;
    153c:	eb e3       	ldi	r30, 0x3B	; 59
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	80 83       	st	Z, r24
    1544:	0e c0       	rjmp	.+28     	; 0x1562 <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTB_ID:
					DIO_U8_PORTB=Copy_U8_PORT_value;
    1546:	e8 e3       	ldi	r30, 0x38	; 56
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	80 83       	st	Z, r24
    154e:	09 c0       	rjmp	.+18     	; 0x1562 <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTC_ID:
					DIO_U8_PORTC=Copy_U8_PORT_value;
    1550:	e5 e3       	ldi	r30, 0x35	; 53
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	80 83       	st	Z, r24
    1558:	04 c0       	rjmp	.+8      	; 0x1562 <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTD_ID:
					DIO_U8_PORTD=Copy_U8_PORT_value;
    155a:	e2 e3       	ldi	r30, 0x32	; 50
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	80 83       	st	Z, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    1562:	93 e0       	ldi	r25, 0x03	; 3
    1564:	9c 83       	std	Y+4, r25	; 0x04
    1566:	04 c0       	rjmp	.+8      	; 0x1570 <DIO_U8_Set_Port_Value+0x9e>

				}
			}
			else
			{
				return WRONG_PORT_VALUE;
    1568:	1c 82       	std	Y+4, r1	; 0x04
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_U8_Set_Port_Value+0x9e>


	}
	else
	{
		return WRONG_PORT;
    156c:	22 e0       	ldi	r18, 0x02	; 2
    156e:	2c 83       	std	Y+4, r18	; 0x04
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    1572:	26 96       	adiw	r28, 0x06	; 6
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <DIO_U8_Get_pin_value>:




u8 DIO_U8_Get_pin_value(u8 Copy_U8_Port_ID,u8 Copy_U8_Pin_ID , u8 *Copy_U8_Pin_Value)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	28 97       	sbiw	r28, 0x08	; 8
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	6a 83       	std	Y+2, r22	; 0x02
    159c:	5c 83       	std	Y+4, r21	; 0x04
    159e:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	84 30       	cpi	r24, 0x04	; 4
    15a4:	08 f0       	brcs	.+2      	; 0x15a8 <DIO_U8_Get_pin_value+0x24>
    15a6:	78 c0       	rjmp	.+240    	; 0x1698 <DIO_U8_Get_pin_value+0x114>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	88 30       	cpi	r24, 0x08	; 8
    15ac:	08 f0       	brcs	.+2      	; 0x15b0 <DIO_U8_Get_pin_value+0x2c>
    15ae:	71 c0       	rjmp	.+226    	; 0x1692 <DIO_U8_Get_pin_value+0x10e>
		{

			switch(Copy_U8_Port_ID)
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	3f 83       	std	Y+7, r19	; 0x07
    15b8:	2e 83       	std	Y+6, r18	; 0x06
    15ba:	4e 81       	ldd	r20, Y+6	; 0x06
    15bc:	5f 81       	ldd	r21, Y+7	; 0x07
    15be:	41 30       	cpi	r20, 0x01	; 1
    15c0:	51 05       	cpc	r21, r1
    15c2:	59 f1       	breq	.+86     	; 0x161a <DIO_U8_Get_pin_value+0x96>
    15c4:	8e 81       	ldd	r24, Y+6	; 0x06
    15c6:	9f 81       	ldd	r25, Y+7	; 0x07
    15c8:	82 30       	cpi	r24, 0x02	; 2
    15ca:	91 05       	cpc	r25, r1
    15cc:	34 f4       	brge	.+12     	; 0x15da <DIO_U8_Get_pin_value+0x56>
    15ce:	2e 81       	ldd	r18, Y+6	; 0x06
    15d0:	3f 81       	ldd	r19, Y+7	; 0x07
    15d2:	21 15       	cp	r18, r1
    15d4:	31 05       	cpc	r19, r1
    15d6:	69 f0       	breq	.+26     	; 0x15f2 <DIO_U8_Get_pin_value+0x6e>
    15d8:	5b c0       	rjmp	.+182    	; 0x1690 <DIO_U8_Get_pin_value+0x10c>
    15da:	4e 81       	ldd	r20, Y+6	; 0x06
    15dc:	5f 81       	ldd	r21, Y+7	; 0x07
    15de:	42 30       	cpi	r20, 0x02	; 2
    15e0:	51 05       	cpc	r21, r1
    15e2:	79 f1       	breq	.+94     	; 0x1642 <DIO_U8_Get_pin_value+0xbe>
    15e4:	8e 81       	ldd	r24, Y+6	; 0x06
    15e6:	9f 81       	ldd	r25, Y+7	; 0x07
    15e8:	83 30       	cpi	r24, 0x03	; 3
    15ea:	91 05       	cpc	r25, r1
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <DIO_U8_Get_pin_value+0x6c>
    15ee:	3d c0       	rjmp	.+122    	; 0x166a <DIO_U8_Get_pin_value+0xe6>
    15f0:	4f c0       	rjmp	.+158    	; 0x1690 <DIO_U8_Get_pin_value+0x10c>
							{
				case PORTA_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINA,Copy_U8_Pin_ID);
    15f2:	e9 e3       	ldi	r30, 0x39	; 57
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	88 2f       	mov	r24, r24
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a9 01       	movw	r20, r18
    1604:	02 c0       	rjmp	.+4      	; 0x160a <DIO_U8_Get_pin_value+0x86>
    1606:	55 95       	asr	r21
    1608:	47 95       	ror	r20
    160a:	8a 95       	dec	r24
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <DIO_U8_Get_pin_value+0x82>
    160e:	ca 01       	movw	r24, r20
    1610:	81 70       	andi	r24, 0x01	; 1
    1612:	eb 81       	ldd	r30, Y+3	; 0x03
    1614:	fc 81       	ldd	r31, Y+4	; 0x04
    1616:	80 83       	st	Z, r24
    1618:	3b c0       	rjmp	.+118    	; 0x1690 <DIO_U8_Get_pin_value+0x10c>
					break;
				case PORTB_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINB,Copy_U8_Pin_ID);
    161a:	e6 e3       	ldi	r30, 0x36	; 54
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	88 2f       	mov	r24, r24
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	a9 01       	movw	r20, r18
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <DIO_U8_Get_pin_value+0xae>
    162e:	55 95       	asr	r21
    1630:	47 95       	ror	r20
    1632:	8a 95       	dec	r24
    1634:	e2 f7       	brpl	.-8      	; 0x162e <DIO_U8_Get_pin_value+0xaa>
    1636:	ca 01       	movw	r24, r20
    1638:	81 70       	andi	r24, 0x01	; 1
    163a:	eb 81       	ldd	r30, Y+3	; 0x03
    163c:	fc 81       	ldd	r31, Y+4	; 0x04
    163e:	80 83       	st	Z, r24
    1640:	27 c0       	rjmp	.+78     	; 0x1690 <DIO_U8_Get_pin_value+0x10c>
					break;
				case PORTC_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINC,Copy_U8_Pin_ID);
    1642:	e3 e3       	ldi	r30, 0x33	; 51
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	88 2f       	mov	r24, r24
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	a9 01       	movw	r20, r18
    1654:	02 c0       	rjmp	.+4      	; 0x165a <DIO_U8_Get_pin_value+0xd6>
    1656:	55 95       	asr	r21
    1658:	47 95       	ror	r20
    165a:	8a 95       	dec	r24
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <DIO_U8_Get_pin_value+0xd2>
    165e:	ca 01       	movw	r24, r20
    1660:	81 70       	andi	r24, 0x01	; 1
    1662:	eb 81       	ldd	r30, Y+3	; 0x03
    1664:	fc 81       	ldd	r31, Y+4	; 0x04
    1666:	80 83       	st	Z, r24
    1668:	13 c0       	rjmp	.+38     	; 0x1690 <DIO_U8_Get_pin_value+0x10c>
					break;
				case PORTD_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
    166a:	e0 e3       	ldi	r30, 0x30	; 48
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	88 2f       	mov	r24, r24
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a9 01       	movw	r20, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <DIO_U8_Get_pin_value+0xfe>
    167e:	55 95       	asr	r21
    1680:	47 95       	ror	r20
    1682:	8a 95       	dec	r24
    1684:	e2 f7       	brpl	.-8      	; 0x167e <DIO_U8_Get_pin_value+0xfa>
    1686:	ca 01       	movw	r24, r20
    1688:	81 70       	andi	r24, 0x01	; 1
    168a:	eb 81       	ldd	r30, Y+3	; 0x03
    168c:	fc 81       	ldd	r31, Y+4	; 0x04
    168e:	80 83       	st	Z, r24
    1690:	07 c0       	rjmp	.+14     	; 0x16a0 <DIO_U8_Get_pin_value+0x11c>
					break;
							}
		}
		else
		{
			return WRONG_PIN;
    1692:	51 e0       	ldi	r21, 0x01	; 1
    1694:	5d 83       	std	Y+5, r21	; 0x05
    1696:	02 c0       	rjmp	.+4      	; 0x169c <DIO_U8_Get_pin_value+0x118>
		}
	}
	else
	{
		return WRONG_PORT;
    1698:	82 e0       	ldi	r24, 0x02	; 2
    169a:	8d 83       	std	Y+5, r24	; 0x05
    169c:	9d 81       	ldd	r25, Y+5	; 0x05
    169e:	98 87       	std	Y+8, r25	; 0x08
	}
}
    16a0:	88 85       	ldd	r24, Y+8	; 0x08
    16a2:	28 96       	adiw	r28, 0x08	; 8
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	de bf       	out	0x3e, r29	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	cd bf       	out	0x3d, r28	; 61
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <LCD_void_Init>:
#include"LCD_private.h"




void LCD_void_Init(void){
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	cc 54       	subi	r28, 0x4C	; 76
    16c2:	d0 40       	sbci	r29, 0x00	; 0
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	fe 01       	movw	r30, r28
    16d0:	e7 5b       	subi	r30, 0xB7	; 183
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	ac e0       	ldi	r26, 0x0C	; 12
    16da:	b2 e4       	ldi	r27, 0x42	; 66
    16dc:	80 83       	st	Z, r24
    16de:	91 83       	std	Z+1, r25	; 0x01
    16e0:	a2 83       	std	Z+2, r26	; 0x02
    16e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e4:	8e 01       	movw	r16, r28
    16e6:	0b 5b       	subi	r16, 0xBB	; 187
    16e8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ea:	fe 01       	movw	r30, r28
    16ec:	e7 5b       	subi	r30, 0xB7	; 183
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	60 81       	ld	r22, Z
    16f2:	71 81       	ldd	r23, Z+1	; 0x01
    16f4:	82 81       	ldd	r24, Z+2	; 0x02
    16f6:	93 81       	ldd	r25, Z+3	; 0x03
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	4a ef       	ldi	r20, 0xFA	; 250
    16fe:	54 e4       	ldi	r21, 0x44	; 68
    1700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	f8 01       	movw	r30, r16
    170a:	80 83       	st	Z, r24
    170c:	91 83       	std	Z+1, r25	; 0x01
    170e:	a2 83       	std	Z+2, r26	; 0x02
    1710:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1712:	fe 01       	movw	r30, r28
    1714:	eb 5b       	subi	r30, 0xBB	; 187
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	60 81       	ld	r22, Z
    171a:	71 81       	ldd	r23, Z+1	; 0x01
    171c:	82 81       	ldd	r24, Z+2	; 0x02
    171e:	93 81       	ldd	r25, Z+3	; 0x03
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	40 e8       	ldi	r20, 0x80	; 128
    1726:	5f e3       	ldi	r21, 0x3F	; 63
    1728:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    172c:	88 23       	and	r24, r24
    172e:	44 f4       	brge	.+16     	; 0x1740 <LCD_void_Init+0x8c>
		__ticks = 1;
    1730:	fe 01       	movw	r30, r28
    1732:	ed 5b       	subi	r30, 0xBD	; 189
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	91 83       	std	Z+1, r25	; 0x01
    173c:	80 83       	st	Z, r24
    173e:	64 c0       	rjmp	.+200    	; 0x1808 <LCD_void_Init+0x154>
	else if (__tmp > 65535)
    1740:	fe 01       	movw	r30, r28
    1742:	eb 5b       	subi	r30, 0xBB	; 187
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	60 81       	ld	r22, Z
    1748:	71 81       	ldd	r23, Z+1	; 0x01
    174a:	82 81       	ldd	r24, Z+2	; 0x02
    174c:	93 81       	ldd	r25, Z+3	; 0x03
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	3f ef       	ldi	r19, 0xFF	; 255
    1752:	4f e7       	ldi	r20, 0x7F	; 127
    1754:	57 e4       	ldi	r21, 0x47	; 71
    1756:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    175a:	18 16       	cp	r1, r24
    175c:	0c f0       	brlt	.+2      	; 0x1760 <LCD_void_Init+0xac>
    175e:	43 c0       	rjmp	.+134    	; 0x17e6 <LCD_void_Init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1760:	fe 01       	movw	r30, r28
    1762:	e7 5b       	subi	r30, 0xB7	; 183
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	60 81       	ld	r22, Z
    1768:	71 81       	ldd	r23, Z+1	; 0x01
    176a:	82 81       	ldd	r24, Z+2	; 0x02
    176c:	93 81       	ldd	r25, Z+3	; 0x03
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e2       	ldi	r20, 0x20	; 32
    1774:	51 e4       	ldi	r21, 0x41	; 65
    1776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	8e 01       	movw	r16, r28
    1780:	0d 5b       	subi	r16, 0xBD	; 189
    1782:	1f 4f       	sbci	r17, 0xFF	; 255
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	f8 01       	movw	r30, r16
    1792:	91 83       	std	Z+1, r25	; 0x01
    1794:	80 83       	st	Z, r24
    1796:	1f c0       	rjmp	.+62     	; 0x17d6 <LCD_void_Init+0x122>
    1798:	fe 01       	movw	r30, r28
    179a:	ef 5b       	subi	r30, 0xBF	; 191
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	88 ec       	ldi	r24, 0xC8	; 200
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17a6:	fe 01       	movw	r30, r28
    17a8:	ef 5b       	subi	r30, 0xBF	; 191
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	80 81       	ld	r24, Z
    17ae:	91 81       	ldd	r25, Z+1	; 0x01
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <LCD_void_Init+0xfc>
    17b4:	fe 01       	movw	r30, r28
    17b6:	ef 5b       	subi	r30, 0xBF	; 191
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	91 83       	std	Z+1, r25	; 0x01
    17bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17be:	de 01       	movw	r26, r28
    17c0:	ad 5b       	subi	r26, 0xBD	; 189
    17c2:	bf 4f       	sbci	r27, 0xFF	; 255
    17c4:	fe 01       	movw	r30, r28
    17c6:	ed 5b       	subi	r30, 0xBD	; 189
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	80 81       	ld	r24, Z
    17cc:	91 81       	ldd	r25, Z+1	; 0x01
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	11 96       	adiw	r26, 0x01	; 1
    17d2:	9c 93       	st	X, r25
    17d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d6:	fe 01       	movw	r30, r28
    17d8:	ed 5b       	subi	r30, 0xBD	; 189
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	80 81       	ld	r24, Z
    17de:	91 81       	ldd	r25, Z+1	; 0x01
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	d1 f6       	brne	.-76     	; 0x1798 <LCD_void_Init+0xe4>
    17e4:	24 c0       	rjmp	.+72     	; 0x182e <LCD_void_Init+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e6:	8e 01       	movw	r16, r28
    17e8:	0d 5b       	subi	r16, 0xBD	; 189
    17ea:	1f 4f       	sbci	r17, 0xFF	; 255
    17ec:	fe 01       	movw	r30, r28
    17ee:	eb 5b       	subi	r30, 0xBB	; 187
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	60 81       	ld	r22, Z
    17f4:	71 81       	ldd	r23, Z+1	; 0x01
    17f6:	82 81       	ldd	r24, Z+2	; 0x02
    17f8:	93 81       	ldd	r25, Z+3	; 0x03
    17fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	f8 01       	movw	r30, r16
    1804:	91 83       	std	Z+1, r25	; 0x01
    1806:	80 83       	st	Z, r24
    1808:	fe 01       	movw	r30, r28
    180a:	ed 5b       	subi	r30, 0xBD	; 189
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	80 81       	ld	r24, Z
    1810:	91 81       	ldd	r25, Z+1	; 0x01
    1812:	fe 01       	movw	r30, r28
    1814:	ff 96       	adiw	r30, 0x3f	; 63
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	80 83       	st	Z, r24
    181a:	fe 01       	movw	r30, r28
    181c:	ff 96       	adiw	r30, 0x3f	; 63
    181e:	80 81       	ld	r24, Z
    1820:	91 81       	ldd	r25, Z+1	; 0x01
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <LCD_void_Init+0x16e>
    1826:	fe 01       	movw	r30, r28
    1828:	ff 96       	adiw	r30, 0x3f	; 63
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	80 83       	st	Z, r24
#if LCD_U8_MODE==LCD_U8_8_BIT_MODE
		/*delay more than 30ms*/
		_delay_ms(35);
		/*send function set */
		LCD_void_Write_CMD(LCD_Function_set_8_bit_2_line_mode);
    182e:	88 e3       	ldi	r24, 0x38	; 56
    1830:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_void_Write_CMD>
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	a0 e2       	ldi	r26, 0x20	; 32
    183a:	b2 e4       	ldi	r27, 0x42	; 66
    183c:	8b af       	std	Y+59, r24	; 0x3b
    183e:	9c af       	std	Y+60, r25	; 0x3c
    1840:	ad af       	std	Y+61, r26	; 0x3d
    1842:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1844:	6b ad       	ldd	r22, Y+59	; 0x3b
    1846:	7c ad       	ldd	r23, Y+60	; 0x3c
    1848:	8d ad       	ldd	r24, Y+61	; 0x3d
    184a:	9e ad       	ldd	r25, Y+62	; 0x3e
    184c:	2b ea       	ldi	r18, 0xAB	; 171
    184e:	3a ea       	ldi	r19, 0xAA	; 170
    1850:	4a e2       	ldi	r20, 0x2A	; 42
    1852:	50 e4       	ldi	r21, 0x40	; 64
    1854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	8f ab       	std	Y+55, r24	; 0x37
    185e:	98 af       	std	Y+56, r25	; 0x38
    1860:	a9 af       	std	Y+57, r26	; 0x39
    1862:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1864:	6f a9       	ldd	r22, Y+55	; 0x37
    1866:	78 ad       	ldd	r23, Y+56	; 0x38
    1868:	89 ad       	ldd	r24, Y+57	; 0x39
    186a:	9a ad       	ldd	r25, Y+58	; 0x3a
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e8       	ldi	r20, 0x80	; 128
    1872:	5f e3       	ldi	r21, 0x3F	; 63
    1874:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1878:	88 23       	and	r24, r24
    187a:	1c f4       	brge	.+6      	; 0x1882 <LCD_void_Init+0x1ce>
		__ticks = 1;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	8e ab       	std	Y+54, r24	; 0x36
    1880:	91 c0       	rjmp	.+290    	; 0x19a4 <LCD_void_Init+0x2f0>
	else if (__tmp > 255)
    1882:	6f a9       	ldd	r22, Y+55	; 0x37
    1884:	78 ad       	ldd	r23, Y+56	; 0x38
    1886:	89 ad       	ldd	r24, Y+57	; 0x39
    1888:	9a ad       	ldd	r25, Y+58	; 0x3a
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	4f e7       	ldi	r20, 0x7F	; 127
    1890:	53 e4       	ldi	r21, 0x43	; 67
    1892:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1896:	18 16       	cp	r1, r24
    1898:	0c f0       	brlt	.+2      	; 0x189c <LCD_void_Init+0x1e8>
    189a:	7b c0       	rjmp	.+246    	; 0x1992 <LCD_void_Init+0x2de>
	{
		_delay_ms(__us / 1000.0);
    189c:	6b ad       	ldd	r22, Y+59	; 0x3b
    189e:	7c ad       	ldd	r23, Y+60	; 0x3c
    18a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    18a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	4a e7       	ldi	r20, 0x7A	; 122
    18aa:	54 e4       	ldi	r21, 0x44	; 68
    18ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	8a ab       	std	Y+50, r24	; 0x32
    18b6:	9b ab       	std	Y+51, r25	; 0x33
    18b8:	ac ab       	std	Y+52, r26	; 0x34
    18ba:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18bc:	6a a9       	ldd	r22, Y+50	; 0x32
    18be:	7b a9       	ldd	r23, Y+51	; 0x33
    18c0:	8c a9       	ldd	r24, Y+52	; 0x34
    18c2:	9d a9       	ldd	r25, Y+53	; 0x35
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	4a ef       	ldi	r20, 0xFA	; 250
    18ca:	54 e4       	ldi	r21, 0x44	; 68
    18cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	8e a7       	std	Y+46, r24	; 0x2e
    18d6:	9f a7       	std	Y+47, r25	; 0x2f
    18d8:	a8 ab       	std	Y+48, r26	; 0x30
    18da:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    18dc:	6e a5       	ldd	r22, Y+46	; 0x2e
    18de:	7f a5       	ldd	r23, Y+47	; 0x2f
    18e0:	88 a9       	ldd	r24, Y+48	; 0x30
    18e2:	99 a9       	ldd	r25, Y+49	; 0x31
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e8       	ldi	r20, 0x80	; 128
    18ea:	5f e3       	ldi	r21, 0x3F	; 63
    18ec:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    18f0:	88 23       	and	r24, r24
    18f2:	2c f4       	brge	.+10     	; 0x18fe <LCD_void_Init+0x24a>
		__ticks = 1;
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	9d a7       	std	Y+45, r25	; 0x2d
    18fa:	8c a7       	std	Y+44, r24	; 0x2c
    18fc:	3f c0       	rjmp	.+126    	; 0x197c <LCD_void_Init+0x2c8>
	else if (__tmp > 65535)
    18fe:	6e a5       	ldd	r22, Y+46	; 0x2e
    1900:	7f a5       	ldd	r23, Y+47	; 0x2f
    1902:	88 a9       	ldd	r24, Y+48	; 0x30
    1904:	99 a9       	ldd	r25, Y+49	; 0x31
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	3f ef       	ldi	r19, 0xFF	; 255
    190a:	4f e7       	ldi	r20, 0x7F	; 127
    190c:	57 e4       	ldi	r21, 0x47	; 71
    190e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1912:	18 16       	cp	r1, r24
    1914:	4c f5       	brge	.+82     	; 0x1968 <LCD_void_Init+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1916:	6a a9       	ldd	r22, Y+50	; 0x32
    1918:	7b a9       	ldd	r23, Y+51	; 0x33
    191a:	8c a9       	ldd	r24, Y+52	; 0x34
    191c:	9d a9       	ldd	r25, Y+53	; 0x35
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e2       	ldi	r20, 0x20	; 32
    1924:	51 e4       	ldi	r21, 0x41	; 65
    1926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	bc 01       	movw	r22, r24
    1930:	cd 01       	movw	r24, r26
    1932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	9d a7       	std	Y+45, r25	; 0x2d
    193c:	8c a7       	std	Y+44, r24	; 0x2c
    193e:	0f c0       	rjmp	.+30     	; 0x195e <LCD_void_Init+0x2aa>
    1940:	88 ec       	ldi	r24, 0xC8	; 200
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9b a7       	std	Y+43, r25	; 0x2b
    1946:	8a a7       	std	Y+42, r24	; 0x2a
    1948:	8a a5       	ldd	r24, Y+42	; 0x2a
    194a:	9b a5       	ldd	r25, Y+43	; 0x2b
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <LCD_void_Init+0x298>
    1950:	9b a7       	std	Y+43, r25	; 0x2b
    1952:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1954:	8c a5       	ldd	r24, Y+44	; 0x2c
    1956:	9d a5       	ldd	r25, Y+45	; 0x2d
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	9d a7       	std	Y+45, r25	; 0x2d
    195c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1960:	9d a5       	ldd	r25, Y+45	; 0x2d
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	69 f7       	brne	.-38     	; 0x1940 <LCD_void_Init+0x28c>
    1966:	24 c0       	rjmp	.+72     	; 0x19b0 <LCD_void_Init+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1968:	6e a5       	ldd	r22, Y+46	; 0x2e
    196a:	7f a5       	ldd	r23, Y+47	; 0x2f
    196c:	88 a9       	ldd	r24, Y+48	; 0x30
    196e:	99 a9       	ldd	r25, Y+49	; 0x31
    1970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	9d a7       	std	Y+45, r25	; 0x2d
    197a:	8c a7       	std	Y+44, r24	; 0x2c
    197c:	8c a5       	ldd	r24, Y+44	; 0x2c
    197e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1980:	99 a7       	std	Y+41, r25	; 0x29
    1982:	88 a7       	std	Y+40, r24	; 0x28
    1984:	88 a5       	ldd	r24, Y+40	; 0x28
    1986:	99 a5       	ldd	r25, Y+41	; 0x29
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <LCD_void_Init+0x2d4>
    198c:	99 a7       	std	Y+41, r25	; 0x29
    198e:	88 a7       	std	Y+40, r24	; 0x28
    1990:	0f c0       	rjmp	.+30     	; 0x19b0 <LCD_void_Init+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1992:	6f a9       	ldd	r22, Y+55	; 0x37
    1994:	78 ad       	ldd	r23, Y+56	; 0x38
    1996:	89 ad       	ldd	r24, Y+57	; 0x39
    1998:	9a ad       	ldd	r25, Y+58	; 0x3a
    199a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	8e ab       	std	Y+54, r24	; 0x36
    19a4:	8e a9       	ldd	r24, Y+54	; 0x36
    19a6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19a8:	8f a1       	ldd	r24, Y+39	; 0x27
    19aa:	8a 95       	dec	r24
    19ac:	f1 f7       	brne	.-4      	; 0x19aa <LCD_void_Init+0x2f6>
    19ae:	8f a3       	std	Y+39, r24	; 0x27
		/*delay more than 39us*/
		_delay_us(40);
		/*send cursor mode */
		LCD_void_Write_CMD(LCD_Cursor_OFF);
    19b0:	8c e0       	ldi	r24, 0x0C	; 12
    19b2:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_void_Write_CMD>
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a0 e2       	ldi	r26, 0x20	; 32
    19bc:	b2 e4       	ldi	r27, 0x42	; 66
    19be:	8b a3       	std	Y+35, r24	; 0x23
    19c0:	9c a3       	std	Y+36, r25	; 0x24
    19c2:	ad a3       	std	Y+37, r26	; 0x25
    19c4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19c6:	6b a1       	ldd	r22, Y+35	; 0x23
    19c8:	7c a1       	ldd	r23, Y+36	; 0x24
    19ca:	8d a1       	ldd	r24, Y+37	; 0x25
    19cc:	9e a1       	ldd	r25, Y+38	; 0x26
    19ce:	2b ea       	ldi	r18, 0xAB	; 171
    19d0:	3a ea       	ldi	r19, 0xAA	; 170
    19d2:	4a e2       	ldi	r20, 0x2A	; 42
    19d4:	50 e4       	ldi	r21, 0x40	; 64
    19d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	8f 8f       	std	Y+31, r24	; 0x1f
    19e0:	98 a3       	std	Y+32, r25	; 0x20
    19e2:	a9 a3       	std	Y+33, r26	; 0x21
    19e4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    19e6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19e8:	78 a1       	ldd	r23, Y+32	; 0x20
    19ea:	89 a1       	ldd	r24, Y+33	; 0x21
    19ec:	9a a1       	ldd	r25, Y+34	; 0x22
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e8       	ldi	r20, 0x80	; 128
    19f4:	5f e3       	ldi	r21, 0x3F	; 63
    19f6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    19fa:	88 23       	and	r24, r24
    19fc:	1c f4       	brge	.+6      	; 0x1a04 <LCD_void_Init+0x350>
		__ticks = 1;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	8e 8f       	std	Y+30, r24	; 0x1e
    1a02:	91 c0       	rjmp	.+290    	; 0x1b26 <LCD_void_Init+0x472>
	else if (__tmp > 255)
    1a04:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a06:	78 a1       	ldd	r23, Y+32	; 0x20
    1a08:	89 a1       	ldd	r24, Y+33	; 0x21
    1a0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	4f e7       	ldi	r20, 0x7F	; 127
    1a12:	53 e4       	ldi	r21, 0x43	; 67
    1a14:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1a18:	18 16       	cp	r1, r24
    1a1a:	0c f0       	brlt	.+2      	; 0x1a1e <LCD_void_Init+0x36a>
    1a1c:	7b c0       	rjmp	.+246    	; 0x1b14 <LCD_void_Init+0x460>
	{
		_delay_ms(__us / 1000.0);
    1a1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a20:	7c a1       	ldd	r23, Y+36	; 0x24
    1a22:	8d a1       	ldd	r24, Y+37	; 0x25
    1a24:	9e a1       	ldd	r25, Y+38	; 0x26
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a e7       	ldi	r20, 0x7A	; 122
    1a2c:	54 e4       	ldi	r21, 0x44	; 68
    1a2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	8a 8f       	std	Y+26, r24	; 0x1a
    1a38:	9b 8f       	std	Y+27, r25	; 0x1b
    1a3a:	ac 8f       	std	Y+28, r26	; 0x1c
    1a3c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a40:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a42:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a44:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	4a ef       	ldi	r20, 0xFA	; 250
    1a4c:	54 e4       	ldi	r21, 0x44	; 68
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	8e 8b       	std	Y+22, r24	; 0x16
    1a58:	9f 8b       	std	Y+23, r25	; 0x17
    1a5a:	a8 8f       	std	Y+24, r26	; 0x18
    1a5c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1a5e:	6e 89       	ldd	r22, Y+22	; 0x16
    1a60:	7f 89       	ldd	r23, Y+23	; 0x17
    1a62:	88 8d       	ldd	r24, Y+24	; 0x18
    1a64:	99 8d       	ldd	r25, Y+25	; 0x19
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e8       	ldi	r20, 0x80	; 128
    1a6c:	5f e3       	ldi	r21, 0x3F	; 63
    1a6e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1a72:	88 23       	and	r24, r24
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <LCD_void_Init+0x3cc>
		__ticks = 1;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	9d 8b       	std	Y+21, r25	; 0x15
    1a7c:	8c 8b       	std	Y+20, r24	; 0x14
    1a7e:	3f c0       	rjmp	.+126    	; 0x1afe <LCD_void_Init+0x44a>
	else if (__tmp > 65535)
    1a80:	6e 89       	ldd	r22, Y+22	; 0x16
    1a82:	7f 89       	ldd	r23, Y+23	; 0x17
    1a84:	88 8d       	ldd	r24, Y+24	; 0x18
    1a86:	99 8d       	ldd	r25, Y+25	; 0x19
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	3f ef       	ldi	r19, 0xFF	; 255
    1a8c:	4f e7       	ldi	r20, 0x7F	; 127
    1a8e:	57 e4       	ldi	r21, 0x47	; 71
    1a90:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1a94:	18 16       	cp	r1, r24
    1a96:	4c f5       	brge	.+82     	; 0x1aea <LCD_void_Init+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a98:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a9a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a9c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a9e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e2       	ldi	r20, 0x20	; 32
    1aa6:	51 e4       	ldi	r21, 0x41	; 65
    1aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	9d 8b       	std	Y+21, r25	; 0x15
    1abe:	8c 8b       	std	Y+20, r24	; 0x14
    1ac0:	0f c0       	rjmp	.+30     	; 0x1ae0 <LCD_void_Init+0x42c>
    1ac2:	88 ec       	ldi	r24, 0xC8	; 200
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	9b 8b       	std	Y+19, r25	; 0x13
    1ac8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1aca:	8a 89       	ldd	r24, Y+18	; 0x12
    1acc:	9b 89       	ldd	r25, Y+19	; 0x13
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <LCD_void_Init+0x41a>
    1ad2:	9b 8b       	std	Y+19, r25	; 0x13
    1ad4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad6:	8c 89       	ldd	r24, Y+20	; 0x14
    1ad8:	9d 89       	ldd	r25, Y+21	; 0x15
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	9d 8b       	std	Y+21, r25	; 0x15
    1ade:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ae2:	9d 89       	ldd	r25, Y+21	; 0x15
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	69 f7       	brne	.-38     	; 0x1ac2 <LCD_void_Init+0x40e>
    1ae8:	24 c0       	rjmp	.+72     	; 0x1b32 <LCD_void_Init+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aea:	6e 89       	ldd	r22, Y+22	; 0x16
    1aec:	7f 89       	ldd	r23, Y+23	; 0x17
    1aee:	88 8d       	ldd	r24, Y+24	; 0x18
    1af0:	99 8d       	ldd	r25, Y+25	; 0x19
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9d 8b       	std	Y+21, r25	; 0x15
    1afc:	8c 8b       	std	Y+20, r24	; 0x14
    1afe:	8c 89       	ldd	r24, Y+20	; 0x14
    1b00:	9d 89       	ldd	r25, Y+21	; 0x15
    1b02:	99 8b       	std	Y+17, r25	; 0x11
    1b04:	88 8b       	std	Y+16, r24	; 0x10
    1b06:	88 89       	ldd	r24, Y+16	; 0x10
    1b08:	99 89       	ldd	r25, Y+17	; 0x11
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <LCD_void_Init+0x456>
    1b0e:	99 8b       	std	Y+17, r25	; 0x11
    1b10:	88 8b       	std	Y+16, r24	; 0x10
    1b12:	0f c0       	rjmp	.+30     	; 0x1b32 <LCD_void_Init+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b14:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b16:	78 a1       	ldd	r23, Y+32	; 0x20
    1b18:	89 a1       	ldd	r24, Y+33	; 0x21
    1b1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	8e 8f       	std	Y+30, r24	; 0x1e
    1b26:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b28:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b2c:	8a 95       	dec	r24
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <LCD_void_Init+0x478>
    1b30:	8f 87       	std	Y+15, r24	; 0x0f
		/*delay more than 39us*/
		_delay_us(40);
		/*send command clear display*/
		LCD_void_Write_CMD(LCD_Clear_Display_Screen);
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_void_Write_CMD>
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	a0 e0       	ldi	r26, 0x00	; 0
    1b3e:	b0 e4       	ldi	r27, 0x40	; 64
    1b40:	8b 87       	std	Y+11, r24	; 0x0b
    1b42:	9c 87       	std	Y+12, r25	; 0x0c
    1b44:	ad 87       	std	Y+13, r26	; 0x0d
    1b46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	4a ef       	ldi	r20, 0xFA	; 250
    1b56:	54 e4       	ldi	r21, 0x44	; 68
    1b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	8f 83       	std	Y+7, r24	; 0x07
    1b62:	98 87       	std	Y+8, r25	; 0x08
    1b64:	a9 87       	std	Y+9, r26	; 0x09
    1b66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b68:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6a:	78 85       	ldd	r23, Y+8	; 0x08
    1b6c:	89 85       	ldd	r24, Y+9	; 0x09
    1b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e8       	ldi	r20, 0x80	; 128
    1b76:	5f e3       	ldi	r21, 0x3F	; 63
    1b78:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1b7c:	88 23       	and	r24, r24
    1b7e:	2c f4       	brge	.+10     	; 0x1b8a <LCD_void_Init+0x4d6>
		__ticks = 1;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	9e 83       	std	Y+6, r25	; 0x06
    1b86:	8d 83       	std	Y+5, r24	; 0x05
    1b88:	3f c0       	rjmp	.+126    	; 0x1c08 <LCD_void_Init+0x554>
	else if (__tmp > 65535)
    1b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8c:	78 85       	ldd	r23, Y+8	; 0x08
    1b8e:	89 85       	ldd	r24, Y+9	; 0x09
    1b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	3f ef       	ldi	r19, 0xFF	; 255
    1b96:	4f e7       	ldi	r20, 0x7F	; 127
    1b98:	57 e4       	ldi	r21, 0x47	; 71
    1b9a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1b9e:	18 16       	cp	r1, r24
    1ba0:	4c f5       	brge	.+82     	; 0x1bf4 <LCD_void_Init+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e2       	ldi	r20, 0x20	; 32
    1bb0:	51 e4       	ldi	r21, 0x41	; 65
    1bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	bc 01       	movw	r22, r24
    1bbc:	cd 01       	movw	r24, r26
    1bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	9e 83       	std	Y+6, r25	; 0x06
    1bc8:	8d 83       	std	Y+5, r24	; 0x05
    1bca:	0f c0       	rjmp	.+30     	; 0x1bea <LCD_void_Init+0x536>
    1bcc:	88 ec       	ldi	r24, 0xC8	; 200
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	9c 83       	std	Y+4, r25	; 0x04
    1bd2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <LCD_void_Init+0x524>
    1bdc:	9c 83       	std	Y+4, r25	; 0x04
    1bde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be0:	8d 81       	ldd	r24, Y+5	; 0x05
    1be2:	9e 81       	ldd	r25, Y+6	; 0x06
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	9e 83       	std	Y+6, r25	; 0x06
    1be8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bea:	8d 81       	ldd	r24, Y+5	; 0x05
    1bec:	9e 81       	ldd	r25, Y+6	; 0x06
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	69 f7       	brne	.-38     	; 0x1bcc <LCD_void_Init+0x518>
    1bf2:	14 c0       	rjmp	.+40     	; 0x1c1c <LCD_void_Init+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf6:	78 85       	ldd	r23, Y+8	; 0x08
    1bf8:	89 85       	ldd	r24, Y+9	; 0x09
    1bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	9e 83       	std	Y+6, r25	; 0x06
    1c06:	8d 83       	std	Y+5, r24	; 0x05
    1c08:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0c:	9a 83       	std	Y+2, r25	; 0x02
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	9a 81       	ldd	r25, Y+2	; 0x02
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	f1 f7       	brne	.-4      	; 0x1c14 <LCD_void_Init+0x560>
    1c18:	9a 83       	std	Y+2, r25	; 0x02
    1c1a:	89 83       	std	Y+1, r24	; 0x01
		/*delay more than 1.53ms*/
		_delay_ms(2);
		/*increment cursor*/
		LCD_void_Write_CMD(LCD_Cursor_Increment);
    1c1c:	86 e0       	ldi	r24, 0x06	; 6
    1c1e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_void_Write_CMD>
#endif




}
    1c22:	c4 5b       	subi	r28, 0xB4	; 180
    1c24:	df 4f       	sbci	r29, 0xFF	; 255
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	08 95       	ret

00001c3a <LCD_void_Write_CMD>:

void LCD_void_Write_CMD(u8 Copy_u8_CMD){
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	0f 92       	push	r0
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	89 83       	std	Y+1, r24	; 0x01
	/*RW=0*/
	/*write a command*/
	/*E=1*/
	/*E=0*/
//	DIO_U8_Set_Pin_Dir(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_OUTPUT);
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_LOW);
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_U8_Set_Pin_value>

	LCD_void_Write(Copy_u8_CMD);
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <LCD_void_Write>

}
    1c56:	0f 90       	pop	r0
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <LCD_void_Write>:



void LCD_void_Write(u8 Copy_u8_val){
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	69 97       	sbiw	r28, 0x19	; 25
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	cd bf       	out	0x3d, r28	; 61
    1c72:	89 8f       	std	Y+25, r24	; 0x19

	/*RW=0*/
		DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,PIN_LOW);
    1c74:	82 e0       	ldi	r24, 0x02	; 2
    1c76:	61 e0       	ldi	r22, 0x01	; 1
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_U8_Set_Pin_value>

#if LCD_U8_MODE==LCD_U8_8_BIT_MODE

	/*WRITE */
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN0,Get_Bit(Copy_u8_val,DIO_U8_PIN0));
    1c7e:	89 8d       	ldd	r24, Y+25	; 0x19
    1c80:	98 2f       	mov	r25, r24
    1c82:	91 70       	andi	r25, 0x01	; 1
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	49 2f       	mov	r20, r25
    1c8a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN1,Get_Bit(Copy_u8_val,DIO_U8_PIN1));
    1c8e:	89 8d       	ldd	r24, Y+25	; 0x19
    1c90:	86 95       	lsr	r24
    1c92:	98 2f       	mov	r25, r24
    1c94:	91 70       	andi	r25, 0x01	; 1
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	61 e0       	ldi	r22, 0x01	; 1
    1c9a:	49 2f       	mov	r20, r25
    1c9c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN2,Get_Bit(Copy_u8_val,DIO_U8_PIN2));
    1ca0:	89 8d       	ldd	r24, Y+25	; 0x19
    1ca2:	86 95       	lsr	r24
    1ca4:	86 95       	lsr	r24
    1ca6:	98 2f       	mov	r25, r24
    1ca8:	91 70       	andi	r25, 0x01	; 1
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	62 e0       	ldi	r22, 0x02	; 2
    1cae:	49 2f       	mov	r20, r25
    1cb0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN3,Get_Bit(Copy_u8_val,DIO_U8_PIN3));
    1cb4:	89 8d       	ldd	r24, Y+25	; 0x19
    1cb6:	86 95       	lsr	r24
    1cb8:	86 95       	lsr	r24
    1cba:	86 95       	lsr	r24
    1cbc:	98 2f       	mov	r25, r24
    1cbe:	91 70       	andi	r25, 0x01	; 1
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	63 e0       	ldi	r22, 0x03	; 3
    1cc4:	49 2f       	mov	r20, r25
    1cc6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN4,Get_Bit(Copy_u8_val,DIO_U8_PIN4));
    1cca:	89 8d       	ldd	r24, Y+25	; 0x19
    1ccc:	82 95       	swap	r24
    1cce:	8f 70       	andi	r24, 0x0F	; 15
    1cd0:	98 2f       	mov	r25, r24
    1cd2:	91 70       	andi	r25, 0x01	; 1
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	64 e0       	ldi	r22, 0x04	; 4
    1cd8:	49 2f       	mov	r20, r25
    1cda:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN5,Get_Bit(Copy_u8_val,DIO_U8_PIN5));
    1cde:	89 8d       	ldd	r24, Y+25	; 0x19
    1ce0:	82 95       	swap	r24
    1ce2:	86 95       	lsr	r24
    1ce4:	87 70       	andi	r24, 0x07	; 7
    1ce6:	98 2f       	mov	r25, r24
    1ce8:	91 70       	andi	r25, 0x01	; 1
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	65 e0       	ldi	r22, 0x05	; 5
    1cee:	49 2f       	mov	r20, r25
    1cf0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN6,Get_Bit(Copy_u8_val,DIO_U8_PIN6));
    1cf4:	89 8d       	ldd	r24, Y+25	; 0x19
    1cf6:	82 95       	swap	r24
    1cf8:	86 95       	lsr	r24
    1cfa:	86 95       	lsr	r24
    1cfc:	83 70       	andi	r24, 0x03	; 3
    1cfe:	98 2f       	mov	r25, r24
    1d00:	91 70       	andi	r25, 0x01	; 1
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	66 e0       	ldi	r22, 0x06	; 6
    1d06:	49 2f       	mov	r20, r25
    1d08:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN7,Get_Bit(Copy_u8_val,DIO_U8_PIN7));
    1d0c:	89 8d       	ldd	r24, Y+25	; 0x19
    1d0e:	98 2f       	mov	r25, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	99 27       	eor	r25, r25
    1d14:	99 1f       	adc	r25, r25
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	67 e0       	ldi	r22, 0x07	; 7
    1d1a:	49 2f       	mov	r20, r25
    1d1c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_U8_Set_Pin_value>
	/*E=1*/
	/*E=0*/
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_HIGH);
    1d20:	82 e0       	ldi	r24, 0x02	; 2
    1d22:	62 e0       	ldi	r22, 0x02	; 2
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_U8_Set_Pin_value>
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	a0 e8       	ldi	r26, 0x80	; 128
    1d30:	bf e3       	ldi	r27, 0x3F	; 63
    1d32:	8d 8b       	std	Y+21, r24	; 0x15
    1d34:	9e 8b       	std	Y+22, r25	; 0x16
    1d36:	af 8b       	std	Y+23, r26	; 0x17
    1d38:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d40:	98 8d       	ldd	r25, Y+24	; 0x18
    1d42:	2b ea       	ldi	r18, 0xAB	; 171
    1d44:	3a ea       	ldi	r19, 0xAA	; 170
    1d46:	4a e2       	ldi	r20, 0x2A	; 42
    1d48:	50 e4       	ldi	r21, 0x40	; 64
    1d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	89 8b       	std	Y+17, r24	; 0x11
    1d54:	9a 8b       	std	Y+18, r25	; 0x12
    1d56:	ab 8b       	std	Y+19, r26	; 0x13
    1d58:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d5a:	69 89       	ldd	r22, Y+17	; 0x11
    1d5c:	7a 89       	ldd	r23, Y+18	; 0x12
    1d5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d60:	9c 89       	ldd	r25, Y+20	; 0x14
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e8       	ldi	r20, 0x80	; 128
    1d68:	5f e3       	ldi	r21, 0x3F	; 63
    1d6a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1d6e:	88 23       	and	r24, r24
    1d70:	1c f4       	brge	.+6      	; 0x1d78 <LCD_void_Write+0x11a>
		__ticks = 1;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	88 8b       	std	Y+16, r24	; 0x10
    1d76:	91 c0       	rjmp	.+290    	; 0x1e9a <LCD_void_Write+0x23c>
	else if (__tmp > 255)
    1d78:	69 89       	ldd	r22, Y+17	; 0x11
    1d7a:	7a 89       	ldd	r23, Y+18	; 0x12
    1d7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4f e7       	ldi	r20, 0x7F	; 127
    1d86:	53 e4       	ldi	r21, 0x43	; 67
    1d88:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1d8c:	18 16       	cp	r1, r24
    1d8e:	0c f0       	brlt	.+2      	; 0x1d92 <LCD_void_Write+0x134>
    1d90:	7b c0       	rjmp	.+246    	; 0x1e88 <LCD_void_Write+0x22a>
	{
		_delay_ms(__us / 1000.0);
    1d92:	6d 89       	ldd	r22, Y+21	; 0x15
    1d94:	7e 89       	ldd	r23, Y+22	; 0x16
    1d96:	8f 89       	ldd	r24, Y+23	; 0x17
    1d98:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	4a e7       	ldi	r20, 0x7A	; 122
    1da0:	54 e4       	ldi	r21, 0x44	; 68
    1da2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	8c 87       	std	Y+12, r24	; 0x0c
    1dac:	9d 87       	std	Y+13, r25	; 0x0d
    1dae:	ae 87       	std	Y+14, r26	; 0x0e
    1db0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1db4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1db6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1db8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	4a ef       	ldi	r20, 0xFA	; 250
    1dc0:	54 e4       	ldi	r21, 0x44	; 68
    1dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	88 87       	std	Y+8, r24	; 0x08
    1dcc:	99 87       	std	Y+9, r25	; 0x09
    1dce:	aa 87       	std	Y+10, r26	; 0x0a
    1dd0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1dd2:	68 85       	ldd	r22, Y+8	; 0x08
    1dd4:	79 85       	ldd	r23, Y+9	; 0x09
    1dd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e8       	ldi	r20, 0x80	; 128
    1de0:	5f e3       	ldi	r21, 0x3F	; 63
    1de2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1de6:	88 23       	and	r24, r24
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <LCD_void_Write+0x196>
		__ticks = 1;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9f 83       	std	Y+7, r25	; 0x07
    1df0:	8e 83       	std	Y+6, r24	; 0x06
    1df2:	3f c0       	rjmp	.+126    	; 0x1e72 <LCD_void_Write+0x214>
	else if (__tmp > 65535)
    1df4:	68 85       	ldd	r22, Y+8	; 0x08
    1df6:	79 85       	ldd	r23, Y+9	; 0x09
    1df8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	3f ef       	ldi	r19, 0xFF	; 255
    1e00:	4f e7       	ldi	r20, 0x7F	; 127
    1e02:	57 e4       	ldi	r21, 0x47	; 71
    1e04:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1e08:	18 16       	cp	r1, r24
    1e0a:	4c f5       	brge	.+82     	; 0x1e5e <LCD_void_Write+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e0e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e10:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e12:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e2       	ldi	r20, 0x20	; 32
    1e1a:	51 e4       	ldi	r21, 0x41	; 65
    1e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9f 83       	std	Y+7, r25	; 0x07
    1e32:	8e 83       	std	Y+6, r24	; 0x06
    1e34:	0f c0       	rjmp	.+30     	; 0x1e54 <LCD_void_Write+0x1f6>
    1e36:	88 ec       	ldi	r24, 0xC8	; 200
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	9d 83       	std	Y+5, r25	; 0x05
    1e3c:	8c 83       	std	Y+4, r24	; 0x04
    1e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e40:	9d 81       	ldd	r25, Y+5	; 0x05
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <LCD_void_Write+0x1e4>
    1e46:	9d 83       	std	Y+5, r25	; 0x05
    1e48:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	9f 83       	std	Y+7, r25	; 0x07
    1e52:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e54:	8e 81       	ldd	r24, Y+6	; 0x06
    1e56:	9f 81       	ldd	r25, Y+7	; 0x07
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	69 f7       	brne	.-38     	; 0x1e36 <LCD_void_Write+0x1d8>
    1e5c:	24 c0       	rjmp	.+72     	; 0x1ea6 <LCD_void_Write+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5e:	68 85       	ldd	r22, Y+8	; 0x08
    1e60:	79 85       	ldd	r23, Y+9	; 0x09
    1e62:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e64:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9f 83       	std	Y+7, r25	; 0x07
    1e70:	8e 83       	std	Y+6, r24	; 0x06
    1e72:	8e 81       	ldd	r24, Y+6	; 0x06
    1e74:	9f 81       	ldd	r25, Y+7	; 0x07
    1e76:	9b 83       	std	Y+3, r25	; 0x03
    1e78:	8a 83       	std	Y+2, r24	; 0x02
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <LCD_void_Write+0x220>
    1e82:	9b 83       	std	Y+3, r25	; 0x03
    1e84:	8a 83       	std	Y+2, r24	; 0x02
    1e86:	0f c0       	rjmp	.+30     	; 0x1ea6 <LCD_void_Write+0x248>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e88:	69 89       	ldd	r22, Y+17	; 0x11
    1e8a:	7a 89       	ldd	r23, Y+18	; 0x12
    1e8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	88 8b       	std	Y+16, r24	; 0x10
    1e9a:	88 89       	ldd	r24, Y+16	; 0x10
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	8a 95       	dec	r24
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <LCD_void_Write+0x242>
    1ea4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_LOW);
    1ea6:	82 e0       	ldi	r24, 0x02	; 2
    1ea8:	62 e0       	ldi	r22, 0x02	; 2
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_U8_Set_Pin_value>
		DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_LOW);

#endif


}
    1eb0:	69 96       	adiw	r28, 0x19	; 25
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <LCD_void_Write_Data>:


void LCD_void_Write_Data(u8 Copy_u8_char)
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	0f 92       	push	r0
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	89 83       	std	Y+1, r24	; 0x01
	/*steps*/
		/*RS=1*/
//	DIO_U8_Set_Pin_Dir(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_OUTPUT);
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_HIGH);
    1ece:	82 e0       	ldi	r24, 0x02	; 2
    1ed0:	60 e0       	ldi	r22, 0x00	; 0
    1ed2:	41 e0       	ldi	r20, 0x01	; 1
    1ed4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_U8_Set_Pin_value>
		/*RW=0*/
		/*write a data*/
		/*E=1*/
		/*E=0*/
	LCD_void_Write(Copy_u8_char);
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <LCD_void_Write>
}
    1ede:	0f 90       	pop	r0
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <LCD_void_Write_String>:




void LCD_void_Write_String(u8 *str)
{
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	00 d0       	rcall	.+0      	; 0x1eec <LCD_void_Write_String+0x6>
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	9a 83       	std	Y+2, r25	; 0x02
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	0a c0       	rjmp	.+20     	; 0x1f0a <LCD_void_Write_String+0x24>
	while( *str!='\0')
	{
		LCD_void_Write_Data(*str);
    1ef6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef8:	fa 81       	ldd	r31, Y+2	; 0x02
    1efa:	80 81       	ld	r24, Z
    1efc:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_void_Write_Data>
		str++;
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	9a 81       	ldd	r25, Y+2	; 0x02
    1f04:	01 96       	adiw	r24, 0x01	; 1
    1f06:	9a 83       	std	Y+2, r25	; 0x02
    1f08:	89 83       	std	Y+1, r24	; 0x01



void LCD_void_Write_String(u8 *str)
{
	while( *str!='\0')
    1f0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f0e:	80 81       	ld	r24, Z
    1f10:	88 23       	and	r24, r24
    1f12:	89 f7       	brne	.-30     	; 0x1ef6 <LCD_void_Write_String+0x10>
	{
		LCD_void_Write_Data(*str);
		str++;
	}
}
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <LCD_void_Write_Numbers>:


void LCD_void_Write_Numbers(u32 Copy_U8_Number)
{
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	6a 97       	sbiw	r28, 0x1a	; 26
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	6f 8b       	std	Y+23, r22	; 0x17
    1f34:	78 8f       	std	Y+24, r23	; 0x18
    1f36:	89 8f       	std	Y+25, r24	; 0x19
    1f38:	9a 8f       	std	Y+26, r25	; 0x1a
	u8 rem ;
	u8 index=0 ;
    1f3a:	19 82       	std	Y+1, r1	; 0x01
	u8 arr[BITSET_NUMBER];
	if(Copy_U8_Number == 0){
    1f3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f40:	a9 8d       	ldd	r26, Y+25	; 0x19
    1f42:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	a1 05       	cpc	r26, r1
    1f48:	b1 05       	cpc	r27, r1
    1f4a:	f1 f5       	brne	.+124    	; 0x1fc8 <LCD_void_Write_Numbers+0xaa>
		arr[index]='0';
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	ce 01       	movw	r24, r28
    1f54:	03 96       	adiw	r24, 0x03	; 3
    1f56:	fc 01       	movw	r30, r24
    1f58:	e2 0f       	add	r30, r18
    1f5a:	f3 1f       	adc	r31, r19
    1f5c:	80 e3       	ldi	r24, 0x30	; 48
    1f5e:	80 83       	st	Z, r24
		index++;
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	8f 5f       	subi	r24, 0xFF	; 255
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	30 c0       	rjmp	.+96     	; 0x1fc8 <LCD_void_Write_Numbers+0xaa>
	}
	while(Copy_U8_Number!=0)
	{
		rem=Copy_U8_Number%10;
    1f68:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6c:	a9 8d       	ldd	r26, Y+25	; 0x19
    1f6e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1f70:	2a e0       	ldi	r18, 0x0A	; 10
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e0       	ldi	r20, 0x00	; 0
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	bc 01       	movw	r22, r24
    1f7a:	cd 01       	movw	r24, r26
    1f7c:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__udivmodsi4>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	8a 83       	std	Y+2, r24	; 0x02
		arr[index]=rem+'0';
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	48 2f       	mov	r20, r24
    1f90:	40 5d       	subi	r20, 0xD0	; 208
    1f92:	ce 01       	movw	r24, r28
    1f94:	03 96       	adiw	r24, 0x03	; 3
    1f96:	fc 01       	movw	r30, r24
    1f98:	e2 0f       	add	r30, r18
    1f9a:	f3 1f       	adc	r31, r19
    1f9c:	40 83       	st	Z, r20
		index++;
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	8f 5f       	subi	r24, 0xFF	; 255
    1fa2:	89 83       	std	Y+1, r24	; 0x01
		Copy_U8_Number/=10;
    1fa4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa8:	a9 8d       	ldd	r26, Y+25	; 0x19
    1faa:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1fac:	2a e0       	ldi	r18, 0x0A	; 10
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e0       	ldi	r20, 0x00	; 0
    1fb2:	50 e0       	ldi	r21, 0x00	; 0
    1fb4:	bc 01       	movw	r22, r24
    1fb6:	cd 01       	movw	r24, r26
    1fb8:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__udivmodsi4>
    1fbc:	da 01       	movw	r26, r20
    1fbe:	c9 01       	movw	r24, r18
    1fc0:	8f 8b       	std	Y+23, r24	; 0x17
    1fc2:	98 8f       	std	Y+24, r25	; 0x18
    1fc4:	a9 8f       	std	Y+25, r26	; 0x19
    1fc6:	ba 8f       	std	Y+26, r27	; 0x1a
	u8 arr[BITSET_NUMBER];
	if(Copy_U8_Number == 0){
		arr[index]='0';
		index++;
	}
	while(Copy_U8_Number!=0)
    1fc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fca:	98 8d       	ldd	r25, Y+24	; 0x18
    1fcc:	a9 8d       	ldd	r26, Y+25	; 0x19
    1fce:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	a1 05       	cpc	r26, r1
    1fd4:	b1 05       	cpc	r27, r1
    1fd6:	41 f6       	brne	.-112    	; 0x1f68 <LCD_void_Write_Numbers+0x4a>
		rem=Copy_U8_Number%10;
		arr[index]=rem+'0';
		index++;
		Copy_U8_Number/=10;
	}
	arr[index]='\0';
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	ce 01       	movw	r24, r28
    1fe0:	03 96       	adiw	r24, 0x03	; 3
    1fe2:	fc 01       	movw	r30, r24
    1fe4:	e2 0f       	add	r30, r18
    1fe6:	f3 1f       	adc	r31, r19
    1fe8:	10 82       	st	Z, r1
	reverse(arr,index);
    1fea:	ce 01       	movw	r24, r28
    1fec:	03 96       	adiw	r24, 0x03	; 3
    1fee:	69 81       	ldd	r22, Y+1	; 0x01
    1ff0:	0e 94 07 10 	call	0x200e	; 0x200e <reverse>
	LCD_void_Write_String(arr);
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	03 96       	adiw	r24, 0x03	; 3
    1ff8:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_void_Write_String>

}
    1ffc:	6a 96       	adiw	r28, 0x1a	; 26
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <reverse>:

void reverse(u8 *ptr , u8 element)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	29 97       	sbiw	r28, 0x09	; 9
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	98 87       	std	Y+8, r25	; 0x08
    2024:	8f 83       	std	Y+7, r24	; 0x07
    2026:	69 87       	std	Y+9, r22	; 0x09
	u8 start = 0;
    2028:	1e 82       	std	Y+6, r1	; 0x06
	u8 end = element-1;
    202a:	89 85       	ldd	r24, Y+9	; 0x09
    202c:	81 50       	subi	r24, 0x01	; 1
    202e:	8d 83       	std	Y+5, r24	; 0x05
    2030:	33 c0       	rjmp	.+102    	; 0x2098 <reverse+0x8a>
	while(start<end)
	{
		u32 temp = ptr[start];
    2032:	8e 81       	ldd	r24, Y+6	; 0x06
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	8f 81       	ldd	r24, Y+7	; 0x07
    203a:	98 85       	ldd	r25, Y+8	; 0x08
    203c:	fc 01       	movw	r30, r24
    203e:	e2 0f       	add	r30, r18
    2040:	f3 1f       	adc	r31, r19
    2042:	80 81       	ld	r24, Z
    2044:	88 2f       	mov	r24, r24
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	a0 e0       	ldi	r26, 0x00	; 0
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	9a 83       	std	Y+2, r25	; 0x02
    2050:	ab 83       	std	Y+3, r26	; 0x03
    2052:	bc 83       	std	Y+4, r27	; 0x04
		ptr[start]=ptr[end];
    2054:	8e 81       	ldd	r24, Y+6	; 0x06
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	8f 81       	ldd	r24, Y+7	; 0x07
    205c:	98 85       	ldd	r25, Y+8	; 0x08
    205e:	dc 01       	movw	r26, r24
    2060:	a2 0f       	add	r26, r18
    2062:	b3 1f       	adc	r27, r19
    2064:	8d 81       	ldd	r24, Y+5	; 0x05
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	8f 81       	ldd	r24, Y+7	; 0x07
    206c:	98 85       	ldd	r25, Y+8	; 0x08
    206e:	fc 01       	movw	r30, r24
    2070:	e2 0f       	add	r30, r18
    2072:	f3 1f       	adc	r31, r19
    2074:	80 81       	ld	r24, Z
    2076:	8c 93       	st	X, r24
		ptr[end]=temp;
    2078:	8d 81       	ldd	r24, Y+5	; 0x05
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	8f 81       	ldd	r24, Y+7	; 0x07
    2080:	98 85       	ldd	r25, Y+8	; 0x08
    2082:	fc 01       	movw	r30, r24
    2084:	e2 0f       	add	r30, r18
    2086:	f3 1f       	adc	r31, r19
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	80 83       	st	Z, r24
		start++;
    208c:	8e 81       	ldd	r24, Y+6	; 0x06
    208e:	8f 5f       	subi	r24, 0xFF	; 255
    2090:	8e 83       	std	Y+6, r24	; 0x06
		end--;
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	81 50       	subi	r24, 0x01	; 1
    2096:	8d 83       	std	Y+5, r24	; 0x05

void reverse(u8 *ptr , u8 element)
{
	u8 start = 0;
	u8 end = element-1;
	while(start<end)
    2098:	9e 81       	ldd	r25, Y+6	; 0x06
    209a:	8d 81       	ldd	r24, Y+5	; 0x05
    209c:	98 17       	cp	r25, r24
    209e:	48 f2       	brcs	.-110    	; 0x2032 <reverse+0x24>
		ptr[end]=temp;
		start++;
		end--;

	}
}
    20a0:	29 96       	adiw	r28, 0x09	; 9
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	08 95       	ret

000020b2 <LCD_void_DDRAM_Address>:


void LCD_void_DDRAM_Address(u8 Copy_u8_Line , u8 Copy_u8_Location)
{
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <LCD_void_DDRAM_Address+0x6>
    20b8:	0f 92       	push	r0
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	8a 83       	std	Y+2, r24	; 0x02
    20c0:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_Address = (Copy_u8_Location+(64*Copy_u8_Line));
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	88 2f       	mov	r24, r24
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	00 24       	eor	r0, r0
    20ca:	96 95       	lsr	r25
    20cc:	87 95       	ror	r24
    20ce:	07 94       	ror	r0
    20d0:	96 95       	lsr	r25
    20d2:	87 95       	ror	r24
    20d4:	07 94       	ror	r0
    20d6:	98 2f       	mov	r25, r24
    20d8:	80 2d       	mov	r24, r0
    20da:	98 2f       	mov	r25, r24
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	89 0f       	add	r24, r25
    20e0:	89 83       	std	Y+1, r24	; 0x01
	DDRAM_Address|=0b10000000;
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	80 68       	ori	r24, 0x80	; 128
    20e6:	89 83       	std	Y+1, r24	; 0x01
	LCD_void_Write_CMD(DDRAM_Address);
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_void_Write_CMD>
}
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <LCD_void_Set_CGRAM_Address>:


void LCD_void_Set_CGRAM_Address(u8 Address , u8 *ptr)
{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <LCD_void_Set_CGRAM_Address+0x6>
    2100:	00 d0       	rcall	.+0      	; 0x2102 <LCD_void_Set_CGRAM_Address+0x8>
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	8a 83       	std	Y+2, r24	; 0x02
    2108:	7c 83       	std	Y+4, r23	; 0x04
    210a:	6b 83       	std	Y+3, r22	; 0x03
	LCD_void_Write_CMD(Address);
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_void_Write_CMD>
	for(u8 i =0 ; i<8 ; i++)
    2112:	19 82       	std	Y+1, r1	; 0x01
    2114:	0d c0       	rjmp	.+26     	; 0x2130 <LCD_void_Set_CGRAM_Address+0x36>
	{
		LCD_void_Write_Data(*ptr);
    2116:	eb 81       	ldd	r30, Y+3	; 0x03
    2118:	fc 81       	ldd	r31, Y+4	; 0x04
    211a:	80 81       	ld	r24, Z
    211c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_void_Write_Data>
		ptr++;
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	9c 81       	ldd	r25, Y+4	; 0x04
    2124:	01 96       	adiw	r24, 0x01	; 1
    2126:	9c 83       	std	Y+4, r25	; 0x04
    2128:	8b 83       	std	Y+3, r24	; 0x03


void LCD_void_Set_CGRAM_Address(u8 Address , u8 *ptr)
{
	LCD_void_Write_CMD(Address);
	for(u8 i =0 ; i<8 ; i++)
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	8f 5f       	subi	r24, 0xFF	; 255
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	88 30       	cpi	r24, 0x08	; 8
    2134:	80 f3       	brcs	.-32     	; 0x2116 <LCD_void_Set_CGRAM_Address+0x1c>
	{
		LCD_void_Write_Data(*ptr);
		ptr++;
	}

}
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <LCD_void_Clear_Screen>:

void LCD_void_Clear_Screen(void)
{
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	2e 97       	sbiw	r28, 0x0e	; 14
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	f8 94       	cli
    2152:	de bf       	out	0x3e, r29	; 62
    2154:	0f be       	out	0x3f, r0	; 63
    2156:	cd bf       	out	0x3d, r28	; 61
	LCD_void_Write_CMD(LCD_Clear_Display_Screen);
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <LCD_void_Write_CMD>
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	a0 e0       	ldi	r26, 0x00	; 0
    2164:	b0 e4       	ldi	r27, 0x40	; 64
    2166:	8b 87       	std	Y+11, r24	; 0x0b
    2168:	9c 87       	std	Y+12, r25	; 0x0c
    216a:	ad 87       	std	Y+13, r26	; 0x0d
    216c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2170:	7c 85       	ldd	r23, Y+12	; 0x0c
    2172:	8d 85       	ldd	r24, Y+13	; 0x0d
    2174:	9e 85       	ldd	r25, Y+14	; 0x0e
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	4a ef       	ldi	r20, 0xFA	; 250
    217c:	54 e4       	ldi	r21, 0x44	; 68
    217e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	8f 83       	std	Y+7, r24	; 0x07
    2188:	98 87       	std	Y+8, r25	; 0x08
    218a:	a9 87       	std	Y+9, r26	; 0x09
    218c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    218e:	6f 81       	ldd	r22, Y+7	; 0x07
    2190:	78 85       	ldd	r23, Y+8	; 0x08
    2192:	89 85       	ldd	r24, Y+9	; 0x09
    2194:	9a 85       	ldd	r25, Y+10	; 0x0a
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e8       	ldi	r20, 0x80	; 128
    219c:	5f e3       	ldi	r21, 0x3F	; 63
    219e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    21a2:	88 23       	and	r24, r24
    21a4:	2c f4       	brge	.+10     	; 0x21b0 <LCD_void_Clear_Screen+0x6c>
		__ticks = 1;
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9e 83       	std	Y+6, r25	; 0x06
    21ac:	8d 83       	std	Y+5, r24	; 0x05
    21ae:	3f c0       	rjmp	.+126    	; 0x222e <LCD_void_Clear_Screen+0xea>
	else if (__tmp > 65535)
    21b0:	6f 81       	ldd	r22, Y+7	; 0x07
    21b2:	78 85       	ldd	r23, Y+8	; 0x08
    21b4:	89 85       	ldd	r24, Y+9	; 0x09
    21b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	3f ef       	ldi	r19, 0xFF	; 255
    21bc:	4f e7       	ldi	r20, 0x7F	; 127
    21be:	57 e4       	ldi	r21, 0x47	; 71
    21c0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    21c4:	18 16       	cp	r1, r24
    21c6:	4c f5       	brge	.+82     	; 0x221a <LCD_void_Clear_Screen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    21cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e2       	ldi	r20, 0x20	; 32
    21d6:	51 e4       	ldi	r21, 0x41	; 65
    21d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	bc 01       	movw	r22, r24
    21e2:	cd 01       	movw	r24, r26
    21e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	9e 83       	std	Y+6, r25	; 0x06
    21ee:	8d 83       	std	Y+5, r24	; 0x05
    21f0:	0f c0       	rjmp	.+30     	; 0x2210 <LCD_void_Clear_Screen+0xcc>
    21f2:	88 ec       	ldi	r24, 0xC8	; 200
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	9c 83       	std	Y+4, r25	; 0x04
    21f8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21fa:	8b 81       	ldd	r24, Y+3	; 0x03
    21fc:	9c 81       	ldd	r25, Y+4	; 0x04
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <LCD_void_Clear_Screen+0xba>
    2202:	9c 83       	std	Y+4, r25	; 0x04
    2204:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2206:	8d 81       	ldd	r24, Y+5	; 0x05
    2208:	9e 81       	ldd	r25, Y+6	; 0x06
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	9e 83       	std	Y+6, r25	; 0x06
    220e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2210:	8d 81       	ldd	r24, Y+5	; 0x05
    2212:	9e 81       	ldd	r25, Y+6	; 0x06
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	69 f7       	brne	.-38     	; 0x21f2 <LCD_void_Clear_Screen+0xae>
    2218:	14 c0       	rjmp	.+40     	; 0x2242 <LCD_void_Clear_Screen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221a:	6f 81       	ldd	r22, Y+7	; 0x07
    221c:	78 85       	ldd	r23, Y+8	; 0x08
    221e:	89 85       	ldd	r24, Y+9	; 0x09
    2220:	9a 85       	ldd	r25, Y+10	; 0x0a
    2222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	9e 83       	std	Y+6, r25	; 0x06
    222c:	8d 83       	std	Y+5, r24	; 0x05
    222e:	8d 81       	ldd	r24, Y+5	; 0x05
    2230:	9e 81       	ldd	r25, Y+6	; 0x06
    2232:	9a 83       	std	Y+2, r25	; 0x02
    2234:	89 83       	std	Y+1, r24	; 0x01
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	9a 81       	ldd	r25, Y+2	; 0x02
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <LCD_void_Clear_Screen+0xf6>
    223e:	9a 83       	std	Y+2, r25	; 0x02
    2240:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2242:	2e 96       	adiw	r28, 0x0e	; 14
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	62 97       	sbiw	r28, 0x12	; 18
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	cd bf       	out	0x3d, r28	; 61
    2268:	9a 8b       	std	Y+18, r25	; 0x12
    226a:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   /* store the integer number to arr & 10 is for decimal numbering system*/
   itoa(data,arr,10);
    226c:	89 89       	ldd	r24, Y+17	; 0x11
    226e:	9a 89       	ldd	r25, Y+18	; 0x12
    2270:	9e 01       	movw	r18, r28
    2272:	2f 5f       	subi	r18, 0xFF	; 255
    2274:	3f 4f       	sbci	r19, 0xFF	; 255
    2276:	b9 01       	movw	r22, r18
    2278:	4a e0       	ldi	r20, 0x0A	; 10
    227a:	50 e0       	ldi	r21, 0x00	; 0
    227c:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <itoa>

   LCD_void_Write_String(arr);
    2280:	ce 01       	movw	r24, r28
    2282:	01 96       	adiw	r24, 0x01	; 1
    2284:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <LCD_void_Write_String>
}
    2288:	62 96       	adiw	r28, 0x12	; 18
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <TIMER0_void_Init>:

f32 Number_ovf ;
f64  Time_ovf;
/*FUNCTIONS*/
void TIMER0_void_Init(void)
{
    229a:	0f 93       	push	r16
    229c:	1f 93       	push	r17
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_MODE == OVF_MODE

	/*preload value*/
	TIMER_U8_TCNT0 = TIMER0_U8_Cal_Preload() ;
    22a6:	02 e5       	ldi	r16, 0x52	; 82
    22a8:	10 e0       	ldi	r17, 0x00	; 0
    22aa:	0e 94 a4 11 	call	0x2348	; 0x2348 <TIMER0_U8_Cal_Preload>
    22ae:	f8 01       	movw	r30, r16
    22b0:	80 83       	st	Z, r24
    //enable interrupt falg for OVF_mode
	Set_Bit(TIMER_U8_TIMSK0 , 0);
    22b2:	a9 e5       	ldi	r26, 0x59	; 89
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e9 e5       	ldi	r30, 0x59	; 89
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	81 60       	ori	r24, 0x01	; 1
    22be:	8c 93       	st	X, r24
	Set_Bit(TIMER_U8_SREG,7);
    22c0:	af e5       	ldi	r26, 0x5F	; 95
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	ef e5       	ldi	r30, 0x5F	; 95
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	80 68       	ori	r24, 0x80	; 128
    22cc:	8c 93       	st	X, r24
									/*TCCR0*/
	/*set prescaler*/
	Assign_Bit(TIMER_U8_TCCR0 , DIO_U8_PIN0 , Get_Bit(TIMER0_PRESCALER,0));
    22ce:	a3 e5       	ldi	r26, 0x53	; 83
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e3 e5       	ldi	r30, 0x53	; 83
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	8e 7f       	andi	r24, 0xFE	; 254
    22da:	8c 93       	st	X, r24
	Assign_Bit(TIMER_U8_TCCR0 , DIO_U8_PIN1 , Get_Bit(TIMER0_PRESCALER,1));
    22dc:	a3 e5       	ldi	r26, 0x53	; 83
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e3 e5       	ldi	r30, 0x53	; 83
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	82 60       	ori	r24, 0x02	; 2
    22e8:	8c 93       	st	X, r24
	Assign_Bit(TIMER_U8_TCCR0 , DIO_U8_PIN2 , Get_Bit(TIMER0_PRESCALER,2));
    22ea:	a3 e5       	ldi	r26, 0x53	; 83
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	e3 e5       	ldi	r30, 0x53	; 83
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	8b 7f       	andi	r24, 0xFB	; 251
    22f6:	8c 93       	st	X, r24
	/*Control output of OC0 pin */
	Assign_Bit(TIMER_U8_TCCR0 , DIO_U8_PIN4 , Get_Bit(TIMER0_OUTPUT_OF_OC0,0));
    22f8:	a3 e5       	ldi	r26, 0x53	; 83
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	e3 e5       	ldi	r30, 0x53	; 83
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	8f 7e       	andi	r24, 0xEF	; 239
    2304:	8c 93       	st	X, r24
	Assign_Bit(TIMER_U8_TCCR0 , DIO_U8_PIN5 , Get_Bit(TIMER0_OUTPUT_OF_OC0,1));
    2306:	a3 e5       	ldi	r26, 0x53	; 83
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e3 e5       	ldi	r30, 0x53	; 83
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	8f 7d       	andi	r24, 0xDF	; 223
    2312:	8c 93       	st	X, r24
	/*waveform generation mode*/
	Assign_Bit(TIMER_U8_TCCR0 , DIO_U8_PIN3 , Get_Bit(OVF_MODE,0));
    2314:	a3 e5       	ldi	r26, 0x53	; 83
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	e3 e5       	ldi	r30, 0x53	; 83
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	87 7f       	andi	r24, 0xF7	; 247
    2320:	8c 93       	st	X, r24
	Assign_Bit(TIMER_U8_TCCR0 , DIO_U8_PIN6 , Get_Bit(OVF_MODE,1));
    2322:	a3 e5       	ldi	r26, 0x53	; 83
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e3 e5       	ldi	r30, 0x53	; 83
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	8f 7b       	andi	r24, 0xBF	; 191
    232e:	8c 93       	st	X, r24
	/*force ctc */
	Clear_Bit(TIMER_U8_TCCR0,7);
    2330:	a3 e5       	ldi	r26, 0x53	; 83
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	e3 e5       	ldi	r30, 0x53	; 83
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	8f 77       	andi	r24, 0x7F	; 127
    233c:	8c 93       	st	X, r24


#endif
}
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	08 95       	ret

00002348 <TIMER0_U8_Cal_Preload>:



static u8 TIMER0_U8_Cal_Preload(void)
{
    2348:	ef 92       	push	r14
    234a:	ff 92       	push	r15
    234c:	0f 93       	push	r16
    234e:	1f 93       	push	r17
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	00 d0       	rcall	.+0      	; 0x2356 <TIMER0_U8_Cal_Preload+0xe>
    2356:	00 d0       	rcall	.+0      	; 0x2358 <TIMER0_U8_Cal_Preload+0x10>
    2358:	0f 92       	push	r0
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
	u8 preload ;

	f64 Copy_f32_float_val ;

	Time_ovf = (256.000 * ((prescaler_val)/(Freq_system)));
    235e:	8d eb       	ldi	r24, 0xBD	; 189
    2360:	97 e3       	ldi	r25, 0x37	; 55
    2362:	a6 e8       	ldi	r26, 0x86	; 134
    2364:	b9 e3       	ldi	r27, 0x39	; 57
    2366:	80 93 6b 01 	sts	0x016B, r24
    236a:	90 93 6c 01 	sts	0x016C, r25
    236e:	a0 93 6d 01 	sts	0x016D, r26
    2372:	b0 93 6e 01 	sts	0x016E, r27
	Number_ovf = (Time_desired_in_sec/Time_ovf) ;
    2376:	20 91 6b 01 	lds	r18, 0x016B
    237a:	30 91 6c 01 	lds	r19, 0x016C
    237e:	40 91 6d 01 	lds	r20, 0x016D
    2382:	50 91 6e 01 	lds	r21, 0x016E
    2386:	60 e0       	ldi	r22, 0x00	; 0
    2388:	70 e0       	ldi	r23, 0x00	; 0
    238a:	80 e8       	ldi	r24, 0x80	; 128
    238c:	9f e3       	ldi	r25, 0x3F	; 63
    238e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	80 93 6f 01 	sts	0x016F, r24
    239a:	90 93 70 01 	sts	0x0170, r25
    239e:	a0 93 71 01 	sts	0x0171, r26
    23a2:	b0 93 72 01 	sts	0x0172, r27

	if(Number_ovf > 1)
    23a6:	80 91 6f 01 	lds	r24, 0x016F
    23aa:	90 91 70 01 	lds	r25, 0x0170
    23ae:	a0 91 71 01 	lds	r26, 0x0171
    23b2:	b0 91 72 01 	lds	r27, 0x0172
    23b6:	bc 01       	movw	r22, r24
    23b8:	cd 01       	movw	r24, r26
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e8       	ldi	r20, 0x80	; 128
    23c0:	5f e3       	ldi	r21, 0x3F	; 63
    23c2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    23c6:	18 16       	cp	r1, r24
    23c8:	0c f0       	brlt	.+2      	; 0x23cc <TIMER0_U8_Cal_Preload+0x84>
    23ca:	72 c0       	rjmp	.+228    	; 0x24b0 <TIMER0_U8_Cal_Preload+0x168>
	{
			if(Number_ovf - (u32)Number_ovf == 0)  // integer
    23cc:	e0 90 6f 01 	lds	r14, 0x016F
    23d0:	f0 90 70 01 	lds	r15, 0x0170
    23d4:	00 91 71 01 	lds	r16, 0x0171
    23d8:	10 91 72 01 	lds	r17, 0x0172
    23dc:	80 91 6f 01 	lds	r24, 0x016F
    23e0:	90 91 70 01 	lds	r25, 0x0170
    23e4:	a0 91 71 01 	lds	r26, 0x0171
    23e8:	b0 91 72 01 	lds	r27, 0x0172
    23ec:	bc 01       	movw	r22, r24
    23ee:	cd 01       	movw	r24, r26
    23f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	bc 01       	movw	r22, r24
    23fa:	cd 01       	movw	r24, r26
    23fc:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2400:	9b 01       	movw	r18, r22
    2402:	ac 01       	movw	r20, r24
    2404:	c8 01       	movw	r24, r16
    2406:	b7 01       	movw	r22, r14
    2408:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	bc 01       	movw	r22, r24
    2412:	cd 01       	movw	r24, r26
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e0       	ldi	r20, 0x00	; 0
    241a:	50 e0       	ldi	r21, 0x00	; 0
    241c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2420:	88 23       	and	r24, r24
    2422:	11 f4       	brne	.+4      	; 0x2428 <TIMER0_U8_Cal_Preload+0xe0>
			{
				preload = 0;
    2424:	1d 82       	std	Y+5, r1	; 0x05
    2426:	8d c0       	rjmp	.+282    	; 0x2542 <TIMER0_U8_Cal_Preload+0x1fa>
			}
			else 									// float
			{
				Copy_f32_float_val = Number_ovf - (u32)Number_ovf ;
    2428:	e0 90 6f 01 	lds	r14, 0x016F
    242c:	f0 90 70 01 	lds	r15, 0x0170
    2430:	00 91 71 01 	lds	r16, 0x0171
    2434:	10 91 72 01 	lds	r17, 0x0172
    2438:	80 91 6f 01 	lds	r24, 0x016F
    243c:	90 91 70 01 	lds	r25, 0x0170
    2440:	a0 91 71 01 	lds	r26, 0x0171
    2444:	b0 91 72 01 	lds	r27, 0x0172
    2448:	bc 01       	movw	r22, r24
    244a:	cd 01       	movw	r24, r26
    244c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	bc 01       	movw	r22, r24
    2456:	cd 01       	movw	r24, r26
    2458:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    245c:	9b 01       	movw	r18, r22
    245e:	ac 01       	movw	r20, r24
    2460:	c8 01       	movw	r24, r16
    2462:	b7 01       	movw	r22, r14
    2464:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	89 83       	std	Y+1, r24	; 0x01
    246e:	9a 83       	std	Y+2, r25	; 0x02
    2470:	ab 83       	std	Y+3, r26	; 0x03
    2472:	bc 83       	std	Y+4, r27	; 0x04

				preload = (256 - (256 * Copy_f32_float_val)) ;
    2474:	69 81       	ldd	r22, Y+1	; 0x01
    2476:	7a 81       	ldd	r23, Y+2	; 0x02
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	9c 81       	ldd	r25, Y+4	; 0x04
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e8       	ldi	r20, 0x80	; 128
    2482:	53 ec       	ldi	r21, 0xC3	; 195
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	bc 01       	movw	r22, r24
    248e:	cd 01       	movw	r24, r26
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e8       	ldi	r20, 0x80	; 128
    2496:	53 e4       	ldi	r21, 0x43	; 67
    2498:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	bc 01       	movw	r22, r24
    24a2:	cd 01       	movw	r24, r26
    24a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	8d 83       	std	Y+5, r24	; 0x05
    24ae:	49 c0       	rjmp	.+146    	; 0x2542 <TIMER0_U8_Cal_Preload+0x1fa>
			}
	}
	else if (Number_ovf < 1)
    24b0:	80 91 6f 01 	lds	r24, 0x016F
    24b4:	90 91 70 01 	lds	r25, 0x0170
    24b8:	a0 91 71 01 	lds	r26, 0x0171
    24bc:	b0 91 72 01 	lds	r27, 0x0172
    24c0:	bc 01       	movw	r22, r24
    24c2:	cd 01       	movw	r24, r26
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e8       	ldi	r20, 0x80	; 128
    24ca:	5f e3       	ldi	r21, 0x3F	; 63
    24cc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    24d0:	88 23       	and	r24, r24
    24d2:	24 f5       	brge	.+72     	; 0x251c <TIMER0_U8_Cal_Preload+0x1d4>
	{
		//Copy_f32_float_val = Number_ovf  ;
		preload = (256 - (256 * Number_ovf)) ;
    24d4:	80 91 6f 01 	lds	r24, 0x016F
    24d8:	90 91 70 01 	lds	r25, 0x0170
    24dc:	a0 91 71 01 	lds	r26, 0x0171
    24e0:	b0 91 72 01 	lds	r27, 0x0172
    24e4:	bc 01       	movw	r22, r24
    24e6:	cd 01       	movw	r24, r26
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e8       	ldi	r20, 0x80	; 128
    24ee:	53 ec       	ldi	r21, 0xC3	; 195
    24f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	bc 01       	movw	r22, r24
    24fa:	cd 01       	movw	r24, r26
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e8       	ldi	r20, 0x80	; 128
    2502:	53 e4       	ldi	r21, 0x43	; 67
    2504:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	bc 01       	movw	r22, r24
    250e:	cd 01       	movw	r24, r26
    2510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	8d 83       	std	Y+5, r24	; 0x05
    251a:	13 c0       	rjmp	.+38     	; 0x2542 <TIMER0_U8_Cal_Preload+0x1fa>
	}

	else if(Number_ovf == 1)
    251c:	80 91 6f 01 	lds	r24, 0x016F
    2520:	90 91 70 01 	lds	r25, 0x0170
    2524:	a0 91 71 01 	lds	r26, 0x0171
    2528:	b0 91 72 01 	lds	r27, 0x0172
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e8       	ldi	r20, 0x80	; 128
    2536:	5f e3       	ldi	r21, 0x3F	; 63
    2538:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    253c:	88 23       	and	r24, r24
    253e:	09 f4       	brne	.+2      	; 0x2542 <TIMER0_U8_Cal_Preload+0x1fa>
	{
		preload = 0;
    2540:	1d 82       	std	Y+5, r1	; 0x05
	}

	return preload ;
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	1f 91       	pop	r17
    2554:	0f 91       	pop	r16
    2556:	ff 90       	pop	r15
    2558:	ef 90       	pop	r14
    255a:	08 95       	ret

0000255c <__vector_11>:


void __vector_11(void)
{
    255c:	1f 92       	push	r1
    255e:	0f 92       	push	r0
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	0f 92       	push	r0
    2564:	11 24       	eor	r1, r1
    2566:	0f 93       	push	r16
    2568:	1f 93       	push	r17
    256a:	2f 93       	push	r18
    256c:	3f 93       	push	r19
    256e:	4f 93       	push	r20
    2570:	5f 93       	push	r21
    2572:	6f 93       	push	r22
    2574:	7f 93       	push	r23
    2576:	8f 93       	push	r24
    2578:	9f 93       	push	r25
    257a:	af 93       	push	r26
    257c:	bf 93       	push	r27
    257e:	ef 93       	push	r30
    2580:	ff 93       	push	r31
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
		counter=0;
		DIO_U8_Set_Pin_value(PORTA_ID,DIO_U8_PIN0,Toggle_Bit(state,0));
	}
#elif Number_ovf <1

		TIMER_U8_TCNT0 = TIMER0_U8_Cal_Preload() ;
    258a:	02 e5       	ldi	r16, 0x52	; 82
    258c:	10 e0       	ldi	r17, 0x00	; 0
    258e:	0e 94 a4 11 	call	0x2348	; 0x2348 <TIMER0_U8_Cal_Preload>
    2592:	f8 01       	movw	r30, r16
    2594:	80 83       	st	Z, r24
		DIO_U8_Set_Pin_value(PORTA_ID,DIO_U8_PIN0,Toggle_Bit(state,0));
    2596:	90 91 68 01 	lds	r25, 0x0168
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	89 27       	eor	r24, r25
    259e:	80 93 68 01 	sts	0x0168, r24
    25a2:	90 91 68 01 	lds	r25, 0x0168
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	49 2f       	mov	r20, r25
    25ac:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_U8_Set_Pin_value>

#elif Number_ovf==1
DIO_U8_Set_Pin_value(PORTA_ID,DIO_U8_PIN0,Toggle_Bit(state,0));

#endif
}
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	ff 91       	pop	r31
    25b6:	ef 91       	pop	r30
    25b8:	bf 91       	pop	r27
    25ba:	af 91       	pop	r26
    25bc:	9f 91       	pop	r25
    25be:	8f 91       	pop	r24
    25c0:	7f 91       	pop	r23
    25c2:	6f 91       	pop	r22
    25c4:	5f 91       	pop	r21
    25c6:	4f 91       	pop	r20
    25c8:	3f 91       	pop	r19
    25ca:	2f 91       	pop	r18
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	0f 90       	pop	r0
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	0f 90       	pop	r0
    25d6:	1f 90       	pop	r1
    25d8:	18 95       	reti

000025da <ciel_num>:



static u32 ciel_num(f32 num)
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <ciel_num+0x6>
    25e0:	00 d0       	rcall	.+0      	; 0x25e2 <ciel_num+0x8>
    25e2:	0f 92       	push	r0
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	69 83       	std	Y+1, r22	; 0x01
    25ea:	7a 83       	std	Y+2, r23	; 0x02
    25ec:	8b 83       	std	Y+3, r24	; 0x03
    25ee:	9c 83       	std	Y+4, r25	; 0x04
	if(num - (u32)num ==0)
    25f0:	69 81       	ldd	r22, Y+1	; 0x01
    25f2:	7a 81       	ldd	r23, Y+2	; 0x02
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	9c 81       	ldd	r25, Y+4	; 0x04
    25f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	bc 01       	movw	r22, r24
    2602:	cd 01       	movw	r24, r26
    2604:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2608:	9b 01       	movw	r18, r22
    260a:	ac 01       	movw	r20, r24
    260c:	69 81       	ldd	r22, Y+1	; 0x01
    260e:	7a 81       	ldd	r23, Y+2	; 0x02
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	9c 81       	ldd	r25, Y+4	; 0x04
    2614:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	1d 82       	std	Y+5, r1	; 0x05
    261e:	bc 01       	movw	r22, r24
    2620:	cd 01       	movw	r24, r26
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	40 e0       	ldi	r20, 0x00	; 0
    2628:	50 e0       	ldi	r21, 0x00	; 0
    262a:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    262e:	88 23       	and	r24, r24
    2630:	11 f4       	brne	.+4      	; 0x2636 <ciel_num+0x5c>
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	8d 83       	std	Y+5, r24	; 0x05
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	9d 81       	ldd	r25, Y+5	; 0x05
    263a:	89 27       	eor	r24, r25
    263c:	88 23       	and	r24, r24
    263e:	a9 f0       	breq	.+42     	; 0x266a <ciel_num+0x90>
	{
	}
	else
	{
		num = (((u32)num)+1) ;
    2640:	69 81       	ldd	r22, Y+1	; 0x01
    2642:	7a 81       	ldd	r23, Y+2	; 0x02
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	9c 81       	ldd	r25, Y+4	; 0x04
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	01 96       	adiw	r24, 0x01	; 1
    2652:	a1 1d       	adc	r26, r1
    2654:	b1 1d       	adc	r27, r1
    2656:	bc 01       	movw	r22, r24
    2658:	cd 01       	movw	r24, r26
    265a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	89 83       	std	Y+1, r24	; 0x01
    2664:	9a 83       	std	Y+2, r25	; 0x02
    2666:	ab 83       	std	Y+3, r26	; 0x03
    2668:	bc 83       	std	Y+4, r27	; 0x04
	}
	return (u32)num ;
    266a:	69 81       	ldd	r22, Y+1	; 0x01
    266c:	7a 81       	ldd	r23, Y+2	; 0x02
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	9c 81       	ldd	r25, Y+4	; 0x04
    2672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
}
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	08 95       	ret

0000268e <main>:
#include"DIO_interface.h"
#include"TIMER0_interface.h"


void main(void)
{
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
	extern f32 Number_ovf ;
	extern f64  Time_ovf;
	DIO_void_Init();
    2696:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_void_Init>
	LCD_void_Init();
    269a:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <LCD_void_Init>
	DIO_U8_Set_Pin_Dir(PORTA_ID,DIO_U8_PIN0,PIN_OUTPUT);
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	41 e0       	ldi	r20, 0x01	; 1
    26a4:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_U8_Set_Pin_Dir>
	TIMER0_void_Init();
    26a8:	0e 94 4d 11 	call	0x229a	; 0x229a <TIMER0_void_Init>
	LCD_void_Write_Numbers((u32)Number_ovf);
    26ac:	80 91 6f 01 	lds	r24, 0x016F
    26b0:	90 91 70 01 	lds	r25, 0x0170
    26b4:	a0 91 71 01 	lds	r26, 0x0171
    26b8:	b0 91 72 01 	lds	r27, 0x0172
    26bc:	bc 01       	movw	r22, r24
    26be:	cd 01       	movw	r24, r26
    26c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	bc 01       	movw	r22, r24
    26ca:	cd 01       	movw	r24, r26
    26cc:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <LCD_void_Write_Numbers>
	LCD_void_DDRAM_Address(1,0);
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	60 e0       	ldi	r22, 0x00	; 0
    26d4:	0e 94 59 10 	call	0x20b2	; 0x20b2 <LCD_void_DDRAM_Address>
	LCD_void_Write_Numbers(Time_ovf);
    26d8:	80 91 6b 01 	lds	r24, 0x016B
    26dc:	90 91 6c 01 	lds	r25, 0x016C
    26e0:	a0 91 6d 01 	lds	r26, 0x016D
    26e4:	b0 91 6e 01 	lds	r27, 0x016E
    26e8:	bc 01       	movw	r22, r24
    26ea:	cd 01       	movw	r24, r26
    26ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	bc 01       	movw	r22, r24
    26f6:	cd 01       	movw	r24, r26
    26f8:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <LCD_void_Write_Numbers>
    26fc:	ff cf       	rjmp	.-2      	; 0x26fc <main+0x6e>

000026fe <__udivmodsi4>:
    26fe:	a1 e2       	ldi	r26, 0x21	; 33
    2700:	1a 2e       	mov	r1, r26
    2702:	aa 1b       	sub	r26, r26
    2704:	bb 1b       	sub	r27, r27
    2706:	fd 01       	movw	r30, r26
    2708:	0d c0       	rjmp	.+26     	; 0x2724 <__udivmodsi4_ep>

0000270a <__udivmodsi4_loop>:
    270a:	aa 1f       	adc	r26, r26
    270c:	bb 1f       	adc	r27, r27
    270e:	ee 1f       	adc	r30, r30
    2710:	ff 1f       	adc	r31, r31
    2712:	a2 17       	cp	r26, r18
    2714:	b3 07       	cpc	r27, r19
    2716:	e4 07       	cpc	r30, r20
    2718:	f5 07       	cpc	r31, r21
    271a:	20 f0       	brcs	.+8      	; 0x2724 <__udivmodsi4_ep>
    271c:	a2 1b       	sub	r26, r18
    271e:	b3 0b       	sbc	r27, r19
    2720:	e4 0b       	sbc	r30, r20
    2722:	f5 0b       	sbc	r31, r21

00002724 <__udivmodsi4_ep>:
    2724:	66 1f       	adc	r22, r22
    2726:	77 1f       	adc	r23, r23
    2728:	88 1f       	adc	r24, r24
    272a:	99 1f       	adc	r25, r25
    272c:	1a 94       	dec	r1
    272e:	69 f7       	brne	.-38     	; 0x270a <__udivmodsi4_loop>
    2730:	60 95       	com	r22
    2732:	70 95       	com	r23
    2734:	80 95       	com	r24
    2736:	90 95       	com	r25
    2738:	9b 01       	movw	r18, r22
    273a:	ac 01       	movw	r20, r24
    273c:	bd 01       	movw	r22, r26
    273e:	cf 01       	movw	r24, r30
    2740:	08 95       	ret

00002742 <__prologue_saves__>:
    2742:	2f 92       	push	r2
    2744:	3f 92       	push	r3
    2746:	4f 92       	push	r4
    2748:	5f 92       	push	r5
    274a:	6f 92       	push	r6
    274c:	7f 92       	push	r7
    274e:	8f 92       	push	r8
    2750:	9f 92       	push	r9
    2752:	af 92       	push	r10
    2754:	bf 92       	push	r11
    2756:	cf 92       	push	r12
    2758:	df 92       	push	r13
    275a:	ef 92       	push	r14
    275c:	ff 92       	push	r15
    275e:	0f 93       	push	r16
    2760:	1f 93       	push	r17
    2762:	cf 93       	push	r28
    2764:	df 93       	push	r29
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
    276a:	ca 1b       	sub	r28, r26
    276c:	db 0b       	sbc	r29, r27
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	09 94       	ijmp

0000277a <__epilogue_restores__>:
    277a:	2a 88       	ldd	r2, Y+18	; 0x12
    277c:	39 88       	ldd	r3, Y+17	; 0x11
    277e:	48 88       	ldd	r4, Y+16	; 0x10
    2780:	5f 84       	ldd	r5, Y+15	; 0x0f
    2782:	6e 84       	ldd	r6, Y+14	; 0x0e
    2784:	7d 84       	ldd	r7, Y+13	; 0x0d
    2786:	8c 84       	ldd	r8, Y+12	; 0x0c
    2788:	9b 84       	ldd	r9, Y+11	; 0x0b
    278a:	aa 84       	ldd	r10, Y+10	; 0x0a
    278c:	b9 84       	ldd	r11, Y+9	; 0x09
    278e:	c8 84       	ldd	r12, Y+8	; 0x08
    2790:	df 80       	ldd	r13, Y+7	; 0x07
    2792:	ee 80       	ldd	r14, Y+6	; 0x06
    2794:	fd 80       	ldd	r15, Y+5	; 0x05
    2796:	0c 81       	ldd	r16, Y+4	; 0x04
    2798:	1b 81       	ldd	r17, Y+3	; 0x03
    279a:	aa 81       	ldd	r26, Y+2	; 0x02
    279c:	b9 81       	ldd	r27, Y+1	; 0x01
    279e:	ce 0f       	add	r28, r30
    27a0:	d1 1d       	adc	r29, r1
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	f8 94       	cli
    27a6:	de bf       	out	0x3e, r29	; 62
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	cd bf       	out	0x3d, r28	; 61
    27ac:	ed 01       	movw	r28, r26
    27ae:	08 95       	ret

000027b0 <itoa>:
    27b0:	fb 01       	movw	r30, r22
    27b2:	9f 01       	movw	r18, r30
    27b4:	e8 94       	clt
    27b6:	42 30       	cpi	r20, 0x02	; 2
    27b8:	c4 f0       	brlt	.+48     	; 0x27ea <itoa+0x3a>
    27ba:	45 32       	cpi	r20, 0x25	; 37
    27bc:	b4 f4       	brge	.+44     	; 0x27ea <itoa+0x3a>
    27be:	4a 30       	cpi	r20, 0x0A	; 10
    27c0:	29 f4       	brne	.+10     	; 0x27cc <itoa+0x1c>
    27c2:	97 fb       	bst	r25, 7
    27c4:	1e f4       	brtc	.+6      	; 0x27cc <itoa+0x1c>
    27c6:	90 95       	com	r25
    27c8:	81 95       	neg	r24
    27ca:	9f 4f       	sbci	r25, 0xFF	; 255
    27cc:	64 2f       	mov	r22, r20
    27ce:	77 27       	eor	r23, r23
    27d0:	0e 94 09 14 	call	0x2812	; 0x2812 <__udivmodhi4>
    27d4:	80 5d       	subi	r24, 0xD0	; 208
    27d6:	8a 33       	cpi	r24, 0x3A	; 58
    27d8:	0c f0       	brlt	.+2      	; 0x27dc <itoa+0x2c>
    27da:	89 5d       	subi	r24, 0xD9	; 217
    27dc:	81 93       	st	Z+, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	a1 f7       	brne	.-24     	; 0x27cc <itoa+0x1c>
    27e4:	16 f4       	brtc	.+4      	; 0x27ea <itoa+0x3a>
    27e6:	5d e2       	ldi	r21, 0x2D	; 45
    27e8:	51 93       	st	Z+, r21
    27ea:	10 82       	st	Z, r1
    27ec:	c9 01       	movw	r24, r18
    27ee:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <strrev>

000027f2 <strrev>:
    27f2:	dc 01       	movw	r26, r24
    27f4:	fc 01       	movw	r30, r24
    27f6:	67 2f       	mov	r22, r23
    27f8:	71 91       	ld	r23, Z+
    27fa:	77 23       	and	r23, r23
    27fc:	e1 f7       	brne	.-8      	; 0x27f6 <strrev+0x4>
    27fe:	32 97       	sbiw	r30, 0x02	; 2
    2800:	04 c0       	rjmp	.+8      	; 0x280a <strrev+0x18>
    2802:	7c 91       	ld	r23, X
    2804:	6d 93       	st	X+, r22
    2806:	70 83       	st	Z, r23
    2808:	62 91       	ld	r22, -Z
    280a:	ae 17       	cp	r26, r30
    280c:	bf 07       	cpc	r27, r31
    280e:	c8 f3       	brcs	.-14     	; 0x2802 <strrev+0x10>
    2810:	08 95       	ret

00002812 <__udivmodhi4>:
    2812:	aa 1b       	sub	r26, r26
    2814:	bb 1b       	sub	r27, r27
    2816:	51 e1       	ldi	r21, 0x11	; 17
    2818:	07 c0       	rjmp	.+14     	; 0x2828 <__udivmodhi4_ep>

0000281a <__udivmodhi4_loop>:
    281a:	aa 1f       	adc	r26, r26
    281c:	bb 1f       	adc	r27, r27
    281e:	a6 17       	cp	r26, r22
    2820:	b7 07       	cpc	r27, r23
    2822:	10 f0       	brcs	.+4      	; 0x2828 <__udivmodhi4_ep>
    2824:	a6 1b       	sub	r26, r22
    2826:	b7 0b       	sbc	r27, r23

00002828 <__udivmodhi4_ep>:
    2828:	88 1f       	adc	r24, r24
    282a:	99 1f       	adc	r25, r25
    282c:	5a 95       	dec	r21
    282e:	a9 f7       	brne	.-22     	; 0x281a <__udivmodhi4_loop>
    2830:	80 95       	com	r24
    2832:	90 95       	com	r25
    2834:	bc 01       	movw	r22, r24
    2836:	cd 01       	movw	r24, r26
    2838:	08 95       	ret

0000283a <_exit>:
    283a:	f8 94       	cli

0000283c <__stop_program>:
    283c:	ff cf       	rjmp	.-2      	; 0x283c <__stop_program>
