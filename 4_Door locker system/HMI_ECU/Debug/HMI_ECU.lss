
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c06  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  00002c06  00002c7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000024a8  00000000  00000000  00002d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e73  00000000  00000000  000051c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00006033  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006193  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006322  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008367  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009468  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a3ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a56c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a82e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b0bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <main>
      7a:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 85 15 	jmp	0x2b0a	; 0x2b0a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac ed       	ldi	r26, 0xDC	; 220
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ad 15 	jmp	0x2b5a	; 0x2b5a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ad 15 	jmp	0x2b5a	; 0x2b5a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 85 15 	jmp	0x2b0a	; 0x2b0a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c ed       	ldi	r24, 0xDC	; 220
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6c ed       	ldi	r22, 0xDC	; 220
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 a9 15 	jmp	0x2b52	; 0x2b52 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 ad 15 	jmp	0x2b5a	; 0x2b5a <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 ad 15 	jmp	0x2b5a	; 0x2b5a <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 ad 15 	jmp	0x2b5a	; 0x2b5a <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <APP_voidInit>:
static void APP_voidWrongPasswordScreen(u8 illetrations);

/************************************FUNCTIONS*******************************/

void APP_voidInit()
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
		DIO_void_Init();
     c96:	0e 94 08 0a 	call	0x1410	; 0x1410 <DIO_void_Init>
		LCD_void_Init();
     c9a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LCD_void_Init>
		KPD_Init();
     c9e:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <KPD_Init>
		UART_void_Init();
     ca2:	0e 94 49 14 	call	0x2892	; 0x2892 <UART_void_Init>
}
     ca6:	cf 91       	pop	r28
     ca8:	df 91       	pop	r29
     caa:	08 95       	ret

00000cac <APP_voidWelcomeScreen>:

void APP_voidWelcomeScreen()
{
     cac:	df 93       	push	r29
     cae:	cf 93       	push	r28
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
//	LCD_void_Clear_Screen();
//	LCD_void_Write_String("welcome my user");
//	_delay_ms(LONG_DELAY);
	APP_voidtakePass();
     cb4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <APP_voidtakePass>
}
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <APP_voidtakePass>:

static void APP_voidtakePass(){
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	66 97       	sbiw	r28, 0x16	; 22
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
	 u8 Enter_Password[5] ;
	 Enter_Password[4]='K';
     cd6:	8b e4       	ldi	r24, 0x4B	; 75
     cd8:	8e 8b       	std	Y+22, r24	; 0x16
	 u8 state = WRONG_PASSWORD ;
     cda:	19 8a       	std	Y+17, r1	; 0x11
	 	 for(u8 i = 0 ; (i<3 && state==WRONG_PASSWORD) ; i++)
     cdc:	18 8a       	std	Y+16, r1	; 0x10
     cde:	b9 c0       	rjmp	.+370    	; 0xe52 <APP_voidtakePass+0x194>
	 	 {
	 		 LCD_void_Clear_Screen();
     ce0:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_void_Clear_Screen>
	 		 LCD_void_Write_String("Plz Enter Pass : ");
     ce4:	80 e6       	ldi	r24, 0x60	; 96
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 6f 12 	call	0x24de	; 0x24de <LCD_void_Write_String>
	 		 LCD_void_DDRAM_Address(1,0);
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	0e 94 55 13 	call	0x26aa	; 0x26aa <LCD_void_DDRAM_Address>
	 		 /*get password*/
	 		 for(u8 j = 0 ; j<4 ; j++)
     cf4:	1f 86       	std	Y+15, r1	; 0x0f
     cf6:	84 c0       	rjmp	.+264    	; 0xe00 <APP_voidtakePass+0x142>
	 		 {
	 			Enter_Password[j] = KPD_Void_GET_Status();
     cf8:	8f 85       	ldd	r24, Y+15	; 0x0f
     cfa:	08 2f       	mov	r16, r24
     cfc:	10 e0       	ldi	r17, 0x00	; 0
     cfe:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <KPD_Void_GET_Status>
     d02:	28 2f       	mov	r18, r24
     d04:	ce 01       	movw	r24, r28
     d06:	42 96       	adiw	r24, 0x12	; 18
     d08:	fc 01       	movw	r30, r24
     d0a:	e0 0f       	add	r30, r16
     d0c:	f1 1f       	adc	r31, r17
     d0e:	20 83       	st	Z, r18
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	a8 e4       	ldi	r26, 0x48	; 72
     d16:	b3 e4       	ldi	r27, 0x43	; 67
     d18:	8b 87       	std	Y+11, r24	; 0x0b
     d1a:	9c 87       	std	Y+12, r25	; 0x0c
     d1c:	ad 87       	std	Y+13, r26	; 0x0d
     d1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d20:	6b 85       	ldd	r22, Y+11	; 0x0b
     d22:	7c 85       	ldd	r23, Y+12	; 0x0c
     d24:	8d 85       	ldd	r24, Y+13	; 0x0d
     d26:	9e 85       	ldd	r25, Y+14	; 0x0e
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	4a ef       	ldi	r20, 0xFA	; 250
     d2e:	54 e4       	ldi	r21, 0x44	; 68
     d30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	8f 83       	std	Y+7, r24	; 0x07
     d3a:	98 87       	std	Y+8, r25	; 0x08
     d3c:	a9 87       	std	Y+9, r26	; 0x09
     d3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d40:	6f 81       	ldd	r22, Y+7	; 0x07
     d42:	78 85       	ldd	r23, Y+8	; 0x08
     d44:	89 85       	ldd	r24, Y+9	; 0x09
     d46:	9a 85       	ldd	r25, Y+10	; 0x0a
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e8       	ldi	r20, 0x80	; 128
     d4e:	5f e3       	ldi	r21, 0x3F	; 63
     d50:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     d54:	88 23       	and	r24, r24
     d56:	2c f4       	brge	.+10     	; 0xd62 <APP_voidtakePass+0xa4>
		__ticks = 1;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
     d60:	3f c0       	rjmp	.+126    	; 0xde0 <APP_voidtakePass+0x122>
	else if (__tmp > 65535)
     d62:	6f 81       	ldd	r22, Y+7	; 0x07
     d64:	78 85       	ldd	r23, Y+8	; 0x08
     d66:	89 85       	ldd	r24, Y+9	; 0x09
     d68:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	3f ef       	ldi	r19, 0xFF	; 255
     d6e:	4f e7       	ldi	r20, 0x7F	; 127
     d70:	57 e4       	ldi	r21, 0x47	; 71
     d72:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     d76:	18 16       	cp	r1, r24
     d78:	4c f5       	brge	.+82     	; 0xdcc <APP_voidtakePass+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d80:	9e 85       	ldd	r25, Y+14	; 0x0e
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 e2       	ldi	r20, 0x20	; 32
     d88:	51 e4       	ldi	r21, 0x41	; 65
     d8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d8e:	dc 01       	movw	r26, r24
     d90:	cb 01       	movw	r24, r22
     d92:	bc 01       	movw	r22, r24
     d94:	cd 01       	movw	r24, r26
     d96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	9e 83       	std	Y+6, r25	; 0x06
     da0:	8d 83       	std	Y+5, r24	; 0x05
     da2:	0f c0       	rjmp	.+30     	; 0xdc2 <APP_voidtakePass+0x104>
     da4:	88 ec       	ldi	r24, 0xC8	; 200
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	9c 83       	std	Y+4, r25	; 0x04
     daa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	9c 81       	ldd	r25, Y+4	; 0x04
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <APP_voidtakePass+0xf2>
     db4:	9c 83       	std	Y+4, r25	; 0x04
     db6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db8:	8d 81       	ldd	r24, Y+5	; 0x05
     dba:	9e 81       	ldd	r25, Y+6	; 0x06
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	9e 83       	std	Y+6, r25	; 0x06
     dc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc2:	8d 81       	ldd	r24, Y+5	; 0x05
     dc4:	9e 81       	ldd	r25, Y+6	; 0x06
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	69 f7       	brne	.-38     	; 0xda4 <APP_voidtakePass+0xe6>
     dca:	14 c0       	rjmp	.+40     	; 0xdf4 <APP_voidtakePass+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dcc:	6f 81       	ldd	r22, Y+7	; 0x07
     dce:	78 85       	ldd	r23, Y+8	; 0x08
     dd0:	89 85       	ldd	r24, Y+9	; 0x09
     dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	9e 83       	std	Y+6, r25	; 0x06
     dde:	8d 83       	std	Y+5, r24	; 0x05
     de0:	8d 81       	ldd	r24, Y+5	; 0x05
     de2:	9e 81       	ldd	r25, Y+6	; 0x06
     de4:	9a 83       	std	Y+2, r25	; 0x02
     de6:	89 83       	std	Y+1, r24	; 0x01
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	9a 81       	ldd	r25, Y+2	; 0x02
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <APP_voidtakePass+0x12e>
     df0:	9a 83       	std	Y+2, r25	; 0x02
     df2:	89 83       	std	Y+1, r24	; 0x01
	 			_delay_ms(200);
	 			LCD_void_Write_Data('*');
     df4:	8a e2       	ldi	r24, 0x2A	; 42
     df6:	0e 94 5d 12 	call	0x24ba	; 0x24ba <LCD_void_Write_Data>
	 	 {
	 		 LCD_void_Clear_Screen();
	 		 LCD_void_Write_String("Plz Enter Pass : ");
	 		 LCD_void_DDRAM_Address(1,0);
	 		 /*get password*/
	 		 for(u8 j = 0 ; j<4 ; j++)
     dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
     dfc:	8f 5f       	subi	r24, 0xFF	; 255
     dfe:	8f 87       	std	Y+15, r24	; 0x0f
     e00:	8f 85       	ldd	r24, Y+15	; 0x0f
     e02:	84 30       	cpi	r24, 0x04	; 4
     e04:	08 f4       	brcc	.+2      	; 0xe08 <APP_voidtakePass+0x14a>
     e06:	78 cf       	rjmp	.-272    	; 0xcf8 <APP_voidtakePass+0x3a>
	 			_delay_ms(200);
	 			LCD_void_Write_Data('*');
	 		 }


	 		 state = CORRECT_PASSWORD;
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	89 8b       	std	Y+17, r24	; 0x11
	 		 UART_void_Send_String(Enter_Password);
     e0c:	ce 01       	movw	r24, r28
     e0e:	42 96       	adiw	r24, 0x12	; 18
     e10:	0e 94 88 14 	call	0x2910	; 0x2910 <UART_void_Send_String>

	 		Clear_Bit(UART_U8_UCSRA,7);
     e14:	ab e2       	ldi	r26, 0x2B	; 43
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	eb e2       	ldi	r30, 0x2B	; 43
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	8f 77       	andi	r24, 0x7F	; 127
     e20:	8c 93       	st	X, r24
	 		 state = UART_U8_Receive_Char() ;
     e22:	0e 94 79 14 	call	0x28f2	; 0x28f2 <UART_U8_Receive_Char>
     e26:	89 8b       	std	Y+17, r24	; 0x11
	 		DIO_U8_Set_Pin_Dir(PORTD_ID,7,1);
     e28:	83 e0       	ldi	r24, 0x03	; 3
     e2a:	67 e0       	ldi	r22, 0x07	; 7
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <DIO_U8_Set_Pin_Dir>
	 			 			 			 		DIO_U8_Set_Pin_value(PORTD_ID,7,1);
     e32:	83 e0       	ldi	r24, 0x03	; 3
     e34:	67 e0       	ldi	r22, 0x07	; 7
     e36:	41 e0       	ldi	r20, 0x01	; 1
     e38:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>
	 		if(state==WRONG_PASSWORD)
     e3c:	89 89       	ldd	r24, Y+17	; 0x11
     e3e:	88 23       	and	r24, r24
     e40:	29 f4       	brne	.+10     	; 0xe4c <APP_voidtakePass+0x18e>
	 		{

	 			APP_voidWrongPasswordScreen(2-i);
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	98 89       	ldd	r25, Y+16	; 0x10
     e46:	89 1b       	sub	r24, r25
     e48:	0e 94 72 09 	call	0x12e4	; 0x12e4 <APP_voidWrongPasswordScreen>

static void APP_voidtakePass(){
	 u8 Enter_Password[5] ;
	 Enter_Password[4]='K';
	 u8 state = WRONG_PASSWORD ;
	 	 for(u8 i = 0 ; (i<3 && state==WRONG_PASSWORD) ; i++)
     e4c:	88 89       	ldd	r24, Y+16	; 0x10
     e4e:	8f 5f       	subi	r24, 0xFF	; 255
     e50:	88 8b       	std	Y+16, r24	; 0x10
     e52:	88 89       	ldd	r24, Y+16	; 0x10
     e54:	83 30       	cpi	r24, 0x03	; 3
     e56:	20 f4       	brcc	.+8      	; 0xe60 <APP_voidtakePass+0x1a2>
     e58:	89 89       	ldd	r24, Y+17	; 0x11
     e5a:	88 23       	and	r24, r24
     e5c:	09 f4       	brne	.+2      	; 0xe60 <APP_voidtakePass+0x1a2>
     e5e:	40 cf       	rjmp	.-384    	; 0xce0 <APP_voidtakePass+0x22>

	 			APP_voidWrongPasswordScreen(2-i);
	 		}

	 	 }
	 	 if(state == CORRECT_PASSWORD)
     e60:	89 89       	ldd	r24, Y+17	; 0x11
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	19 f4       	brne	.+6      	; 0xe6c <APP_voidtakePass+0x1ae>
	 	 {

	 		APP_voidMainMenuScreen();
     e66:	0e 94 45 07 	call	0xe8a	; 0xe8a <APP_voidMainMenuScreen>
     e6a:	04 c0       	rjmp	.+8      	; 0xe74 <APP_voidtakePass+0x1b6>
	 	 }
	 	 else
	 	 {
	 		APP_voidThiefAlert();
     e6c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <APP_voidThiefAlert>
	 		APP_voidWelcomeScreen();
     e70:	0e 94 56 06 	call	0xcac	; 0xcac <APP_voidWelcomeScreen>
	 	 }

}
     e74:	66 96       	adiw	r28, 0x16	; 22
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	de bf       	out	0x3e, r29	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	cd bf       	out	0x3d, r28	; 61
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	08 95       	ret

00000e8a <APP_voidMainMenuScreen>:


static void APP_voidMainMenuScreen()
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	ab 97       	sbiw	r28, 0x2b	; 43
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
	LCD_void_Clear_Screen();
     e9e:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_void_Clear_Screen>
	LCD_void_Write_String("1] Open Door");
     ea2:	82 e7       	ldi	r24, 0x72	; 114
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	0e 94 6f 12 	call	0x24de	; 0x24de <LCD_void_Write_String>
	LCD_void_DDRAM_Address(1,0);
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	0e 94 55 13 	call	0x26aa	; 0x26aa <LCD_void_DDRAM_Address>
	LCD_void_Write_String("2] Change Pass");
     eb2:	8f e7       	ldi	r24, 0x7F	; 127
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 6f 12 	call	0x24de	; 0x24de <LCD_void_Write_String>


	u8 pressedkey = KPD_Void_GET_Status();
     eba:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <KPD_Void_GET_Status>
     ebe:	8b a7       	std	Y+43, r24	; 0x2b

	if(pressedkey =='1')
     ec0:	8b a5       	ldd	r24, Y+43	; 0x2b
     ec2:	81 33       	cpi	r24, 0x31	; 49
     ec4:	09 f4       	brne	.+2      	; 0xec8 <APP_voidMainMenuScreen+0x3e>
     ec6:	70 c1       	rjmp	.+736    	; 0x11a8 <APP_voidMainMenuScreen+0x31e>
	{
//		APP_voidOpenDoorScreen();
	}
	else if (pressedkey =='2')
     ec8:	8b a5       	ldd	r24, Y+43	; 0x2b
     eca:	82 33       	cpi	r24, 0x32	; 50
     ecc:	09 f4       	brne	.+2      	; 0xed0 <APP_voidMainMenuScreen+0x46>
     ece:	6c c1       	rjmp	.+728    	; 0x11a8 <APP_voidMainMenuScreen+0x31e>
	{
//		APP_voidChangePasswordScreen();
	}
	else
	{
		LCD_void_Clear_Screen();
     ed0:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_void_Clear_Screen>
		LCD_void_Write_String("wrong input");
     ed4:	8e e8       	ldi	r24, 0x8E	; 142
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 6f 12 	call	0x24de	; 0x24de <LCD_void_Write_String>
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	aa ef       	ldi	r26, 0xFA	; 250
     ee2:	b4 e4       	ldi	r27, 0x44	; 68
     ee4:	8f a3       	std	Y+39, r24	; 0x27
     ee6:	98 a7       	std	Y+40, r25	; 0x28
     ee8:	a9 a7       	std	Y+41, r26	; 0x29
     eea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eec:	6f a1       	ldd	r22, Y+39	; 0x27
     eee:	78 a5       	ldd	r23, Y+40	; 0x28
     ef0:	89 a5       	ldd	r24, Y+41	; 0x29
     ef2:	9a a5       	ldd	r25, Y+42	; 0x2a
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	4a ef       	ldi	r20, 0xFA	; 250
     efa:	54 e4       	ldi	r21, 0x44	; 68
     efc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	8b a3       	std	Y+35, r24	; 0x23
     f06:	9c a3       	std	Y+36, r25	; 0x24
     f08:	ad a3       	std	Y+37, r26	; 0x25
     f0a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f0c:	6b a1       	ldd	r22, Y+35	; 0x23
     f0e:	7c a1       	ldd	r23, Y+36	; 0x24
     f10:	8d a1       	ldd	r24, Y+37	; 0x25
     f12:	9e a1       	ldd	r25, Y+38	; 0x26
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	40 e8       	ldi	r20, 0x80	; 128
     f1a:	5f e3       	ldi	r21, 0x3F	; 63
     f1c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f20:	88 23       	and	r24, r24
     f22:	2c f4       	brge	.+10     	; 0xf2e <APP_voidMainMenuScreen+0xa4>
		__ticks = 1;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	9a a3       	std	Y+34, r25	; 0x22
     f2a:	89 a3       	std	Y+33, r24	; 0x21
     f2c:	3f c0       	rjmp	.+126    	; 0xfac <APP_voidMainMenuScreen+0x122>
	else if (__tmp > 65535)
     f2e:	6b a1       	ldd	r22, Y+35	; 0x23
     f30:	7c a1       	ldd	r23, Y+36	; 0x24
     f32:	8d a1       	ldd	r24, Y+37	; 0x25
     f34:	9e a1       	ldd	r25, Y+38	; 0x26
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	3f ef       	ldi	r19, 0xFF	; 255
     f3a:	4f e7       	ldi	r20, 0x7F	; 127
     f3c:	57 e4       	ldi	r21, 0x47	; 71
     f3e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f42:	18 16       	cp	r1, r24
     f44:	4c f5       	brge	.+82     	; 0xf98 <APP_voidMainMenuScreen+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f46:	6f a1       	ldd	r22, Y+39	; 0x27
     f48:	78 a5       	ldd	r23, Y+40	; 0x28
     f4a:	89 a5       	ldd	r24, Y+41	; 0x29
     f4c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e2       	ldi	r20, 0x20	; 32
     f54:	51 e4       	ldi	r21, 0x41	; 65
     f56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	bc 01       	movw	r22, r24
     f60:	cd 01       	movw	r24, r26
     f62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	9a a3       	std	Y+34, r25	; 0x22
     f6c:	89 a3       	std	Y+33, r24	; 0x21
     f6e:	0f c0       	rjmp	.+30     	; 0xf8e <APP_voidMainMenuScreen+0x104>
     f70:	88 ec       	ldi	r24, 0xC8	; 200
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	98 a3       	std	Y+32, r25	; 0x20
     f76:	8f 8f       	std	Y+31, r24	; 0x1f
     f78:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f7a:	98 a1       	ldd	r25, Y+32	; 0x20
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <APP_voidMainMenuScreen+0xf2>
     f80:	98 a3       	std	Y+32, r25	; 0x20
     f82:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f84:	89 a1       	ldd	r24, Y+33	; 0x21
     f86:	9a a1       	ldd	r25, Y+34	; 0x22
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	9a a3       	std	Y+34, r25	; 0x22
     f8c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8e:	89 a1       	ldd	r24, Y+33	; 0x21
     f90:	9a a1       	ldd	r25, Y+34	; 0x22
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	69 f7       	brne	.-38     	; 0xf70 <APP_voidMainMenuScreen+0xe6>
     f96:	14 c0       	rjmp	.+40     	; 0xfc0 <APP_voidMainMenuScreen+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f98:	6b a1       	ldd	r22, Y+35	; 0x23
     f9a:	7c a1       	ldd	r23, Y+36	; 0x24
     f9c:	8d a1       	ldd	r24, Y+37	; 0x25
     f9e:	9e a1       	ldd	r25, Y+38	; 0x26
     fa0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	9a a3       	std	Y+34, r25	; 0x22
     faa:	89 a3       	std	Y+33, r24	; 0x21
     fac:	89 a1       	ldd	r24, Y+33	; 0x21
     fae:	9a a1       	ldd	r25, Y+34	; 0x22
     fb0:	9e 8f       	std	Y+30, r25	; 0x1e
     fb2:	8d 8f       	std	Y+29, r24	; 0x1d
     fb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fb6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <APP_voidMainMenuScreen+0x12e>
     fbc:	9e 8f       	std	Y+30, r25	; 0x1e
     fbe:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(SHORT_DELAY);
		LCD_void_Clear_Screen();
     fc0:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_void_Clear_Screen>
		LCD_void_Write_String("Reset.");
     fc4:	8a e9       	ldi	r24, 0x9A	; 154
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 6f 12 	call	0x24de	; 0x24de <LCD_void_Write_String>
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	aa e7       	ldi	r26, 0x7A	; 122
     fd2:	b4 e4       	ldi	r27, 0x44	; 68
     fd4:	89 8f       	std	Y+25, r24	; 0x19
     fd6:	9a 8f       	std	Y+26, r25	; 0x1a
     fd8:	ab 8f       	std	Y+27, r26	; 0x1b
     fda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fdc:	69 8d       	ldd	r22, Y+25	; 0x19
     fde:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fe0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fe2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	4a ef       	ldi	r20, 0xFA	; 250
     fea:	54 e4       	ldi	r21, 0x44	; 68
     fec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	8d 8b       	std	Y+21, r24	; 0x15
     ff6:	9e 8b       	std	Y+22, r25	; 0x16
     ff8:	af 8b       	std	Y+23, r26	; 0x17
     ffa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ffc:	6d 89       	ldd	r22, Y+21	; 0x15
     ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    1000:	8f 89       	ldd	r24, Y+23	; 0x17
    1002:	98 8d       	ldd	r25, Y+24	; 0x18
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e8       	ldi	r20, 0x80	; 128
    100a:	5f e3       	ldi	r21, 0x3F	; 63
    100c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1010:	88 23       	and	r24, r24
    1012:	2c f4       	brge	.+10     	; 0x101e <APP_voidMainMenuScreen+0x194>
		__ticks = 1;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9c 8b       	std	Y+20, r25	; 0x14
    101a:	8b 8b       	std	Y+19, r24	; 0x13
    101c:	3f c0       	rjmp	.+126    	; 0x109c <APP_voidMainMenuScreen+0x212>
	else if (__tmp > 65535)
    101e:	6d 89       	ldd	r22, Y+21	; 0x15
    1020:	7e 89       	ldd	r23, Y+22	; 0x16
    1022:	8f 89       	ldd	r24, Y+23	; 0x17
    1024:	98 8d       	ldd	r25, Y+24	; 0x18
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	3f ef       	ldi	r19, 0xFF	; 255
    102a:	4f e7       	ldi	r20, 0x7F	; 127
    102c:	57 e4       	ldi	r21, 0x47	; 71
    102e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1032:	18 16       	cp	r1, r24
    1034:	4c f5       	brge	.+82     	; 0x1088 <APP_voidMainMenuScreen+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1036:	69 8d       	ldd	r22, Y+25	; 0x19
    1038:	7a 8d       	ldd	r23, Y+26	; 0x1a
    103a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    103c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e2       	ldi	r20, 0x20	; 32
    1044:	51 e4       	ldi	r21, 0x41	; 65
    1046:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	bc 01       	movw	r22, r24
    1050:	cd 01       	movw	r24, r26
    1052:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	9c 8b       	std	Y+20, r25	; 0x14
    105c:	8b 8b       	std	Y+19, r24	; 0x13
    105e:	0f c0       	rjmp	.+30     	; 0x107e <APP_voidMainMenuScreen+0x1f4>
    1060:	88 ec       	ldi	r24, 0xC8	; 200
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	9a 8b       	std	Y+18, r25	; 0x12
    1066:	89 8b       	std	Y+17, r24	; 0x11
    1068:	89 89       	ldd	r24, Y+17	; 0x11
    106a:	9a 89       	ldd	r25, Y+18	; 0x12
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <APP_voidMainMenuScreen+0x1e2>
    1070:	9a 8b       	std	Y+18, r25	; 0x12
    1072:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1074:	8b 89       	ldd	r24, Y+19	; 0x13
    1076:	9c 89       	ldd	r25, Y+20	; 0x14
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	9c 8b       	std	Y+20, r25	; 0x14
    107c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107e:	8b 89       	ldd	r24, Y+19	; 0x13
    1080:	9c 89       	ldd	r25, Y+20	; 0x14
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	69 f7       	brne	.-38     	; 0x1060 <APP_voidMainMenuScreen+0x1d6>
    1086:	14 c0       	rjmp	.+40     	; 0x10b0 <APP_voidMainMenuScreen+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1088:	6d 89       	ldd	r22, Y+21	; 0x15
    108a:	7e 89       	ldd	r23, Y+22	; 0x16
    108c:	8f 89       	ldd	r24, Y+23	; 0x17
    108e:	98 8d       	ldd	r25, Y+24	; 0x18
    1090:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	9c 8b       	std	Y+20, r25	; 0x14
    109a:	8b 8b       	std	Y+19, r24	; 0x13
    109c:	8b 89       	ldd	r24, Y+19	; 0x13
    109e:	9c 89       	ldd	r25, Y+20	; 0x14
    10a0:	98 8b       	std	Y+16, r25	; 0x10
    10a2:	8f 87       	std	Y+15, r24	; 0x0f
    10a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a6:	98 89       	ldd	r25, Y+16	; 0x10
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	f1 f7       	brne	.-4      	; 0x10a8 <APP_voidMainMenuScreen+0x21e>
    10ac:	98 8b       	std	Y+16, r25	; 0x10
    10ae:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(SHORT_SHORT_DELAY);
		LCD_void_Write_String("Reset..");
    10b0:	81 ea       	ldi	r24, 0xA1	; 161
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 6f 12 	call	0x24de	; 0x24de <LCD_void_Write_String>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	aa e7       	ldi	r26, 0x7A	; 122
    10be:	b4 e4       	ldi	r27, 0x44	; 68
    10c0:	8b 87       	std	Y+11, r24	; 0x0b
    10c2:	9c 87       	std	Y+12, r25	; 0x0c
    10c4:	ad 87       	std	Y+13, r26	; 0x0d
    10c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    10cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	4a ef       	ldi	r20, 0xFA	; 250
    10d6:	54 e4       	ldi	r21, 0x44	; 68
    10d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	8f 83       	std	Y+7, r24	; 0x07
    10e2:	98 87       	std	Y+8, r25	; 0x08
    10e4:	a9 87       	std	Y+9, r26	; 0x09
    10e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ea:	78 85       	ldd	r23, Y+8	; 0x08
    10ec:	89 85       	ldd	r24, Y+9	; 0x09
    10ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	40 e8       	ldi	r20, 0x80	; 128
    10f6:	5f e3       	ldi	r21, 0x3F	; 63
    10f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10fc:	88 23       	and	r24, r24
    10fe:	2c f4       	brge	.+10     	; 0x110a <APP_voidMainMenuScreen+0x280>
		__ticks = 1;
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	9e 83       	std	Y+6, r25	; 0x06
    1106:	8d 83       	std	Y+5, r24	; 0x05
    1108:	3f c0       	rjmp	.+126    	; 0x1188 <APP_voidMainMenuScreen+0x2fe>
	else if (__tmp > 65535)
    110a:	6f 81       	ldd	r22, Y+7	; 0x07
    110c:	78 85       	ldd	r23, Y+8	; 0x08
    110e:	89 85       	ldd	r24, Y+9	; 0x09
    1110:	9a 85       	ldd	r25, Y+10	; 0x0a
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	3f ef       	ldi	r19, 0xFF	; 255
    1116:	4f e7       	ldi	r20, 0x7F	; 127
    1118:	57 e4       	ldi	r21, 0x47	; 71
    111a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    111e:	18 16       	cp	r1, r24
    1120:	4c f5       	brge	.+82     	; 0x1174 <APP_voidMainMenuScreen+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1122:	6b 85       	ldd	r22, Y+11	; 0x0b
    1124:	7c 85       	ldd	r23, Y+12	; 0x0c
    1126:	8d 85       	ldd	r24, Y+13	; 0x0d
    1128:	9e 85       	ldd	r25, Y+14	; 0x0e
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	40 e2       	ldi	r20, 0x20	; 32
    1130:	51 e4       	ldi	r21, 0x41	; 65
    1132:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	bc 01       	movw	r22, r24
    113c:	cd 01       	movw	r24, r26
    113e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	0f c0       	rjmp	.+30     	; 0x116a <APP_voidMainMenuScreen+0x2e0>
    114c:	88 ec       	ldi	r24, 0xC8	; 200
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	9c 83       	std	Y+4, r25	; 0x04
    1152:	8b 83       	std	Y+3, r24	; 0x03
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	9c 81       	ldd	r25, Y+4	; 0x04
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <APP_voidMainMenuScreen+0x2ce>
    115c:	9c 83       	std	Y+4, r25	; 0x04
    115e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	9e 81       	ldd	r25, Y+6	; 0x06
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	9e 83       	std	Y+6, r25	; 0x06
    1168:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	9e 81       	ldd	r25, Y+6	; 0x06
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	69 f7       	brne	.-38     	; 0x114c <APP_voidMainMenuScreen+0x2c2>
    1172:	14 c0       	rjmp	.+40     	; 0x119c <APP_voidMainMenuScreen+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1174:	6f 81       	ldd	r22, Y+7	; 0x07
    1176:	78 85       	ldd	r23, Y+8	; 0x08
    1178:	89 85       	ldd	r24, Y+9	; 0x09
    117a:	9a 85       	ldd	r25, Y+10	; 0x0a
    117c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	9e 83       	std	Y+6, r25	; 0x06
    1186:	8d 83       	std	Y+5, r24	; 0x05
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	9a 83       	std	Y+2, r25	; 0x02
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	9a 81       	ldd	r25, Y+2	; 0x02
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	f1 f7       	brne	.-4      	; 0x1194 <APP_voidMainMenuScreen+0x30a>
    1198:	9a 83       	std	Y+2, r25	; 0x02
    119a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(SHORT_SHORT_DELAY);
		LCD_void_Write_String("Reset...");
    119c:	89 ea       	ldi	r24, 0xA9	; 169
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 6f 12 	call	0x24de	; 0x24de <LCD_void_Write_String>

		APP_voidMainMenuScreen();
    11a4:	0e 94 45 07 	call	0xe8a	; 0xe8a <APP_voidMainMenuScreen>
	}
}
    11a8:	ab 96       	adiw	r28, 0x2b	; 43
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <APP_voidThiefAlert>:


static void	APP_voidThiefAlert()
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	2e 97       	sbiw	r28, 0x0e	; 14
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
	LCD_void_Clear_Screen();
    11ce:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_void_Clear_Screen>
	LCD_void_Write_String("Thief Alert !!");
    11d2:	82 eb       	ldi	r24, 0xB2	; 178
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0e 94 6f 12 	call	0x24de	; 0x24de <LCD_void_Write_String>
	DIO_U8_Set_Pin_value(BUZZER_PORT , BUZZER_PIN , PIN_HIGH);
    11da:	82 e0       	ldi	r24, 0x02	; 2
    11dc:	67 e0       	ldi	r22, 0x07	; 7
    11de:	41 e0       	ldi	r20, 0x01	; 1
    11e0:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	aa e7       	ldi	r26, 0x7A	; 122
    11ea:	b5 e4       	ldi	r27, 0x45	; 69
    11ec:	8b 87       	std	Y+11, r24	; 0x0b
    11ee:	9c 87       	std	Y+12, r25	; 0x0c
    11f0:	ad 87       	std	Y+13, r26	; 0x0d
    11f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    11f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	4a ef       	ldi	r20, 0xFA	; 250
    1202:	54 e4       	ldi	r21, 0x44	; 68
    1204:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	8f 83       	std	Y+7, r24	; 0x07
    120e:	98 87       	std	Y+8, r25	; 0x08
    1210:	a9 87       	std	Y+9, r26	; 0x09
    1212:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1214:	6f 81       	ldd	r22, Y+7	; 0x07
    1216:	78 85       	ldd	r23, Y+8	; 0x08
    1218:	89 85       	ldd	r24, Y+9	; 0x09
    121a:	9a 85       	ldd	r25, Y+10	; 0x0a
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e8       	ldi	r20, 0x80	; 128
    1222:	5f e3       	ldi	r21, 0x3F	; 63
    1224:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1228:	88 23       	and	r24, r24
    122a:	2c f4       	brge	.+10     	; 0x1236 <APP_voidThiefAlert+0x7c>
		__ticks = 1;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	9e 83       	std	Y+6, r25	; 0x06
    1232:	8d 83       	std	Y+5, r24	; 0x05
    1234:	3f c0       	rjmp	.+126    	; 0x12b4 <APP_voidThiefAlert+0xfa>
	else if (__tmp > 65535)
    1236:	6f 81       	ldd	r22, Y+7	; 0x07
    1238:	78 85       	ldd	r23, Y+8	; 0x08
    123a:	89 85       	ldd	r24, Y+9	; 0x09
    123c:	9a 85       	ldd	r25, Y+10	; 0x0a
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	3f ef       	ldi	r19, 0xFF	; 255
    1242:	4f e7       	ldi	r20, 0x7F	; 127
    1244:	57 e4       	ldi	r21, 0x47	; 71
    1246:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    124a:	18 16       	cp	r1, r24
    124c:	4c f5       	brge	.+82     	; 0x12a0 <APP_voidThiefAlert+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    124e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1250:	7c 85       	ldd	r23, Y+12	; 0x0c
    1252:	8d 85       	ldd	r24, Y+13	; 0x0d
    1254:	9e 85       	ldd	r25, Y+14	; 0x0e
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e2       	ldi	r20, 0x20	; 32
    125c:	51 e4       	ldi	r21, 0x41	; 65
    125e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	bc 01       	movw	r22, r24
    1268:	cd 01       	movw	r24, r26
    126a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	9e 83       	std	Y+6, r25	; 0x06
    1274:	8d 83       	std	Y+5, r24	; 0x05
    1276:	0f c0       	rjmp	.+30     	; 0x1296 <APP_voidThiefAlert+0xdc>
    1278:	88 ec       	ldi	r24, 0xC8	; 200
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	9c 83       	std	Y+4, r25	; 0x04
    127e:	8b 83       	std	Y+3, r24	; 0x03
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <APP_voidThiefAlert+0xca>
    1288:	9c 83       	std	Y+4, r25	; 0x04
    128a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128c:	8d 81       	ldd	r24, Y+5	; 0x05
    128e:	9e 81       	ldd	r25, Y+6	; 0x06
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	9e 83       	std	Y+6, r25	; 0x06
    1294:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1296:	8d 81       	ldd	r24, Y+5	; 0x05
    1298:	9e 81       	ldd	r25, Y+6	; 0x06
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	69 f7       	brne	.-38     	; 0x1278 <APP_voidThiefAlert+0xbe>
    129e:	14 c0       	rjmp	.+40     	; 0x12c8 <APP_voidThiefAlert+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a0:	6f 81       	ldd	r22, Y+7	; 0x07
    12a2:	78 85       	ldd	r23, Y+8	; 0x08
    12a4:	89 85       	ldd	r24, Y+9	; 0x09
    12a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	9e 83       	std	Y+6, r25	; 0x06
    12b2:	8d 83       	std	Y+5, r24	; 0x05
    12b4:	8d 81       	ldd	r24, Y+5	; 0x05
    12b6:	9e 81       	ldd	r25, Y+6	; 0x06
    12b8:	9a 83       	std	Y+2, r25	; 0x02
    12ba:	89 83       	std	Y+1, r24	; 0x01
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	9a 81       	ldd	r25, Y+2	; 0x02
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <APP_voidThiefAlert+0x106>
    12c4:	9a 83       	std	Y+2, r25	; 0x02
    12c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(LONG_DELAY);
	DIO_U8_Set_Pin_value(BUZZER_PORT , BUZZER_PIN , PIN_LOW);
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	67 e0       	ldi	r22, 0x07	; 7
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>


}
    12d2:	2e 96       	adiw	r28, 0x0e	; 14
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <APP_voidWrongPasswordScreen>:
//}
//static void APP_voidChangePasswordScreen()
//{
//}
static void APP_voidWrongPasswordScreen(u8 illetrations)
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	0f 92       	push	r0
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	89 83       	std	Y+1, r24	; 0x01
	LCD_void_Clear_Screen();
    12f0:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_void_Clear_Screen>
	LCD_void_Write_String("wrong password");
    12f4:	81 ec       	ldi	r24, 0xC1	; 193
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	0e 94 6f 12 	call	0x24de	; 0x24de <LCD_void_Write_String>
	LCD_void_DDRAM_Address(1,0);
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	0e 94 55 13 	call	0x26aa	; 0x26aa <LCD_void_DDRAM_Address>
	LCD_void_Write_String("Tires Left ");
    1304:	80 ed       	ldi	r24, 0xD0	; 208
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 6f 12 	call	0x24de	; 0x24de <LCD_void_Write_String>
	LCD_void_Write_Numbers(illetrations);
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	a0 e0       	ldi	r26, 0x00	; 0
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_void_Write_Numbers>
}
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <INTIAL_DIR>:
/*****************************************************************************/
/***********************************fucntion**********************************/
/********************************************************************************/

u8 INTIAL_DIR(u8 p0 , u8 p1 , u8 p2 , u8 p3 , u8 p4 , u8 p5 , u8 p6 , u8 p7)
{
    1326:	af 92       	push	r10
    1328:	cf 92       	push	r12
    132a:	ef 92       	push	r14
    132c:	0f 93       	push	r16
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	29 97       	sbiw	r28, 0x09	; 9
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	8a 83       	std	Y+2, r24	; 0x02
    1344:	6b 83       	std	Y+3, r22	; 0x03
    1346:	4c 83       	std	Y+4, r20	; 0x04
    1348:	2d 83       	std	Y+5, r18	; 0x05
    134a:	0e 83       	std	Y+6, r16	; 0x06
    134c:	ef 82       	std	Y+7, r14	; 0x07
    134e:	c8 86       	std	Y+8, r12	; 0x08
    1350:	a9 86       	std	Y+9, r10	; 0x09
	u8 port = 0x00 ;
    1352:	19 82       	std	Y+1, r1	; 0x01
	Assign_Bit(port,DIO_U8_PIN0,p0);
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	21 f4       	brne	.+8      	; 0x1362 <INTIAL_DIR+0x3c>
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	81 60       	ori	r24, 0x01	; 1
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	03 c0       	rjmp	.+6      	; 0x1368 <INTIAL_DIR+0x42>
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	8e 7f       	andi	r24, 0xFE	; 254
    1366:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN1,p1);
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	21 f4       	brne	.+8      	; 0x1376 <INTIAL_DIR+0x50>
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	82 60       	ori	r24, 0x02	; 2
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	03 c0       	rjmp	.+6      	; 0x137c <INTIAL_DIR+0x56>
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	8d 7f       	andi	r24, 0xFD	; 253
    137a:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN2,p2);
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	21 f4       	brne	.+8      	; 0x138a <INTIAL_DIR+0x64>
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	84 60       	ori	r24, 0x04	; 4
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	03 c0       	rjmp	.+6      	; 0x1390 <INTIAL_DIR+0x6a>
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	8b 7f       	andi	r24, 0xFB	; 251
    138e:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN3,p3);
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	21 f4       	brne	.+8      	; 0x139e <INTIAL_DIR+0x78>
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	88 60       	ori	r24, 0x08	; 8
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	03 c0       	rjmp	.+6      	; 0x13a4 <INTIAL_DIR+0x7e>
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	87 7f       	andi	r24, 0xF7	; 247
    13a2:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN4,p4);
    13a4:	8e 81       	ldd	r24, Y+6	; 0x06
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	21 f4       	brne	.+8      	; 0x13b2 <INTIAL_DIR+0x8c>
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	80 61       	ori	r24, 0x10	; 16
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	03 c0       	rjmp	.+6      	; 0x13b8 <INTIAL_DIR+0x92>
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	8f 7e       	andi	r24, 0xEF	; 239
    13b6:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN5,p5);
    13b8:	8f 81       	ldd	r24, Y+7	; 0x07
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	21 f4       	brne	.+8      	; 0x13c6 <INTIAL_DIR+0xa0>
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	80 62       	ori	r24, 0x20	; 32
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	03 c0       	rjmp	.+6      	; 0x13cc <INTIAL_DIR+0xa6>
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	8f 7d       	andi	r24, 0xDF	; 223
    13ca:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN6,p6);
    13cc:	88 85       	ldd	r24, Y+8	; 0x08
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	21 f4       	brne	.+8      	; 0x13da <INTIAL_DIR+0xb4>
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	80 64       	ori	r24, 0x40	; 64
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <INTIAL_DIR+0xba>
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	8f 7b       	andi	r24, 0xBF	; 191
    13de:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN7,p7);
    13e0:	89 85       	ldd	r24, Y+9	; 0x09
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	21 f4       	brne	.+8      	; 0x13ee <INTIAL_DIR+0xc8>
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	80 68       	ori	r24, 0x80	; 128
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	03 c0       	rjmp	.+6      	; 0x13f4 <INTIAL_DIR+0xce>
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	8f 77       	andi	r24, 0x7F	; 127
    13f2:	89 83       	std	Y+1, r24	; 0x01
	return port;
    13f4:	89 81       	ldd	r24, Y+1	; 0x01

}
    13f6:	29 96       	adiw	r28, 0x09	; 9
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	0f 91       	pop	r16
    1408:	ef 90       	pop	r14
    140a:	cf 90       	pop	r12
    140c:	af 90       	pop	r10
    140e:	08 95       	ret

00001410 <DIO_void_Init>:


void DIO_void_Init(void)
{
    1410:	8f 92       	push	r8
    1412:	9f 92       	push	r9
    1414:	af 92       	push	r10
    1416:	cf 92       	push	r12
    1418:	ef 92       	push	r14
    141a:	0f 93       	push	r16
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
	/*direction*/
	DIO_U8_DDRA =INTIAL_DIR(DIO_u8_PA0_INTIAL_DIR,DIO_u8_PA1_INTIAL_DIR,DIO_u8_PA2_INTIAL_DIR,DIO_u8_PA3_INTIAL_DIR,DIO_u8_PA4_INTIAL_DIR,DIO_u8_PA5_INTIAL_DIR,DIO_u8_PA6_INTIAL_DIR,DIO_u8_PA7_INTIAL_DIR);
    1424:	0f 2e       	mov	r0, r31
    1426:	fa e3       	ldi	r31, 0x3A	; 58
    1428:	8f 2e       	mov	r8, r31
    142a:	99 24       	eor	r9, r9
    142c:	f0 2d       	mov	r31, r0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	61 e0       	ldi	r22, 0x01	; 1
    1432:	41 e0       	ldi	r20, 0x01	; 1
    1434:	21 e0       	ldi	r18, 0x01	; 1
    1436:	01 e0       	ldi	r16, 0x01	; 1
    1438:	ee 24       	eor	r14, r14
    143a:	e3 94       	inc	r14
    143c:	cc 24       	eor	r12, r12
    143e:	c3 94       	inc	r12
    1440:	aa 24       	eor	r10, r10
    1442:	a3 94       	inc	r10
    1444:	0e 94 93 09 	call	0x1326	; 0x1326 <INTIAL_DIR>
    1448:	f4 01       	movw	r30, r8
    144a:	80 83       	st	Z, r24
	DIO_U8_DDRB =INTIAL_DIR(DIO_u8_PB0_INTIAL_DIR,DIO_u8_PB1_INTIAL_DIR,DIO_u8_PB2_INTIAL_DIR,DIO_u8_PB3_INTIAL_DIR,DIO_u8_PB4_INTIAL_DIR,DIO_u8_PB5_INTIAL_DIR,DIO_u8_PB6_INTIAL_DIR,DIO_u8_PB7_INTIAL_DIR);
    144c:	0f 2e       	mov	r0, r31
    144e:	f7 e3       	ldi	r31, 0x37	; 55
    1450:	8f 2e       	mov	r8, r31
    1452:	99 24       	eor	r9, r9
    1454:	f0 2d       	mov	r31, r0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	41 e0       	ldi	r20, 0x01	; 1
    145c:	21 e0       	ldi	r18, 0x01	; 1
    145e:	00 e0       	ldi	r16, 0x00	; 0
    1460:	ee 24       	eor	r14, r14
    1462:	cc 24       	eor	r12, r12
    1464:	aa 24       	eor	r10, r10
    1466:	0e 94 93 09 	call	0x1326	; 0x1326 <INTIAL_DIR>
    146a:	f4 01       	movw	r30, r8
    146c:	80 83       	st	Z, r24
	DIO_U8_DDRC =INTIAL_DIR(DIO_u8_PC0_INTIAL_DIR,DIO_u8_PC1_INTIAL_DIR,DIO_u8_PC2_INTIAL_DIR,DIO_u8_PC3_INTIAL_DIR,DIO_u8_PC4_INTIAL_DIR,DIO_u8_PC5_INTIAL_DIR,DIO_u8_PC6_INTIAL_DIR,DIO_u8_PC7_INTIAL_DIR);
    146e:	0f 2e       	mov	r0, r31
    1470:	f4 e3       	ldi	r31, 0x34	; 52
    1472:	8f 2e       	mov	r8, r31
    1474:	99 24       	eor	r9, r9
    1476:	f0 2d       	mov	r31, r0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	61 e0       	ldi	r22, 0x01	; 1
    147c:	41 e0       	ldi	r20, 0x01	; 1
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	00 e0       	ldi	r16, 0x00	; 0
    1482:	ee 24       	eor	r14, r14
    1484:	cc 24       	eor	r12, r12
    1486:	aa 24       	eor	r10, r10
    1488:	0e 94 93 09 	call	0x1326	; 0x1326 <INTIAL_DIR>
    148c:	f4 01       	movw	r30, r8
    148e:	80 83       	st	Z, r24
	DIO_U8_DDRD =INTIAL_DIR(DIO_u8_PD0_INTIAL_DIR,DIO_u8_PD1_INTIAL_DIR,DIO_u8_PD2_INTIAL_DIR,DIO_u8_PD3_INTIAL_DIR,DIO_u8_PD4_INTIAL_DIR,DIO_u8_PD5_INTIAL_DIR,DIO_u8_PD6_INTIAL_DIR,DIO_u8_PD7_INTIAL_DIR);
    1490:	0f 2e       	mov	r0, r31
    1492:	f1 e3       	ldi	r31, 0x31	; 49
    1494:	8f 2e       	mov	r8, r31
    1496:	99 24       	eor	r9, r9
    1498:	f0 2d       	mov	r31, r0
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	61 e0       	ldi	r22, 0x01	; 1
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	00 e0       	ldi	r16, 0x00	; 0
    14a4:	ee 24       	eor	r14, r14
    14a6:	cc 24       	eor	r12, r12
    14a8:	aa 24       	eor	r10, r10
    14aa:	0e 94 93 09 	call	0x1326	; 0x1326 <INTIAL_DIR>
    14ae:	f4 01       	movw	r30, r8
    14b0:	80 83       	st	Z, r24
}
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	0f 91       	pop	r16
    14b8:	ef 90       	pop	r14
    14ba:	cf 90       	pop	r12
    14bc:	af 90       	pop	r10
    14be:	9f 90       	pop	r9
    14c0:	8f 90       	pop	r8
    14c2:	08 95       	ret

000014c4 <DIO_U8_Set_Pin_Dir>:

u8 DIO_U8_Set_Pin_Dir(u8 Copy_U8_Port_ID , u8 Copy_U8_Pin_ID , u8 Copy_U8_Pin_Dir)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <DIO_U8_Set_Pin_Dir+0x6>
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <DIO_U8_Set_Pin_Dir+0x8>
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <DIO_U8_Set_Pin_Dir+0xa>
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	6a 83       	std	Y+2, r22	; 0x02
    14d6:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	84 30       	cpi	r24, 0x04	; 4
    14dc:	08 f0       	brcs	.+2      	; 0x14e0 <DIO_U8_Set_Pin_Dir+0x1c>
    14de:	e4 c0       	rjmp	.+456    	; 0x16a8 <DIO_U8_Set_Pin_Dir+0x1e4>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	88 30       	cpi	r24, 0x08	; 8
    14e4:	08 f0       	brcs	.+2      	; 0x14e8 <DIO_U8_Set_Pin_Dir+0x24>
    14e6:	dd c0       	rjmp	.+442    	; 0x16a2 <DIO_U8_Set_Pin_Dir+0x1de>
		{
			if((Copy_U8_Pin_Dir==PIN_INPUT)||(Copy_U8_Pin_Dir==PIN_OUTPUT))
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	88 23       	and	r24, r24
    14ec:	21 f0       	breq	.+8      	; 0x14f6 <DIO_U8_Set_Pin_Dir+0x32>
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	81 30       	cpi	r24, 0x01	; 1
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <DIO_U8_Set_Pin_Dir+0x32>
    14f4:	d4 c0       	rjmp	.+424    	; 0x169e <DIO_U8_Set_Pin_Dir+0x1da>
			{
				switch(Copy_U8_Port_ID)
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	3e 83       	std	Y+6, r19	; 0x06
    14fe:	2d 83       	std	Y+5, r18	; 0x05
    1500:	8d 81       	ldd	r24, Y+5	; 0x05
    1502:	9e 81       	ldd	r25, Y+6	; 0x06
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	91 05       	cpc	r25, r1
    1508:	09 f4       	brne	.+2      	; 0x150c <DIO_U8_Set_Pin_Dir+0x48>
    150a:	43 c0       	rjmp	.+134    	; 0x1592 <DIO_U8_Set_Pin_Dir+0xce>
    150c:	2d 81       	ldd	r18, Y+5	; 0x05
    150e:	3e 81       	ldd	r19, Y+6	; 0x06
    1510:	22 30       	cpi	r18, 0x02	; 2
    1512:	31 05       	cpc	r19, r1
    1514:	2c f4       	brge	.+10     	; 0x1520 <DIO_U8_Set_Pin_Dir+0x5c>
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	71 f0       	breq	.+28     	; 0x153a <DIO_U8_Set_Pin_Dir+0x76>
    151e:	bc c0       	rjmp	.+376    	; 0x1698 <DIO_U8_Set_Pin_Dir+0x1d4>
    1520:	2d 81       	ldd	r18, Y+5	; 0x05
    1522:	3e 81       	ldd	r19, Y+6	; 0x06
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	09 f4       	brne	.+2      	; 0x152c <DIO_U8_Set_Pin_Dir+0x68>
    152a:	5f c0       	rjmp	.+190    	; 0x15ea <DIO_U8_Set_Pin_Dir+0x126>
    152c:	8d 81       	ldd	r24, Y+5	; 0x05
    152e:	9e 81       	ldd	r25, Y+6	; 0x06
    1530:	83 30       	cpi	r24, 0x03	; 3
    1532:	91 05       	cpc	r25, r1
    1534:	09 f4       	brne	.+2      	; 0x1538 <DIO_U8_Set_Pin_Dir+0x74>
    1536:	85 c0       	rjmp	.+266    	; 0x1642 <DIO_U8_Set_Pin_Dir+0x17e>
    1538:	af c0       	rjmp	.+350    	; 0x1698 <DIO_U8_Set_Pin_Dir+0x1d4>
				{
				case PORTA_ID:
					Assign_Bit(DIO_U8_DDRA,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	a1 f4       	brne	.+40     	; 0x1568 <DIO_U8_Set_Pin_Dir+0xa4>
    1540:	aa e3       	ldi	r26, 0x3A	; 58
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	ea e3       	ldi	r30, 0x3A	; 58
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 2e       	mov	r0, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <DIO_U8_Set_Pin_Dir+0x9a>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <DIO_U8_Set_Pin_Dir+0x96>
    1562:	84 2b       	or	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	98 c0       	rjmp	.+304    	; 0x1698 <DIO_U8_Set_Pin_Dir+0x1d4>
    1568:	aa e3       	ldi	r26, 0x3A	; 58
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ea e3       	ldi	r30, 0x3A	; 58
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_U8_Set_Pin_Dir+0xc2>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <DIO_U8_Set_Pin_Dir+0xbe>
    158a:	80 95       	com	r24
    158c:	84 23       	and	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	83 c0       	rjmp	.+262    	; 0x1698 <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTB_ID:
					Assign_Bit(DIO_U8_DDRB,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	a1 f4       	brne	.+40     	; 0x15c0 <DIO_U8_Set_Pin_Dir+0xfc>
    1598:	a7 e3       	ldi	r26, 0x37	; 55
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e7 e3       	ldi	r30, 0x37	; 55
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	48 2f       	mov	r20, r24
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <DIO_U8_Set_Pin_Dir+0xf2>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <DIO_U8_Set_Pin_Dir+0xee>
    15ba:	84 2b       	or	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	6c c0       	rjmp	.+216    	; 0x1698 <DIO_U8_Set_Pin_Dir+0x1d4>
    15c0:	a7 e3       	ldi	r26, 0x37	; 55
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e7 e3       	ldi	r30, 0x37	; 55
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	48 2f       	mov	r20, r24
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	02 2e       	mov	r0, r18
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <DIO_U8_Set_Pin_Dir+0x11a>
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	0a 94       	dec	r0
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <DIO_U8_Set_Pin_Dir+0x116>
    15e2:	80 95       	com	r24
    15e4:	84 23       	and	r24, r20
    15e6:	8c 93       	st	X, r24
    15e8:	57 c0       	rjmp	.+174    	; 0x1698 <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTC_ID:
					Assign_Bit(DIO_U8_DDRC,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	a1 f4       	brne	.+40     	; 0x1618 <DIO_U8_Set_Pin_Dir+0x154>
    15f0:	a4 e3       	ldi	r26, 0x34	; 52
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e4 e3       	ldi	r30, 0x34	; 52
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <DIO_U8_Set_Pin_Dir+0x14a>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <DIO_U8_Set_Pin_Dir+0x146>
    1612:	84 2b       	or	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	40 c0       	rjmp	.+128    	; 0x1698 <DIO_U8_Set_Pin_Dir+0x1d4>
    1618:	a4 e3       	ldi	r26, 0x34	; 52
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e4 e3       	ldi	r30, 0x34	; 52
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <DIO_U8_Set_Pin_Dir+0x172>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <DIO_U8_Set_Pin_Dir+0x16e>
    163a:	80 95       	com	r24
    163c:	84 23       	and	r24, r20
    163e:	8c 93       	st	X, r24
    1640:	2b c0       	rjmp	.+86     	; 0x1698 <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTD_ID:
					Assign_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	a1 f4       	brne	.+40     	; 0x1670 <DIO_U8_Set_Pin_Dir+0x1ac>
    1648:	a1 e3       	ldi	r26, 0x31	; 49
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e1 e3       	ldi	r30, 0x31	; 49
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	48 2f       	mov	r20, r24
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 2e       	mov	r0, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <DIO_U8_Set_Pin_Dir+0x1a2>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	0a 94       	dec	r0
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <DIO_U8_Set_Pin_Dir+0x19e>
    166a:	84 2b       	or	r24, r20
    166c:	8c 93       	st	X, r24
    166e:	14 c0       	rjmp	.+40     	; 0x1698 <DIO_U8_Set_Pin_Dir+0x1d4>
    1670:	a1 e3       	ldi	r26, 0x31	; 49
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e1 e3       	ldi	r30, 0x31	; 49
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	48 2f       	mov	r20, r24
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 2e       	mov	r0, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <DIO_U8_Set_Pin_Dir+0x1ca>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	0a 94       	dec	r0
    1690:	e2 f7       	brpl	.-8      	; 0x168a <DIO_U8_Set_Pin_Dir+0x1c6>
    1692:	80 95       	com	r24
    1694:	84 23       	and	r24, r20
    1696:	8c 93       	st	X, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    1698:	93 e0       	ldi	r25, 0x03	; 3
    169a:	9c 83       	std	Y+4, r25	; 0x04
    169c:	07 c0       	rjmp	.+14     	; 0x16ac <DIO_U8_Set_Pin_Dir+0x1e8>

				}
			}
			else
			{
				return WRONG_PIN_DIR;
    169e:	1c 82       	std	Y+4, r1	; 0x04
    16a0:	05 c0       	rjmp	.+10     	; 0x16ac <DIO_U8_Set_Pin_Dir+0x1e8>
			}
		}
		else{
			return WRONG_PIN;
    16a2:	21 e0       	ldi	r18, 0x01	; 1
    16a4:	2c 83       	std	Y+4, r18	; 0x04
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <DIO_U8_Set_Pin_Dir+0x1e8>


	}
	else
	{
		return WRONG_PORT;
    16a8:	32 e0       	ldi	r19, 0x02	; 2
    16aa:	3c 83       	std	Y+4, r19	; 0x04
    16ac:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    16ae:	26 96       	adiw	r28, 0x06	; 6
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	de bf       	out	0x3e, r29	; 62
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	cd bf       	out	0x3d, r28	; 61
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <DIO_U8_Set_Port_Dir>:




u8 DIO_U8_Set_Port_Dir(u8 Copy_U8_Port_ID  , u16 Copy_U8_PORT_Dir)
{
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <DIO_U8_Set_Port_Dir+0x6>
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <DIO_U8_Set_Port_Dir+0x8>
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <DIO_U8_Set_Port_Dir+0xa>
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	7b 83       	std	Y+3, r23	; 0x03
    16d2:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	84 30       	cpi	r24, 0x04	; 4
    16d8:	08 f0       	brcs	.+2      	; 0x16dc <DIO_U8_Set_Port_Dir+0x1c>
    16da:	3d c0       	rjmp	.+122    	; 0x1756 <DIO_U8_Set_Port_Dir+0x96>
	{
		if((Copy_U8_PORT_Dir)>=MIN_DIR_OR_VALUE&&(Copy_U8_PORT_Dir)<=MAX_DIR_OR_VALUE)
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	9b 81       	ldd	r25, Y+3	; 0x03
    16e0:	8f 3f       	cpi	r24, 0xFF	; 255
    16e2:	91 05       	cpc	r25, r1
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <DIO_U8_Set_Port_Dir+0x28>
    16e6:	a8 f5       	brcc	.+106    	; 0x1752 <DIO_U8_Set_Port_Dir+0x92>
		{
				switch(Copy_U8_Port_ID)
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	3e 83       	std	Y+6, r19	; 0x06
    16f0:	2d 83       	std	Y+5, r18	; 0x05
    16f2:	8d 81       	ldd	r24, Y+5	; 0x05
    16f4:	9e 81       	ldd	r25, Y+6	; 0x06
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	91 05       	cpc	r25, r1
    16fa:	d1 f0       	breq	.+52     	; 0x1730 <DIO_U8_Set_Port_Dir+0x70>
    16fc:	2d 81       	ldd	r18, Y+5	; 0x05
    16fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1700:	22 30       	cpi	r18, 0x02	; 2
    1702:	31 05       	cpc	r19, r1
    1704:	2c f4       	brge	.+10     	; 0x1710 <DIO_U8_Set_Port_Dir+0x50>
    1706:	8d 81       	ldd	r24, Y+5	; 0x05
    1708:	9e 81       	ldd	r25, Y+6	; 0x06
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	61 f0       	breq	.+24     	; 0x1726 <DIO_U8_Set_Port_Dir+0x66>
    170e:	1e c0       	rjmp	.+60     	; 0x174c <DIO_U8_Set_Port_Dir+0x8c>
    1710:	2d 81       	ldd	r18, Y+5	; 0x05
    1712:	3e 81       	ldd	r19, Y+6	; 0x06
    1714:	22 30       	cpi	r18, 0x02	; 2
    1716:	31 05       	cpc	r19, r1
    1718:	81 f0       	breq	.+32     	; 0x173a <DIO_U8_Set_Port_Dir+0x7a>
    171a:	8d 81       	ldd	r24, Y+5	; 0x05
    171c:	9e 81       	ldd	r25, Y+6	; 0x06
    171e:	83 30       	cpi	r24, 0x03	; 3
    1720:	91 05       	cpc	r25, r1
    1722:	81 f0       	breq	.+32     	; 0x1744 <DIO_U8_Set_Port_Dir+0x84>
    1724:	13 c0       	rjmp	.+38     	; 0x174c <DIO_U8_Set_Port_Dir+0x8c>
				{
				case PORTA_ID:
					DIO_U8_DDRA=Copy_U8_PORT_Dir;
    1726:	ea e3       	ldi	r30, 0x3A	; 58
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	80 83       	st	Z, r24
    172e:	0e c0       	rjmp	.+28     	; 0x174c <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTB_ID:
					DIO_U8_DDRB=Copy_U8_PORT_Dir;
    1730:	e7 e3       	ldi	r30, 0x37	; 55
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	80 83       	st	Z, r24
    1738:	09 c0       	rjmp	.+18     	; 0x174c <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTC_ID:
					DIO_U8_DDRC=Copy_U8_PORT_Dir;
    173a:	e4 e3       	ldi	r30, 0x34	; 52
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	80 83       	st	Z, r24
    1742:	04 c0       	rjmp	.+8      	; 0x174c <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTD_ID:
					DIO_U8_DDRD=Copy_U8_PORT_Dir;
    1744:	e1 e3       	ldi	r30, 0x31	; 49
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	80 83       	st	Z, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    174c:	93 e0       	ldi	r25, 0x03	; 3
    174e:	9c 83       	std	Y+4, r25	; 0x04
    1750:	04 c0       	rjmp	.+8      	; 0x175a <DIO_U8_Set_Port_Dir+0x9a>

				}
		}
		else
		{
			return WRONG_PORT_DIR;
    1752:	1c 82       	std	Y+4, r1	; 0x04
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_U8_Set_Port_Dir+0x9a>
		}

	}
	else
	{
		return WRONG_PORT;
    1756:	22 e0       	ldi	r18, 0x02	; 2
    1758:	2c 83       	std	Y+4, r18	; 0x04
    175a:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    175c:	26 96       	adiw	r28, 0x06	; 6
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <DIO_U8_Set_Pin_value>:




u8 DIO_U8_Set_Pin_value(u8 Copy_U8_Port_ID , u8 Copy_U8_Pin_ID , u8 Copy_U8_Pin_value)
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	00 d0       	rcall	.+0      	; 0x1774 <DIO_U8_Set_Pin_value+0x6>
    1774:	00 d0       	rcall	.+0      	; 0x1776 <DIO_U8_Set_Pin_value+0x8>
    1776:	00 d0       	rcall	.+0      	; 0x1778 <DIO_U8_Set_Pin_value+0xa>
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	89 83       	std	Y+1, r24	; 0x01
    177e:	6a 83       	std	Y+2, r22	; 0x02
    1780:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	84 30       	cpi	r24, 0x04	; 4
    1786:	08 f0       	brcs	.+2      	; 0x178a <DIO_U8_Set_Pin_value+0x1c>
    1788:	e4 c0       	rjmp	.+456    	; 0x1952 <DIO_U8_Set_Pin_value+0x1e4>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	88 30       	cpi	r24, 0x08	; 8
    178e:	08 f0       	brcs	.+2      	; 0x1792 <DIO_U8_Set_Pin_value+0x24>
    1790:	dd c0       	rjmp	.+442    	; 0x194c <DIO_U8_Set_Pin_value+0x1de>
		{
			if((Copy_U8_Pin_value==PIN_LOW)||(Copy_U8_Pin_value==PIN_HIGH))
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	88 23       	and	r24, r24
    1796:	21 f0       	breq	.+8      	; 0x17a0 <DIO_U8_Set_Pin_value+0x32>
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	09 f0       	breq	.+2      	; 0x17a0 <DIO_U8_Set_Pin_value+0x32>
    179e:	d4 c0       	rjmp	.+424    	; 0x1948 <DIO_U8_Set_Pin_value+0x1da>
			{
				switch(Copy_U8_Port_ID)
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	3e 83       	std	Y+6, r19	; 0x06
    17a8:	2d 83       	std	Y+5, r18	; 0x05
    17aa:	8d 81       	ldd	r24, Y+5	; 0x05
    17ac:	9e 81       	ldd	r25, Y+6	; 0x06
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	91 05       	cpc	r25, r1
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <DIO_U8_Set_Pin_value+0x48>
    17b4:	43 c0       	rjmp	.+134    	; 0x183c <DIO_U8_Set_Pin_value+0xce>
    17b6:	2d 81       	ldd	r18, Y+5	; 0x05
    17b8:	3e 81       	ldd	r19, Y+6	; 0x06
    17ba:	22 30       	cpi	r18, 0x02	; 2
    17bc:	31 05       	cpc	r19, r1
    17be:	2c f4       	brge	.+10     	; 0x17ca <DIO_U8_Set_Pin_value+0x5c>
    17c0:	8d 81       	ldd	r24, Y+5	; 0x05
    17c2:	9e 81       	ldd	r25, Y+6	; 0x06
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	71 f0       	breq	.+28     	; 0x17e4 <DIO_U8_Set_Pin_value+0x76>
    17c8:	bc c0       	rjmp	.+376    	; 0x1942 <DIO_U8_Set_Pin_value+0x1d4>
    17ca:	2d 81       	ldd	r18, Y+5	; 0x05
    17cc:	3e 81       	ldd	r19, Y+6	; 0x06
    17ce:	22 30       	cpi	r18, 0x02	; 2
    17d0:	31 05       	cpc	r19, r1
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <DIO_U8_Set_Pin_value+0x68>
    17d4:	5f c0       	rjmp	.+190    	; 0x1894 <DIO_U8_Set_Pin_value+0x126>
    17d6:	8d 81       	ldd	r24, Y+5	; 0x05
    17d8:	9e 81       	ldd	r25, Y+6	; 0x06
    17da:	83 30       	cpi	r24, 0x03	; 3
    17dc:	91 05       	cpc	r25, r1
    17de:	09 f4       	brne	.+2      	; 0x17e2 <DIO_U8_Set_Pin_value+0x74>
    17e0:	85 c0       	rjmp	.+266    	; 0x18ec <DIO_U8_Set_Pin_value+0x17e>
    17e2:	af c0       	rjmp	.+350    	; 0x1942 <DIO_U8_Set_Pin_value+0x1d4>
				{
				case PORTA_ID:
					Assign_Bit(DIO_U8_PORTA,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	81 30       	cpi	r24, 0x01	; 1
    17e8:	a1 f4       	brne	.+40     	; 0x1812 <DIO_U8_Set_Pin_value+0xa4>
    17ea:	ab e3       	ldi	r26, 0x3B	; 59
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	eb e3       	ldi	r30, 0x3B	; 59
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	48 2f       	mov	r20, r24
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	02 2e       	mov	r0, r18
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <DIO_U8_Set_Pin_value+0x9a>
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	0a 94       	dec	r0
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <DIO_U8_Set_Pin_value+0x96>
    180c:	84 2b       	or	r24, r20
    180e:	8c 93       	st	X, r24
    1810:	98 c0       	rjmp	.+304    	; 0x1942 <DIO_U8_Set_Pin_value+0x1d4>
    1812:	ab e3       	ldi	r26, 0x3B	; 59
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	eb e3       	ldi	r30, 0x3B	; 59
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <DIO_U8_Set_Pin_value+0xc2>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <DIO_U8_Set_Pin_value+0xbe>
    1834:	80 95       	com	r24
    1836:	84 23       	and	r24, r20
    1838:	8c 93       	st	X, r24
    183a:	83 c0       	rjmp	.+262    	; 0x1942 <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTB_ID:
					Assign_Bit(DIO_U8_PORTB,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	a1 f4       	brne	.+40     	; 0x186a <DIO_U8_Set_Pin_value+0xfc>
    1842:	a8 e3       	ldi	r26, 0x38	; 56
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e8 e3       	ldi	r30, 0x38	; 56
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <DIO_U8_Set_Pin_value+0xf2>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <DIO_U8_Set_Pin_value+0xee>
    1864:	84 2b       	or	r24, r20
    1866:	8c 93       	st	X, r24
    1868:	6c c0       	rjmp	.+216    	; 0x1942 <DIO_U8_Set_Pin_value+0x1d4>
    186a:	a8 e3       	ldi	r26, 0x38	; 56
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e8 e3       	ldi	r30, 0x38	; 56
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	48 2f       	mov	r20, r24
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	02 2e       	mov	r0, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <DIO_U8_Set_Pin_value+0x11a>
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	0a 94       	dec	r0
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <DIO_U8_Set_Pin_value+0x116>
    188c:	80 95       	com	r24
    188e:	84 23       	and	r24, r20
    1890:	8c 93       	st	X, r24
    1892:	57 c0       	rjmp	.+174    	; 0x1942 <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTC_ID:
					Assign_Bit(DIO_U8_PORTC,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	81 30       	cpi	r24, 0x01	; 1
    1898:	a1 f4       	brne	.+40     	; 0x18c2 <DIO_U8_Set_Pin_value+0x154>
    189a:	a5 e3       	ldi	r26, 0x35	; 53
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e5 e3       	ldi	r30, 0x35	; 53
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	48 2f       	mov	r20, r24
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	02 2e       	mov	r0, r18
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <DIO_U8_Set_Pin_value+0x14a>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	0a 94       	dec	r0
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <DIO_U8_Set_Pin_value+0x146>
    18bc:	84 2b       	or	r24, r20
    18be:	8c 93       	st	X, r24
    18c0:	40 c0       	rjmp	.+128    	; 0x1942 <DIO_U8_Set_Pin_value+0x1d4>
    18c2:	a5 e3       	ldi	r26, 0x35	; 53
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e5 e3       	ldi	r30, 0x35	; 53
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 2e       	mov	r0, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <DIO_U8_Set_Pin_value+0x172>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <DIO_U8_Set_Pin_value+0x16e>
    18e4:	80 95       	com	r24
    18e6:	84 23       	and	r24, r20
    18e8:	8c 93       	st	X, r24
    18ea:	2b c0       	rjmp	.+86     	; 0x1942 <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTD_ID:
					Assign_Bit(DIO_U8_PORTD,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	81 30       	cpi	r24, 0x01	; 1
    18f0:	a1 f4       	brne	.+40     	; 0x191a <DIO_U8_Set_Pin_value+0x1ac>
    18f2:	a2 e3       	ldi	r26, 0x32	; 50
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e2 e3       	ldi	r30, 0x32	; 50
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 2e       	mov	r0, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <DIO_U8_Set_Pin_value+0x1a2>
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	0a 94       	dec	r0
    1912:	e2 f7       	brpl	.-8      	; 0x190c <DIO_U8_Set_Pin_value+0x19e>
    1914:	84 2b       	or	r24, r20
    1916:	8c 93       	st	X, r24
    1918:	14 c0       	rjmp	.+40     	; 0x1942 <DIO_U8_Set_Pin_value+0x1d4>
    191a:	a2 e3       	ldi	r26, 0x32	; 50
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e2 e3       	ldi	r30, 0x32	; 50
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	48 2f       	mov	r20, r24
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	02 2e       	mov	r0, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <DIO_U8_Set_Pin_value+0x1ca>
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	0a 94       	dec	r0
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <DIO_U8_Set_Pin_value+0x1c6>
    193c:	80 95       	com	r24
    193e:	84 23       	and	r24, r20
    1940:	8c 93       	st	X, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    1942:	93 e0       	ldi	r25, 0x03	; 3
    1944:	9c 83       	std	Y+4, r25	; 0x04
    1946:	07 c0       	rjmp	.+14     	; 0x1956 <DIO_U8_Set_Pin_value+0x1e8>

				}
			}
			else
			{
				return WRONG_PIN_value;
    1948:	1c 82       	std	Y+4, r1	; 0x04
    194a:	05 c0       	rjmp	.+10     	; 0x1956 <DIO_U8_Set_Pin_value+0x1e8>
			}
		}
		else{
			return WRONG_PIN;
    194c:	21 e0       	ldi	r18, 0x01	; 1
    194e:	2c 83       	std	Y+4, r18	; 0x04
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <DIO_U8_Set_Pin_value+0x1e8>


	}
	else
	{
		return WRONG_PORT;
    1952:	32 e0       	ldi	r19, 0x02	; 2
    1954:	3c 83       	std	Y+4, r19	; 0x04
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    1958:	26 96       	adiw	r28, 0x06	; 6
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <DIO_U8_Set_Port_Value>:




u8 DIO_U8_Set_Port_Value(u8 Copy_U8_Port_ID  , u16 Copy_U8_PORT_value)
{
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	00 d0       	rcall	.+0      	; 0x1970 <DIO_U8_Set_Port_Value+0x6>
    1970:	00 d0       	rcall	.+0      	; 0x1972 <DIO_U8_Set_Port_Value+0x8>
    1972:	00 d0       	rcall	.+0      	; 0x1974 <DIO_U8_Set_Port_Value+0xa>
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	7b 83       	std	Y+3, r23	; 0x03
    197c:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_PORT_value>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_PORT_value<=DIO_MAX_U8_PROT_ID))
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	9b 81       	ldd	r25, Y+3	; 0x03
    1982:	84 30       	cpi	r24, 0x04	; 4
    1984:	91 05       	cpc	r25, r1
    1986:	08 f0       	brcs	.+2      	; 0x198a <DIO_U8_Set_Port_Value+0x20>
    1988:	3d c0       	rjmp	.+122    	; 0x1a04 <DIO_U8_Set_Port_Value+0x9a>
	{
			if((Copy_U8_PORT_value)>=MIN_DIR_OR_VALUE&&(Copy_U8_PORT_value)<=MAX_DIR_OR_VALUE)
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	9b 81       	ldd	r25, Y+3	; 0x03
    198e:	8f 3f       	cpi	r24, 0xFF	; 255
    1990:	91 05       	cpc	r25, r1
    1992:	09 f0       	breq	.+2      	; 0x1996 <DIO_U8_Set_Port_Value+0x2c>
    1994:	a8 f5       	brcc	.+106    	; 0x1a00 <DIO_U8_Set_Port_Value+0x96>
			{
				switch(Copy_U8_Port_ID)
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	3e 83       	std	Y+6, r19	; 0x06
    199e:	2d 83       	std	Y+5, r18	; 0x05
    19a0:	8d 81       	ldd	r24, Y+5	; 0x05
    19a2:	9e 81       	ldd	r25, Y+6	; 0x06
    19a4:	81 30       	cpi	r24, 0x01	; 1
    19a6:	91 05       	cpc	r25, r1
    19a8:	d1 f0       	breq	.+52     	; 0x19de <DIO_U8_Set_Port_Value+0x74>
    19aa:	2d 81       	ldd	r18, Y+5	; 0x05
    19ac:	3e 81       	ldd	r19, Y+6	; 0x06
    19ae:	22 30       	cpi	r18, 0x02	; 2
    19b0:	31 05       	cpc	r19, r1
    19b2:	2c f4       	brge	.+10     	; 0x19be <DIO_U8_Set_Port_Value+0x54>
    19b4:	8d 81       	ldd	r24, Y+5	; 0x05
    19b6:	9e 81       	ldd	r25, Y+6	; 0x06
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	61 f0       	breq	.+24     	; 0x19d4 <DIO_U8_Set_Port_Value+0x6a>
    19bc:	1e c0       	rjmp	.+60     	; 0x19fa <DIO_U8_Set_Port_Value+0x90>
    19be:	2d 81       	ldd	r18, Y+5	; 0x05
    19c0:	3e 81       	ldd	r19, Y+6	; 0x06
    19c2:	22 30       	cpi	r18, 0x02	; 2
    19c4:	31 05       	cpc	r19, r1
    19c6:	81 f0       	breq	.+32     	; 0x19e8 <DIO_U8_Set_Port_Value+0x7e>
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ca:	9e 81       	ldd	r25, Y+6	; 0x06
    19cc:	83 30       	cpi	r24, 0x03	; 3
    19ce:	91 05       	cpc	r25, r1
    19d0:	81 f0       	breq	.+32     	; 0x19f2 <DIO_U8_Set_Port_Value+0x88>
    19d2:	13 c0       	rjmp	.+38     	; 0x19fa <DIO_U8_Set_Port_Value+0x90>
				{
				case PORTA_ID:
					DIO_U8_PORTA=Copy_U8_PORT_value;
    19d4:	eb e3       	ldi	r30, 0x3B	; 59
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	80 83       	st	Z, r24
    19dc:	0e c0       	rjmp	.+28     	; 0x19fa <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTB_ID:
					DIO_U8_PORTB=Copy_U8_PORT_value;
    19de:	e8 e3       	ldi	r30, 0x38	; 56
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	80 83       	st	Z, r24
    19e6:	09 c0       	rjmp	.+18     	; 0x19fa <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTC_ID:
					DIO_U8_PORTC=Copy_U8_PORT_value;
    19e8:	e5 e3       	ldi	r30, 0x35	; 53
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	80 83       	st	Z, r24
    19f0:	04 c0       	rjmp	.+8      	; 0x19fa <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTD_ID:
					DIO_U8_PORTD=Copy_U8_PORT_value;
    19f2:	e2 e3       	ldi	r30, 0x32	; 50
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	80 83       	st	Z, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    19fa:	93 e0       	ldi	r25, 0x03	; 3
    19fc:	9c 83       	std	Y+4, r25	; 0x04
    19fe:	04 c0       	rjmp	.+8      	; 0x1a08 <DIO_U8_Set_Port_Value+0x9e>

				}
			}
			else
			{
				return WRONG_PORT_VALUE;
    1a00:	1c 82       	std	Y+4, r1	; 0x04
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <DIO_U8_Set_Port_Value+0x9e>


	}
	else
	{
		return WRONG_PORT;
    1a04:	22 e0       	ldi	r18, 0x02	; 2
    1a06:	2c 83       	std	Y+4, r18	; 0x04
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    1a0a:	26 96       	adiw	r28, 0x06	; 6
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <DIO_U8_Get_pin_value>:




u8 DIO_U8_Get_pin_value(u8 Copy_U8_Port_ID,u8 Copy_U8_Pin_ID , u8 *Copy_U8_Pin_Value)
{
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	28 97       	sbiw	r28, 0x08	; 8
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	89 83       	std	Y+1, r24	; 0x01
    1a32:	6a 83       	std	Y+2, r22	; 0x02
    1a34:	5c 83       	std	Y+4, r21	; 0x04
    1a36:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	84 30       	cpi	r24, 0x04	; 4
    1a3c:	08 f0       	brcs	.+2      	; 0x1a40 <DIO_U8_Get_pin_value+0x24>
    1a3e:	78 c0       	rjmp	.+240    	; 0x1b30 <DIO_U8_Get_pin_value+0x114>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	88 30       	cpi	r24, 0x08	; 8
    1a44:	08 f0       	brcs	.+2      	; 0x1a48 <DIO_U8_Get_pin_value+0x2c>
    1a46:	71 c0       	rjmp	.+226    	; 0x1b2a <DIO_U8_Get_pin_value+0x10e>
		{

			switch(Copy_U8_Port_ID)
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	3f 83       	std	Y+7, r19	; 0x07
    1a50:	2e 83       	std	Y+6, r18	; 0x06
    1a52:	4e 81       	ldd	r20, Y+6	; 0x06
    1a54:	5f 81       	ldd	r21, Y+7	; 0x07
    1a56:	41 30       	cpi	r20, 0x01	; 1
    1a58:	51 05       	cpc	r21, r1
    1a5a:	59 f1       	breq	.+86     	; 0x1ab2 <DIO_U8_Get_pin_value+0x96>
    1a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a60:	82 30       	cpi	r24, 0x02	; 2
    1a62:	91 05       	cpc	r25, r1
    1a64:	34 f4       	brge	.+12     	; 0x1a72 <DIO_U8_Get_pin_value+0x56>
    1a66:	2e 81       	ldd	r18, Y+6	; 0x06
    1a68:	3f 81       	ldd	r19, Y+7	; 0x07
    1a6a:	21 15       	cp	r18, r1
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	69 f0       	breq	.+26     	; 0x1a8a <DIO_U8_Get_pin_value+0x6e>
    1a70:	5b c0       	rjmp	.+182    	; 0x1b28 <DIO_U8_Get_pin_value+0x10c>
    1a72:	4e 81       	ldd	r20, Y+6	; 0x06
    1a74:	5f 81       	ldd	r21, Y+7	; 0x07
    1a76:	42 30       	cpi	r20, 0x02	; 2
    1a78:	51 05       	cpc	r21, r1
    1a7a:	79 f1       	breq	.+94     	; 0x1ada <DIO_U8_Get_pin_value+0xbe>
    1a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a80:	83 30       	cpi	r24, 0x03	; 3
    1a82:	91 05       	cpc	r25, r1
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <DIO_U8_Get_pin_value+0x6c>
    1a86:	3d c0       	rjmp	.+122    	; 0x1b02 <DIO_U8_Get_pin_value+0xe6>
    1a88:	4f c0       	rjmp	.+158    	; 0x1b28 <DIO_U8_Get_pin_value+0x10c>
							{
				case PORTA_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINA,Copy_U8_Pin_ID);
    1a8a:	e9 e3       	ldi	r30, 0x39	; 57
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	88 2f       	mov	r24, r24
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a9 01       	movw	r20, r18
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <DIO_U8_Get_pin_value+0x86>
    1a9e:	55 95       	asr	r21
    1aa0:	47 95       	ror	r20
    1aa2:	8a 95       	dec	r24
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <DIO_U8_Get_pin_value+0x82>
    1aa6:	ca 01       	movw	r24, r20
    1aa8:	81 70       	andi	r24, 0x01	; 1
    1aaa:	eb 81       	ldd	r30, Y+3	; 0x03
    1aac:	fc 81       	ldd	r31, Y+4	; 0x04
    1aae:	80 83       	st	Z, r24
    1ab0:	3b c0       	rjmp	.+118    	; 0x1b28 <DIO_U8_Get_pin_value+0x10c>
					break;
				case PORTB_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINB,Copy_U8_Pin_ID);
    1ab2:	e6 e3       	ldi	r30, 0x36	; 54
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	a9 01       	movw	r20, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <DIO_U8_Get_pin_value+0xae>
    1ac6:	55 95       	asr	r21
    1ac8:	47 95       	ror	r20
    1aca:	8a 95       	dec	r24
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <DIO_U8_Get_pin_value+0xaa>
    1ace:	ca 01       	movw	r24, r20
    1ad0:	81 70       	andi	r24, 0x01	; 1
    1ad2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ad4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ad6:	80 83       	st	Z, r24
    1ad8:	27 c0       	rjmp	.+78     	; 0x1b28 <DIO_U8_Get_pin_value+0x10c>
					break;
				case PORTC_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINC,Copy_U8_Pin_ID);
    1ada:	e3 e3       	ldi	r30, 0x33	; 51
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	88 2f       	mov	r24, r24
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a9 01       	movw	r20, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <DIO_U8_Get_pin_value+0xd6>
    1aee:	55 95       	asr	r21
    1af0:	47 95       	ror	r20
    1af2:	8a 95       	dec	r24
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <DIO_U8_Get_pin_value+0xd2>
    1af6:	ca 01       	movw	r24, r20
    1af8:	81 70       	andi	r24, 0x01	; 1
    1afa:	eb 81       	ldd	r30, Y+3	; 0x03
    1afc:	fc 81       	ldd	r31, Y+4	; 0x04
    1afe:	80 83       	st	Z, r24
    1b00:	13 c0       	rjmp	.+38     	; 0x1b28 <DIO_U8_Get_pin_value+0x10c>
					break;
				case PORTD_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
    1b02:	e0 e3       	ldi	r30, 0x30	; 48
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	88 2f       	mov	r24, r24
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a9 01       	movw	r20, r18
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <DIO_U8_Get_pin_value+0xfe>
    1b16:	55 95       	asr	r21
    1b18:	47 95       	ror	r20
    1b1a:	8a 95       	dec	r24
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <DIO_U8_Get_pin_value+0xfa>
    1b1e:	ca 01       	movw	r24, r20
    1b20:	81 70       	andi	r24, 0x01	; 1
    1b22:	eb 81       	ldd	r30, Y+3	; 0x03
    1b24:	fc 81       	ldd	r31, Y+4	; 0x04
    1b26:	80 83       	st	Z, r24
    1b28:	07 c0       	rjmp	.+14     	; 0x1b38 <DIO_U8_Get_pin_value+0x11c>
					break;
							}
		}
		else
		{
			return WRONG_PIN;
    1b2a:	51 e0       	ldi	r21, 0x01	; 1
    1b2c:	5d 83       	std	Y+5, r21	; 0x05
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <DIO_U8_Get_pin_value+0x118>
		}
	}
	else
	{
		return WRONG_PORT;
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	8d 83       	std	Y+5, r24	; 0x05
    1b34:	9d 81       	ldd	r25, Y+5	; 0x05
    1b36:	98 87       	std	Y+8, r25	; 0x08
	}
}
    1b38:	88 85       	ldd	r24, Y+8	; 0x08
    1b3a:	28 96       	adiw	r28, 0x08	; 8
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <KPD_Init>:
/****************************************< GLOABAL FUNCTION DEFINTION >****************************/
/**************************************************************************************/


void KPD_Init()
{
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <KPD_Init+0x6>
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
	u8 COL_Index , ROW_Index ;

	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    1b56:	1a 82       	std	Y+2, r1	; 0x02
    1b58:	0f c0       	rjmp	.+30     	; 0x1b78 <KPD_Init+0x2c>
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_COLS_PORT  , KPD_AU8_COLS_PINS[COL_Index] , PIN_OUTPUT  ) ;
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	88 2f       	mov	r24, r24
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	fc 01       	movw	r30, r24
    1b62:	e8 51       	subi	r30, 0x18	; 24
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	90 81       	ld	r25, Z
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	69 2f       	mov	r22, r25
    1b6c:	41 e0       	ldi	r20, 0x01	; 1
    1b6e:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <DIO_U8_Set_Pin_Dir>

void KPD_Init()
{
	u8 COL_Index , ROW_Index ;

	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	8f 5f       	subi	r24, 0xFF	; 255
    1b76:	8a 83       	std	Y+2, r24	; 0x02
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	84 30       	cpi	r24, 0x04	; 4
    1b7c:	70 f3       	brcs	.-36     	; 0x1b5a <KPD_Init+0xe>
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_COLS_PORT  , KPD_AU8_COLS_PINS[COL_Index] , PIN_OUTPUT  ) ;
	}

	for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    1b7e:	19 82       	std	Y+1, r1	; 0x01
    1b80:	1b c0       	rjmp	.+54     	; 0x1bb8 <KPD_Init+0x6c>
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_ROWS_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , PIN_INPUT ) ;
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	88 2f       	mov	r24, r24
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	fc 01       	movw	r30, r24
    1b8a:	ec 51       	subi	r30, 0x1C	; 28
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	90 81       	ld	r25, Z
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	69 2f       	mov	r22, r25
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <DIO_U8_Set_Pin_Dir>
		DIO_U8_Set_Pin_value( KPD_U8_ROWS_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , PIN_HIGH ) ;
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	88 2f       	mov	r24, r24
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	ec 51       	subi	r30, 0x1C	; 28
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	90 81       	ld	r25, Z
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	69 2f       	mov	r22, r25
    1bac:	41 e0       	ldi	r20, 0x01	; 1
    1bae:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>
	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_COLS_PORT  , KPD_AU8_COLS_PINS[COL_Index] , PIN_OUTPUT  ) ;
	}

	for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	8f 5f       	subi	r24, 0xFF	; 255
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	84 30       	cpi	r24, 0x04	; 4
    1bbc:	10 f3       	brcs	.-60     	; 0x1b82 <KPD_Init+0x36>
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_ROWS_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , PIN_INPUT ) ;
		DIO_U8_Set_Pin_value( KPD_U8_ROWS_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , PIN_HIGH ) ;
	}
}
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	cf 91       	pop	r28
    1bc4:	df 91       	pop	r29
    1bc6:	08 95       	ret

00001bc8 <KPD_Void_GET_Status>:




u8 KPD_Void_GET_Status ( void )
{
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <KPD_Void_GET_Status+0x6>
    1bce:	00 d0       	rcall	.+0      	; 0x1bd0 <KPD_Void_GET_Status+0x8>
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
	u8 COL_Index , ROW_Index ;
	u8  KPD_Status , Presskey = KPD_Key_NotPressed ;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	89 83       	std	Y+1, r24	; 0x01
	static u8 KPD_ARR [KPD_ROWS][KPD_COLS] = KPD_KEYS ;
while(1)
{
	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    1bd8:	1b 82       	std	Y+3, r1	; 0x03
    1bda:	63 c0       	rjmp	.+198    	; 0x1ca2 <KPD_Void_GET_Status+0xda>
	{
		DIO_U8_Set_Pin_value( KPD_U8_COLS_PORT , KPD_AU8_COLS_PINS[COL_Index] , PIN_LOW  ) ;
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	88 2f       	mov	r24, r24
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	fc 01       	movw	r30, r24
    1be4:	e8 51       	subi	r30, 0x18	; 24
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	90 81       	ld	r25, Z
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	69 2f       	mov	r22, r25
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>

		for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    1bf4:	1a 82       	std	Y+2, r1	; 0x02
    1bf6:	42 c0       	rjmp	.+132    	; 0x1c7c <KPD_Void_GET_Status+0xb4>
		{
			// Key_Num = COL_Index + ( ROW_Index * KPD_ROWS ) ;
			DIO_U8_Get_pin_value ( KPD_U8_ROWS_PORT , KPD_AU8_ROWS_PINS[ROW_Index] , &KPD_Status ) ;
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	88 2f       	mov	r24, r24
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	fc 01       	movw	r30, r24
    1c00:	ec 51       	subi	r30, 0x1C	; 28
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	90 81       	ld	r25, Z
    1c06:	9e 01       	movw	r18, r28
    1c08:	2c 5f       	subi	r18, 0xFC	; 252
    1c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	69 2f       	mov	r22, r25
    1c10:	a9 01       	movw	r20, r18
    1c12:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_U8_Get_pin_value>

			if ( KPD_Status == KPD_Key_Pressed )
    1c16:	8c 81       	ldd	r24, Y+4	; 0x04
    1c18:	88 23       	and	r24, r24
    1c1a:	69 f5       	brne	.+90     	; 0x1c76 <KPD_Void_GET_Status+0xae>
			{
				Presskey = KPD_ARR[ROW_Index][COL_Index] ;
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	48 2f       	mov	r20, r24
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	ca 01       	movw	r24, r20
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	82 0f       	add	r24, r18
    1c34:	93 1f       	adc	r25, r19
    1c36:	fc 01       	movw	r30, r24
    1c38:	e4 51       	subi	r30, 0x14	; 20
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	80 81       	ld	r24, Z
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	0f c0       	rjmp	.+30     	; 0x1c60 <KPD_Void_GET_Status+0x98>

			while (KPD_Status == KPD_Key_Pressed)
			{
				DIO_U8_Get_pin_value( KPD_U8_ROWS_PORT , KPD_AU8_ROWS_PINS[ROW_Index] , &KPD_Status ) ;
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	88 2f       	mov	r24, r24
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	fc 01       	movw	r30, r24
    1c4a:	ec 51       	subi	r30, 0x1C	; 28
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	90 81       	ld	r25, Z
    1c50:	9e 01       	movw	r18, r28
    1c52:	2c 5f       	subi	r18, 0xFC	; 252
    1c54:	3f 4f       	sbci	r19, 0xFF	; 255
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	69 2f       	mov	r22, r25
    1c5a:	a9 01       	movw	r20, r18
    1c5c:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DIO_U8_Get_pin_value>

			if ( KPD_Status == KPD_Key_Pressed )
			{
				Presskey = KPD_ARR[ROW_Index][COL_Index] ;

			while (KPD_Status == KPD_Key_Pressed)
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	88 23       	and	r24, r24
    1c64:	71 f3       	breq	.-36     	; 0x1c42 <KPD_Void_GET_Status+0x7a>
			{
				DIO_U8_Get_pin_value( KPD_U8_ROWS_PORT , KPD_AU8_ROWS_PINS[ROW_Index] , &KPD_Status ) ;
			}
			return Presskey ;
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
		}

		DIO_U8_Set_Pin_value( KPD_U8_COLS_PORT , KPD_AU8_COLS_PINS[COL_Index] , PIN_HIGH ) ;
	}
}
}
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret
{
	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
	{
		DIO_U8_Set_Pin_value( KPD_U8_COLS_PORT , KPD_AU8_COLS_PINS[COL_Index] , PIN_LOW  ) ;

		for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	8f 5f       	subi	r24, 0xFF	; 255
    1c7a:	8a 83       	std	Y+2, r24	; 0x02
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	84 30       	cpi	r24, 0x04	; 4
    1c80:	08 f4       	brcc	.+2      	; 0x1c84 <KPD_Void_GET_Status+0xbc>
    1c82:	ba cf       	rjmp	.-140    	; 0x1bf8 <KPD_Void_GET_Status+0x30>
			return Presskey ;
			}

		}

		DIO_U8_Set_Pin_value( KPD_U8_COLS_PORT , KPD_AU8_COLS_PINS[COL_Index] , PIN_HIGH ) ;
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	88 2f       	mov	r24, r24
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	e8 51       	subi	r30, 0x18	; 24
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	90 81       	ld	r25, Z
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	69 2f       	mov	r22, r25
    1c96:	41 e0       	ldi	r20, 0x01	; 1
    1c98:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>
	u8 COL_Index , ROW_Index ;
	u8  KPD_Status , Presskey = KPD_Key_NotPressed ;
	static u8 KPD_ARR [KPD_ROWS][KPD_COLS] = KPD_KEYS ;
while(1)
{
	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ca0:	8b 83       	std	Y+3, r24	; 0x03
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	84 30       	cpi	r24, 0x04	; 4
    1ca6:	08 f4       	brcc	.+2      	; 0x1caa <KPD_Void_GET_Status+0xe2>
    1ca8:	99 cf       	rjmp	.-206    	; 0x1bdc <KPD_Void_GET_Status+0x14>
    1caa:	96 cf       	rjmp	.-212    	; 0x1bd8 <KPD_Void_GET_Status+0x10>

00001cac <LCD_void_Init>:
#include"LCD_private.h"




void LCD_void_Init(void){
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	cc 54       	subi	r28, 0x4C	; 76
    1cba:	d0 40       	sbci	r29, 0x00	; 0
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e7 5b       	subi	r30, 0xB7	; 183
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	ac e0       	ldi	r26, 0x0C	; 12
    1cd2:	b2 e4       	ldi	r27, 0x42	; 66
    1cd4:	80 83       	st	Z, r24
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	a2 83       	std	Z+2, r26	; 0x02
    1cda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cdc:	8e 01       	movw	r16, r28
    1cde:	0b 5b       	subi	r16, 0xBB	; 187
    1ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e7 5b       	subi	r30, 0xB7	; 183
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	60 81       	ld	r22, Z
    1cea:	71 81       	ldd	r23, Z+1	; 0x01
    1cec:	82 81       	ldd	r24, Z+2	; 0x02
    1cee:	93 81       	ldd	r25, Z+3	; 0x03
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	4a ef       	ldi	r20, 0xFA	; 250
    1cf6:	54 e4       	ldi	r21, 0x44	; 68
    1cf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	f8 01       	movw	r30, r16
    1d02:	80 83       	st	Z, r24
    1d04:	91 83       	std	Z+1, r25	; 0x01
    1d06:	a2 83       	std	Z+2, r26	; 0x02
    1d08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	eb 5b       	subi	r30, 0xBB	; 187
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e8       	ldi	r20, 0x80	; 128
    1d1e:	5f e3       	ldi	r21, 0x3F	; 63
    1d20:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d24:	88 23       	and	r24, r24
    1d26:	44 f4       	brge	.+16     	; 0x1d38 <LCD_void_Init+0x8c>
		__ticks = 1;
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ed 5b       	subi	r30, 0xBD	; 189
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	80 83       	st	Z, r24
    1d36:	64 c0       	rjmp	.+200    	; 0x1e00 <LCD_void_Init+0x154>
	else if (__tmp > 65535)
    1d38:	fe 01       	movw	r30, r28
    1d3a:	eb 5b       	subi	r30, 0xBB	; 187
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	60 81       	ld	r22, Z
    1d40:	71 81       	ldd	r23, Z+1	; 0x01
    1d42:	82 81       	ldd	r24, Z+2	; 0x02
    1d44:	93 81       	ldd	r25, Z+3	; 0x03
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	3f ef       	ldi	r19, 0xFF	; 255
    1d4a:	4f e7       	ldi	r20, 0x7F	; 127
    1d4c:	57 e4       	ldi	r21, 0x47	; 71
    1d4e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d52:	18 16       	cp	r1, r24
    1d54:	0c f0       	brlt	.+2      	; 0x1d58 <LCD_void_Init+0xac>
    1d56:	43 c0       	rjmp	.+134    	; 0x1dde <LCD_void_Init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e7 5b       	subi	r30, 0xB7	; 183
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	60 81       	ld	r22, Z
    1d60:	71 81       	ldd	r23, Z+1	; 0x01
    1d62:	82 81       	ldd	r24, Z+2	; 0x02
    1d64:	93 81       	ldd	r25, Z+3	; 0x03
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e2       	ldi	r20, 0x20	; 32
    1d6c:	51 e4       	ldi	r21, 0x41	; 65
    1d6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	8e 01       	movw	r16, r28
    1d78:	0d 5b       	subi	r16, 0xBD	; 189
    1d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	cd 01       	movw	r24, r26
    1d80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	f8 01       	movw	r30, r16
    1d8a:	91 83       	std	Z+1, r25	; 0x01
    1d8c:	80 83       	st	Z, r24
    1d8e:	1f c0       	rjmp	.+62     	; 0x1dce <LCD_void_Init+0x122>
    1d90:	fe 01       	movw	r30, r28
    1d92:	ef 5b       	subi	r30, 0xBF	; 191
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	88 ec       	ldi	r24, 0xC8	; 200
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	80 83       	st	Z, r24
    1d9e:	fe 01       	movw	r30, r28
    1da0:	ef 5b       	subi	r30, 0xBF	; 191
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	80 81       	ld	r24, Z
    1da6:	91 81       	ldd	r25, Z+1	; 0x01
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <LCD_void_Init+0xfc>
    1dac:	fe 01       	movw	r30, r28
    1dae:	ef 5b       	subi	r30, 0xBF	; 191
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db6:	de 01       	movw	r26, r28
    1db8:	ad 5b       	subi	r26, 0xBD	; 189
    1dba:	bf 4f       	sbci	r27, 0xFF	; 255
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	ed 5b       	subi	r30, 0xBD	; 189
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	80 81       	ld	r24, Z
    1dc4:	91 81       	ldd	r25, Z+1	; 0x01
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	11 96       	adiw	r26, 0x01	; 1
    1dca:	9c 93       	st	X, r25
    1dcc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dce:	fe 01       	movw	r30, r28
    1dd0:	ed 5b       	subi	r30, 0xBD	; 189
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	80 81       	ld	r24, Z
    1dd6:	91 81       	ldd	r25, Z+1	; 0x01
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	d1 f6       	brne	.-76     	; 0x1d90 <LCD_void_Init+0xe4>
    1ddc:	24 c0       	rjmp	.+72     	; 0x1e26 <LCD_void_Init+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dde:	8e 01       	movw	r16, r28
    1de0:	0d 5b       	subi	r16, 0xBD	; 189
    1de2:	1f 4f       	sbci	r17, 0xFF	; 255
    1de4:	fe 01       	movw	r30, r28
    1de6:	eb 5b       	subi	r30, 0xBB	; 187
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	60 81       	ld	r22, Z
    1dec:	71 81       	ldd	r23, Z+1	; 0x01
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	80 83       	st	Z, r24
    1e00:	fe 01       	movw	r30, r28
    1e02:	ed 5b       	subi	r30, 0xBD	; 189
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	80 81       	ld	r24, Z
    1e08:	91 81       	ldd	r25, Z+1	; 0x01
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	ff 96       	adiw	r30, 0x3f	; 63
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	80 83       	st	Z, r24
    1e12:	fe 01       	movw	r30, r28
    1e14:	ff 96       	adiw	r30, 0x3f	; 63
    1e16:	80 81       	ld	r24, Z
    1e18:	91 81       	ldd	r25, Z+1	; 0x01
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_void_Init+0x16e>
    1e1e:	fe 01       	movw	r30, r28
    1e20:	ff 96       	adiw	r30, 0x3f	; 63
    1e22:	91 83       	std	Z+1, r25	; 0x01
    1e24:	80 83       	st	Z, r24
#if LCD_U8_MODE==LCD_U8_8_BIT_MODE
		/*delay more than 30ms*/
		_delay_ms(35);
		/*send function set */
		LCD_void_Write_CMD(LCD_Function_set_8_bit_2_line_mode);
    1e26:	88 e3       	ldi	r24, 0x38	; 56
    1e28:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_void_Write_CMD>
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	a0 e2       	ldi	r26, 0x20	; 32
    1e32:	b2 e4       	ldi	r27, 0x42	; 66
    1e34:	8b af       	std	Y+59, r24	; 0x3b
    1e36:	9c af       	std	Y+60, r25	; 0x3c
    1e38:	ad af       	std	Y+61, r26	; 0x3d
    1e3a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e3c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e3e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e40:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e42:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e44:	2b ea       	ldi	r18, 0xAB	; 171
    1e46:	3a ea       	ldi	r19, 0xAA	; 170
    1e48:	4a e2       	ldi	r20, 0x2A	; 42
    1e4a:	50 e4       	ldi	r21, 0x40	; 64
    1e4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	8f ab       	std	Y+55, r24	; 0x37
    1e56:	98 af       	std	Y+56, r25	; 0x38
    1e58:	a9 af       	std	Y+57, r26	; 0x39
    1e5a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1e5c:	6f a9       	ldd	r22, Y+55	; 0x37
    1e5e:	78 ad       	ldd	r23, Y+56	; 0x38
    1e60:	89 ad       	ldd	r24, Y+57	; 0x39
    1e62:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	1c f4       	brge	.+6      	; 0x1e7a <LCD_void_Init+0x1ce>
		__ticks = 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	8e ab       	std	Y+54, r24	; 0x36
    1e78:	91 c0       	rjmp	.+290    	; 0x1f9c <LCD_void_Init+0x2f0>
	else if (__tmp > 255)
    1e7a:	6f a9       	ldd	r22, Y+55	; 0x37
    1e7c:	78 ad       	ldd	r23, Y+56	; 0x38
    1e7e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e80:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	4f e7       	ldi	r20, 0x7F	; 127
    1e88:	53 e4       	ldi	r21, 0x43	; 67
    1e8a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e8e:	18 16       	cp	r1, r24
    1e90:	0c f0       	brlt	.+2      	; 0x1e94 <LCD_void_Init+0x1e8>
    1e92:	7b c0       	rjmp	.+246    	; 0x1f8a <LCD_void_Init+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1e94:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e96:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e98:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	4a e7       	ldi	r20, 0x7A	; 122
    1ea2:	54 e4       	ldi	r21, 0x44	; 68
    1ea4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	8a ab       	std	Y+50, r24	; 0x32
    1eae:	9b ab       	std	Y+51, r25	; 0x33
    1eb0:	ac ab       	std	Y+52, r26	; 0x34
    1eb2:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb4:	6a a9       	ldd	r22, Y+50	; 0x32
    1eb6:	7b a9       	ldd	r23, Y+51	; 0x33
    1eb8:	8c a9       	ldd	r24, Y+52	; 0x34
    1eba:	9d a9       	ldd	r25, Y+53	; 0x35
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	4a ef       	ldi	r20, 0xFA	; 250
    1ec2:	54 e4       	ldi	r21, 0x44	; 68
    1ec4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	8e a7       	std	Y+46, r24	; 0x2e
    1ece:	9f a7       	std	Y+47, r25	; 0x2f
    1ed0:	a8 ab       	std	Y+48, r26	; 0x30
    1ed2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1ed4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ed6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ed8:	88 a9       	ldd	r24, Y+48	; 0x30
    1eda:	99 a9       	ldd	r25, Y+49	; 0x31
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e8       	ldi	r20, 0x80	; 128
    1ee2:	5f e3       	ldi	r21, 0x3F	; 63
    1ee4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ee8:	88 23       	and	r24, r24
    1eea:	2c f4       	brge	.+10     	; 0x1ef6 <LCD_void_Init+0x24a>
		__ticks = 1;
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	9d a7       	std	Y+45, r25	; 0x2d
    1ef2:	8c a7       	std	Y+44, r24	; 0x2c
    1ef4:	3f c0       	rjmp	.+126    	; 0x1f74 <LCD_void_Init+0x2c8>
	else if (__tmp > 65535)
    1ef6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ef8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1efa:	88 a9       	ldd	r24, Y+48	; 0x30
    1efc:	99 a9       	ldd	r25, Y+49	; 0x31
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	3f ef       	ldi	r19, 0xFF	; 255
    1f02:	4f e7       	ldi	r20, 0x7F	; 127
    1f04:	57 e4       	ldi	r21, 0x47	; 71
    1f06:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f0a:	18 16       	cp	r1, r24
    1f0c:	4c f5       	brge	.+82     	; 0x1f60 <LCD_void_Init+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0e:	6a a9       	ldd	r22, Y+50	; 0x32
    1f10:	7b a9       	ldd	r23, Y+51	; 0x33
    1f12:	8c a9       	ldd	r24, Y+52	; 0x34
    1f14:	9d a9       	ldd	r25, Y+53	; 0x35
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e2       	ldi	r20, 0x20	; 32
    1f1c:	51 e4       	ldi	r21, 0x41	; 65
    1f1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	bc 01       	movw	r22, r24
    1f28:	cd 01       	movw	r24, r26
    1f2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	9d a7       	std	Y+45, r25	; 0x2d
    1f34:	8c a7       	std	Y+44, r24	; 0x2c
    1f36:	0f c0       	rjmp	.+30     	; 0x1f56 <LCD_void_Init+0x2aa>
    1f38:	88 ec       	ldi	r24, 0xC8	; 200
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	9b a7       	std	Y+43, r25	; 0x2b
    1f3e:	8a a7       	std	Y+42, r24	; 0x2a
    1f40:	8a a5       	ldd	r24, Y+42	; 0x2a
    1f42:	9b a5       	ldd	r25, Y+43	; 0x2b
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <LCD_void_Init+0x298>
    1f48:	9b a7       	std	Y+43, r25	; 0x2b
    1f4a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f4e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	9d a7       	std	Y+45, r25	; 0x2d
    1f54:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f56:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f58:	9d a5       	ldd	r25, Y+45	; 0x2d
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	69 f7       	brne	.-38     	; 0x1f38 <LCD_void_Init+0x28c>
    1f5e:	24 c0       	rjmp	.+72     	; 0x1fa8 <LCD_void_Init+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f60:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f62:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f64:	88 a9       	ldd	r24, Y+48	; 0x30
    1f66:	99 a9       	ldd	r25, Y+49	; 0x31
    1f68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	9d a7       	std	Y+45, r25	; 0x2d
    1f72:	8c a7       	std	Y+44, r24	; 0x2c
    1f74:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f76:	9d a5       	ldd	r25, Y+45	; 0x2d
    1f78:	99 a7       	std	Y+41, r25	; 0x29
    1f7a:	88 a7       	std	Y+40, r24	; 0x28
    1f7c:	88 a5       	ldd	r24, Y+40	; 0x28
    1f7e:	99 a5       	ldd	r25, Y+41	; 0x29
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <LCD_void_Init+0x2d4>
    1f84:	99 a7       	std	Y+41, r25	; 0x29
    1f86:	88 a7       	std	Y+40, r24	; 0x28
    1f88:	0f c0       	rjmp	.+30     	; 0x1fa8 <LCD_void_Init+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f8a:	6f a9       	ldd	r22, Y+55	; 0x37
    1f8c:	78 ad       	ldd	r23, Y+56	; 0x38
    1f8e:	89 ad       	ldd	r24, Y+57	; 0x39
    1f90:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	8e ab       	std	Y+54, r24	; 0x36
    1f9c:	8e a9       	ldd	r24, Y+54	; 0x36
    1f9e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fa0:	8f a1       	ldd	r24, Y+39	; 0x27
    1fa2:	8a 95       	dec	r24
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <LCD_void_Init+0x2f6>
    1fa6:	8f a3       	std	Y+39, r24	; 0x27
		/*delay more than 39us*/
		_delay_us(40);
		/*send cursor mode */
		LCD_void_Write_CMD(LCD_Cursor_OFF);
    1fa8:	8c e0       	ldi	r24, 0x0C	; 12
    1faa:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_void_Write_CMD>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a0 e2       	ldi	r26, 0x20	; 32
    1fb4:	b2 e4       	ldi	r27, 0x42	; 66
    1fb6:	8b a3       	std	Y+35, r24	; 0x23
    1fb8:	9c a3       	std	Y+36, r25	; 0x24
    1fba:	ad a3       	std	Y+37, r26	; 0x25
    1fbc:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fbe:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fc4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fc6:	2b ea       	ldi	r18, 0xAB	; 171
    1fc8:	3a ea       	ldi	r19, 0xAA	; 170
    1fca:	4a e2       	ldi	r20, 0x2A	; 42
    1fcc:	50 e4       	ldi	r21, 0x40	; 64
    1fce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	8f 8f       	std	Y+31, r24	; 0x1f
    1fd8:	98 a3       	std	Y+32, r25	; 0x20
    1fda:	a9 a3       	std	Y+33, r26	; 0x21
    1fdc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1fde:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1fe0:	78 a1       	ldd	r23, Y+32	; 0x20
    1fe2:	89 a1       	ldd	r24, Y+33	; 0x21
    1fe4:	9a a1       	ldd	r25, Y+34	; 0x22
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e8       	ldi	r20, 0x80	; 128
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ff2:	88 23       	and	r24, r24
    1ff4:	1c f4       	brge	.+6      	; 0x1ffc <LCD_void_Init+0x350>
		__ticks = 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	8e 8f       	std	Y+30, r24	; 0x1e
    1ffa:	91 c0       	rjmp	.+290    	; 0x211e <LCD_void_Init+0x472>
	else if (__tmp > 255)
    1ffc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ffe:	78 a1       	ldd	r23, Y+32	; 0x20
    2000:	89 a1       	ldd	r24, Y+33	; 0x21
    2002:	9a a1       	ldd	r25, Y+34	; 0x22
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	4f e7       	ldi	r20, 0x7F	; 127
    200a:	53 e4       	ldi	r21, 0x43	; 67
    200c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2010:	18 16       	cp	r1, r24
    2012:	0c f0       	brlt	.+2      	; 0x2016 <LCD_void_Init+0x36a>
    2014:	7b c0       	rjmp	.+246    	; 0x210c <LCD_void_Init+0x460>
	{
		_delay_ms(__us / 1000.0);
    2016:	6b a1       	ldd	r22, Y+35	; 0x23
    2018:	7c a1       	ldd	r23, Y+36	; 0x24
    201a:	8d a1       	ldd	r24, Y+37	; 0x25
    201c:	9e a1       	ldd	r25, Y+38	; 0x26
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	4a e7       	ldi	r20, 0x7A	; 122
    2024:	54 e4       	ldi	r21, 0x44	; 68
    2026:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	8a 8f       	std	Y+26, r24	; 0x1a
    2030:	9b 8f       	std	Y+27, r25	; 0x1b
    2032:	ac 8f       	std	Y+28, r26	; 0x1c
    2034:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2036:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2038:	7b 8d       	ldd	r23, Y+27	; 0x1b
    203a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    203c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	4a ef       	ldi	r20, 0xFA	; 250
    2044:	54 e4       	ldi	r21, 0x44	; 68
    2046:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	8e 8b       	std	Y+22, r24	; 0x16
    2050:	9f 8b       	std	Y+23, r25	; 0x17
    2052:	a8 8f       	std	Y+24, r26	; 0x18
    2054:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2056:	6e 89       	ldd	r22, Y+22	; 0x16
    2058:	7f 89       	ldd	r23, Y+23	; 0x17
    205a:	88 8d       	ldd	r24, Y+24	; 0x18
    205c:	99 8d       	ldd	r25, Y+25	; 0x19
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e8       	ldi	r20, 0x80	; 128
    2064:	5f e3       	ldi	r21, 0x3F	; 63
    2066:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    206a:	88 23       	and	r24, r24
    206c:	2c f4       	brge	.+10     	; 0x2078 <LCD_void_Init+0x3cc>
		__ticks = 1;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9d 8b       	std	Y+21, r25	; 0x15
    2074:	8c 8b       	std	Y+20, r24	; 0x14
    2076:	3f c0       	rjmp	.+126    	; 0x20f6 <LCD_void_Init+0x44a>
	else if (__tmp > 65535)
    2078:	6e 89       	ldd	r22, Y+22	; 0x16
    207a:	7f 89       	ldd	r23, Y+23	; 0x17
    207c:	88 8d       	ldd	r24, Y+24	; 0x18
    207e:	99 8d       	ldd	r25, Y+25	; 0x19
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	3f ef       	ldi	r19, 0xFF	; 255
    2084:	4f e7       	ldi	r20, 0x7F	; 127
    2086:	57 e4       	ldi	r21, 0x47	; 71
    2088:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    208c:	18 16       	cp	r1, r24
    208e:	4c f5       	brge	.+82     	; 0x20e2 <LCD_void_Init+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2090:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2092:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2094:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2096:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e2       	ldi	r20, 0x20	; 32
    209e:	51 e4       	ldi	r21, 0x41	; 65
    20a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	bc 01       	movw	r22, r24
    20aa:	cd 01       	movw	r24, r26
    20ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	9d 8b       	std	Y+21, r25	; 0x15
    20b6:	8c 8b       	std	Y+20, r24	; 0x14
    20b8:	0f c0       	rjmp	.+30     	; 0x20d8 <LCD_void_Init+0x42c>
    20ba:	88 ec       	ldi	r24, 0xC8	; 200
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	9b 8b       	std	Y+19, r25	; 0x13
    20c0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20c2:	8a 89       	ldd	r24, Y+18	; 0x12
    20c4:	9b 89       	ldd	r25, Y+19	; 0x13
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <LCD_void_Init+0x41a>
    20ca:	9b 8b       	std	Y+19, r25	; 0x13
    20cc:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ce:	8c 89       	ldd	r24, Y+20	; 0x14
    20d0:	9d 89       	ldd	r25, Y+21	; 0x15
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	9d 8b       	std	Y+21, r25	; 0x15
    20d6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d8:	8c 89       	ldd	r24, Y+20	; 0x14
    20da:	9d 89       	ldd	r25, Y+21	; 0x15
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	69 f7       	brne	.-38     	; 0x20ba <LCD_void_Init+0x40e>
    20e0:	24 c0       	rjmp	.+72     	; 0x212a <LCD_void_Init+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e2:	6e 89       	ldd	r22, Y+22	; 0x16
    20e4:	7f 89       	ldd	r23, Y+23	; 0x17
    20e6:	88 8d       	ldd	r24, Y+24	; 0x18
    20e8:	99 8d       	ldd	r25, Y+25	; 0x19
    20ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	9d 8b       	std	Y+21, r25	; 0x15
    20f4:	8c 8b       	std	Y+20, r24	; 0x14
    20f6:	8c 89       	ldd	r24, Y+20	; 0x14
    20f8:	9d 89       	ldd	r25, Y+21	; 0x15
    20fa:	99 8b       	std	Y+17, r25	; 0x11
    20fc:	88 8b       	std	Y+16, r24	; 0x10
    20fe:	88 89       	ldd	r24, Y+16	; 0x10
    2100:	99 89       	ldd	r25, Y+17	; 0x11
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <LCD_void_Init+0x456>
    2106:	99 8b       	std	Y+17, r25	; 0x11
    2108:	88 8b       	std	Y+16, r24	; 0x10
    210a:	0f c0       	rjmp	.+30     	; 0x212a <LCD_void_Init+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    210c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    210e:	78 a1       	ldd	r23, Y+32	; 0x20
    2110:	89 a1       	ldd	r24, Y+33	; 0x21
    2112:	9a a1       	ldd	r25, Y+34	; 0x22
    2114:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	8e 8f       	std	Y+30, r24	; 0x1e
    211e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2120:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2122:	8f 85       	ldd	r24, Y+15	; 0x0f
    2124:	8a 95       	dec	r24
    2126:	f1 f7       	brne	.-4      	; 0x2124 <LCD_void_Init+0x478>
    2128:	8f 87       	std	Y+15, r24	; 0x0f
		/*delay more than 39us*/
		_delay_us(40);
		/*send command clear display*/
		LCD_void_Write_CMD(LCD_Clear_Display_Screen);
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_void_Write_CMD>
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	a0 e0       	ldi	r26, 0x00	; 0
    2136:	b0 e4       	ldi	r27, 0x40	; 64
    2138:	8b 87       	std	Y+11, r24	; 0x0b
    213a:	9c 87       	std	Y+12, r25	; 0x0c
    213c:	ad 87       	std	Y+13, r26	; 0x0d
    213e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2140:	6b 85       	ldd	r22, Y+11	; 0x0b
    2142:	7c 85       	ldd	r23, Y+12	; 0x0c
    2144:	8d 85       	ldd	r24, Y+13	; 0x0d
    2146:	9e 85       	ldd	r25, Y+14	; 0x0e
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	4a ef       	ldi	r20, 0xFA	; 250
    214e:	54 e4       	ldi	r21, 0x44	; 68
    2150:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	8f 83       	std	Y+7, r24	; 0x07
    215a:	98 87       	std	Y+8, r25	; 0x08
    215c:	a9 87       	std	Y+9, r26	; 0x09
    215e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2160:	6f 81       	ldd	r22, Y+7	; 0x07
    2162:	78 85       	ldd	r23, Y+8	; 0x08
    2164:	89 85       	ldd	r24, Y+9	; 0x09
    2166:	9a 85       	ldd	r25, Y+10	; 0x0a
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	40 e8       	ldi	r20, 0x80	; 128
    216e:	5f e3       	ldi	r21, 0x3F	; 63
    2170:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2174:	88 23       	and	r24, r24
    2176:	2c f4       	brge	.+10     	; 0x2182 <LCD_void_Init+0x4d6>
		__ticks = 1;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	9e 83       	std	Y+6, r25	; 0x06
    217e:	8d 83       	std	Y+5, r24	; 0x05
    2180:	3f c0       	rjmp	.+126    	; 0x2200 <LCD_void_Init+0x554>
	else if (__tmp > 65535)
    2182:	6f 81       	ldd	r22, Y+7	; 0x07
    2184:	78 85       	ldd	r23, Y+8	; 0x08
    2186:	89 85       	ldd	r24, Y+9	; 0x09
    2188:	9a 85       	ldd	r25, Y+10	; 0x0a
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	3f ef       	ldi	r19, 0xFF	; 255
    218e:	4f e7       	ldi	r20, 0x7F	; 127
    2190:	57 e4       	ldi	r21, 0x47	; 71
    2192:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2196:	18 16       	cp	r1, r24
    2198:	4c f5       	brge	.+82     	; 0x21ec <LCD_void_Init+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219a:	6b 85       	ldd	r22, Y+11	; 0x0b
    219c:	7c 85       	ldd	r23, Y+12	; 0x0c
    219e:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e2       	ldi	r20, 0x20	; 32
    21a8:	51 e4       	ldi	r21, 0x41	; 65
    21aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	bc 01       	movw	r22, r24
    21b4:	cd 01       	movw	r24, r26
    21b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	9e 83       	std	Y+6, r25	; 0x06
    21c0:	8d 83       	std	Y+5, r24	; 0x05
    21c2:	0f c0       	rjmp	.+30     	; 0x21e2 <LCD_void_Init+0x536>
    21c4:	88 ec       	ldi	r24, 0xC8	; 200
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	9c 83       	std	Y+4, r25	; 0x04
    21ca:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	9c 81       	ldd	r25, Y+4	; 0x04
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <LCD_void_Init+0x524>
    21d4:	9c 83       	std	Y+4, r25	; 0x04
    21d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	9e 81       	ldd	r25, Y+6	; 0x06
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	9e 81       	ldd	r25, Y+6	; 0x06
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	69 f7       	brne	.-38     	; 0x21c4 <LCD_void_Init+0x518>
    21ea:	14 c0       	rjmp	.+40     	; 0x2214 <LCD_void_Init+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ec:	6f 81       	ldd	r22, Y+7	; 0x07
    21ee:	78 85       	ldd	r23, Y+8	; 0x08
    21f0:	89 85       	ldd	r24, Y+9	; 0x09
    21f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	9e 83       	std	Y+6, r25	; 0x06
    21fe:	8d 83       	std	Y+5, r24	; 0x05
    2200:	8d 81       	ldd	r24, Y+5	; 0x05
    2202:	9e 81       	ldd	r25, Y+6	; 0x06
    2204:	9a 83       	std	Y+2, r25	; 0x02
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	9a 81       	ldd	r25, Y+2	; 0x02
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <LCD_void_Init+0x560>
    2210:	9a 83       	std	Y+2, r25	; 0x02
    2212:	89 83       	std	Y+1, r24	; 0x01
		/*delay more than 1.53ms*/
		_delay_ms(2);
		/*increment cursor*/
		LCD_void_Write_CMD(LCD_Cursor_Increment);
    2214:	86 e0       	ldi	r24, 0x06	; 6
    2216:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_void_Write_CMD>
#endif




}
    221a:	c4 5b       	subi	r28, 0xB4	; 180
    221c:	df 4f       	sbci	r29, 0xFF	; 255
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	1f 91       	pop	r17
    222e:	0f 91       	pop	r16
    2230:	08 95       	ret

00002232 <LCD_void_Write_CMD>:

void LCD_void_Write_CMD(u8 Copy_u8_CMD){
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	0f 92       	push	r0
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	89 83       	std	Y+1, r24	; 0x01
	/*RW=0*/
	/*write a command*/
	/*E=1*/
	/*E=0*/
//	DIO_U8_Set_Pin_Dir(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_OUTPUT);
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_LOW);
    223e:	82 e0       	ldi	r24, 0x02	; 2
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	40 e0       	ldi	r20, 0x00	; 0
    2244:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>

	LCD_void_Write(Copy_u8_CMD);
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	0e 94 2b 11 	call	0x2256	; 0x2256 <LCD_void_Write>

}
    224e:	0f 90       	pop	r0
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	08 95       	ret

00002256 <LCD_void_Write>:



void LCD_void_Write(u8 Copy_u8_val){
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	69 97       	sbiw	r28, 0x19	; 25
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	cd bf       	out	0x3d, r28	; 61
    226a:	89 8f       	std	Y+25, r24	; 0x19

	/*RW=0*/
		DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,PIN_LOW);
    226c:	82 e0       	ldi	r24, 0x02	; 2
    226e:	61 e0       	ldi	r22, 0x01	; 1
    2270:	40 e0       	ldi	r20, 0x00	; 0
    2272:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>

#if LCD_U8_MODE==LCD_U8_8_BIT_MODE

	/*WRITE */
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN0,Get_Bit(Copy_u8_val,DIO_U8_PIN0));
    2276:	89 8d       	ldd	r24, Y+25	; 0x19
    2278:	98 2f       	mov	r25, r24
    227a:	91 70       	andi	r25, 0x01	; 1
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	49 2f       	mov	r20, r25
    2282:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN1,Get_Bit(Copy_u8_val,DIO_U8_PIN1));
    2286:	89 8d       	ldd	r24, Y+25	; 0x19
    2288:	86 95       	lsr	r24
    228a:	98 2f       	mov	r25, r24
    228c:	91 70       	andi	r25, 0x01	; 1
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	61 e0       	ldi	r22, 0x01	; 1
    2292:	49 2f       	mov	r20, r25
    2294:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN2,Get_Bit(Copy_u8_val,DIO_U8_PIN2));
    2298:	89 8d       	ldd	r24, Y+25	; 0x19
    229a:	86 95       	lsr	r24
    229c:	86 95       	lsr	r24
    229e:	98 2f       	mov	r25, r24
    22a0:	91 70       	andi	r25, 0x01	; 1
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	62 e0       	ldi	r22, 0x02	; 2
    22a6:	49 2f       	mov	r20, r25
    22a8:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN3,Get_Bit(Copy_u8_val,DIO_U8_PIN3));
    22ac:	89 8d       	ldd	r24, Y+25	; 0x19
    22ae:	86 95       	lsr	r24
    22b0:	86 95       	lsr	r24
    22b2:	86 95       	lsr	r24
    22b4:	98 2f       	mov	r25, r24
    22b6:	91 70       	andi	r25, 0x01	; 1
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	63 e0       	ldi	r22, 0x03	; 3
    22bc:	49 2f       	mov	r20, r25
    22be:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN4,Get_Bit(Copy_u8_val,DIO_U8_PIN4));
    22c2:	89 8d       	ldd	r24, Y+25	; 0x19
    22c4:	82 95       	swap	r24
    22c6:	8f 70       	andi	r24, 0x0F	; 15
    22c8:	98 2f       	mov	r25, r24
    22ca:	91 70       	andi	r25, 0x01	; 1
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	64 e0       	ldi	r22, 0x04	; 4
    22d0:	49 2f       	mov	r20, r25
    22d2:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN5,Get_Bit(Copy_u8_val,DIO_U8_PIN5));
    22d6:	89 8d       	ldd	r24, Y+25	; 0x19
    22d8:	82 95       	swap	r24
    22da:	86 95       	lsr	r24
    22dc:	87 70       	andi	r24, 0x07	; 7
    22de:	98 2f       	mov	r25, r24
    22e0:	91 70       	andi	r25, 0x01	; 1
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	65 e0       	ldi	r22, 0x05	; 5
    22e6:	49 2f       	mov	r20, r25
    22e8:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN6,Get_Bit(Copy_u8_val,DIO_U8_PIN6));
    22ec:	89 8d       	ldd	r24, Y+25	; 0x19
    22ee:	82 95       	swap	r24
    22f0:	86 95       	lsr	r24
    22f2:	86 95       	lsr	r24
    22f4:	83 70       	andi	r24, 0x03	; 3
    22f6:	98 2f       	mov	r25, r24
    22f8:	91 70       	andi	r25, 0x01	; 1
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	66 e0       	ldi	r22, 0x06	; 6
    22fe:	49 2f       	mov	r20, r25
    2300:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN7,Get_Bit(Copy_u8_val,DIO_U8_PIN7));
    2304:	89 8d       	ldd	r24, Y+25	; 0x19
    2306:	98 2f       	mov	r25, r24
    2308:	99 1f       	adc	r25, r25
    230a:	99 27       	eor	r25, r25
    230c:	99 1f       	adc	r25, r25
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	67 e0       	ldi	r22, 0x07	; 7
    2312:	49 2f       	mov	r20, r25
    2314:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>
	/*E=1*/
	/*E=0*/
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_HIGH);
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	62 e0       	ldi	r22, 0x02	; 2
    231c:	41 e0       	ldi	r20, 0x01	; 1
    231e:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	a0 e8       	ldi	r26, 0x80	; 128
    2328:	bf e3       	ldi	r27, 0x3F	; 63
    232a:	8d 8b       	std	Y+21, r24	; 0x15
    232c:	9e 8b       	std	Y+22, r25	; 0x16
    232e:	af 8b       	std	Y+23, r26	; 0x17
    2330:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2332:	6d 89       	ldd	r22, Y+21	; 0x15
    2334:	7e 89       	ldd	r23, Y+22	; 0x16
    2336:	8f 89       	ldd	r24, Y+23	; 0x17
    2338:	98 8d       	ldd	r25, Y+24	; 0x18
    233a:	2b ea       	ldi	r18, 0xAB	; 171
    233c:	3a ea       	ldi	r19, 0xAA	; 170
    233e:	4a e2       	ldi	r20, 0x2A	; 42
    2340:	50 e4       	ldi	r21, 0x40	; 64
    2342:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	89 8b       	std	Y+17, r24	; 0x11
    234c:	9a 8b       	std	Y+18, r25	; 0x12
    234e:	ab 8b       	std	Y+19, r26	; 0x13
    2350:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2352:	69 89       	ldd	r22, Y+17	; 0x11
    2354:	7a 89       	ldd	r23, Y+18	; 0x12
    2356:	8b 89       	ldd	r24, Y+19	; 0x13
    2358:	9c 89       	ldd	r25, Y+20	; 0x14
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e8       	ldi	r20, 0x80	; 128
    2360:	5f e3       	ldi	r21, 0x3F	; 63
    2362:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2366:	88 23       	and	r24, r24
    2368:	1c f4       	brge	.+6      	; 0x2370 <LCD_void_Write+0x11a>
		__ticks = 1;
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	88 8b       	std	Y+16, r24	; 0x10
    236e:	91 c0       	rjmp	.+290    	; 0x2492 <LCD_void_Write+0x23c>
	else if (__tmp > 255)
    2370:	69 89       	ldd	r22, Y+17	; 0x11
    2372:	7a 89       	ldd	r23, Y+18	; 0x12
    2374:	8b 89       	ldd	r24, Y+19	; 0x13
    2376:	9c 89       	ldd	r25, Y+20	; 0x14
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	53 e4       	ldi	r21, 0x43	; 67
    2380:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2384:	18 16       	cp	r1, r24
    2386:	0c f0       	brlt	.+2      	; 0x238a <LCD_void_Write+0x134>
    2388:	7b c0       	rjmp	.+246    	; 0x2480 <LCD_void_Write+0x22a>
	{
		_delay_ms(__us / 1000.0);
    238a:	6d 89       	ldd	r22, Y+21	; 0x15
    238c:	7e 89       	ldd	r23, Y+22	; 0x16
    238e:	8f 89       	ldd	r24, Y+23	; 0x17
    2390:	98 8d       	ldd	r25, Y+24	; 0x18
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	4a e7       	ldi	r20, 0x7A	; 122
    2398:	54 e4       	ldi	r21, 0x44	; 68
    239a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	8c 87       	std	Y+12, r24	; 0x0c
    23a4:	9d 87       	std	Y+13, r25	; 0x0d
    23a6:	ae 87       	std	Y+14, r26	; 0x0e
    23a8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    23ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    23ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    23b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	4a ef       	ldi	r20, 0xFA	; 250
    23b8:	54 e4       	ldi	r21, 0x44	; 68
    23ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	88 87       	std	Y+8, r24	; 0x08
    23c4:	99 87       	std	Y+9, r25	; 0x09
    23c6:	aa 87       	std	Y+10, r26	; 0x0a
    23c8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    23ca:	68 85       	ldd	r22, Y+8	; 0x08
    23cc:	79 85       	ldd	r23, Y+9	; 0x09
    23ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    23d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e8       	ldi	r20, 0x80	; 128
    23d8:	5f e3       	ldi	r21, 0x3F	; 63
    23da:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23de:	88 23       	and	r24, r24
    23e0:	2c f4       	brge	.+10     	; 0x23ec <LCD_void_Write+0x196>
		__ticks = 1;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9f 83       	std	Y+7, r25	; 0x07
    23e8:	8e 83       	std	Y+6, r24	; 0x06
    23ea:	3f c0       	rjmp	.+126    	; 0x246a <LCD_void_Write+0x214>
	else if (__tmp > 65535)
    23ec:	68 85       	ldd	r22, Y+8	; 0x08
    23ee:	79 85       	ldd	r23, Y+9	; 0x09
    23f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	3f ef       	ldi	r19, 0xFF	; 255
    23f8:	4f e7       	ldi	r20, 0x7F	; 127
    23fa:	57 e4       	ldi	r21, 0x47	; 71
    23fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2400:	18 16       	cp	r1, r24
    2402:	4c f5       	brge	.+82     	; 0x2456 <LCD_void_Write+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2404:	6c 85       	ldd	r22, Y+12	; 0x0c
    2406:	7d 85       	ldd	r23, Y+13	; 0x0d
    2408:	8e 85       	ldd	r24, Y+14	; 0x0e
    240a:	9f 85       	ldd	r25, Y+15	; 0x0f
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e2       	ldi	r20, 0x20	; 32
    2412:	51 e4       	ldi	r21, 0x41	; 65
    2414:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	bc 01       	movw	r22, r24
    241e:	cd 01       	movw	r24, r26
    2420:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	9f 83       	std	Y+7, r25	; 0x07
    242a:	8e 83       	std	Y+6, r24	; 0x06
    242c:	0f c0       	rjmp	.+30     	; 0x244c <LCD_void_Write+0x1f6>
    242e:	88 ec       	ldi	r24, 0xC8	; 200
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9d 83       	std	Y+5, r25	; 0x05
    2434:	8c 83       	std	Y+4, r24	; 0x04
    2436:	8c 81       	ldd	r24, Y+4	; 0x04
    2438:	9d 81       	ldd	r25, Y+5	; 0x05
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <LCD_void_Write+0x1e4>
    243e:	9d 83       	std	Y+5, r25	; 0x05
    2440:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2442:	8e 81       	ldd	r24, Y+6	; 0x06
    2444:	9f 81       	ldd	r25, Y+7	; 0x07
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	9f 83       	std	Y+7, r25	; 0x07
    244a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244c:	8e 81       	ldd	r24, Y+6	; 0x06
    244e:	9f 81       	ldd	r25, Y+7	; 0x07
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	69 f7       	brne	.-38     	; 0x242e <LCD_void_Write+0x1d8>
    2454:	24 c0       	rjmp	.+72     	; 0x249e <LCD_void_Write+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2456:	68 85       	ldd	r22, Y+8	; 0x08
    2458:	79 85       	ldd	r23, Y+9	; 0x09
    245a:	8a 85       	ldd	r24, Y+10	; 0x0a
    245c:	9b 85       	ldd	r25, Y+11	; 0x0b
    245e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	9f 83       	std	Y+7, r25	; 0x07
    2468:	8e 83       	std	Y+6, r24	; 0x06
    246a:	8e 81       	ldd	r24, Y+6	; 0x06
    246c:	9f 81       	ldd	r25, Y+7	; 0x07
    246e:	9b 83       	std	Y+3, r25	; 0x03
    2470:	8a 83       	std	Y+2, r24	; 0x02
    2472:	8a 81       	ldd	r24, Y+2	; 0x02
    2474:	9b 81       	ldd	r25, Y+3	; 0x03
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <LCD_void_Write+0x220>
    247a:	9b 83       	std	Y+3, r25	; 0x03
    247c:	8a 83       	std	Y+2, r24	; 0x02
    247e:	0f c0       	rjmp	.+30     	; 0x249e <LCD_void_Write+0x248>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2480:	69 89       	ldd	r22, Y+17	; 0x11
    2482:	7a 89       	ldd	r23, Y+18	; 0x12
    2484:	8b 89       	ldd	r24, Y+19	; 0x13
    2486:	9c 89       	ldd	r25, Y+20	; 0x14
    2488:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	88 8b       	std	Y+16, r24	; 0x10
    2492:	88 89       	ldd	r24, Y+16	; 0x10
    2494:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	8a 95       	dec	r24
    249a:	f1 f7       	brne	.-4      	; 0x2498 <LCD_void_Write+0x242>
    249c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_LOW);
    249e:	82 e0       	ldi	r24, 0x02	; 2
    24a0:	62 e0       	ldi	r22, 0x02	; 2
    24a2:	40 e0       	ldi	r20, 0x00	; 0
    24a4:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>
		DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_LOW);

#endif


}
    24a8:	69 96       	adiw	r28, 0x19	; 25
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <LCD_void_Write_Data>:


void LCD_void_Write_Data(u8 Copy_u8_char)
{
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	0f 92       	push	r0
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    24c4:	89 83       	std	Y+1, r24	; 0x01
	/*steps*/
		/*RS=1*/
//	DIO_U8_Set_Pin_Dir(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_OUTPUT);
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_HIGH);
    24c6:	82 e0       	ldi	r24, 0x02	; 2
    24c8:	60 e0       	ldi	r22, 0x00	; 0
    24ca:	41 e0       	ldi	r20, 0x01	; 1
    24cc:	0e 94 b7 0b 	call	0x176e	; 0x176e <DIO_U8_Set_Pin_value>
		/*RW=0*/
		/*write a data*/
		/*E=1*/
		/*E=0*/
	LCD_void_Write(Copy_u8_char);
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	0e 94 2b 11 	call	0x2256	; 0x2256 <LCD_void_Write>
}
    24d6:	0f 90       	pop	r0
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	08 95       	ret

000024de <LCD_void_Write_String>:




void LCD_void_Write_String(u8 *str)
{
    24de:	df 93       	push	r29
    24e0:	cf 93       	push	r28
    24e2:	00 d0       	rcall	.+0      	; 0x24e4 <LCD_void_Write_String+0x6>
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
    24e8:	9a 83       	std	Y+2, r25	; 0x02
    24ea:	89 83       	std	Y+1, r24	; 0x01
    24ec:	0a c0       	rjmp	.+20     	; 0x2502 <LCD_void_Write_String+0x24>
	while( *str!='\0')
	{
		LCD_void_Write_Data(*str);
    24ee:	e9 81       	ldd	r30, Y+1	; 0x01
    24f0:	fa 81       	ldd	r31, Y+2	; 0x02
    24f2:	80 81       	ld	r24, Z
    24f4:	0e 94 5d 12 	call	0x24ba	; 0x24ba <LCD_void_Write_Data>
		str++;
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	9a 81       	ldd	r25, Y+2	; 0x02
    24fc:	01 96       	adiw	r24, 0x01	; 1
    24fe:	9a 83       	std	Y+2, r25	; 0x02
    2500:	89 83       	std	Y+1, r24	; 0x01



void LCD_void_Write_String(u8 *str)
{
	while( *str!='\0')
    2502:	e9 81       	ldd	r30, Y+1	; 0x01
    2504:	fa 81       	ldd	r31, Y+2	; 0x02
    2506:	80 81       	ld	r24, Z
    2508:	88 23       	and	r24, r24
    250a:	89 f7       	brne	.-30     	; 0x24ee <LCD_void_Write_String+0x10>
	{
		LCD_void_Write_Data(*str);
		str++;
	}
}
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <LCD_void_Write_Numbers>:


void LCD_void_Write_Numbers(u32 Copy_U8_Number)
{
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	6a 97       	sbiw	r28, 0x1a	; 26
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	6f 8b       	std	Y+23, r22	; 0x17
    252c:	78 8f       	std	Y+24, r23	; 0x18
    252e:	89 8f       	std	Y+25, r24	; 0x19
    2530:	9a 8f       	std	Y+26, r25	; 0x1a
	u8 rem ;
	u8 index=0 ;
    2532:	19 82       	std	Y+1, r1	; 0x01
	u8 arr[BITSET_NUMBER];
	if(Copy_U8_Number == 0){
    2534:	8f 89       	ldd	r24, Y+23	; 0x17
    2536:	98 8d       	ldd	r25, Y+24	; 0x18
    2538:	a9 8d       	ldd	r26, Y+25	; 0x19
    253a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	a1 05       	cpc	r26, r1
    2540:	b1 05       	cpc	r27, r1
    2542:	f1 f5       	brne	.+124    	; 0x25c0 <LCD_void_Write_Numbers+0xaa>
		arr[index]='0';
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	28 2f       	mov	r18, r24
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	ce 01       	movw	r24, r28
    254c:	03 96       	adiw	r24, 0x03	; 3
    254e:	fc 01       	movw	r30, r24
    2550:	e2 0f       	add	r30, r18
    2552:	f3 1f       	adc	r31, r19
    2554:	80 e3       	ldi	r24, 0x30	; 48
    2556:	80 83       	st	Z, r24
		index++;
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	8f 5f       	subi	r24, 0xFF	; 255
    255c:	89 83       	std	Y+1, r24	; 0x01
    255e:	30 c0       	rjmp	.+96     	; 0x25c0 <LCD_void_Write_Numbers+0xaa>
	}
	while(Copy_U8_Number!=0)
	{
		rem=Copy_U8_Number%10;
    2560:	8f 89       	ldd	r24, Y+23	; 0x17
    2562:	98 8d       	ldd	r25, Y+24	; 0x18
    2564:	a9 8d       	ldd	r26, Y+25	; 0x19
    2566:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2568:	2a e0       	ldi	r18, 0x0A	; 10
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e0       	ldi	r20, 0x00	; 0
    256e:	50 e0       	ldi	r21, 0x00	; 0
    2570:	bc 01       	movw	r22, r24
    2572:	cd 01       	movw	r24, r26
    2574:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__udivmodsi4>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	8a 83       	std	Y+2, r24	; 0x02
		arr[index]=rem+'0';
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	48 2f       	mov	r20, r24
    2588:	40 5d       	subi	r20, 0xD0	; 208
    258a:	ce 01       	movw	r24, r28
    258c:	03 96       	adiw	r24, 0x03	; 3
    258e:	fc 01       	movw	r30, r24
    2590:	e2 0f       	add	r30, r18
    2592:	f3 1f       	adc	r31, r19
    2594:	40 83       	st	Z, r20
		index++;
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	8f 5f       	subi	r24, 0xFF	; 255
    259a:	89 83       	std	Y+1, r24	; 0x01
		Copy_U8_Number/=10;
    259c:	8f 89       	ldd	r24, Y+23	; 0x17
    259e:	98 8d       	ldd	r25, Y+24	; 0x18
    25a0:	a9 8d       	ldd	r26, Y+25	; 0x19
    25a2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    25a4:	2a e0       	ldi	r18, 0x0A	; 10
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	50 e0       	ldi	r21, 0x00	; 0
    25ac:	bc 01       	movw	r22, r24
    25ae:	cd 01       	movw	r24, r26
    25b0:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__udivmodsi4>
    25b4:	da 01       	movw	r26, r20
    25b6:	c9 01       	movw	r24, r18
    25b8:	8f 8b       	std	Y+23, r24	; 0x17
    25ba:	98 8f       	std	Y+24, r25	; 0x18
    25bc:	a9 8f       	std	Y+25, r26	; 0x19
    25be:	ba 8f       	std	Y+26, r27	; 0x1a
	u8 arr[BITSET_NUMBER];
	if(Copy_U8_Number == 0){
		arr[index]='0';
		index++;
	}
	while(Copy_U8_Number!=0)
    25c0:	8f 89       	ldd	r24, Y+23	; 0x17
    25c2:	98 8d       	ldd	r25, Y+24	; 0x18
    25c4:	a9 8d       	ldd	r26, Y+25	; 0x19
    25c6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    25c8:	00 97       	sbiw	r24, 0x00	; 0
    25ca:	a1 05       	cpc	r26, r1
    25cc:	b1 05       	cpc	r27, r1
    25ce:	41 f6       	brne	.-112    	; 0x2560 <LCD_void_Write_Numbers+0x4a>
		rem=Copy_U8_Number%10;
		arr[index]=rem+'0';
		index++;
		Copy_U8_Number/=10;
	}
	arr[index]='\0';
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	28 2f       	mov	r18, r24
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	ce 01       	movw	r24, r28
    25d8:	03 96       	adiw	r24, 0x03	; 3
    25da:	fc 01       	movw	r30, r24
    25dc:	e2 0f       	add	r30, r18
    25de:	f3 1f       	adc	r31, r19
    25e0:	10 82       	st	Z, r1
	reverse(arr,index);
    25e2:	ce 01       	movw	r24, r28
    25e4:	03 96       	adiw	r24, 0x03	; 3
    25e6:	69 81       	ldd	r22, Y+1	; 0x01
    25e8:	0e 94 03 13 	call	0x2606	; 0x2606 <reverse>
	LCD_void_Write_String(arr);
    25ec:	ce 01       	movw	r24, r28
    25ee:	03 96       	adiw	r24, 0x03	; 3
    25f0:	0e 94 6f 12 	call	0x24de	; 0x24de <LCD_void_Write_String>

}
    25f4:	6a 96       	adiw	r28, 0x1a	; 26
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	de bf       	out	0x3e, r29	; 62
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	cd bf       	out	0x3d, r28	; 61
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <reverse>:

void reverse(u8 *ptr , u8 element)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	29 97       	sbiw	r28, 0x09	; 9
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	cd bf       	out	0x3d, r28	; 61
    261a:	98 87       	std	Y+8, r25	; 0x08
    261c:	8f 83       	std	Y+7, r24	; 0x07
    261e:	69 87       	std	Y+9, r22	; 0x09
	u8 start = 0;
    2620:	1e 82       	std	Y+6, r1	; 0x06
	u8 end = element-1;
    2622:	89 85       	ldd	r24, Y+9	; 0x09
    2624:	81 50       	subi	r24, 0x01	; 1
    2626:	8d 83       	std	Y+5, r24	; 0x05
    2628:	33 c0       	rjmp	.+102    	; 0x2690 <reverse+0x8a>
	while(start<end)
	{
		u32 temp = ptr[start];
    262a:	8e 81       	ldd	r24, Y+6	; 0x06
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	8f 81       	ldd	r24, Y+7	; 0x07
    2632:	98 85       	ldd	r25, Y+8	; 0x08
    2634:	fc 01       	movw	r30, r24
    2636:	e2 0f       	add	r30, r18
    2638:	f3 1f       	adc	r31, r19
    263a:	80 81       	ld	r24, Z
    263c:	88 2f       	mov	r24, r24
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	a0 e0       	ldi	r26, 0x00	; 0
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	89 83       	std	Y+1, r24	; 0x01
    2646:	9a 83       	std	Y+2, r25	; 0x02
    2648:	ab 83       	std	Y+3, r26	; 0x03
    264a:	bc 83       	std	Y+4, r27	; 0x04
		ptr[start]=ptr[end];
    264c:	8e 81       	ldd	r24, Y+6	; 0x06
    264e:	28 2f       	mov	r18, r24
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	8f 81       	ldd	r24, Y+7	; 0x07
    2654:	98 85       	ldd	r25, Y+8	; 0x08
    2656:	dc 01       	movw	r26, r24
    2658:	a2 0f       	add	r26, r18
    265a:	b3 1f       	adc	r27, r19
    265c:	8d 81       	ldd	r24, Y+5	; 0x05
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	8f 81       	ldd	r24, Y+7	; 0x07
    2664:	98 85       	ldd	r25, Y+8	; 0x08
    2666:	fc 01       	movw	r30, r24
    2668:	e2 0f       	add	r30, r18
    266a:	f3 1f       	adc	r31, r19
    266c:	80 81       	ld	r24, Z
    266e:	8c 93       	st	X, r24
		ptr[end]=temp;
    2670:	8d 81       	ldd	r24, Y+5	; 0x05
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	8f 81       	ldd	r24, Y+7	; 0x07
    2678:	98 85       	ldd	r25, Y+8	; 0x08
    267a:	fc 01       	movw	r30, r24
    267c:	e2 0f       	add	r30, r18
    267e:	f3 1f       	adc	r31, r19
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	80 83       	st	Z, r24
		start++;
    2684:	8e 81       	ldd	r24, Y+6	; 0x06
    2686:	8f 5f       	subi	r24, 0xFF	; 255
    2688:	8e 83       	std	Y+6, r24	; 0x06
		end--;
    268a:	8d 81       	ldd	r24, Y+5	; 0x05
    268c:	81 50       	subi	r24, 0x01	; 1
    268e:	8d 83       	std	Y+5, r24	; 0x05

void reverse(u8 *ptr , u8 element)
{
	u8 start = 0;
	u8 end = element-1;
	while(start<end)
    2690:	9e 81       	ldd	r25, Y+6	; 0x06
    2692:	8d 81       	ldd	r24, Y+5	; 0x05
    2694:	98 17       	cp	r25, r24
    2696:	48 f2       	brcs	.-110    	; 0x262a <reverse+0x24>
		ptr[end]=temp;
		start++;
		end--;

	}
}
    2698:	29 96       	adiw	r28, 0x09	; 9
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	f8 94       	cli
    269e:	de bf       	out	0x3e, r29	; 62
    26a0:	0f be       	out	0x3f, r0	; 63
    26a2:	cd bf       	out	0x3d, r28	; 61
    26a4:	cf 91       	pop	r28
    26a6:	df 91       	pop	r29
    26a8:	08 95       	ret

000026aa <LCD_void_DDRAM_Address>:


void LCD_void_DDRAM_Address(u8 Copy_u8_Line , u8 Copy_u8_Location)
{
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <LCD_void_DDRAM_Address+0x6>
    26b0:	0f 92       	push	r0
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
    26b6:	8a 83       	std	Y+2, r24	; 0x02
    26b8:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_Address = (Copy_u8_Location+(64*Copy_u8_Line));
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	88 2f       	mov	r24, r24
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	00 24       	eor	r0, r0
    26c2:	96 95       	lsr	r25
    26c4:	87 95       	ror	r24
    26c6:	07 94       	ror	r0
    26c8:	96 95       	lsr	r25
    26ca:	87 95       	ror	r24
    26cc:	07 94       	ror	r0
    26ce:	98 2f       	mov	r25, r24
    26d0:	80 2d       	mov	r24, r0
    26d2:	98 2f       	mov	r25, r24
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	89 0f       	add	r24, r25
    26d8:	89 83       	std	Y+1, r24	; 0x01
	DDRAM_Address|=0b10000000;
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	80 68       	ori	r24, 0x80	; 128
    26de:	89 83       	std	Y+1, r24	; 0x01
	LCD_void_Write_CMD(DDRAM_Address);
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_void_Write_CMD>
}
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <LCD_void_Set_CGRAM_Address>:


void LCD_void_Set_CGRAM_Address(u8 Address , u8 *ptr)
{
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	00 d0       	rcall	.+0      	; 0x26f8 <LCD_void_Set_CGRAM_Address+0x6>
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <LCD_void_Set_CGRAM_Address+0x8>
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
    26fe:	8a 83       	std	Y+2, r24	; 0x02
    2700:	7c 83       	std	Y+4, r23	; 0x04
    2702:	6b 83       	std	Y+3, r22	; 0x03
	LCD_void_Write_CMD(Address);
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_void_Write_CMD>
	for(u8 i =0 ; i<8 ; i++)
    270a:	19 82       	std	Y+1, r1	; 0x01
    270c:	0d c0       	rjmp	.+26     	; 0x2728 <LCD_void_Set_CGRAM_Address+0x36>
	{
		LCD_void_Write_Data(*ptr);
    270e:	eb 81       	ldd	r30, Y+3	; 0x03
    2710:	fc 81       	ldd	r31, Y+4	; 0x04
    2712:	80 81       	ld	r24, Z
    2714:	0e 94 5d 12 	call	0x24ba	; 0x24ba <LCD_void_Write_Data>
		ptr++;
    2718:	8b 81       	ldd	r24, Y+3	; 0x03
    271a:	9c 81       	ldd	r25, Y+4	; 0x04
    271c:	01 96       	adiw	r24, 0x01	; 1
    271e:	9c 83       	std	Y+4, r25	; 0x04
    2720:	8b 83       	std	Y+3, r24	; 0x03


void LCD_void_Set_CGRAM_Address(u8 Address , u8 *ptr)
{
	LCD_void_Write_CMD(Address);
	for(u8 i =0 ; i<8 ; i++)
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	8f 5f       	subi	r24, 0xFF	; 255
    2726:	89 83       	std	Y+1, r24	; 0x01
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	88 30       	cpi	r24, 0x08	; 8
    272c:	80 f3       	brcs	.-32     	; 0x270e <LCD_void_Set_CGRAM_Address+0x1c>
	{
		LCD_void_Write_Data(*ptr);
		ptr++;
	}

}
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <LCD_void_Clear_Screen>:

void LCD_void_Clear_Screen(void)
{
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	2e 97       	sbiw	r28, 0x0e	; 14
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
	LCD_void_Write_CMD(LCD_Clear_Display_Screen);
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_void_Write_CMD>
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	a0 e0       	ldi	r26, 0x00	; 0
    275c:	b0 e4       	ldi	r27, 0x40	; 64
    275e:	8b 87       	std	Y+11, r24	; 0x0b
    2760:	9c 87       	std	Y+12, r25	; 0x0c
    2762:	ad 87       	std	Y+13, r26	; 0x0d
    2764:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2766:	6b 85       	ldd	r22, Y+11	; 0x0b
    2768:	7c 85       	ldd	r23, Y+12	; 0x0c
    276a:	8d 85       	ldd	r24, Y+13	; 0x0d
    276c:	9e 85       	ldd	r25, Y+14	; 0x0e
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	4a ef       	ldi	r20, 0xFA	; 250
    2774:	54 e4       	ldi	r21, 0x44	; 68
    2776:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	8f 83       	std	Y+7, r24	; 0x07
    2780:	98 87       	std	Y+8, r25	; 0x08
    2782:	a9 87       	std	Y+9, r26	; 0x09
    2784:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2786:	6f 81       	ldd	r22, Y+7	; 0x07
    2788:	78 85       	ldd	r23, Y+8	; 0x08
    278a:	89 85       	ldd	r24, Y+9	; 0x09
    278c:	9a 85       	ldd	r25, Y+10	; 0x0a
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e8       	ldi	r20, 0x80	; 128
    2794:	5f e3       	ldi	r21, 0x3F	; 63
    2796:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    279a:	88 23       	and	r24, r24
    279c:	2c f4       	brge	.+10     	; 0x27a8 <LCD_void_Clear_Screen+0x6c>
		__ticks = 1;
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
    27a6:	3f c0       	rjmp	.+126    	; 0x2826 <LCD_void_Clear_Screen+0xea>
	else if (__tmp > 65535)
    27a8:	6f 81       	ldd	r22, Y+7	; 0x07
    27aa:	78 85       	ldd	r23, Y+8	; 0x08
    27ac:	89 85       	ldd	r24, Y+9	; 0x09
    27ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	3f ef       	ldi	r19, 0xFF	; 255
    27b4:	4f e7       	ldi	r20, 0x7F	; 127
    27b6:	57 e4       	ldi	r21, 0x47	; 71
    27b8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27bc:	18 16       	cp	r1, r24
    27be:	4c f5       	brge	.+82     	; 0x2812 <LCD_void_Clear_Screen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e2       	ldi	r20, 0x20	; 32
    27ce:	51 e4       	ldi	r21, 0x41	; 65
    27d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	bc 01       	movw	r22, r24
    27da:	cd 01       	movw	r24, r26
    27dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	9e 83       	std	Y+6, r25	; 0x06
    27e6:	8d 83       	std	Y+5, r24	; 0x05
    27e8:	0f c0       	rjmp	.+30     	; 0x2808 <LCD_void_Clear_Screen+0xcc>
    27ea:	88 ec       	ldi	r24, 0xC8	; 200
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	9c 83       	std	Y+4, r25	; 0x04
    27f0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	9c 81       	ldd	r25, Y+4	; 0x04
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <LCD_void_Clear_Screen+0xba>
    27fa:	9c 83       	std	Y+4, r25	; 0x04
    27fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2800:	9e 81       	ldd	r25, Y+6	; 0x06
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	9e 83       	std	Y+6, r25	; 0x06
    2806:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2808:	8d 81       	ldd	r24, Y+5	; 0x05
    280a:	9e 81       	ldd	r25, Y+6	; 0x06
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	69 f7       	brne	.-38     	; 0x27ea <LCD_void_Clear_Screen+0xae>
    2810:	14 c0       	rjmp	.+40     	; 0x283a <LCD_void_Clear_Screen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2812:	6f 81       	ldd	r22, Y+7	; 0x07
    2814:	78 85       	ldd	r23, Y+8	; 0x08
    2816:	89 85       	ldd	r24, Y+9	; 0x09
    2818:	9a 85       	ldd	r25, Y+10	; 0x0a
    281a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	9e 83       	std	Y+6, r25	; 0x06
    2824:	8d 83       	std	Y+5, r24	; 0x05
    2826:	8d 81       	ldd	r24, Y+5	; 0x05
    2828:	9e 81       	ldd	r25, Y+6	; 0x06
    282a:	9a 83       	std	Y+2, r25	; 0x02
    282c:	89 83       	std	Y+1, r24	; 0x01
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	9a 81       	ldd	r25, Y+2	; 0x02
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	f1 f7       	brne	.-4      	; 0x2832 <LCD_void_Clear_Screen+0xf6>
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    283a:	2e 96       	adiw	r28, 0x0e	; 14
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	62 97       	sbiw	r28, 0x12	; 18
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	9a 8b       	std	Y+18, r25	; 0x12
    2862:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   /* store the integer number to arr & 10 is for decimal numbering system*/
   itoa(data,arr,10);
    2864:	89 89       	ldd	r24, Y+17	; 0x11
    2866:	9a 89       	ldd	r25, Y+18	; 0x12
    2868:	9e 01       	movw	r18, r28
    286a:	2f 5f       	subi	r18, 0xFF	; 255
    286c:	3f 4f       	sbci	r19, 0xFF	; 255
    286e:	b9 01       	movw	r22, r18
    2870:	4a e0       	ldi	r20, 0x0A	; 10
    2872:	50 e0       	ldi	r21, 0x00	; 0
    2874:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <itoa>

   LCD_void_Write_String(arr);
    2878:	ce 01       	movw	r24, r28
    287a:	01 96       	adiw	r24, 0x01	; 1
    287c:	0e 94 6f 12 	call	0x24de	; 0x24de <LCD_void_Write_String>
}
    2880:	62 96       	adiw	r28, 0x12	; 18
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	de bf       	out	0x3e, r29	; 62
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <UART_void_Init>:
#include"UART_config.h"
#include"UART_private.h"
#include"UART_interface.h"

void UART_void_Init(void)
{
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
	UART_U8_UBRRH = 0 ;    // Reg select is UBRRH
    289a:	e0 e4       	ldi	r30, 0x40	; 64
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	10 82       	st	Z, r1
	UART_U8_UBRRL = 51 ;   // UBRR value = (system frq / (16*bude rate) ) -1
    28a0:	e9 e2       	ldi	r30, 0x29	; 41
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	83 e3       	ldi	r24, 0x33	; 51
    28a6:	80 83       	st	Z, r24
	UART_U8_UCSRC = 0b10000110; // REG select is UCSRC
    28a8:	e0 e4       	ldi	r30, 0x40	; 64
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	86 e8       	ldi	r24, 0x86	; 134
    28ae:	80 83       	st	Z, r24
								// Asynch
								// no parity
								// stop bit


	UART_U8_UCSRB=0b00011000;   // receiver enable , tx enable
    28b0:	ea e2       	ldi	r30, 0x2A	; 42
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	88 e1       	ldi	r24, 0x18	; 24
    28b6:	80 83       	st	Z, r24
								// 8 bits --> data bits


}
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <UART_void_Send_Char>:
void UART_void_Send_Char(u8 Copy_U8_Data)
{
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	0f 92       	push	r0
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	89 83       	std	Y+1, r24	; 0x01
	while(Get_Bit(UART_U8_UCSRA,5)==0);
    28ca:	eb e2       	ldi	r30, 0x2B	; 43
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	82 95       	swap	r24
    28d2:	86 95       	lsr	r24
    28d4:	87 70       	andi	r24, 0x07	; 7
    28d6:	88 2f       	mov	r24, r24
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	81 70       	andi	r24, 0x01	; 1
    28dc:	90 70       	andi	r25, 0x00	; 0
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	a1 f3       	breq	.-24     	; 0x28ca <UART_void_Send_Char+0xc>
//	Set_Bit(UART_U8_UCSRA,5);
	UART_U8_UDR = Copy_U8_Data ;
    28e2:	ec e2       	ldi	r30, 0x2C	; 44
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	80 83       	st	Z, r24

}
    28ea:	0f 90       	pop	r0
    28ec:	cf 91       	pop	r28
    28ee:	df 91       	pop	r29
    28f0:	08 95       	ret

000028f2 <UART_U8_Receive_Char>:

u8 UART_U8_Receive_Char(void)
{
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
	while(Get_Bit(UART_U8_UCSRA,7)==0);
    28fa:	eb e2       	ldi	r30, 0x2B	; 43
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	88 23       	and	r24, r24
    2902:	dc f7       	brge	.-10     	; 0x28fa <UART_U8_Receive_Char+0x8>
	return UART_U8_UDR ;
    2904:	ec e2       	ldi	r30, 0x2C	; 44
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
}
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	08 95       	ret

00002910 <UART_void_Send_String>:

void UART_void_Send_String(u8 *Copy_U8_Str)
{
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	60 97       	sbiw	r28, 0x10	; 16
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	98 8b       	std	Y+16, r25	; 0x10
    2926:	8f 87       	std	Y+15, r24	; 0x0f
    2928:	7c c0       	rjmp	.+248    	; 0x2a22 <UART_void_Send_String+0x112>
	while(*Copy_U8_Str != '\0')
	{
		UART_void_Send_Char(*Copy_U8_Str);
    292a:	ef 85       	ldd	r30, Y+15	; 0x0f
    292c:	f8 89       	ldd	r31, Y+16	; 0x10
    292e:	80 81       	ld	r24, Z
    2930:	0e 94 5f 14 	call	0x28be	; 0x28be <UART_void_Send_Char>
		Copy_U8_Str++;
    2934:	8f 85       	ldd	r24, Y+15	; 0x0f
    2936:	98 89       	ldd	r25, Y+16	; 0x10
    2938:	01 96       	adiw	r24, 0x01	; 1
    293a:	98 8b       	std	Y+16, r25	; 0x10
    293c:	8f 87       	std	Y+15, r24	; 0x0f
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	a0 ea       	ldi	r26, 0xA0	; 160
    2944:	b1 e4       	ldi	r27, 0x41	; 65
    2946:	8b 87       	std	Y+11, r24	; 0x0b
    2948:	9c 87       	std	Y+12, r25	; 0x0c
    294a:	ad 87       	std	Y+13, r26	; 0x0d
    294c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2950:	7c 85       	ldd	r23, Y+12	; 0x0c
    2952:	8d 85       	ldd	r24, Y+13	; 0x0d
    2954:	9e 85       	ldd	r25, Y+14	; 0x0e
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	4a ef       	ldi	r20, 0xFA	; 250
    295c:	54 e4       	ldi	r21, 0x44	; 68
    295e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	8f 83       	std	Y+7, r24	; 0x07
    2968:	98 87       	std	Y+8, r25	; 0x08
    296a:	a9 87       	std	Y+9, r26	; 0x09
    296c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    296e:	6f 81       	ldd	r22, Y+7	; 0x07
    2970:	78 85       	ldd	r23, Y+8	; 0x08
    2972:	89 85       	ldd	r24, Y+9	; 0x09
    2974:	9a 85       	ldd	r25, Y+10	; 0x0a
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e8       	ldi	r20, 0x80	; 128
    297c:	5f e3       	ldi	r21, 0x3F	; 63
    297e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2982:	88 23       	and	r24, r24
    2984:	2c f4       	brge	.+10     	; 0x2990 <UART_void_Send_String+0x80>
		__ticks = 1;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	9e 83       	std	Y+6, r25	; 0x06
    298c:	8d 83       	std	Y+5, r24	; 0x05
    298e:	3f c0       	rjmp	.+126    	; 0x2a0e <UART_void_Send_String+0xfe>
	else if (__tmp > 65535)
    2990:	6f 81       	ldd	r22, Y+7	; 0x07
    2992:	78 85       	ldd	r23, Y+8	; 0x08
    2994:	89 85       	ldd	r24, Y+9	; 0x09
    2996:	9a 85       	ldd	r25, Y+10	; 0x0a
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	3f ef       	ldi	r19, 0xFF	; 255
    299c:	4f e7       	ldi	r20, 0x7F	; 127
    299e:	57 e4       	ldi	r21, 0x47	; 71
    29a0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29a4:	18 16       	cp	r1, r24
    29a6:	4c f5       	brge	.+82     	; 0x29fa <UART_void_Send_String+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e2       	ldi	r20, 0x20	; 32
    29b6:	51 e4       	ldi	r21, 0x41	; 65
    29b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	bc 01       	movw	r22, r24
    29c2:	cd 01       	movw	r24, r26
    29c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	9e 83       	std	Y+6, r25	; 0x06
    29ce:	8d 83       	std	Y+5, r24	; 0x05
    29d0:	0f c0       	rjmp	.+30     	; 0x29f0 <UART_void_Send_String+0xe0>
    29d2:	88 ec       	ldi	r24, 0xC8	; 200
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	9c 83       	std	Y+4, r25	; 0x04
    29d8:	8b 83       	std	Y+3, r24	; 0x03
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	9c 81       	ldd	r25, Y+4	; 0x04
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	f1 f7       	brne	.-4      	; 0x29de <UART_void_Send_String+0xce>
    29e2:	9c 83       	std	Y+4, r25	; 0x04
    29e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e6:	8d 81       	ldd	r24, Y+5	; 0x05
    29e8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	9e 83       	std	Y+6, r25	; 0x06
    29ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f0:	8d 81       	ldd	r24, Y+5	; 0x05
    29f2:	9e 81       	ldd	r25, Y+6	; 0x06
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	69 f7       	brne	.-38     	; 0x29d2 <UART_void_Send_String+0xc2>
    29f8:	14 c0       	rjmp	.+40     	; 0x2a22 <UART_void_Send_String+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fa:	6f 81       	ldd	r22, Y+7	; 0x07
    29fc:	78 85       	ldd	r23, Y+8	; 0x08
    29fe:	89 85       	ldd	r24, Y+9	; 0x09
    2a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	9e 83       	std	Y+6, r25	; 0x06
    2a0c:	8d 83       	std	Y+5, r24	; 0x05
    2a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a10:	9e 81       	ldd	r25, Y+6	; 0x06
    2a12:	9a 83       	std	Y+2, r25	; 0x02
    2a14:	89 83       	std	Y+1, r24	; 0x01
    2a16:	89 81       	ldd	r24, Y+1	; 0x01
    2a18:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <UART_void_Send_String+0x10a>
    2a1e:	9a 83       	std	Y+2, r25	; 0x02
    2a20:	89 83       	std	Y+1, r24	; 0x01
	return UART_U8_UDR ;
}

void UART_void_Send_String(u8 *Copy_U8_Str)
{
	while(*Copy_U8_Str != '\0')
    2a22:	ef 85       	ldd	r30, Y+15	; 0x0f
    2a24:	f8 89       	ldd	r31, Y+16	; 0x10
    2a26:	80 81       	ld	r24, Z
    2a28:	88 23       	and	r24, r24
    2a2a:	09 f0       	breq	.+2      	; 0x2a2e <UART_void_Send_String+0x11e>
    2a2c:	7e cf       	rjmp	.-260    	; 0x292a <UART_void_Send_String+0x1a>
	{
		UART_void_Send_Char(*Copy_U8_Str);
		Copy_U8_Str++;
		_delay_ms(20);
	}
}
    2a2e:	60 96       	adiw	r28, 0x10	; 16
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	08 95       	ret

00002a40 <UART_void_Receive_String>:
void UART_void_Receive_String(u8 *Copy_U8_arr)
{
    2a40:	0f 93       	push	r16
    2a42:	1f 93       	push	r17
    2a44:	df 93       	push	r29
    2a46:	cf 93       	push	r28
    2a48:	00 d0       	rcall	.+0      	; 0x2a4a <UART_void_Receive_String+0xa>
    2a4a:	0f 92       	push	r0
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	9b 83       	std	Y+3, r25	; 0x03
    2a52:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    2a54:	19 82       	std	Y+1, r1	; 0x01
	// use do while
	Copy_U8_arr[i] = UART_U8_Receive_Char();
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	28 2f       	mov	r18, r24
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a60:	8c 01       	movw	r16, r24
    2a62:	02 0f       	add	r16, r18
    2a64:	13 1f       	adc	r17, r19
    2a66:	0e 94 79 14 	call	0x28f2	; 0x28f2 <UART_U8_Receive_Char>
    2a6a:	f8 01       	movw	r30, r16
    2a6c:	80 83       	st	Z, r24
    2a6e:	0f c0       	rjmp	.+30     	; 0x2a8e <UART_void_Receive_String+0x4e>
	while(Copy_U8_arr[i]!='\0')
	{
	i++;
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	8f 5f       	subi	r24, 0xFF	; 255
    2a74:	89 83       	std	Y+1, r24	; 0x01
	Copy_U8_arr[i] = UART_U8_Receive_Char();
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	28 2f       	mov	r18, r24
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a80:	8c 01       	movw	r16, r24
    2a82:	02 0f       	add	r16, r18
    2a84:	13 1f       	adc	r17, r19
    2a86:	0e 94 79 14 	call	0x28f2	; 0x28f2 <UART_U8_Receive_Char>
    2a8a:	f8 01       	movw	r30, r16
    2a8c:	80 83       	st	Z, r24
void UART_void_Receive_String(u8 *Copy_U8_arr)
{
	u8 i=0;
	// use do while
	Copy_U8_arr[i] = UART_U8_Receive_Char();
	while(Copy_U8_arr[i]!='\0')
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	28 2f       	mov	r18, r24
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	9b 81       	ldd	r25, Y+3	; 0x03
    2a98:	fc 01       	movw	r30, r24
    2a9a:	e2 0f       	add	r30, r18
    2a9c:	f3 1f       	adc	r31, r19
    2a9e:	80 81       	ld	r24, Z
    2aa0:	88 23       	and	r24, r24
    2aa2:	31 f7       	brne	.-52     	; 0x2a70 <UART_void_Receive_String+0x30>
	{
	i++;
	Copy_U8_arr[i] = UART_U8_Receive_Char();
	}
}
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	1f 91       	pop	r17
    2ab0:	0f 91       	pop	r16
    2ab2:	08 95       	ret

00002ab4 <main>:
 *      Author: Administrator
 */

#include"APP.h"
void main(void)
{
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
	APP_voidInit();
    2abc:	0e 94 47 06 	call	0xc8e	; 0xc8e <APP_voidInit>
	APP_voidWelcomeScreen();
    2ac0:	0e 94 56 06 	call	0xcac	; 0xcac <APP_voidWelcomeScreen>
    2ac4:	ff cf       	rjmp	.-2      	; 0x2ac4 <main+0x10>

00002ac6 <__udivmodsi4>:
    2ac6:	a1 e2       	ldi	r26, 0x21	; 33
    2ac8:	1a 2e       	mov	r1, r26
    2aca:	aa 1b       	sub	r26, r26
    2acc:	bb 1b       	sub	r27, r27
    2ace:	fd 01       	movw	r30, r26
    2ad0:	0d c0       	rjmp	.+26     	; 0x2aec <__udivmodsi4_ep>

00002ad2 <__udivmodsi4_loop>:
    2ad2:	aa 1f       	adc	r26, r26
    2ad4:	bb 1f       	adc	r27, r27
    2ad6:	ee 1f       	adc	r30, r30
    2ad8:	ff 1f       	adc	r31, r31
    2ada:	a2 17       	cp	r26, r18
    2adc:	b3 07       	cpc	r27, r19
    2ade:	e4 07       	cpc	r30, r20
    2ae0:	f5 07       	cpc	r31, r21
    2ae2:	20 f0       	brcs	.+8      	; 0x2aec <__udivmodsi4_ep>
    2ae4:	a2 1b       	sub	r26, r18
    2ae6:	b3 0b       	sbc	r27, r19
    2ae8:	e4 0b       	sbc	r30, r20
    2aea:	f5 0b       	sbc	r31, r21

00002aec <__udivmodsi4_ep>:
    2aec:	66 1f       	adc	r22, r22
    2aee:	77 1f       	adc	r23, r23
    2af0:	88 1f       	adc	r24, r24
    2af2:	99 1f       	adc	r25, r25
    2af4:	1a 94       	dec	r1
    2af6:	69 f7       	brne	.-38     	; 0x2ad2 <__udivmodsi4_loop>
    2af8:	60 95       	com	r22
    2afa:	70 95       	com	r23
    2afc:	80 95       	com	r24
    2afe:	90 95       	com	r25
    2b00:	9b 01       	movw	r18, r22
    2b02:	ac 01       	movw	r20, r24
    2b04:	bd 01       	movw	r22, r26
    2b06:	cf 01       	movw	r24, r30
    2b08:	08 95       	ret

00002b0a <__prologue_saves__>:
    2b0a:	2f 92       	push	r2
    2b0c:	3f 92       	push	r3
    2b0e:	4f 92       	push	r4
    2b10:	5f 92       	push	r5
    2b12:	6f 92       	push	r6
    2b14:	7f 92       	push	r7
    2b16:	8f 92       	push	r8
    2b18:	9f 92       	push	r9
    2b1a:	af 92       	push	r10
    2b1c:	bf 92       	push	r11
    2b1e:	cf 92       	push	r12
    2b20:	df 92       	push	r13
    2b22:	ef 92       	push	r14
    2b24:	ff 92       	push	r15
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	cf 93       	push	r28
    2b2c:	df 93       	push	r29
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	ca 1b       	sub	r28, r26
    2b34:	db 0b       	sbc	r29, r27
    2b36:	0f b6       	in	r0, 0x3f	; 63
    2b38:	f8 94       	cli
    2b3a:	de bf       	out	0x3e, r29	; 62
    2b3c:	0f be       	out	0x3f, r0	; 63
    2b3e:	cd bf       	out	0x3d, r28	; 61
    2b40:	09 94       	ijmp

00002b42 <__epilogue_restores__>:
    2b42:	2a 88       	ldd	r2, Y+18	; 0x12
    2b44:	39 88       	ldd	r3, Y+17	; 0x11
    2b46:	48 88       	ldd	r4, Y+16	; 0x10
    2b48:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b50:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b52:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b54:	b9 84       	ldd	r11, Y+9	; 0x09
    2b56:	c8 84       	ldd	r12, Y+8	; 0x08
    2b58:	df 80       	ldd	r13, Y+7	; 0x07
    2b5a:	ee 80       	ldd	r14, Y+6	; 0x06
    2b5c:	fd 80       	ldd	r15, Y+5	; 0x05
    2b5e:	0c 81       	ldd	r16, Y+4	; 0x04
    2b60:	1b 81       	ldd	r17, Y+3	; 0x03
    2b62:	aa 81       	ldd	r26, Y+2	; 0x02
    2b64:	b9 81       	ldd	r27, Y+1	; 0x01
    2b66:	ce 0f       	add	r28, r30
    2b68:	d1 1d       	adc	r29, r1
    2b6a:	0f b6       	in	r0, 0x3f	; 63
    2b6c:	f8 94       	cli
    2b6e:	de bf       	out	0x3e, r29	; 62
    2b70:	0f be       	out	0x3f, r0	; 63
    2b72:	cd bf       	out	0x3d, r28	; 61
    2b74:	ed 01       	movw	r28, r26
    2b76:	08 95       	ret

00002b78 <itoa>:
    2b78:	fb 01       	movw	r30, r22
    2b7a:	9f 01       	movw	r18, r30
    2b7c:	e8 94       	clt
    2b7e:	42 30       	cpi	r20, 0x02	; 2
    2b80:	c4 f0       	brlt	.+48     	; 0x2bb2 <itoa+0x3a>
    2b82:	45 32       	cpi	r20, 0x25	; 37
    2b84:	b4 f4       	brge	.+44     	; 0x2bb2 <itoa+0x3a>
    2b86:	4a 30       	cpi	r20, 0x0A	; 10
    2b88:	29 f4       	brne	.+10     	; 0x2b94 <itoa+0x1c>
    2b8a:	97 fb       	bst	r25, 7
    2b8c:	1e f4       	brtc	.+6      	; 0x2b94 <itoa+0x1c>
    2b8e:	90 95       	com	r25
    2b90:	81 95       	neg	r24
    2b92:	9f 4f       	sbci	r25, 0xFF	; 255
    2b94:	64 2f       	mov	r22, r20
    2b96:	77 27       	eor	r23, r23
    2b98:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__udivmodhi4>
    2b9c:	80 5d       	subi	r24, 0xD0	; 208
    2b9e:	8a 33       	cpi	r24, 0x3A	; 58
    2ba0:	0c f0       	brlt	.+2      	; 0x2ba4 <itoa+0x2c>
    2ba2:	89 5d       	subi	r24, 0xD9	; 217
    2ba4:	81 93       	st	Z+, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	00 97       	sbiw	r24, 0x00	; 0
    2baa:	a1 f7       	brne	.-24     	; 0x2b94 <itoa+0x1c>
    2bac:	16 f4       	brtc	.+4      	; 0x2bb2 <itoa+0x3a>
    2bae:	5d e2       	ldi	r21, 0x2D	; 45
    2bb0:	51 93       	st	Z+, r21
    2bb2:	10 82       	st	Z, r1
    2bb4:	c9 01       	movw	r24, r18
    2bb6:	0c 94 dd 15 	jmp	0x2bba	; 0x2bba <strrev>

00002bba <strrev>:
    2bba:	dc 01       	movw	r26, r24
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	67 2f       	mov	r22, r23
    2bc0:	71 91       	ld	r23, Z+
    2bc2:	77 23       	and	r23, r23
    2bc4:	e1 f7       	brne	.-8      	; 0x2bbe <strrev+0x4>
    2bc6:	32 97       	sbiw	r30, 0x02	; 2
    2bc8:	04 c0       	rjmp	.+8      	; 0x2bd2 <strrev+0x18>
    2bca:	7c 91       	ld	r23, X
    2bcc:	6d 93       	st	X+, r22
    2bce:	70 83       	st	Z, r23
    2bd0:	62 91       	ld	r22, -Z
    2bd2:	ae 17       	cp	r26, r30
    2bd4:	bf 07       	cpc	r27, r31
    2bd6:	c8 f3       	brcs	.-14     	; 0x2bca <strrev+0x10>
    2bd8:	08 95       	ret

00002bda <__udivmodhi4>:
    2bda:	aa 1b       	sub	r26, r26
    2bdc:	bb 1b       	sub	r27, r27
    2bde:	51 e1       	ldi	r21, 0x11	; 17
    2be0:	07 c0       	rjmp	.+14     	; 0x2bf0 <__udivmodhi4_ep>

00002be2 <__udivmodhi4_loop>:
    2be2:	aa 1f       	adc	r26, r26
    2be4:	bb 1f       	adc	r27, r27
    2be6:	a6 17       	cp	r26, r22
    2be8:	b7 07       	cpc	r27, r23
    2bea:	10 f0       	brcs	.+4      	; 0x2bf0 <__udivmodhi4_ep>
    2bec:	a6 1b       	sub	r26, r22
    2bee:	b7 0b       	sbc	r27, r23

00002bf0 <__udivmodhi4_ep>:
    2bf0:	88 1f       	adc	r24, r24
    2bf2:	99 1f       	adc	r25, r25
    2bf4:	5a 95       	dec	r21
    2bf6:	a9 f7       	brne	.-22     	; 0x2be2 <__udivmodhi4_loop>
    2bf8:	80 95       	com	r24
    2bfa:	90 95       	com	r25
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	08 95       	ret

00002c02 <_exit>:
    2c02:	f8 94       	cli

00002c04 <__stop_program>:
    2c04:	ff cf       	rjmp	.-2      	; 0x2c04 <__stop_program>
