
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000f6c  00001000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800068  00800068  00001008  2**0
                  ALLOC
  3 .stab         000014e8  00000000  00000000  00001008  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c33  00000000  00000000  000024f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__vector_1>
   8:	0c 94 86 04 	jmp	0x90c	; 0x90c <__vector_2>
   c:	0c 94 b3 04 	jmp	0x966	; 0x966 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__vector_10>
  2c:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 38       	cpi	r26, 0x81	; 129
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ab 07 	call	0xf56	; 0xf56 <main>
  8a:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <INTIAL_DIR>:
/*****************************************************************************/
/***********************************fucntion**********************************/
/********************************************************************************/

u8 INTIAL_DIR(u8 p0 , u8 p1 , u8 p2 , u8 p3 , u8 p4 , u8 p5 , u8 p6 , u8 p7)
{
  92:	af 92       	push	r10
  94:	cf 92       	push	r12
  96:	ef 92       	push	r14
  98:	0f 93       	push	r16
  9a:	df 93       	push	r29
  9c:	cf 93       	push	r28
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	29 97       	sbiw	r28, 0x09	; 9
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	cd bf       	out	0x3d, r28	; 61
  ae:	8a 83       	std	Y+2, r24	; 0x02
  b0:	6b 83       	std	Y+3, r22	; 0x03
  b2:	4c 83       	std	Y+4, r20	; 0x04
  b4:	2d 83       	std	Y+5, r18	; 0x05
  b6:	0e 83       	std	Y+6, r16	; 0x06
  b8:	ef 82       	std	Y+7, r14	; 0x07
  ba:	c8 86       	std	Y+8, r12	; 0x08
  bc:	a9 86       	std	Y+9, r10	; 0x09
	u8 port = 0x00 ;
  be:	19 82       	std	Y+1, r1	; 0x01
	Assign_Bit(port,DIO_U8_PIN0,p0);
  c0:	8a 81       	ldd	r24, Y+2	; 0x02
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	21 f4       	brne	.+8      	; 0xce <INTIAL_DIR+0x3c>
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	03 c0       	rjmp	.+6      	; 0xd4 <INTIAL_DIR+0x42>
  ce:	89 81       	ldd	r24, Y+1	; 0x01
  d0:	8e 7f       	andi	r24, 0xFE	; 254
  d2:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN1,p1);
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	21 f4       	brne	.+8      	; 0xe2 <INTIAL_DIR+0x50>
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	89 83       	std	Y+1, r24	; 0x01
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <INTIAL_DIR+0x56>
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	8d 7f       	andi	r24, 0xFD	; 253
  e6:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN2,p2);
  e8:	8c 81       	ldd	r24, Y+4	; 0x04
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	21 f4       	brne	.+8      	; 0xf6 <INTIAL_DIR+0x64>
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	89 83       	std	Y+1, r24	; 0x01
  f4:	03 c0       	rjmp	.+6      	; 0xfc <INTIAL_DIR+0x6a>
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	8b 7f       	andi	r24, 0xFB	; 251
  fa:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN3,p3);
  fc:	8d 81       	ldd	r24, Y+5	; 0x05
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	21 f4       	brne	.+8      	; 0x10a <INTIAL_DIR+0x78>
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	88 60       	ori	r24, 0x08	; 8
 106:	89 83       	std	Y+1, r24	; 0x01
 108:	03 c0       	rjmp	.+6      	; 0x110 <INTIAL_DIR+0x7e>
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	87 7f       	andi	r24, 0xF7	; 247
 10e:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN4,p4);
 110:	8e 81       	ldd	r24, Y+6	; 0x06
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	21 f4       	brne	.+8      	; 0x11e <INTIAL_DIR+0x8c>
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	80 61       	ori	r24, 0x10	; 16
 11a:	89 83       	std	Y+1, r24	; 0x01
 11c:	03 c0       	rjmp	.+6      	; 0x124 <INTIAL_DIR+0x92>
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	8f 7e       	andi	r24, 0xEF	; 239
 122:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN5,p5);
 124:	8f 81       	ldd	r24, Y+7	; 0x07
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	21 f4       	brne	.+8      	; 0x132 <INTIAL_DIR+0xa0>
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	89 83       	std	Y+1, r24	; 0x01
 130:	03 c0       	rjmp	.+6      	; 0x138 <INTIAL_DIR+0xa6>
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	8f 7d       	andi	r24, 0xDF	; 223
 136:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN6,p6);
 138:	88 85       	ldd	r24, Y+8	; 0x08
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	21 f4       	brne	.+8      	; 0x146 <INTIAL_DIR+0xb4>
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	80 64       	ori	r24, 0x40	; 64
 142:	89 83       	std	Y+1, r24	; 0x01
 144:	03 c0       	rjmp	.+6      	; 0x14c <INTIAL_DIR+0xba>
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	8f 7b       	andi	r24, 0xBF	; 191
 14a:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN7,p7);
 14c:	89 85       	ldd	r24, Y+9	; 0x09
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	21 f4       	brne	.+8      	; 0x15a <INTIAL_DIR+0xc8>
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	80 68       	ori	r24, 0x80	; 128
 156:	89 83       	std	Y+1, r24	; 0x01
 158:	03 c0       	rjmp	.+6      	; 0x160 <INTIAL_DIR+0xce>
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	8f 77       	andi	r24, 0x7F	; 127
 15e:	89 83       	std	Y+1, r24	; 0x01
	return port;
 160:	89 81       	ldd	r24, Y+1	; 0x01

}
 162:	29 96       	adiw	r28, 0x09	; 9
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	f8 94       	cli
 168:	de bf       	out	0x3e, r29	; 62
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	cd bf       	out	0x3d, r28	; 61
 16e:	cf 91       	pop	r28
 170:	df 91       	pop	r29
 172:	0f 91       	pop	r16
 174:	ef 90       	pop	r14
 176:	cf 90       	pop	r12
 178:	af 90       	pop	r10
 17a:	08 95       	ret

0000017c <DIO_void_Init>:


void DIO_void_Init(void)
{
 17c:	8f 92       	push	r8
 17e:	9f 92       	push	r9
 180:	af 92       	push	r10
 182:	cf 92       	push	r12
 184:	ef 92       	push	r14
 186:	0f 93       	push	r16
 188:	df 93       	push	r29
 18a:	cf 93       	push	r28
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
	/*direction*/
	DIO_U8_DDRA =INTIAL_DIR(DIO_u8_PA0_INTIAL_DIR,DIO_u8_PA1_INTIAL_DIR,DIO_u8_PA2_INTIAL_DIR,DIO_u8_PA3_INTIAL_DIR,DIO_u8_PA4_INTIAL_DIR,DIO_u8_PA5_INTIAL_DIR,DIO_u8_PA6_INTIAL_DIR,DIO_u8_PA7_INTIAL_DIR);
 190:	0f 2e       	mov	r0, r31
 192:	fa e3       	ldi	r31, 0x3A	; 58
 194:	8f 2e       	mov	r8, r31
 196:	99 24       	eor	r9, r9
 198:	f0 2d       	mov	r31, r0
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	00 e0       	ldi	r16, 0x00	; 0
 1a4:	ee 24       	eor	r14, r14
 1a6:	cc 24       	eor	r12, r12
 1a8:	aa 24       	eor	r10, r10
 1aa:	0e 94 49 00 	call	0x92	; 0x92 <INTIAL_DIR>
 1ae:	f4 01       	movw	r30, r8
 1b0:	80 83       	st	Z, r24
	DIO_U8_DDRB =INTIAL_DIR(DIO_u8_PB0_INTIAL_DIR,DIO_u8_PB1_INTIAL_DIR,DIO_u8_PB2_INTIAL_DIR,DIO_u8_PB3_INTIAL_DIR,DIO_u8_PB4_INTIAL_DIR,DIO_u8_PB5_INTIAL_DIR,DIO_u8_PB6_INTIAL_DIR,DIO_u8_PB7_INTIAL_DIR);
 1b2:	0f 2e       	mov	r0, r31
 1b4:	f7 e3       	ldi	r31, 0x37	; 55
 1b6:	8f 2e       	mov	r8, r31
 1b8:	99 24       	eor	r9, r9
 1ba:	f0 2d       	mov	r31, r0
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	00 e0       	ldi	r16, 0x00	; 0
 1c6:	ee 24       	eor	r14, r14
 1c8:	cc 24       	eor	r12, r12
 1ca:	aa 24       	eor	r10, r10
 1cc:	0e 94 49 00 	call	0x92	; 0x92 <INTIAL_DIR>
 1d0:	f4 01       	movw	r30, r8
 1d2:	80 83       	st	Z, r24
	DIO_U8_DDRC =INTIAL_DIR(DIO_u8_PC0_INTIAL_DIR,DIO_u8_PC1_INTIAL_DIR,DIO_u8_PC2_INTIAL_DIR,DIO_u8_PC3_INTIAL_DIR,DIO_u8_PC4_INTIAL_DIR,DIO_u8_PC5_INTIAL_DIR,DIO_u8_PC6_INTIAL_DIR,DIO_u8_PC7_INTIAL_DIR);
 1d4:	0f 2e       	mov	r0, r31
 1d6:	f4 e3       	ldi	r31, 0x34	; 52
 1d8:	8f 2e       	mov	r8, r31
 1da:	99 24       	eor	r9, r9
 1dc:	f0 2d       	mov	r31, r0
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	00 e0       	ldi	r16, 0x00	; 0
 1e8:	ee 24       	eor	r14, r14
 1ea:	cc 24       	eor	r12, r12
 1ec:	aa 24       	eor	r10, r10
 1ee:	0e 94 49 00 	call	0x92	; 0x92 <INTIAL_DIR>
 1f2:	f4 01       	movw	r30, r8
 1f4:	80 83       	st	Z, r24
	DIO_U8_DDRD =INTIAL_DIR(DIO_u8_PD0_INTIAL_DIR,DIO_u8_PD1_INTIAL_DIR,DIO_u8_PD2_INTIAL_DIR,DIO_u8_PD3_INTIAL_DIR,DIO_u8_PD4_INTIAL_DIR,DIO_u8_PD5_INTIAL_DIR,DIO_u8_PD6_INTIAL_DIR,DIO_u8_PD7_INTIAL_DIR);
 1f6:	0f 2e       	mov	r0, r31
 1f8:	f1 e3       	ldi	r31, 0x31	; 49
 1fa:	8f 2e       	mov	r8, r31
 1fc:	99 24       	eor	r9, r9
 1fe:	f0 2d       	mov	r31, r0
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	ee 24       	eor	r14, r14
 20c:	cc 24       	eor	r12, r12
 20e:	aa 24       	eor	r10, r10
 210:	0e 94 49 00 	call	0x92	; 0x92 <INTIAL_DIR>
 214:	f4 01       	movw	r30, r8
 216:	80 83       	st	Z, r24
}
 218:	cf 91       	pop	r28
 21a:	df 91       	pop	r29
 21c:	0f 91       	pop	r16
 21e:	ef 90       	pop	r14
 220:	cf 90       	pop	r12
 222:	af 90       	pop	r10
 224:	9f 90       	pop	r9
 226:	8f 90       	pop	r8
 228:	08 95       	ret

0000022a <DIO_U8_Set_Pin_Dir>:

u8 DIO_U8_Set_Pin_Dir(u8 Copy_U8_Port_ID , u8 Copy_U8_Pin_ID , u8 Copy_U8_Pin_Dir)
{
 22a:	df 93       	push	r29
 22c:	cf 93       	push	r28
 22e:	00 d0       	rcall	.+0      	; 0x230 <DIO_U8_Set_Pin_Dir+0x6>
 230:	00 d0       	rcall	.+0      	; 0x232 <DIO_U8_Set_Pin_Dir+0x8>
 232:	00 d0       	rcall	.+0      	; 0x234 <DIO_U8_Set_Pin_Dir+0xa>
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	89 83       	std	Y+1, r24	; 0x01
 23a:	6a 83       	std	Y+2, r22	; 0x02
 23c:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	84 30       	cpi	r24, 0x04	; 4
 242:	08 f0       	brcs	.+2      	; 0x246 <DIO_U8_Set_Pin_Dir+0x1c>
 244:	e4 c0       	rjmp	.+456    	; 0x40e <DIO_U8_Set_Pin_Dir+0x1e4>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
 246:	8a 81       	ldd	r24, Y+2	; 0x02
 248:	88 30       	cpi	r24, 0x08	; 8
 24a:	08 f0       	brcs	.+2      	; 0x24e <DIO_U8_Set_Pin_Dir+0x24>
 24c:	dd c0       	rjmp	.+442    	; 0x408 <DIO_U8_Set_Pin_Dir+0x1de>
		{
			if((Copy_U8_Pin_Dir==PIN_INPUT)||(Copy_U8_Pin_Dir==PIN_OUTPUT))
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	88 23       	and	r24, r24
 252:	21 f0       	breq	.+8      	; 0x25c <DIO_U8_Set_Pin_Dir+0x32>
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	09 f0       	breq	.+2      	; 0x25c <DIO_U8_Set_Pin_Dir+0x32>
 25a:	d4 c0       	rjmp	.+424    	; 0x404 <DIO_U8_Set_Pin_Dir+0x1da>
			{
				switch(Copy_U8_Port_ID)
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	28 2f       	mov	r18, r24
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	3e 83       	std	Y+6, r19	; 0x06
 264:	2d 83       	std	Y+5, r18	; 0x05
 266:	8d 81       	ldd	r24, Y+5	; 0x05
 268:	9e 81       	ldd	r25, Y+6	; 0x06
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	91 05       	cpc	r25, r1
 26e:	09 f4       	brne	.+2      	; 0x272 <DIO_U8_Set_Pin_Dir+0x48>
 270:	43 c0       	rjmp	.+134    	; 0x2f8 <DIO_U8_Set_Pin_Dir+0xce>
 272:	2d 81       	ldd	r18, Y+5	; 0x05
 274:	3e 81       	ldd	r19, Y+6	; 0x06
 276:	22 30       	cpi	r18, 0x02	; 2
 278:	31 05       	cpc	r19, r1
 27a:	2c f4       	brge	.+10     	; 0x286 <DIO_U8_Set_Pin_Dir+0x5c>
 27c:	8d 81       	ldd	r24, Y+5	; 0x05
 27e:	9e 81       	ldd	r25, Y+6	; 0x06
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	71 f0       	breq	.+28     	; 0x2a0 <DIO_U8_Set_Pin_Dir+0x76>
 284:	bc c0       	rjmp	.+376    	; 0x3fe <DIO_U8_Set_Pin_Dir+0x1d4>
 286:	2d 81       	ldd	r18, Y+5	; 0x05
 288:	3e 81       	ldd	r19, Y+6	; 0x06
 28a:	22 30       	cpi	r18, 0x02	; 2
 28c:	31 05       	cpc	r19, r1
 28e:	09 f4       	brne	.+2      	; 0x292 <DIO_U8_Set_Pin_Dir+0x68>
 290:	5f c0       	rjmp	.+190    	; 0x350 <DIO_U8_Set_Pin_Dir+0x126>
 292:	8d 81       	ldd	r24, Y+5	; 0x05
 294:	9e 81       	ldd	r25, Y+6	; 0x06
 296:	83 30       	cpi	r24, 0x03	; 3
 298:	91 05       	cpc	r25, r1
 29a:	09 f4       	brne	.+2      	; 0x29e <DIO_U8_Set_Pin_Dir+0x74>
 29c:	85 c0       	rjmp	.+266    	; 0x3a8 <DIO_U8_Set_Pin_Dir+0x17e>
 29e:	af c0       	rjmp	.+350    	; 0x3fe <DIO_U8_Set_Pin_Dir+0x1d4>
				{
				case PORTA_ID:
					Assign_Bit(DIO_U8_DDRA,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
 2a0:	8b 81       	ldd	r24, Y+3	; 0x03
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	a1 f4       	brne	.+40     	; 0x2ce <DIO_U8_Set_Pin_Dir+0xa4>
 2a6:	aa e3       	ldi	r26, 0x3A	; 58
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	ea e3       	ldi	r30, 0x3A	; 58
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	48 2f       	mov	r20, r24
 2b2:	8a 81       	ldd	r24, Y+2	; 0x02
 2b4:	28 2f       	mov	r18, r24
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 2e       	mov	r0, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_U8_Set_Pin_Dir+0x9a>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_U8_Set_Pin_Dir+0x96>
 2c8:	84 2b       	or	r24, r20
 2ca:	8c 93       	st	X, r24
 2cc:	98 c0       	rjmp	.+304    	; 0x3fe <DIO_U8_Set_Pin_Dir+0x1d4>
 2ce:	aa e3       	ldi	r26, 0x3A	; 58
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	ea e3       	ldi	r30, 0x3A	; 58
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	48 2f       	mov	r20, r24
 2da:	8a 81       	ldd	r24, Y+2	; 0x02
 2dc:	28 2f       	mov	r18, r24
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 2e       	mov	r0, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_U8_Set_Pin_Dir+0xc2>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_U8_Set_Pin_Dir+0xbe>
 2f0:	80 95       	com	r24
 2f2:	84 23       	and	r24, r20
 2f4:	8c 93       	st	X, r24
 2f6:	83 c0       	rjmp	.+262    	; 0x3fe <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTB_ID:
					Assign_Bit(DIO_U8_DDRB,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
 2f8:	8b 81       	ldd	r24, Y+3	; 0x03
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	a1 f4       	brne	.+40     	; 0x326 <DIO_U8_Set_Pin_Dir+0xfc>
 2fe:	a7 e3       	ldi	r26, 0x37	; 55
 300:	b0 e0       	ldi	r27, 0x00	; 0
 302:	e7 e3       	ldi	r30, 0x37	; 55
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	48 2f       	mov	r20, r24
 30a:	8a 81       	ldd	r24, Y+2	; 0x02
 30c:	28 2f       	mov	r18, r24
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 2e       	mov	r0, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_U8_Set_Pin_Dir+0xf2>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_U8_Set_Pin_Dir+0xee>
 320:	84 2b       	or	r24, r20
 322:	8c 93       	st	X, r24
 324:	6c c0       	rjmp	.+216    	; 0x3fe <DIO_U8_Set_Pin_Dir+0x1d4>
 326:	a7 e3       	ldi	r26, 0x37	; 55
 328:	b0 e0       	ldi	r27, 0x00	; 0
 32a:	e7 e3       	ldi	r30, 0x37	; 55
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	48 2f       	mov	r20, r24
 332:	8a 81       	ldd	r24, Y+2	; 0x02
 334:	28 2f       	mov	r18, r24
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 2e       	mov	r0, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_U8_Set_Pin_Dir+0x11a>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	0a 94       	dec	r0
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_U8_Set_Pin_Dir+0x116>
 348:	80 95       	com	r24
 34a:	84 23       	and	r24, r20
 34c:	8c 93       	st	X, r24
 34e:	57 c0       	rjmp	.+174    	; 0x3fe <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTC_ID:
					Assign_Bit(DIO_U8_DDRC,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
 350:	8b 81       	ldd	r24, Y+3	; 0x03
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	a1 f4       	brne	.+40     	; 0x37e <DIO_U8_Set_Pin_Dir+0x154>
 356:	a4 e3       	ldi	r26, 0x34	; 52
 358:	b0 e0       	ldi	r27, 0x00	; 0
 35a:	e4 e3       	ldi	r30, 0x34	; 52
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	48 2f       	mov	r20, r24
 362:	8a 81       	ldd	r24, Y+2	; 0x02
 364:	28 2f       	mov	r18, r24
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 2e       	mov	r0, r18
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_U8_Set_Pin_Dir+0x14a>
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	0a 94       	dec	r0
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_U8_Set_Pin_Dir+0x146>
 378:	84 2b       	or	r24, r20
 37a:	8c 93       	st	X, r24
 37c:	40 c0       	rjmp	.+128    	; 0x3fe <DIO_U8_Set_Pin_Dir+0x1d4>
 37e:	a4 e3       	ldi	r26, 0x34	; 52
 380:	b0 e0       	ldi	r27, 0x00	; 0
 382:	e4 e3       	ldi	r30, 0x34	; 52
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	48 2f       	mov	r20, r24
 38a:	8a 81       	ldd	r24, Y+2	; 0x02
 38c:	28 2f       	mov	r18, r24
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 2e       	mov	r0, r18
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_U8_Set_Pin_Dir+0x172>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_U8_Set_Pin_Dir+0x16e>
 3a0:	80 95       	com	r24
 3a2:	84 23       	and	r24, r20
 3a4:	8c 93       	st	X, r24
 3a6:	2b c0       	rjmp	.+86     	; 0x3fe <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTD_ID:
					Assign_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
 3a8:	8b 81       	ldd	r24, Y+3	; 0x03
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	a1 f4       	brne	.+40     	; 0x3d6 <DIO_U8_Set_Pin_Dir+0x1ac>
 3ae:	a1 e3       	ldi	r26, 0x31	; 49
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	e1 e3       	ldi	r30, 0x31	; 49
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	48 2f       	mov	r20, r24
 3ba:	8a 81       	ldd	r24, Y+2	; 0x02
 3bc:	28 2f       	mov	r18, r24
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 2e       	mov	r0, r18
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_U8_Set_Pin_Dir+0x1a2>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	0a 94       	dec	r0
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_U8_Set_Pin_Dir+0x19e>
 3d0:	84 2b       	or	r24, r20
 3d2:	8c 93       	st	X, r24
 3d4:	14 c0       	rjmp	.+40     	; 0x3fe <DIO_U8_Set_Pin_Dir+0x1d4>
 3d6:	a1 e3       	ldi	r26, 0x31	; 49
 3d8:	b0 e0       	ldi	r27, 0x00	; 0
 3da:	e1 e3       	ldi	r30, 0x31	; 49
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	48 2f       	mov	r20, r24
 3e2:	8a 81       	ldd	r24, Y+2	; 0x02
 3e4:	28 2f       	mov	r18, r24
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 2e       	mov	r0, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_U8_Set_Pin_Dir+0x1ca>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	0a 94       	dec	r0
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_U8_Set_Pin_Dir+0x1c6>
 3f8:	80 95       	com	r24
 3fa:	84 23       	and	r24, r20
 3fc:	8c 93       	st	X, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
 3fe:	93 e0       	ldi	r25, 0x03	; 3
 400:	9c 83       	std	Y+4, r25	; 0x04
 402:	07 c0       	rjmp	.+14     	; 0x412 <DIO_U8_Set_Pin_Dir+0x1e8>

				}
			}
			else
			{
				return WRONG_PIN_DIR;
 404:	1c 82       	std	Y+4, r1	; 0x04
 406:	05 c0       	rjmp	.+10     	; 0x412 <DIO_U8_Set_Pin_Dir+0x1e8>
			}
		}
		else{
			return WRONG_PIN;
 408:	21 e0       	ldi	r18, 0x01	; 1
 40a:	2c 83       	std	Y+4, r18	; 0x04
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_U8_Set_Pin_Dir+0x1e8>


	}
	else
	{
		return WRONG_PORT;
 40e:	32 e0       	ldi	r19, 0x02	; 2
 410:	3c 83       	std	Y+4, r19	; 0x04
 412:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
 414:	26 96       	adiw	r28, 0x06	; 6
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	f8 94       	cli
 41a:	de bf       	out	0x3e, r29	; 62
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	cd bf       	out	0x3d, r28	; 61
 420:	cf 91       	pop	r28
 422:	df 91       	pop	r29
 424:	08 95       	ret

00000426 <DIO_U8_Set_Port_Dir>:




u8 DIO_U8_Set_Port_Dir(u8 Copy_U8_Port_ID  , u16 Copy_U8_PORT_Dir)
{
 426:	df 93       	push	r29
 428:	cf 93       	push	r28
 42a:	00 d0       	rcall	.+0      	; 0x42c <DIO_U8_Set_Port_Dir+0x6>
 42c:	00 d0       	rcall	.+0      	; 0x42e <DIO_U8_Set_Port_Dir+0x8>
 42e:	00 d0       	rcall	.+0      	; 0x430 <DIO_U8_Set_Port_Dir+0xa>
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
 434:	89 83       	std	Y+1, r24	; 0x01
 436:	7b 83       	std	Y+3, r23	; 0x03
 438:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
 43a:	89 81       	ldd	r24, Y+1	; 0x01
 43c:	84 30       	cpi	r24, 0x04	; 4
 43e:	08 f0       	brcs	.+2      	; 0x442 <DIO_U8_Set_Port_Dir+0x1c>
 440:	3d c0       	rjmp	.+122    	; 0x4bc <DIO_U8_Set_Port_Dir+0x96>
	{
		if((Copy_U8_PORT_Dir)>=MIN_DIR_OR_VALUE&&(Copy_U8_PORT_Dir)<=MAX_DIR_OR_VALUE)
 442:	8a 81       	ldd	r24, Y+2	; 0x02
 444:	9b 81       	ldd	r25, Y+3	; 0x03
 446:	8f 3f       	cpi	r24, 0xFF	; 255
 448:	91 05       	cpc	r25, r1
 44a:	09 f0       	breq	.+2      	; 0x44e <DIO_U8_Set_Port_Dir+0x28>
 44c:	a8 f5       	brcc	.+106    	; 0x4b8 <DIO_U8_Set_Port_Dir+0x92>
		{
				switch(Copy_U8_Port_ID)
 44e:	89 81       	ldd	r24, Y+1	; 0x01
 450:	28 2f       	mov	r18, r24
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	3e 83       	std	Y+6, r19	; 0x06
 456:	2d 83       	std	Y+5, r18	; 0x05
 458:	8d 81       	ldd	r24, Y+5	; 0x05
 45a:	9e 81       	ldd	r25, Y+6	; 0x06
 45c:	81 30       	cpi	r24, 0x01	; 1
 45e:	91 05       	cpc	r25, r1
 460:	d1 f0       	breq	.+52     	; 0x496 <DIO_U8_Set_Port_Dir+0x70>
 462:	2d 81       	ldd	r18, Y+5	; 0x05
 464:	3e 81       	ldd	r19, Y+6	; 0x06
 466:	22 30       	cpi	r18, 0x02	; 2
 468:	31 05       	cpc	r19, r1
 46a:	2c f4       	brge	.+10     	; 0x476 <DIO_U8_Set_Port_Dir+0x50>
 46c:	8d 81       	ldd	r24, Y+5	; 0x05
 46e:	9e 81       	ldd	r25, Y+6	; 0x06
 470:	00 97       	sbiw	r24, 0x00	; 0
 472:	61 f0       	breq	.+24     	; 0x48c <DIO_U8_Set_Port_Dir+0x66>
 474:	1e c0       	rjmp	.+60     	; 0x4b2 <DIO_U8_Set_Port_Dir+0x8c>
 476:	2d 81       	ldd	r18, Y+5	; 0x05
 478:	3e 81       	ldd	r19, Y+6	; 0x06
 47a:	22 30       	cpi	r18, 0x02	; 2
 47c:	31 05       	cpc	r19, r1
 47e:	81 f0       	breq	.+32     	; 0x4a0 <DIO_U8_Set_Port_Dir+0x7a>
 480:	8d 81       	ldd	r24, Y+5	; 0x05
 482:	9e 81       	ldd	r25, Y+6	; 0x06
 484:	83 30       	cpi	r24, 0x03	; 3
 486:	91 05       	cpc	r25, r1
 488:	81 f0       	breq	.+32     	; 0x4aa <DIO_U8_Set_Port_Dir+0x84>
 48a:	13 c0       	rjmp	.+38     	; 0x4b2 <DIO_U8_Set_Port_Dir+0x8c>
				{
				case PORTA_ID:
					DIO_U8_DDRA=Copy_U8_PORT_Dir;
 48c:	ea e3       	ldi	r30, 0x3A	; 58
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	8a 81       	ldd	r24, Y+2	; 0x02
 492:	80 83       	st	Z, r24
 494:	0e c0       	rjmp	.+28     	; 0x4b2 <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTB_ID:
					DIO_U8_DDRB=Copy_U8_PORT_Dir;
 496:	e7 e3       	ldi	r30, 0x37	; 55
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	8a 81       	ldd	r24, Y+2	; 0x02
 49c:	80 83       	st	Z, r24
 49e:	09 c0       	rjmp	.+18     	; 0x4b2 <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTC_ID:
					DIO_U8_DDRC=Copy_U8_PORT_Dir;
 4a0:	e4 e3       	ldi	r30, 0x34	; 52
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	8a 81       	ldd	r24, Y+2	; 0x02
 4a6:	80 83       	st	Z, r24
 4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTD_ID:
					DIO_U8_DDRD=Copy_U8_PORT_Dir;
 4aa:	e1 e3       	ldi	r30, 0x31	; 49
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	8a 81       	ldd	r24, Y+2	; 0x02
 4b0:	80 83       	st	Z, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
 4b2:	93 e0       	ldi	r25, 0x03	; 3
 4b4:	9c 83       	std	Y+4, r25	; 0x04
 4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <DIO_U8_Set_Port_Dir+0x9a>

				}
		}
		else
		{
			return WRONG_PORT_DIR;
 4b8:	1c 82       	std	Y+4, r1	; 0x04
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_U8_Set_Port_Dir+0x9a>
		}

	}
	else
	{
		return WRONG_PORT;
 4bc:	22 e0       	ldi	r18, 0x02	; 2
 4be:	2c 83       	std	Y+4, r18	; 0x04
 4c0:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
 4c2:	26 96       	adiw	r28, 0x06	; 6
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	de bf       	out	0x3e, r29	; 62
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	cd bf       	out	0x3d, r28	; 61
 4ce:	cf 91       	pop	r28
 4d0:	df 91       	pop	r29
 4d2:	08 95       	ret

000004d4 <DIO_U8_Set_Pin_value>:




u8 DIO_U8_Set_Pin_value(u8 Copy_U8_Port_ID , u8 Copy_U8_Pin_ID , u8 Copy_U8_Pin_value)
{
 4d4:	df 93       	push	r29
 4d6:	cf 93       	push	r28
 4d8:	00 d0       	rcall	.+0      	; 0x4da <DIO_U8_Set_Pin_value+0x6>
 4da:	00 d0       	rcall	.+0      	; 0x4dc <DIO_U8_Set_Pin_value+0x8>
 4dc:	00 d0       	rcall	.+0      	; 0x4de <DIO_U8_Set_Pin_value+0xa>
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62
 4e2:	89 83       	std	Y+1, r24	; 0x01
 4e4:	6a 83       	std	Y+2, r22	; 0x02
 4e6:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
 4e8:	89 81       	ldd	r24, Y+1	; 0x01
 4ea:	84 30       	cpi	r24, 0x04	; 4
 4ec:	08 f0       	brcs	.+2      	; 0x4f0 <DIO_U8_Set_Pin_value+0x1c>
 4ee:	e4 c0       	rjmp	.+456    	; 0x6b8 <DIO_U8_Set_Pin_value+0x1e4>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
 4f0:	8a 81       	ldd	r24, Y+2	; 0x02
 4f2:	88 30       	cpi	r24, 0x08	; 8
 4f4:	08 f0       	brcs	.+2      	; 0x4f8 <DIO_U8_Set_Pin_value+0x24>
 4f6:	dd c0       	rjmp	.+442    	; 0x6b2 <DIO_U8_Set_Pin_value+0x1de>
		{
			if((Copy_U8_Pin_value==PIN_LOW)||(Copy_U8_Pin_value==PIN_HIGH))
 4f8:	8b 81       	ldd	r24, Y+3	; 0x03
 4fa:	88 23       	and	r24, r24
 4fc:	21 f0       	breq	.+8      	; 0x506 <DIO_U8_Set_Pin_value+0x32>
 4fe:	8b 81       	ldd	r24, Y+3	; 0x03
 500:	81 30       	cpi	r24, 0x01	; 1
 502:	09 f0       	breq	.+2      	; 0x506 <DIO_U8_Set_Pin_value+0x32>
 504:	d4 c0       	rjmp	.+424    	; 0x6ae <DIO_U8_Set_Pin_value+0x1da>
			{
				switch(Copy_U8_Port_ID)
 506:	89 81       	ldd	r24, Y+1	; 0x01
 508:	28 2f       	mov	r18, r24
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	3e 83       	std	Y+6, r19	; 0x06
 50e:	2d 83       	std	Y+5, r18	; 0x05
 510:	8d 81       	ldd	r24, Y+5	; 0x05
 512:	9e 81       	ldd	r25, Y+6	; 0x06
 514:	81 30       	cpi	r24, 0x01	; 1
 516:	91 05       	cpc	r25, r1
 518:	09 f4       	brne	.+2      	; 0x51c <DIO_U8_Set_Pin_value+0x48>
 51a:	43 c0       	rjmp	.+134    	; 0x5a2 <DIO_U8_Set_Pin_value+0xce>
 51c:	2d 81       	ldd	r18, Y+5	; 0x05
 51e:	3e 81       	ldd	r19, Y+6	; 0x06
 520:	22 30       	cpi	r18, 0x02	; 2
 522:	31 05       	cpc	r19, r1
 524:	2c f4       	brge	.+10     	; 0x530 <DIO_U8_Set_Pin_value+0x5c>
 526:	8d 81       	ldd	r24, Y+5	; 0x05
 528:	9e 81       	ldd	r25, Y+6	; 0x06
 52a:	00 97       	sbiw	r24, 0x00	; 0
 52c:	71 f0       	breq	.+28     	; 0x54a <DIO_U8_Set_Pin_value+0x76>
 52e:	bc c0       	rjmp	.+376    	; 0x6a8 <DIO_U8_Set_Pin_value+0x1d4>
 530:	2d 81       	ldd	r18, Y+5	; 0x05
 532:	3e 81       	ldd	r19, Y+6	; 0x06
 534:	22 30       	cpi	r18, 0x02	; 2
 536:	31 05       	cpc	r19, r1
 538:	09 f4       	brne	.+2      	; 0x53c <DIO_U8_Set_Pin_value+0x68>
 53a:	5f c0       	rjmp	.+190    	; 0x5fa <DIO_U8_Set_Pin_value+0x126>
 53c:	8d 81       	ldd	r24, Y+5	; 0x05
 53e:	9e 81       	ldd	r25, Y+6	; 0x06
 540:	83 30       	cpi	r24, 0x03	; 3
 542:	91 05       	cpc	r25, r1
 544:	09 f4       	brne	.+2      	; 0x548 <DIO_U8_Set_Pin_value+0x74>
 546:	85 c0       	rjmp	.+266    	; 0x652 <DIO_U8_Set_Pin_value+0x17e>
 548:	af c0       	rjmp	.+350    	; 0x6a8 <DIO_U8_Set_Pin_value+0x1d4>
				{
				case PORTA_ID:
					Assign_Bit(DIO_U8_PORTA,Copy_U8_Pin_ID,Copy_U8_Pin_value);
 54a:	8b 81       	ldd	r24, Y+3	; 0x03
 54c:	81 30       	cpi	r24, 0x01	; 1
 54e:	a1 f4       	brne	.+40     	; 0x578 <DIO_U8_Set_Pin_value+0xa4>
 550:	ab e3       	ldi	r26, 0x3B	; 59
 552:	b0 e0       	ldi	r27, 0x00	; 0
 554:	eb e3       	ldi	r30, 0x3B	; 59
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	80 81       	ld	r24, Z
 55a:	48 2f       	mov	r20, r24
 55c:	8a 81       	ldd	r24, Y+2	; 0x02
 55e:	28 2f       	mov	r18, r24
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	02 2e       	mov	r0, r18
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_U8_Set_Pin_value+0x9a>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	0a 94       	dec	r0
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_U8_Set_Pin_value+0x96>
 572:	84 2b       	or	r24, r20
 574:	8c 93       	st	X, r24
 576:	98 c0       	rjmp	.+304    	; 0x6a8 <DIO_U8_Set_Pin_value+0x1d4>
 578:	ab e3       	ldi	r26, 0x3B	; 59
 57a:	b0 e0       	ldi	r27, 0x00	; 0
 57c:	eb e3       	ldi	r30, 0x3B	; 59
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	80 81       	ld	r24, Z
 582:	48 2f       	mov	r20, r24
 584:	8a 81       	ldd	r24, Y+2	; 0x02
 586:	28 2f       	mov	r18, r24
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 2e       	mov	r0, r18
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_U8_Set_Pin_value+0xc2>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	0a 94       	dec	r0
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_U8_Set_Pin_value+0xbe>
 59a:	80 95       	com	r24
 59c:	84 23       	and	r24, r20
 59e:	8c 93       	st	X, r24
 5a0:	83 c0       	rjmp	.+262    	; 0x6a8 <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTB_ID:
					Assign_Bit(DIO_U8_PORTB,Copy_U8_Pin_ID,Copy_U8_Pin_value);
 5a2:	8b 81       	ldd	r24, Y+3	; 0x03
 5a4:	81 30       	cpi	r24, 0x01	; 1
 5a6:	a1 f4       	brne	.+40     	; 0x5d0 <DIO_U8_Set_Pin_value+0xfc>
 5a8:	a8 e3       	ldi	r26, 0x38	; 56
 5aa:	b0 e0       	ldi	r27, 0x00	; 0
 5ac:	e8 e3       	ldi	r30, 0x38	; 56
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	48 2f       	mov	r20, r24
 5b4:	8a 81       	ldd	r24, Y+2	; 0x02
 5b6:	28 2f       	mov	r18, r24
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	02 2e       	mov	r0, r18
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_U8_Set_Pin_value+0xf2>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	0a 94       	dec	r0
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_U8_Set_Pin_value+0xee>
 5ca:	84 2b       	or	r24, r20
 5cc:	8c 93       	st	X, r24
 5ce:	6c c0       	rjmp	.+216    	; 0x6a8 <DIO_U8_Set_Pin_value+0x1d4>
 5d0:	a8 e3       	ldi	r26, 0x38	; 56
 5d2:	b0 e0       	ldi	r27, 0x00	; 0
 5d4:	e8 e3       	ldi	r30, 0x38	; 56
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	48 2f       	mov	r20, r24
 5dc:	8a 81       	ldd	r24, Y+2	; 0x02
 5de:	28 2f       	mov	r18, r24
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 2e       	mov	r0, r18
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_U8_Set_Pin_value+0x11a>
 5ea:	88 0f       	add	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	0a 94       	dec	r0
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_U8_Set_Pin_value+0x116>
 5f2:	80 95       	com	r24
 5f4:	84 23       	and	r24, r20
 5f6:	8c 93       	st	X, r24
 5f8:	57 c0       	rjmp	.+174    	; 0x6a8 <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTC_ID:
					Assign_Bit(DIO_U8_PORTC,Copy_U8_Pin_ID,Copy_U8_Pin_value);
 5fa:	8b 81       	ldd	r24, Y+3	; 0x03
 5fc:	81 30       	cpi	r24, 0x01	; 1
 5fe:	a1 f4       	brne	.+40     	; 0x628 <DIO_U8_Set_Pin_value+0x154>
 600:	a5 e3       	ldi	r26, 0x35	; 53
 602:	b0 e0       	ldi	r27, 0x00	; 0
 604:	e5 e3       	ldi	r30, 0x35	; 53
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	80 81       	ld	r24, Z
 60a:	48 2f       	mov	r20, r24
 60c:	8a 81       	ldd	r24, Y+2	; 0x02
 60e:	28 2f       	mov	r18, r24
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	02 2e       	mov	r0, r18
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_U8_Set_Pin_value+0x14a>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	0a 94       	dec	r0
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_U8_Set_Pin_value+0x146>
 622:	84 2b       	or	r24, r20
 624:	8c 93       	st	X, r24
 626:	40 c0       	rjmp	.+128    	; 0x6a8 <DIO_U8_Set_Pin_value+0x1d4>
 628:	a5 e3       	ldi	r26, 0x35	; 53
 62a:	b0 e0       	ldi	r27, 0x00	; 0
 62c:	e5 e3       	ldi	r30, 0x35	; 53
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	80 81       	ld	r24, Z
 632:	48 2f       	mov	r20, r24
 634:	8a 81       	ldd	r24, Y+2	; 0x02
 636:	28 2f       	mov	r18, r24
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	02 2e       	mov	r0, r18
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_U8_Set_Pin_value+0x172>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	0a 94       	dec	r0
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_U8_Set_Pin_value+0x16e>
 64a:	80 95       	com	r24
 64c:	84 23       	and	r24, r20
 64e:	8c 93       	st	X, r24
 650:	2b c0       	rjmp	.+86     	; 0x6a8 <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTD_ID:
					Assign_Bit(DIO_U8_PORTD,Copy_U8_Pin_ID,Copy_U8_Pin_value);
 652:	8b 81       	ldd	r24, Y+3	; 0x03
 654:	81 30       	cpi	r24, 0x01	; 1
 656:	a1 f4       	brne	.+40     	; 0x680 <DIO_U8_Set_Pin_value+0x1ac>
 658:	a2 e3       	ldi	r26, 0x32	; 50
 65a:	b0 e0       	ldi	r27, 0x00	; 0
 65c:	e2 e3       	ldi	r30, 0x32	; 50
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	80 81       	ld	r24, Z
 662:	48 2f       	mov	r20, r24
 664:	8a 81       	ldd	r24, Y+2	; 0x02
 666:	28 2f       	mov	r18, r24
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	02 2e       	mov	r0, r18
 670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_U8_Set_Pin_value+0x1a2>
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	0a 94       	dec	r0
 678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_U8_Set_Pin_value+0x19e>
 67a:	84 2b       	or	r24, r20
 67c:	8c 93       	st	X, r24
 67e:	14 c0       	rjmp	.+40     	; 0x6a8 <DIO_U8_Set_Pin_value+0x1d4>
 680:	a2 e3       	ldi	r26, 0x32	; 50
 682:	b0 e0       	ldi	r27, 0x00	; 0
 684:	e2 e3       	ldi	r30, 0x32	; 50
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	48 2f       	mov	r20, r24
 68c:	8a 81       	ldd	r24, Y+2	; 0x02
 68e:	28 2f       	mov	r18, r24
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	02 2e       	mov	r0, r18
 698:	02 c0       	rjmp	.+4      	; 0x69e <DIO_U8_Set_Pin_value+0x1ca>
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	0a 94       	dec	r0
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <DIO_U8_Set_Pin_value+0x1c6>
 6a2:	80 95       	com	r24
 6a4:	84 23       	and	r24, r20
 6a6:	8c 93       	st	X, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
 6a8:	93 e0       	ldi	r25, 0x03	; 3
 6aa:	9c 83       	std	Y+4, r25	; 0x04
 6ac:	07 c0       	rjmp	.+14     	; 0x6bc <DIO_U8_Set_Pin_value+0x1e8>

				}
			}
			else
			{
				return WRONG_PIN_value;
 6ae:	1c 82       	std	Y+4, r1	; 0x04
 6b0:	05 c0       	rjmp	.+10     	; 0x6bc <DIO_U8_Set_Pin_value+0x1e8>
			}
		}
		else{
			return WRONG_PIN;
 6b2:	21 e0       	ldi	r18, 0x01	; 1
 6b4:	2c 83       	std	Y+4, r18	; 0x04
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_U8_Set_Pin_value+0x1e8>


	}
	else
	{
		return WRONG_PORT;
 6b8:	32 e0       	ldi	r19, 0x02	; 2
 6ba:	3c 83       	std	Y+4, r19	; 0x04
 6bc:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
 6be:	26 96       	adiw	r28, 0x06	; 6
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	f8 94       	cli
 6c4:	de bf       	out	0x3e, r29	; 62
 6c6:	0f be       	out	0x3f, r0	; 63
 6c8:	cd bf       	out	0x3d, r28	; 61
 6ca:	cf 91       	pop	r28
 6cc:	df 91       	pop	r29
 6ce:	08 95       	ret

000006d0 <DIO_U8_Set_Port_Value>:




u8 DIO_U8_Set_Port_Value(u8 Copy_U8_Port_ID  , u16 Copy_U8_PORT_value)
{
 6d0:	df 93       	push	r29
 6d2:	cf 93       	push	r28
 6d4:	00 d0       	rcall	.+0      	; 0x6d6 <DIO_U8_Set_Port_Value+0x6>
 6d6:	00 d0       	rcall	.+0      	; 0x6d8 <DIO_U8_Set_Port_Value+0x8>
 6d8:	00 d0       	rcall	.+0      	; 0x6da <DIO_U8_Set_Port_Value+0xa>
 6da:	cd b7       	in	r28, 0x3d	; 61
 6dc:	de b7       	in	r29, 0x3e	; 62
 6de:	89 83       	std	Y+1, r24	; 0x01
 6e0:	7b 83       	std	Y+3, r23	; 0x03
 6e2:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_PORT_value>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_PORT_value<=DIO_MAX_U8_PROT_ID))
 6e4:	8a 81       	ldd	r24, Y+2	; 0x02
 6e6:	9b 81       	ldd	r25, Y+3	; 0x03
 6e8:	84 30       	cpi	r24, 0x04	; 4
 6ea:	91 05       	cpc	r25, r1
 6ec:	08 f0       	brcs	.+2      	; 0x6f0 <DIO_U8_Set_Port_Value+0x20>
 6ee:	3d c0       	rjmp	.+122    	; 0x76a <DIO_U8_Set_Port_Value+0x9a>
	{
			if((Copy_U8_PORT_value)>=MIN_DIR_OR_VALUE&&(Copy_U8_PORT_value)<=MAX_DIR_OR_VALUE)
 6f0:	8a 81       	ldd	r24, Y+2	; 0x02
 6f2:	9b 81       	ldd	r25, Y+3	; 0x03
 6f4:	8f 3f       	cpi	r24, 0xFF	; 255
 6f6:	91 05       	cpc	r25, r1
 6f8:	09 f0       	breq	.+2      	; 0x6fc <DIO_U8_Set_Port_Value+0x2c>
 6fa:	a8 f5       	brcc	.+106    	; 0x766 <DIO_U8_Set_Port_Value+0x96>
			{
				switch(Copy_U8_Port_ID)
 6fc:	89 81       	ldd	r24, Y+1	; 0x01
 6fe:	28 2f       	mov	r18, r24
 700:	30 e0       	ldi	r19, 0x00	; 0
 702:	3e 83       	std	Y+6, r19	; 0x06
 704:	2d 83       	std	Y+5, r18	; 0x05
 706:	8d 81       	ldd	r24, Y+5	; 0x05
 708:	9e 81       	ldd	r25, Y+6	; 0x06
 70a:	81 30       	cpi	r24, 0x01	; 1
 70c:	91 05       	cpc	r25, r1
 70e:	d1 f0       	breq	.+52     	; 0x744 <DIO_U8_Set_Port_Value+0x74>
 710:	2d 81       	ldd	r18, Y+5	; 0x05
 712:	3e 81       	ldd	r19, Y+6	; 0x06
 714:	22 30       	cpi	r18, 0x02	; 2
 716:	31 05       	cpc	r19, r1
 718:	2c f4       	brge	.+10     	; 0x724 <DIO_U8_Set_Port_Value+0x54>
 71a:	8d 81       	ldd	r24, Y+5	; 0x05
 71c:	9e 81       	ldd	r25, Y+6	; 0x06
 71e:	00 97       	sbiw	r24, 0x00	; 0
 720:	61 f0       	breq	.+24     	; 0x73a <DIO_U8_Set_Port_Value+0x6a>
 722:	1e c0       	rjmp	.+60     	; 0x760 <DIO_U8_Set_Port_Value+0x90>
 724:	2d 81       	ldd	r18, Y+5	; 0x05
 726:	3e 81       	ldd	r19, Y+6	; 0x06
 728:	22 30       	cpi	r18, 0x02	; 2
 72a:	31 05       	cpc	r19, r1
 72c:	81 f0       	breq	.+32     	; 0x74e <DIO_U8_Set_Port_Value+0x7e>
 72e:	8d 81       	ldd	r24, Y+5	; 0x05
 730:	9e 81       	ldd	r25, Y+6	; 0x06
 732:	83 30       	cpi	r24, 0x03	; 3
 734:	91 05       	cpc	r25, r1
 736:	81 f0       	breq	.+32     	; 0x758 <DIO_U8_Set_Port_Value+0x88>
 738:	13 c0       	rjmp	.+38     	; 0x760 <DIO_U8_Set_Port_Value+0x90>
				{
				case PORTA_ID:
					DIO_U8_PORTA=Copy_U8_PORT_value;
 73a:	eb e3       	ldi	r30, 0x3B	; 59
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	8a 81       	ldd	r24, Y+2	; 0x02
 740:	80 83       	st	Z, r24
 742:	0e c0       	rjmp	.+28     	; 0x760 <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTB_ID:
					DIO_U8_PORTB=Copy_U8_PORT_value;
 744:	e8 e3       	ldi	r30, 0x38	; 56
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	8a 81       	ldd	r24, Y+2	; 0x02
 74a:	80 83       	st	Z, r24
 74c:	09 c0       	rjmp	.+18     	; 0x760 <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTC_ID:
					DIO_U8_PORTC=Copy_U8_PORT_value;
 74e:	e5 e3       	ldi	r30, 0x35	; 53
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	8a 81       	ldd	r24, Y+2	; 0x02
 754:	80 83       	st	Z, r24
 756:	04 c0       	rjmp	.+8      	; 0x760 <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTD_ID:
					DIO_U8_PORTD=Copy_U8_PORT_value;
 758:	e2 e3       	ldi	r30, 0x32	; 50
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	8a 81       	ldd	r24, Y+2	; 0x02
 75e:	80 83       	st	Z, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
 760:	93 e0       	ldi	r25, 0x03	; 3
 762:	9c 83       	std	Y+4, r25	; 0x04
 764:	04 c0       	rjmp	.+8      	; 0x76e <DIO_U8_Set_Port_Value+0x9e>

				}
			}
			else
			{
				return WRONG_PORT_VALUE;
 766:	1c 82       	std	Y+4, r1	; 0x04
 768:	02 c0       	rjmp	.+4      	; 0x76e <DIO_U8_Set_Port_Value+0x9e>


	}
	else
	{
		return WRONG_PORT;
 76a:	22 e0       	ldi	r18, 0x02	; 2
 76c:	2c 83       	std	Y+4, r18	; 0x04
 76e:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
 770:	26 96       	adiw	r28, 0x06	; 6
 772:	0f b6       	in	r0, 0x3f	; 63
 774:	f8 94       	cli
 776:	de bf       	out	0x3e, r29	; 62
 778:	0f be       	out	0x3f, r0	; 63
 77a:	cd bf       	out	0x3d, r28	; 61
 77c:	cf 91       	pop	r28
 77e:	df 91       	pop	r29
 780:	08 95       	ret

00000782 <DIO_U8_Get_pin_value>:




u8 DIO_U8_Get_pin_value(u8 Copy_U8_Port_ID,u8 Copy_U8_Pin_ID , u8 *Copy_U8_Pin_Value)
{
 782:	df 93       	push	r29
 784:	cf 93       	push	r28
 786:	cd b7       	in	r28, 0x3d	; 61
 788:	de b7       	in	r29, 0x3e	; 62
 78a:	28 97       	sbiw	r28, 0x08	; 8
 78c:	0f b6       	in	r0, 0x3f	; 63
 78e:	f8 94       	cli
 790:	de bf       	out	0x3e, r29	; 62
 792:	0f be       	out	0x3f, r0	; 63
 794:	cd bf       	out	0x3d, r28	; 61
 796:	89 83       	std	Y+1, r24	; 0x01
 798:	6a 83       	std	Y+2, r22	; 0x02
 79a:	5c 83       	std	Y+4, r21	; 0x04
 79c:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
 79e:	89 81       	ldd	r24, Y+1	; 0x01
 7a0:	84 30       	cpi	r24, 0x04	; 4
 7a2:	08 f0       	brcs	.+2      	; 0x7a6 <DIO_U8_Get_pin_value+0x24>
 7a4:	78 c0       	rjmp	.+240    	; 0x896 <__stack+0x37>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
 7a6:	8a 81       	ldd	r24, Y+2	; 0x02
 7a8:	88 30       	cpi	r24, 0x08	; 8
 7aa:	08 f0       	brcs	.+2      	; 0x7ae <DIO_U8_Get_pin_value+0x2c>
 7ac:	71 c0       	rjmp	.+226    	; 0x890 <__stack+0x31>
		{

			switch(Copy_U8_Port_ID)
 7ae:	89 81       	ldd	r24, Y+1	; 0x01
 7b0:	28 2f       	mov	r18, r24
 7b2:	30 e0       	ldi	r19, 0x00	; 0
 7b4:	3f 83       	std	Y+7, r19	; 0x07
 7b6:	2e 83       	std	Y+6, r18	; 0x06
 7b8:	4e 81       	ldd	r20, Y+6	; 0x06
 7ba:	5f 81       	ldd	r21, Y+7	; 0x07
 7bc:	41 30       	cpi	r20, 0x01	; 1
 7be:	51 05       	cpc	r21, r1
 7c0:	59 f1       	breq	.+86     	; 0x818 <DIO_U8_Get_pin_value+0x96>
 7c2:	8e 81       	ldd	r24, Y+6	; 0x06
 7c4:	9f 81       	ldd	r25, Y+7	; 0x07
 7c6:	82 30       	cpi	r24, 0x02	; 2
 7c8:	91 05       	cpc	r25, r1
 7ca:	34 f4       	brge	.+12     	; 0x7d8 <DIO_U8_Get_pin_value+0x56>
 7cc:	2e 81       	ldd	r18, Y+6	; 0x06
 7ce:	3f 81       	ldd	r19, Y+7	; 0x07
 7d0:	21 15       	cp	r18, r1
 7d2:	31 05       	cpc	r19, r1
 7d4:	69 f0       	breq	.+26     	; 0x7f0 <DIO_U8_Get_pin_value+0x6e>
 7d6:	5b c0       	rjmp	.+182    	; 0x88e <__stack+0x2f>
 7d8:	4e 81       	ldd	r20, Y+6	; 0x06
 7da:	5f 81       	ldd	r21, Y+7	; 0x07
 7dc:	42 30       	cpi	r20, 0x02	; 2
 7de:	51 05       	cpc	r21, r1
 7e0:	79 f1       	breq	.+94     	; 0x840 <DIO_U8_Get_pin_value+0xbe>
 7e2:	8e 81       	ldd	r24, Y+6	; 0x06
 7e4:	9f 81       	ldd	r25, Y+7	; 0x07
 7e6:	83 30       	cpi	r24, 0x03	; 3
 7e8:	91 05       	cpc	r25, r1
 7ea:	09 f4       	brne	.+2      	; 0x7ee <DIO_U8_Get_pin_value+0x6c>
 7ec:	3d c0       	rjmp	.+122    	; 0x868 <__stack+0x9>
 7ee:	4f c0       	rjmp	.+158    	; 0x88e <__stack+0x2f>
							{
				case PORTA_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINA,Copy_U8_Pin_ID);
 7f0:	e9 e3       	ldi	r30, 0x39	; 57
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	80 81       	ld	r24, Z
 7f6:	28 2f       	mov	r18, r24
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	8a 81       	ldd	r24, Y+2	; 0x02
 7fc:	88 2f       	mov	r24, r24
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	a9 01       	movw	r20, r18
 802:	02 c0       	rjmp	.+4      	; 0x808 <DIO_U8_Get_pin_value+0x86>
 804:	55 95       	asr	r21
 806:	47 95       	ror	r20
 808:	8a 95       	dec	r24
 80a:	e2 f7       	brpl	.-8      	; 0x804 <DIO_U8_Get_pin_value+0x82>
 80c:	ca 01       	movw	r24, r20
 80e:	81 70       	andi	r24, 0x01	; 1
 810:	eb 81       	ldd	r30, Y+3	; 0x03
 812:	fc 81       	ldd	r31, Y+4	; 0x04
 814:	80 83       	st	Z, r24
 816:	3b c0       	rjmp	.+118    	; 0x88e <__stack+0x2f>
					break;
				case PORTB_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINB,Copy_U8_Pin_ID);
 818:	e6 e3       	ldi	r30, 0x36	; 54
 81a:	f0 e0       	ldi	r31, 0x00	; 0
 81c:	80 81       	ld	r24, Z
 81e:	28 2f       	mov	r18, r24
 820:	30 e0       	ldi	r19, 0x00	; 0
 822:	8a 81       	ldd	r24, Y+2	; 0x02
 824:	88 2f       	mov	r24, r24
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	a9 01       	movw	r20, r18
 82a:	02 c0       	rjmp	.+4      	; 0x830 <DIO_U8_Get_pin_value+0xae>
 82c:	55 95       	asr	r21
 82e:	47 95       	ror	r20
 830:	8a 95       	dec	r24
 832:	e2 f7       	brpl	.-8      	; 0x82c <DIO_U8_Get_pin_value+0xaa>
 834:	ca 01       	movw	r24, r20
 836:	81 70       	andi	r24, 0x01	; 1
 838:	eb 81       	ldd	r30, Y+3	; 0x03
 83a:	fc 81       	ldd	r31, Y+4	; 0x04
 83c:	80 83       	st	Z, r24
 83e:	27 c0       	rjmp	.+78     	; 0x88e <__stack+0x2f>
					break;
				case PORTC_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINC,Copy_U8_Pin_ID);
 840:	e3 e3       	ldi	r30, 0x33	; 51
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	80 81       	ld	r24, Z
 846:	28 2f       	mov	r18, r24
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	8a 81       	ldd	r24, Y+2	; 0x02
 84c:	88 2f       	mov	r24, r24
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	a9 01       	movw	r20, r18
 852:	02 c0       	rjmp	.+4      	; 0x858 <DIO_U8_Get_pin_value+0xd6>
 854:	55 95       	asr	r21
 856:	47 95       	ror	r20
 858:	8a 95       	dec	r24
 85a:	e2 f7       	brpl	.-8      	; 0x854 <DIO_U8_Get_pin_value+0xd2>
 85c:	ca 01       	movw	r24, r20
 85e:	81 70       	andi	r24, 0x01	; 1
 860:	eb 81       	ldd	r30, Y+3	; 0x03
 862:	fc 81       	ldd	r31, Y+4	; 0x04
 864:	80 83       	st	Z, r24
 866:	13 c0       	rjmp	.+38     	; 0x88e <__stack+0x2f>
					break;
				case PORTD_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
 868:	e0 e3       	ldi	r30, 0x30	; 48
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	80 81       	ld	r24, Z
 86e:	28 2f       	mov	r18, r24
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	8a 81       	ldd	r24, Y+2	; 0x02
 874:	88 2f       	mov	r24, r24
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	a9 01       	movw	r20, r18
 87a:	02 c0       	rjmp	.+4      	; 0x880 <__stack+0x21>
 87c:	55 95       	asr	r21
 87e:	47 95       	ror	r20
 880:	8a 95       	dec	r24
 882:	e2 f7       	brpl	.-8      	; 0x87c <__stack+0x1d>
 884:	ca 01       	movw	r24, r20
 886:	81 70       	andi	r24, 0x01	; 1
 888:	eb 81       	ldd	r30, Y+3	; 0x03
 88a:	fc 81       	ldd	r31, Y+4	; 0x04
 88c:	80 83       	st	Z, r24
 88e:	07 c0       	rjmp	.+14     	; 0x89e <__stack+0x3f>
					break;
							}
		}
		else
		{
			return WRONG_PIN;
 890:	51 e0       	ldi	r21, 0x01	; 1
 892:	5d 83       	std	Y+5, r21	; 0x05
 894:	02 c0       	rjmp	.+4      	; 0x89a <__stack+0x3b>
		}
	}
	else
	{
		return WRONG_PORT;
 896:	82 e0       	ldi	r24, 0x02	; 2
 898:	8d 83       	std	Y+5, r24	; 0x05
 89a:	9d 81       	ldd	r25, Y+5	; 0x05
 89c:	98 87       	std	Y+8, r25	; 0x08
	}
}
 89e:	88 85       	ldd	r24, Y+8	; 0x08
 8a0:	28 96       	adiw	r28, 0x08	; 8
 8a2:	0f b6       	in	r0, 0x3f	; 63
 8a4:	f8 94       	cli
 8a6:	de bf       	out	0x3e, r29	; 62
 8a8:	0f be       	out	0x3f, r0	; 63
 8aa:	cd bf       	out	0x3d, r28	; 61
 8ac:	cf 91       	pop	r28
 8ae:	df 91       	pop	r29
 8b0:	08 95       	ret

000008b2 <__vector_1>:

void (*Avoid_CallBack[3])(void);


void __vector_1(void)
{
 8b2:	1f 92       	push	r1
 8b4:	0f 92       	push	r0
 8b6:	0f b6       	in	r0, 0x3f	; 63
 8b8:	0f 92       	push	r0
 8ba:	11 24       	eor	r1, r1
 8bc:	2f 93       	push	r18
 8be:	3f 93       	push	r19
 8c0:	4f 93       	push	r20
 8c2:	5f 93       	push	r21
 8c4:	6f 93       	push	r22
 8c6:	7f 93       	push	r23
 8c8:	8f 93       	push	r24
 8ca:	9f 93       	push	r25
 8cc:	af 93       	push	r26
 8ce:	bf 93       	push	r27
 8d0:	ef 93       	push	r30
 8d2:	ff 93       	push	r31
 8d4:	df 93       	push	r29
 8d6:	cf 93       	push	r28
 8d8:	cd b7       	in	r28, 0x3d	; 61
 8da:	de b7       	in	r29, 0x3e	; 62
	Avoid_CallBack[0]();
 8dc:	e0 91 6a 00 	lds	r30, 0x006A
 8e0:	f0 91 6b 00 	lds	r31, 0x006B
 8e4:	09 95       	icall
}
 8e6:	cf 91       	pop	r28
 8e8:	df 91       	pop	r29
 8ea:	ff 91       	pop	r31
 8ec:	ef 91       	pop	r30
 8ee:	bf 91       	pop	r27
 8f0:	af 91       	pop	r26
 8f2:	9f 91       	pop	r25
 8f4:	8f 91       	pop	r24
 8f6:	7f 91       	pop	r23
 8f8:	6f 91       	pop	r22
 8fa:	5f 91       	pop	r21
 8fc:	4f 91       	pop	r20
 8fe:	3f 91       	pop	r19
 900:	2f 91       	pop	r18
 902:	0f 90       	pop	r0
 904:	0f be       	out	0x3f, r0	; 63
 906:	0f 90       	pop	r0
 908:	1f 90       	pop	r1
 90a:	18 95       	reti

0000090c <__vector_2>:

void __vector_2(void)
{
 90c:	1f 92       	push	r1
 90e:	0f 92       	push	r0
 910:	0f b6       	in	r0, 0x3f	; 63
 912:	0f 92       	push	r0
 914:	11 24       	eor	r1, r1
 916:	2f 93       	push	r18
 918:	3f 93       	push	r19
 91a:	4f 93       	push	r20
 91c:	5f 93       	push	r21
 91e:	6f 93       	push	r22
 920:	7f 93       	push	r23
 922:	8f 93       	push	r24
 924:	9f 93       	push	r25
 926:	af 93       	push	r26
 928:	bf 93       	push	r27
 92a:	ef 93       	push	r30
 92c:	ff 93       	push	r31
 92e:	df 93       	push	r29
 930:	cf 93       	push	r28
 932:	cd b7       	in	r28, 0x3d	; 61
 934:	de b7       	in	r29, 0x3e	; 62
	Avoid_CallBack[1]();
 936:	e0 91 6c 00 	lds	r30, 0x006C
 93a:	f0 91 6d 00 	lds	r31, 0x006D
 93e:	09 95       	icall
}
 940:	cf 91       	pop	r28
 942:	df 91       	pop	r29
 944:	ff 91       	pop	r31
 946:	ef 91       	pop	r30
 948:	bf 91       	pop	r27
 94a:	af 91       	pop	r26
 94c:	9f 91       	pop	r25
 94e:	8f 91       	pop	r24
 950:	7f 91       	pop	r23
 952:	6f 91       	pop	r22
 954:	5f 91       	pop	r21
 956:	4f 91       	pop	r20
 958:	3f 91       	pop	r19
 95a:	2f 91       	pop	r18
 95c:	0f 90       	pop	r0
 95e:	0f be       	out	0x3f, r0	; 63
 960:	0f 90       	pop	r0
 962:	1f 90       	pop	r1
 964:	18 95       	reti

00000966 <__vector_3>:

void __vector_3(void)
{
 966:	1f 92       	push	r1
 968:	0f 92       	push	r0
 96a:	0f b6       	in	r0, 0x3f	; 63
 96c:	0f 92       	push	r0
 96e:	11 24       	eor	r1, r1
 970:	2f 93       	push	r18
 972:	3f 93       	push	r19
 974:	4f 93       	push	r20
 976:	5f 93       	push	r21
 978:	6f 93       	push	r22
 97a:	7f 93       	push	r23
 97c:	8f 93       	push	r24
 97e:	9f 93       	push	r25
 980:	af 93       	push	r26
 982:	bf 93       	push	r27
 984:	ef 93       	push	r30
 986:	ff 93       	push	r31
 988:	df 93       	push	r29
 98a:	cf 93       	push	r28
 98c:	cd b7       	in	r28, 0x3d	; 61
 98e:	de b7       	in	r29, 0x3e	; 62
	Avoid_CallBack[2]();
 990:	e0 91 6e 00 	lds	r30, 0x006E
 994:	f0 91 6f 00 	lds	r31, 0x006F
 998:	09 95       	icall
}
 99a:	cf 91       	pop	r28
 99c:	df 91       	pop	r29
 99e:	ff 91       	pop	r31
 9a0:	ef 91       	pop	r30
 9a2:	bf 91       	pop	r27
 9a4:	af 91       	pop	r26
 9a6:	9f 91       	pop	r25
 9a8:	8f 91       	pop	r24
 9aa:	7f 91       	pop	r23
 9ac:	6f 91       	pop	r22
 9ae:	5f 91       	pop	r21
 9b0:	4f 91       	pop	r20
 9b2:	3f 91       	pop	r19
 9b4:	2f 91       	pop	r18
 9b6:	0f 90       	pop	r0
 9b8:	0f be       	out	0x3f, r0	; 63
 9ba:	0f 90       	pop	r0
 9bc:	1f 90       	pop	r1
 9be:	18 95       	reti

000009c0 <EXTI_void_Eable>:
/******************************************< Functinos >************************************/
/*******************************************************************************************/

void EXTI_void_Eable(u8 Copy_U8_INT_Index)
{
 9c0:	df 93       	push	r29
 9c2:	cf 93       	push	r28
 9c4:	00 d0       	rcall	.+0      	; 0x9c6 <EXTI_void_Eable+0x6>
 9c6:	0f 92       	push	r0
 9c8:	cd b7       	in	r28, 0x3d	; 61
 9ca:	de b7       	in	r29, 0x3e	; 62
 9cc:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_INT_Index)
 9ce:	89 81       	ldd	r24, Y+1	; 0x01
 9d0:	28 2f       	mov	r18, r24
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	3b 83       	std	Y+3, r19	; 0x03
 9d6:	2a 83       	std	Y+2, r18	; 0x02
 9d8:	8a 81       	ldd	r24, Y+2	; 0x02
 9da:	9b 81       	ldd	r25, Y+3	; 0x03
 9dc:	81 30       	cpi	r24, 0x01	; 1
 9de:	91 05       	cpc	r25, r1
 9e0:	89 f0       	breq	.+34     	; 0xa04 <EXTI_void_Eable+0x44>
 9e2:	2a 81       	ldd	r18, Y+2	; 0x02
 9e4:	3b 81       	ldd	r19, Y+3	; 0x03
 9e6:	22 30       	cpi	r18, 0x02	; 2
 9e8:	31 05       	cpc	r19, r1
 9ea:	a1 f0       	breq	.+40     	; 0xa14 <EXTI_void_Eable+0x54>
 9ec:	8a 81       	ldd	r24, Y+2	; 0x02
 9ee:	9b 81       	ldd	r25, Y+3	; 0x03
 9f0:	00 97       	sbiw	r24, 0x00	; 0
 9f2:	b9 f4       	brne	.+46     	; 0xa22 <EXTI_void_Eable+0x62>
	{
	case EXTI_U8_INT0:
		Set_Bit(EXTI_U8_GICR,DIO_U8_PIN6);
 9f4:	ab e5       	ldi	r26, 0x5B	; 91
 9f6:	b0 e0       	ldi	r27, 0x00	; 0
 9f8:	eb e5       	ldi	r30, 0x5B	; 91
 9fa:	f0 e0       	ldi	r31, 0x00	; 0
 9fc:	80 81       	ld	r24, Z
 9fe:	80 64       	ori	r24, 0x40	; 64
 a00:	8c 93       	st	X, r24
 a02:	0f c0       	rjmp	.+30     	; 0xa22 <EXTI_void_Eable+0x62>
		break;
	case EXTI_U8_INT1:
			Set_Bit(EXTI_U8_GICR,DIO_U8_PIN7);
 a04:	ab e5       	ldi	r26, 0x5B	; 91
 a06:	b0 e0       	ldi	r27, 0x00	; 0
 a08:	eb e5       	ldi	r30, 0x5B	; 91
 a0a:	f0 e0       	ldi	r31, 0x00	; 0
 a0c:	80 81       	ld	r24, Z
 a0e:	80 68       	ori	r24, 0x80	; 128
 a10:	8c 93       	st	X, r24
 a12:	07 c0       	rjmp	.+14     	; 0xa22 <EXTI_void_Eable+0x62>
			break;
	case EXTI_U8_INT2:
			Set_Bit(EXTI_U8_GICR,DIO_U8_PIN5);
 a14:	ab e5       	ldi	r26, 0x5B	; 91
 a16:	b0 e0       	ldi	r27, 0x00	; 0
 a18:	eb e5       	ldi	r30, 0x5B	; 91
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	80 81       	ld	r24, Z
 a1e:	80 62       	ori	r24, 0x20	; 32
 a20:	8c 93       	st	X, r24
			break;


	}
}
 a22:	0f 90       	pop	r0
 a24:	0f 90       	pop	r0
 a26:	0f 90       	pop	r0
 a28:	cf 91       	pop	r28
 a2a:	df 91       	pop	r29
 a2c:	08 95       	ret

00000a2e <EXTI_void_Disable>:


void EXTI_void_Disable(u8 Copy_U8_INT_Index)
{
 a2e:	df 93       	push	r29
 a30:	cf 93       	push	r28
 a32:	00 d0       	rcall	.+0      	; 0xa34 <EXTI_void_Disable+0x6>
 a34:	0f 92       	push	r0
 a36:	cd b7       	in	r28, 0x3d	; 61
 a38:	de b7       	in	r29, 0x3e	; 62
 a3a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_INT_Index)
 a3c:	89 81       	ldd	r24, Y+1	; 0x01
 a3e:	28 2f       	mov	r18, r24
 a40:	30 e0       	ldi	r19, 0x00	; 0
 a42:	3b 83       	std	Y+3, r19	; 0x03
 a44:	2a 83       	std	Y+2, r18	; 0x02
 a46:	8a 81       	ldd	r24, Y+2	; 0x02
 a48:	9b 81       	ldd	r25, Y+3	; 0x03
 a4a:	81 30       	cpi	r24, 0x01	; 1
 a4c:	91 05       	cpc	r25, r1
 a4e:	89 f0       	breq	.+34     	; 0xa72 <EXTI_void_Disable+0x44>
 a50:	2a 81       	ldd	r18, Y+2	; 0x02
 a52:	3b 81       	ldd	r19, Y+3	; 0x03
 a54:	22 30       	cpi	r18, 0x02	; 2
 a56:	31 05       	cpc	r19, r1
 a58:	a1 f0       	breq	.+40     	; 0xa82 <EXTI_void_Disable+0x54>
 a5a:	8a 81       	ldd	r24, Y+2	; 0x02
 a5c:	9b 81       	ldd	r25, Y+3	; 0x03
 a5e:	00 97       	sbiw	r24, 0x00	; 0
 a60:	b9 f4       	brne	.+46     	; 0xa90 <EXTI_void_Disable+0x62>
	{
	case EXTI_U8_INT0:
		Clear_Bit(EXTI_U8_GICR,DIO_U8_PIN6);
 a62:	ab e5       	ldi	r26, 0x5B	; 91
 a64:	b0 e0       	ldi	r27, 0x00	; 0
 a66:	eb e5       	ldi	r30, 0x5B	; 91
 a68:	f0 e0       	ldi	r31, 0x00	; 0
 a6a:	80 81       	ld	r24, Z
 a6c:	8f 7b       	andi	r24, 0xBF	; 191
 a6e:	8c 93       	st	X, r24
 a70:	0f c0       	rjmp	.+30     	; 0xa90 <EXTI_void_Disable+0x62>
		break;
	case EXTI_U8_INT1:
		Clear_Bit(EXTI_U8_GICR,DIO_U8_PIN7);
 a72:	ab e5       	ldi	r26, 0x5B	; 91
 a74:	b0 e0       	ldi	r27, 0x00	; 0
 a76:	eb e5       	ldi	r30, 0x5B	; 91
 a78:	f0 e0       	ldi	r31, 0x00	; 0
 a7a:	80 81       	ld	r24, Z
 a7c:	8f 77       	andi	r24, 0x7F	; 127
 a7e:	8c 93       	st	X, r24
 a80:	07 c0       	rjmp	.+14     	; 0xa90 <EXTI_void_Disable+0x62>
		break;
	case EXTI_U8_INT2:
		Clear_Bit(EXTI_U8_GICR,DIO_U8_PIN5);
 a82:	ab e5       	ldi	r26, 0x5B	; 91
 a84:	b0 e0       	ldi	r27, 0x00	; 0
 a86:	eb e5       	ldi	r30, 0x5B	; 91
 a88:	f0 e0       	ldi	r31, 0x00	; 0
 a8a:	80 81       	ld	r24, Z
 a8c:	8f 7d       	andi	r24, 0xDF	; 223
 a8e:	8c 93       	st	X, r24
		break;
	}
}
 a90:	0f 90       	pop	r0
 a92:	0f 90       	pop	r0
 a94:	0f 90       	pop	r0
 a96:	cf 91       	pop	r28
 a98:	df 91       	pop	r29
 a9a:	08 95       	ret

00000a9c <EXTI_void_Set_Level>:

void EXTI_void_Set_Level(u8 Copy_U8_INT_Index , u8 Copy_U8_Level_Index)
{
 a9c:	df 93       	push	r29
 a9e:	cf 93       	push	r28
 aa0:	00 d0       	rcall	.+0      	; 0xaa2 <EXTI_void_Set_Level+0x6>
 aa2:	00 d0       	rcall	.+0      	; 0xaa4 <EXTI_void_Set_Level+0x8>
 aa4:	cd b7       	in	r28, 0x3d	; 61
 aa6:	de b7       	in	r29, 0x3e	; 62
 aa8:	89 83       	std	Y+1, r24	; 0x01
 aaa:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8_INT_Index)
 aac:	89 81       	ldd	r24, Y+1	; 0x01
 aae:	28 2f       	mov	r18, r24
 ab0:	30 e0       	ldi	r19, 0x00	; 0
 ab2:	3c 83       	std	Y+4, r19	; 0x04
 ab4:	2b 83       	std	Y+3, r18	; 0x03
 ab6:	8b 81       	ldd	r24, Y+3	; 0x03
 ab8:	9c 81       	ldd	r25, Y+4	; 0x04
 aba:	81 30       	cpi	r24, 0x01	; 1
 abc:	91 05       	cpc	r25, r1
 abe:	c9 f1       	breq	.+114    	; 0xb32 <EXTI_void_Set_Level+0x96>
 ac0:	2b 81       	ldd	r18, Y+3	; 0x03
 ac2:	3c 81       	ldd	r19, Y+4	; 0x04
 ac4:	22 30       	cpi	r18, 0x02	; 2
 ac6:	31 05       	cpc	r19, r1
 ac8:	09 f4       	brne	.+2      	; 0xacc <EXTI_void_Set_Level+0x30>
 aca:	61 c0       	rjmp	.+194    	; 0xb8e <EXTI_void_Set_Level+0xf2>
 acc:	8b 81       	ldd	r24, Y+3	; 0x03
 ace:	9c 81       	ldd	r25, Y+4	; 0x04
 ad0:	00 97       	sbiw	r24, 0x00	; 0
 ad2:	09 f0       	breq	.+2      	; 0xad6 <EXTI_void_Set_Level+0x3a>
 ad4:	6e c0       	rjmp	.+220    	; 0xbb2 <EXTI_void_Set_Level+0x116>
	{
		case EXTI_U8_INT0:
			Assign_Bit(EXTI_U8_MCUCR, DIO_U8_PIN0 , Get_Bit(Copy_U8_Level_Index,0));
 ad6:	8a 81       	ldd	r24, Y+2	; 0x02
 ad8:	88 2f       	mov	r24, r24
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	81 70       	andi	r24, 0x01	; 1
 ade:	90 70       	andi	r25, 0x00	; 0
 ae0:	88 23       	and	r24, r24
 ae2:	41 f0       	breq	.+16     	; 0xaf4 <EXTI_void_Set_Level+0x58>
 ae4:	a5 e5       	ldi	r26, 0x55	; 85
 ae6:	b0 e0       	ldi	r27, 0x00	; 0
 ae8:	e5 e5       	ldi	r30, 0x55	; 85
 aea:	f0 e0       	ldi	r31, 0x00	; 0
 aec:	80 81       	ld	r24, Z
 aee:	81 60       	ori	r24, 0x01	; 1
 af0:	8c 93       	st	X, r24
 af2:	07 c0       	rjmp	.+14     	; 0xb02 <EXTI_void_Set_Level+0x66>
 af4:	a5 e5       	ldi	r26, 0x55	; 85
 af6:	b0 e0       	ldi	r27, 0x00	; 0
 af8:	e5 e5       	ldi	r30, 0x55	; 85
 afa:	f0 e0       	ldi	r31, 0x00	; 0
 afc:	80 81       	ld	r24, Z
 afe:	8e 7f       	andi	r24, 0xFE	; 254
 b00:	8c 93       	st	X, r24
			Assign_Bit(EXTI_U8_MCUCR, DIO_U8_PIN1 , Get_Bit(Copy_U8_Level_Index,1));
 b02:	8a 81       	ldd	r24, Y+2	; 0x02
 b04:	86 95       	lsr	r24
 b06:	88 2f       	mov	r24, r24
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	81 70       	andi	r24, 0x01	; 1
 b0c:	90 70       	andi	r25, 0x00	; 0
 b0e:	88 23       	and	r24, r24
 b10:	41 f0       	breq	.+16     	; 0xb22 <EXTI_void_Set_Level+0x86>
 b12:	a5 e5       	ldi	r26, 0x55	; 85
 b14:	b0 e0       	ldi	r27, 0x00	; 0
 b16:	e5 e5       	ldi	r30, 0x55	; 85
 b18:	f0 e0       	ldi	r31, 0x00	; 0
 b1a:	80 81       	ld	r24, Z
 b1c:	82 60       	ori	r24, 0x02	; 2
 b1e:	8c 93       	st	X, r24
 b20:	48 c0       	rjmp	.+144    	; 0xbb2 <EXTI_void_Set_Level+0x116>
 b22:	a5 e5       	ldi	r26, 0x55	; 85
 b24:	b0 e0       	ldi	r27, 0x00	; 0
 b26:	e5 e5       	ldi	r30, 0x55	; 85
 b28:	f0 e0       	ldi	r31, 0x00	; 0
 b2a:	80 81       	ld	r24, Z
 b2c:	8d 7f       	andi	r24, 0xFD	; 253
 b2e:	8c 93       	st	X, r24
 b30:	40 c0       	rjmp	.+128    	; 0xbb2 <EXTI_void_Set_Level+0x116>
			break;
		case EXTI_U8_INT1:
			Assign_Bit(EXTI_U8_MCUCR, DIO_U8_PIN2 , Get_Bit(Copy_U8_Level_Index,0));
 b32:	8a 81       	ldd	r24, Y+2	; 0x02
 b34:	88 2f       	mov	r24, r24
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	81 70       	andi	r24, 0x01	; 1
 b3a:	90 70       	andi	r25, 0x00	; 0
 b3c:	88 23       	and	r24, r24
 b3e:	41 f0       	breq	.+16     	; 0xb50 <EXTI_void_Set_Level+0xb4>
 b40:	a5 e5       	ldi	r26, 0x55	; 85
 b42:	b0 e0       	ldi	r27, 0x00	; 0
 b44:	e5 e5       	ldi	r30, 0x55	; 85
 b46:	f0 e0       	ldi	r31, 0x00	; 0
 b48:	80 81       	ld	r24, Z
 b4a:	84 60       	ori	r24, 0x04	; 4
 b4c:	8c 93       	st	X, r24
 b4e:	07 c0       	rjmp	.+14     	; 0xb5e <EXTI_void_Set_Level+0xc2>
 b50:	a5 e5       	ldi	r26, 0x55	; 85
 b52:	b0 e0       	ldi	r27, 0x00	; 0
 b54:	e5 e5       	ldi	r30, 0x55	; 85
 b56:	f0 e0       	ldi	r31, 0x00	; 0
 b58:	80 81       	ld	r24, Z
 b5a:	8b 7f       	andi	r24, 0xFB	; 251
 b5c:	8c 93       	st	X, r24
			Assign_Bit(EXTI_U8_MCUCR, DIO_U8_PIN3 , Get_Bit(Copy_U8_Level_Index,1));
 b5e:	8a 81       	ldd	r24, Y+2	; 0x02
 b60:	86 95       	lsr	r24
 b62:	88 2f       	mov	r24, r24
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	81 70       	andi	r24, 0x01	; 1
 b68:	90 70       	andi	r25, 0x00	; 0
 b6a:	88 23       	and	r24, r24
 b6c:	41 f0       	breq	.+16     	; 0xb7e <EXTI_void_Set_Level+0xe2>
 b6e:	a5 e5       	ldi	r26, 0x55	; 85
 b70:	b0 e0       	ldi	r27, 0x00	; 0
 b72:	e5 e5       	ldi	r30, 0x55	; 85
 b74:	f0 e0       	ldi	r31, 0x00	; 0
 b76:	80 81       	ld	r24, Z
 b78:	88 60       	ori	r24, 0x08	; 8
 b7a:	8c 93       	st	X, r24
 b7c:	1a c0       	rjmp	.+52     	; 0xbb2 <EXTI_void_Set_Level+0x116>
 b7e:	a5 e5       	ldi	r26, 0x55	; 85
 b80:	b0 e0       	ldi	r27, 0x00	; 0
 b82:	e5 e5       	ldi	r30, 0x55	; 85
 b84:	f0 e0       	ldi	r31, 0x00	; 0
 b86:	80 81       	ld	r24, Z
 b88:	87 7f       	andi	r24, 0xF7	; 247
 b8a:	8c 93       	st	X, r24
 b8c:	12 c0       	rjmp	.+36     	; 0xbb2 <EXTI_void_Set_Level+0x116>
			break;
		case EXTI_U8_INT2:
			Assign_Bit(EXTI_U8_MCUCSR, DIO_U8_PIN6 , Copy_U8_Level_Index );
 b8e:	8a 81       	ldd	r24, Y+2	; 0x02
 b90:	81 30       	cpi	r24, 0x01	; 1
 b92:	41 f4       	brne	.+16     	; 0xba4 <EXTI_void_Set_Level+0x108>
 b94:	a4 e5       	ldi	r26, 0x54	; 84
 b96:	b0 e0       	ldi	r27, 0x00	; 0
 b98:	e4 e5       	ldi	r30, 0x54	; 84
 b9a:	f0 e0       	ldi	r31, 0x00	; 0
 b9c:	80 81       	ld	r24, Z
 b9e:	80 64       	ori	r24, 0x40	; 64
 ba0:	8c 93       	st	X, r24
 ba2:	07 c0       	rjmp	.+14     	; 0xbb2 <EXTI_void_Set_Level+0x116>
 ba4:	a4 e5       	ldi	r26, 0x54	; 84
 ba6:	b0 e0       	ldi	r27, 0x00	; 0
 ba8:	e4 e5       	ldi	r30, 0x54	; 84
 baa:	f0 e0       	ldi	r31, 0x00	; 0
 bac:	80 81       	ld	r24, Z
 bae:	8f 7b       	andi	r24, 0xBF	; 191
 bb0:	8c 93       	st	X, r24

			break;
		}
}
 bb2:	0f 90       	pop	r0
 bb4:	0f 90       	pop	r0
 bb6:	0f 90       	pop	r0
 bb8:	0f 90       	pop	r0
 bba:	cf 91       	pop	r28
 bbc:	df 91       	pop	r29
 bbe:	08 95       	ret

00000bc0 <EXTI_void_Global_EN_DIS>:
void EXTI_void_Global_EN_DIS(u8 Copy_U8_Assign_Value)
{
 bc0:	df 93       	push	r29
 bc2:	cf 93       	push	r28
 bc4:	0f 92       	push	r0
 bc6:	cd b7       	in	r28, 0x3d	; 61
 bc8:	de b7       	in	r29, 0x3e	; 62
 bca:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(EXTI_U8_SREG, DIO_U8_PIN7 , Copy_U8_Assign_Value);
 bcc:	89 81       	ldd	r24, Y+1	; 0x01
 bce:	81 30       	cpi	r24, 0x01	; 1
 bd0:	41 f4       	brne	.+16     	; 0xbe2 <EXTI_void_Global_EN_DIS+0x22>
 bd2:	af e5       	ldi	r26, 0x5F	; 95
 bd4:	b0 e0       	ldi	r27, 0x00	; 0
 bd6:	ef e5       	ldi	r30, 0x5F	; 95
 bd8:	f0 e0       	ldi	r31, 0x00	; 0
 bda:	80 81       	ld	r24, Z
 bdc:	80 68       	ori	r24, 0x80	; 128
 bde:	8c 93       	st	X, r24
 be0:	07 c0       	rjmp	.+14     	; 0xbf0 <EXTI_void_Global_EN_DIS+0x30>
 be2:	af e5       	ldi	r26, 0x5F	; 95
 be4:	b0 e0       	ldi	r27, 0x00	; 0
 be6:	ef e5       	ldi	r30, 0x5F	; 95
 be8:	f0 e0       	ldi	r31, 0x00	; 0
 bea:	80 81       	ld	r24, Z
 bec:	8f 77       	andi	r24, 0x7F	; 127
 bee:	8c 93       	st	X, r24
}
 bf0:	0f 90       	pop	r0
 bf2:	cf 91       	pop	r28
 bf4:	df 91       	pop	r29
 bf6:	08 95       	ret

00000bf8 <EXTI_void_Set_CallBack>:

void EXTI_void_Set_CallBack(u8 Copy_U8_INT_Index , void (*pvoidCallBack)(void))
{
 bf8:	df 93       	push	r29
 bfa:	cf 93       	push	r28
 bfc:	00 d0       	rcall	.+0      	; 0xbfe <EXTI_void_Set_CallBack+0x6>
 bfe:	0f 92       	push	r0
 c00:	cd b7       	in	r28, 0x3d	; 61
 c02:	de b7       	in	r29, 0x3e	; 62
 c04:	89 83       	std	Y+1, r24	; 0x01
 c06:	7b 83       	std	Y+3, r23	; 0x03
 c08:	6a 83       	std	Y+2, r22	; 0x02
	Avoid_CallBack[Copy_U8_INT_Index]= pvoidCallBack ;
 c0a:	89 81       	ldd	r24, Y+1	; 0x01
 c0c:	88 2f       	mov	r24, r24
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	88 0f       	add	r24, r24
 c12:	99 1f       	adc	r25, r25
 c14:	fc 01       	movw	r30, r24
 c16:	e6 59       	subi	r30, 0x96	; 150
 c18:	ff 4f       	sbci	r31, 0xFF	; 255
 c1a:	8a 81       	ldd	r24, Y+2	; 0x02
 c1c:	9b 81       	ldd	r25, Y+3	; 0x03
 c1e:	91 83       	std	Z+1, r25	; 0x01
 c20:	80 83       	st	Z, r24
}
 c22:	0f 90       	pop	r0
 c24:	0f 90       	pop	r0
 c26:	0f 90       	pop	r0
 c28:	cf 91       	pop	r28
 c2a:	df 91       	pop	r29
 c2c:	08 95       	ret

00000c2e <__vector_11>:
/*FUNCTIONS*/



void __vector_11(void)
{
 c2e:	1f 92       	push	r1
 c30:	0f 92       	push	r0
 c32:	0f b6       	in	r0, 0x3f	; 63
 c34:	0f 92       	push	r0
 c36:	11 24       	eor	r1, r1
 c38:	df 93       	push	r29
 c3a:	cf 93       	push	r28
 c3c:	cd b7       	in	r28, 0x3d	; 61
 c3e:	de b7       	in	r29, 0x3e	; 62
			DIO_U8_Set_Pin_value(PORTA_ID,DIO_U8_PIN0,Toggle_Bit(state,0));
#elif TIMER0_MODE == FAST
DIO_U8_Set_Pin_value(PORTB_ID,DIO_U8_PIN0,PIN_OUTPUT);
#endif

}
 c40:	cf 91       	pop	r28
 c42:	df 91       	pop	r29
 c44:	0f 90       	pop	r0
 c46:	0f be       	out	0x3f, r0	; 63
 c48:	0f 90       	pop	r0
 c4a:	1f 90       	pop	r1
 c4c:	18 95       	reti

00000c4e <__vector_10>:


void __vector_10(void)
{
 c4e:	1f 92       	push	r1
 c50:	0f 92       	push	r0
 c52:	0f b6       	in	r0, 0x3f	; 63
 c54:	0f 92       	push	r0
 c56:	11 24       	eor	r1, r1
 c58:	2f 93       	push	r18
 c5a:	3f 93       	push	r19
 c5c:	4f 93       	push	r20
 c5e:	5f 93       	push	r21
 c60:	6f 93       	push	r22
 c62:	7f 93       	push	r23
 c64:	8f 93       	push	r24
 c66:	9f 93       	push	r25
 c68:	af 93       	push	r26
 c6a:	bf 93       	push	r27
 c6c:	ef 93       	push	r30
 c6e:	ff 93       	push	r31
 c70:	df 93       	push	r29
 c72:	cf 93       	push	r28
 c74:	cd b7       	in	r28, 0x3d	; 61
 c76:	de b7       	in	r29, 0x3e	; 62
//static u8 state = 0;
//DIO_U8_Set_Pin_value(PORTB_ID,DIO_U8_PIN0,Toggle_Bit(state,0));

#if TIMER0_MODE == PHASE_SHIFT
	static flag = 0 ;
	if(flag==0)
 c78:	80 91 68 00 	lds	r24, 0x0068
 c7c:	90 91 69 00 	lds	r25, 0x0069
 c80:	00 97       	sbiw	r24, 0x00	; 0
 c82:	61 f4       	brne	.+24     	; 0xc9c <__vector_10+0x4e>
	{
		DIO_U8_Set_Pin_value(PORTB_ID,DIO_U8_PIN0,PIN_LOW);
 c84:	81 e0       	ldi	r24, 0x01	; 1
 c86:	60 e0       	ldi	r22, 0x00	; 0
 c88:	40 e0       	ldi	r20, 0x00	; 0
 c8a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <DIO_U8_Set_Pin_value>
		flag=1;
 c8e:	81 e0       	ldi	r24, 0x01	; 1
 c90:	90 e0       	ldi	r25, 0x00	; 0
 c92:	90 93 69 00 	sts	0x0069, r25
 c96:	80 93 68 00 	sts	0x0068, r24
 c9a:	10 c0       	rjmp	.+32     	; 0xcbc <__vector_10+0x6e>
	}
	else if(flag==1)
 c9c:	80 91 68 00 	lds	r24, 0x0068
 ca0:	90 91 69 00 	lds	r25, 0x0069
 ca4:	81 30       	cpi	r24, 0x01	; 1
 ca6:	91 05       	cpc	r25, r1
 ca8:	49 f4       	brne	.+18     	; 0xcbc <__vector_10+0x6e>
	{
		DIO_U8_Set_Pin_value(PORTB_ID,DIO_U8_PIN0,PIN_HIGH);
 caa:	81 e0       	ldi	r24, 0x01	; 1
 cac:	60 e0       	ldi	r22, 0x00	; 0
 cae:	41 e0       	ldi	r20, 0x01	; 1
 cb0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <DIO_U8_Set_Pin_value>
		flag=0;
 cb4:	10 92 69 00 	sts	0x0069, r1
 cb8:	10 92 68 00 	sts	0x0068, r1
	}
#endif

}
 cbc:	cf 91       	pop	r28
 cbe:	df 91       	pop	r29
 cc0:	ff 91       	pop	r31
 cc2:	ef 91       	pop	r30
 cc4:	bf 91       	pop	r27
 cc6:	af 91       	pop	r26
 cc8:	9f 91       	pop	r25
 cca:	8f 91       	pop	r24
 ccc:	7f 91       	pop	r23
 cce:	6f 91       	pop	r22
 cd0:	5f 91       	pop	r21
 cd2:	4f 91       	pop	r20
 cd4:	3f 91       	pop	r19
 cd6:	2f 91       	pop	r18
 cd8:	0f 90       	pop	r0
 cda:	0f be       	out	0x3f, r0	; 63
 cdc:	0f 90       	pop	r0
 cde:	1f 90       	pop	r1
 ce0:	18 95       	reti

00000ce2 <TIMER0_void_Init>:



void TIMER0_void_Init(void)
{
 ce2:	df 93       	push	r29
 ce4:	cf 93       	push	r28
 ce6:	cd b7       	in	r28, 0x3d	; 61
 ce8:	de b7       	in	r29, 0x3e	; 62


#elif TIMER0_MODE == PHASE_SHIFT

		/*waveform generation mode*/
		Clear_Bit(TIMER_U8_TCCR0 , DIO_U8_PIN3 );
 cea:	a3 e5       	ldi	r26, 0x53	; 83
 cec:	b0 e0       	ldi	r27, 0x00	; 0
 cee:	e3 e5       	ldi	r30, 0x53	; 83
 cf0:	f0 e0       	ldi	r31, 0x00	; 0
 cf2:	80 81       	ld	r24, Z
 cf4:	87 7f       	andi	r24, 0xF7	; 247
 cf6:	8c 93       	st	X, r24
		Set_Bit(TIMER_U8_TCCR0 , DIO_U8_PIN6);
 cf8:	a3 e5       	ldi	r26, 0x53	; 83
 cfa:	b0 e0       	ldi	r27, 0x00	; 0
 cfc:	e3 e5       	ldi	r30, 0x53	; 83
 cfe:	f0 e0       	ldi	r31, 0x00	; 0
 d00:	80 81       	ld	r24, Z
 d02:	80 64       	ori	r24, 0x40	; 64
 d04:	8c 93       	st	X, r24
		/*compare match value*/
		#if TIMER0_OUTPUT_OF_OC0 == Clear_OC0_when_up_counting_Set_OC0_when_downcounting
		TIMER_U8_OCR0 = (TIMER0_DUTY_CYCLE_VAL * TIMER0_TOP_VAL)/100 ;
 d06:	ec e5       	ldi	r30, 0x5C	; 92
 d08:	f0 e0       	ldi	r31, 0x00	; 0
 d0a:	8f e7       	ldi	r24, 0x7F	; 127
 d0c:	80 83       	st	Z, r24
		TIMER_U8_OCR0 = (TIMER0_TOP_VAL - ((TIMER0_DUTY_CYCLE_VAL * TIMER0_TOP_VAL )/100))  ;
		#endif

	    //enable or disable interrupt falg for CTC_mode
		#if TIMER0_CTC_INTERRUPT == Enable
			Set_Bit(TIMER_U8_TIMSK0 , 1);
 d0e:	a9 e5       	ldi	r26, 0x59	; 89
 d10:	b0 e0       	ldi	r27, 0x00	; 0
 d12:	e9 e5       	ldi	r30, 0x59	; 89
 d14:	f0 e0       	ldi	r31, 0x00	; 0
 d16:	80 81       	ld	r24, Z
 d18:	82 60       	ori	r24, 0x02	; 2
 d1a:	8c 93       	st	X, r24
			Set_Bit(TIMER_U8_SREG,7);
 d1c:	af e5       	ldi	r26, 0x5F	; 95
 d1e:	b0 e0       	ldi	r27, 0x00	; 0
 d20:	ef e5       	ldi	r30, 0x5F	; 95
 d22:	f0 e0       	ldi	r31, 0x00	; 0
 d24:	80 81       	ld	r24, Z
 d26:	80 68       	ori	r24, 0x80	; 128
 d28:	8c 93       	st	X, r24
		#elif TIMER0_CTC_INTERRUPT == Disable
			Clear_Bit(TIMER_U8_TIMSK0 , 1);
		#endif

			/*Presclaer*/
			Assign_Bit(TIMER_U8_TCCR0 , DIO_U8_PIN0 , Get_Bit(TIMER0_PRESCALER,0));
 d2a:	a3 e5       	ldi	r26, 0x53	; 83
 d2c:	b0 e0       	ldi	r27, 0x00	; 0
 d2e:	e3 e5       	ldi	r30, 0x53	; 83
 d30:	f0 e0       	ldi	r31, 0x00	; 0
 d32:	80 81       	ld	r24, Z
 d34:	8e 7f       	andi	r24, 0xFE	; 254
 d36:	8c 93       	st	X, r24
			Assign_Bit(TIMER_U8_TCCR0 , DIO_U8_PIN1 , Get_Bit(TIMER0_PRESCALER,1));
 d38:	a3 e5       	ldi	r26, 0x53	; 83
 d3a:	b0 e0       	ldi	r27, 0x00	; 0
 d3c:	e3 e5       	ldi	r30, 0x53	; 83
 d3e:	f0 e0       	ldi	r31, 0x00	; 0
 d40:	80 81       	ld	r24, Z
 d42:	82 60       	ori	r24, 0x02	; 2
 d44:	8c 93       	st	X, r24
			Assign_Bit(TIMER_U8_TCCR0 , DIO_U8_PIN2 , Get_Bit(TIMER0_PRESCALER,2));
 d46:	a3 e5       	ldi	r26, 0x53	; 83
 d48:	b0 e0       	ldi	r27, 0x00	; 0
 d4a:	e3 e5       	ldi	r30, 0x53	; 83
 d4c:	f0 e0       	ldi	r31, 0x00	; 0
 d4e:	80 81       	ld	r24, Z
 d50:	8b 7f       	andi	r24, 0xFB	; 251
 d52:	8c 93       	st	X, r24
			/*Control output of OC0 pin in 	pwm phase_correct  mode */
		#if TIMER0_OUTPUT_OF_OC0 == OC0_disconnected
			Assign_Bit(TIMER_U8_TCCR0 , DIO_U8_PIN4 , Get_Bit(TIMER0_OUTPUT_OF_OC0,0));
			Assign_Bit(TIMER_U8_TCCR0 , DIO_U8_PIN5 , Get_Bit(TIMER0_OUTPUT_OF_OC0,1));
		#else
			DIO_U8_Set_Pin_Dir(PORTB_ID,DIO_U8_PIN3,PIN_OUTPUT);
 d54:	81 e0       	ldi	r24, 0x01	; 1
 d56:	63 e0       	ldi	r22, 0x03	; 3
 d58:	41 e0       	ldi	r20, 0x01	; 1
 d5a:	0e 94 15 01 	call	0x22a	; 0x22a <DIO_U8_Set_Pin_Dir>
			Assign_Bit(TIMER_U8_TCCR0 , DIO_U8_PIN4 , Get_Bit(TIMER0_OUTPUT_OF_OC0,0));
 d5e:	a3 e5       	ldi	r26, 0x53	; 83
 d60:	b0 e0       	ldi	r27, 0x00	; 0
 d62:	e3 e5       	ldi	r30, 0x53	; 83
 d64:	f0 e0       	ldi	r31, 0x00	; 0
 d66:	80 81       	ld	r24, Z
 d68:	8f 7e       	andi	r24, 0xEF	; 239
 d6a:	8c 93       	st	X, r24
			Assign_Bit(TIMER_U8_TCCR0 , DIO_U8_PIN5 , Get_Bit(TIMER0_OUTPUT_OF_OC0,1));
 d6c:	a3 e5       	ldi	r26, 0x53	; 83
 d6e:	b0 e0       	ldi	r27, 0x00	; 0
 d70:	e3 e5       	ldi	r30, 0x53	; 83
 d72:	f0 e0       	ldi	r31, 0x00	; 0
 d74:	80 81       	ld	r24, Z
 d76:	80 62       	ori	r24, 0x20	; 32
 d78:	8c 93       	st	X, r24
		#endif
			/*force ctc */
			Clear_Bit(TIMER_U8_TCCR0,7);
 d7a:	a3 e5       	ldi	r26, 0x53	; 83
 d7c:	b0 e0       	ldi	r27, 0x00	; 0
 d7e:	e3 e5       	ldi	r30, 0x53	; 83
 d80:	f0 e0       	ldi	r31, 0x00	; 0
 d82:	80 81       	ld	r24, Z
 d84:	8f 77       	andi	r24, 0x7F	; 127
 d86:	8c 93       	st	X, r24


#endif
}
 d88:	cf 91       	pop	r28
 d8a:	df 91       	pop	r29
 d8c:	08 95       	ret

00000d8e <TIMER0_SET_OCR0>:
}
#endif


void TIMER0_SET_OCR0(u8 value)
{
 d8e:	df 93       	push	r29
 d90:	cf 93       	push	r28
 d92:	0f 92       	push	r0
 d94:	cd b7       	in	r28, 0x3d	; 61
 d96:	de b7       	in	r29, 0x3e	; 62
 d98:	89 83       	std	Y+1, r24	; 0x01
	TIMER_U8_OCR0 = value ;
 d9a:	ec e5       	ldi	r30, 0x5C	; 92
 d9c:	f0 e0       	ldi	r31, 0x00	; 0
 d9e:	89 81       	ldd	r24, Y+1	; 0x01
 da0:	80 83       	st	Z, r24
}
 da2:	0f 90       	pop	r0
 da4:	cf 91       	pop	r28
 da6:	df 91       	pop	r29
 da8:	08 95       	ret

00000daa <UART_void_Init>:
#include"UART_config.h"
#include"UART_private.h"
#include"UART_interface.h"

void UART_void_Init(void)
{
 daa:	df 93       	push	r29
 dac:	cf 93       	push	r28
 dae:	cd b7       	in	r28, 0x3d	; 61
 db0:	de b7       	in	r29, 0x3e	; 62
	UART_U8_UBRRH = 0 ;    // Reg select is UBRRH
 db2:	e0 e4       	ldi	r30, 0x40	; 64
 db4:	f0 e0       	ldi	r31, 0x00	; 0
 db6:	10 82       	st	Z, r1
	UART_U8_UBRRL = 51 ;   // UBRR value = (system frq / (16*bude rate) ) -1
 db8:	e9 e2       	ldi	r30, 0x29	; 41
 dba:	f0 e0       	ldi	r31, 0x00	; 0
 dbc:	83 e3       	ldi	r24, 0x33	; 51
 dbe:	80 83       	st	Z, r24
	UART_U8_UCSRC = 0b10000110; // REG select is UCSRC
 dc0:	e0 e4       	ldi	r30, 0x40	; 64
 dc2:	f0 e0       	ldi	r31, 0x00	; 0
 dc4:	86 e8       	ldi	r24, 0x86	; 134
 dc6:	80 83       	st	Z, r24
								// Asynch
								// no parity
								// stop bit


	UART_U8_UCSRB=0b00011000;   // receiver enable , tx enable
 dc8:	ea e2       	ldi	r30, 0x2A	; 42
 dca:	f0 e0       	ldi	r31, 0x00	; 0
 dcc:	88 e1       	ldi	r24, 0x18	; 24
 dce:	80 83       	st	Z, r24
								// 8 bits --> data bits


}
 dd0:	cf 91       	pop	r28
 dd2:	df 91       	pop	r29
 dd4:	08 95       	ret

00000dd6 <UART_void_Send_Char>:
void UART_void_Send_Char(u8 Copy_U8_Data)
{
 dd6:	df 93       	push	r29
 dd8:	cf 93       	push	r28
 dda:	0f 92       	push	r0
 ddc:	cd b7       	in	r28, 0x3d	; 61
 dde:	de b7       	in	r29, 0x3e	; 62
 de0:	89 83       	std	Y+1, r24	; 0x01
	while(Get_Bit(UART_U8_UCSRA,5)==0);
 de2:	eb e2       	ldi	r30, 0x2B	; 43
 de4:	f0 e0       	ldi	r31, 0x00	; 0
 de6:	80 81       	ld	r24, Z
 de8:	82 95       	swap	r24
 dea:	86 95       	lsr	r24
 dec:	87 70       	andi	r24, 0x07	; 7
 dee:	88 2f       	mov	r24, r24
 df0:	90 e0       	ldi	r25, 0x00	; 0
 df2:	81 70       	andi	r24, 0x01	; 1
 df4:	90 70       	andi	r25, 0x00	; 0
 df6:	00 97       	sbiw	r24, 0x00	; 0
 df8:	a1 f3       	breq	.-24     	; 0xde2 <UART_void_Send_Char+0xc>
//	Set_Bit(UART_U8_UCSRA,5);
	UART_U8_UDR = Copy_U8_Data ;
 dfa:	ec e2       	ldi	r30, 0x2C	; 44
 dfc:	f0 e0       	ldi	r31, 0x00	; 0
 dfe:	89 81       	ldd	r24, Y+1	; 0x01
 e00:	80 83       	st	Z, r24

}
 e02:	0f 90       	pop	r0
 e04:	cf 91       	pop	r28
 e06:	df 91       	pop	r29
 e08:	08 95       	ret

00000e0a <UART_U8_Receive_Char>:

u8 UART_U8_Receive_Char(void)
{
 e0a:	df 93       	push	r29
 e0c:	cf 93       	push	r28
 e0e:	cd b7       	in	r28, 0x3d	; 61
 e10:	de b7       	in	r29, 0x3e	; 62
	while(Get_Bit(UART_U8_UCSRA,7)==0);
 e12:	eb e2       	ldi	r30, 0x2B	; 43
 e14:	f0 e0       	ldi	r31, 0x00	; 0
 e16:	80 81       	ld	r24, Z
 e18:	88 23       	and	r24, r24
 e1a:	dc f7       	brge	.-10     	; 0xe12 <UART_U8_Receive_Char+0x8>
	return UART_U8_UDR ;
 e1c:	ec e2       	ldi	r30, 0x2C	; 44
 e1e:	f0 e0       	ldi	r31, 0x00	; 0
 e20:	80 81       	ld	r24, Z
}
 e22:	cf 91       	pop	r28
 e24:	df 91       	pop	r29
 e26:	08 95       	ret

00000e28 <UART_void_Send_String>:

void UART_void_Send_String(u8 *Copy_U8_Str)
{
 e28:	df 93       	push	r29
 e2a:	cf 93       	push	r28
 e2c:	00 d0       	rcall	.+0      	; 0xe2e <UART_void_Send_String+0x6>
 e2e:	cd b7       	in	r28, 0x3d	; 61
 e30:	de b7       	in	r29, 0x3e	; 62
 e32:	9a 83       	std	Y+2, r25	; 0x02
 e34:	89 83       	std	Y+1, r24	; 0x01
 e36:	0a c0       	rjmp	.+20     	; 0xe4c <UART_void_Send_String+0x24>
	while(*Copy_U8_Str != '\0')
	{
		UART_void_Send_Char(*Copy_U8_Str);
 e38:	e9 81       	ldd	r30, Y+1	; 0x01
 e3a:	fa 81       	ldd	r31, Y+2	; 0x02
 e3c:	80 81       	ld	r24, Z
 e3e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <UART_void_Send_Char>
		Copy_U8_Str++;
 e42:	89 81       	ldd	r24, Y+1	; 0x01
 e44:	9a 81       	ldd	r25, Y+2	; 0x02
 e46:	01 96       	adiw	r24, 0x01	; 1
 e48:	9a 83       	std	Y+2, r25	; 0x02
 e4a:	89 83       	std	Y+1, r24	; 0x01
	return UART_U8_UDR ;
}

void UART_void_Send_String(u8 *Copy_U8_Str)
{
	while(*Copy_U8_Str != '\0')
 e4c:	e9 81       	ldd	r30, Y+1	; 0x01
 e4e:	fa 81       	ldd	r31, Y+2	; 0x02
 e50:	80 81       	ld	r24, Z
 e52:	88 23       	and	r24, r24
 e54:	89 f7       	brne	.-30     	; 0xe38 <UART_void_Send_String+0x10>
	{
		UART_void_Send_Char(*Copy_U8_Str);
		Copy_U8_Str++;
	}
}
 e56:	0f 90       	pop	r0
 e58:	0f 90       	pop	r0
 e5a:	cf 91       	pop	r28
 e5c:	df 91       	pop	r29
 e5e:	08 95       	ret

00000e60 <UART_void_Receive_String>:
void UART_void_Receive_String(u8 *Copy_U8_arr)
{
 e60:	0f 93       	push	r16
 e62:	1f 93       	push	r17
 e64:	df 93       	push	r29
 e66:	cf 93       	push	r28
 e68:	00 d0       	rcall	.+0      	; 0xe6a <UART_void_Receive_String+0xa>
 e6a:	0f 92       	push	r0
 e6c:	cd b7       	in	r28, 0x3d	; 61
 e6e:	de b7       	in	r29, 0x3e	; 62
 e70:	9b 83       	std	Y+3, r25	; 0x03
 e72:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
 e74:	19 82       	std	Y+1, r1	; 0x01
	// use do while
	Copy_U8_arr[i] = UART_U8_Receive_Char();
 e76:	89 81       	ldd	r24, Y+1	; 0x01
 e78:	28 2f       	mov	r18, r24
 e7a:	30 e0       	ldi	r19, 0x00	; 0
 e7c:	8a 81       	ldd	r24, Y+2	; 0x02
 e7e:	9b 81       	ldd	r25, Y+3	; 0x03
 e80:	8c 01       	movw	r16, r24
 e82:	02 0f       	add	r16, r18
 e84:	13 1f       	adc	r17, r19
 e86:	0e 94 05 07 	call	0xe0a	; 0xe0a <UART_U8_Receive_Char>
 e8a:	f8 01       	movw	r30, r16
 e8c:	80 83       	st	Z, r24
 e8e:	0f c0       	rjmp	.+30     	; 0xeae <UART_void_Receive_String+0x4e>

	while(Copy_U8_arr[i]!='K')
	{
	i++;
 e90:	89 81       	ldd	r24, Y+1	; 0x01
 e92:	8f 5f       	subi	r24, 0xFF	; 255
 e94:	89 83       	std	Y+1, r24	; 0x01
	Copy_U8_arr[i] = UART_U8_Receive_Char();
 e96:	89 81       	ldd	r24, Y+1	; 0x01
 e98:	28 2f       	mov	r18, r24
 e9a:	30 e0       	ldi	r19, 0x00	; 0
 e9c:	8a 81       	ldd	r24, Y+2	; 0x02
 e9e:	9b 81       	ldd	r25, Y+3	; 0x03
 ea0:	8c 01       	movw	r16, r24
 ea2:	02 0f       	add	r16, r18
 ea4:	13 1f       	adc	r17, r19
 ea6:	0e 94 05 07 	call	0xe0a	; 0xe0a <UART_U8_Receive_Char>
 eaa:	f8 01       	movw	r30, r16
 eac:	80 83       	st	Z, r24
{
	u8 i=0;
	// use do while
	Copy_U8_arr[i] = UART_U8_Receive_Char();

	while(Copy_U8_arr[i]!='K')
 eae:	89 81       	ldd	r24, Y+1	; 0x01
 eb0:	28 2f       	mov	r18, r24
 eb2:	30 e0       	ldi	r19, 0x00	; 0
 eb4:	8a 81       	ldd	r24, Y+2	; 0x02
 eb6:	9b 81       	ldd	r25, Y+3	; 0x03
 eb8:	fc 01       	movw	r30, r24
 eba:	e2 0f       	add	r30, r18
 ebc:	f3 1f       	adc	r31, r19
 ebe:	80 81       	ld	r24, Z
 ec0:	8b 34       	cpi	r24, 0x4B	; 75
 ec2:	31 f7       	brne	.-52     	; 0xe90 <UART_void_Receive_String+0x30>
	{
	i++;
	Copy_U8_arr[i] = UART_U8_Receive_Char();

	}
}
 ec4:	0f 90       	pop	r0
 ec6:	0f 90       	pop	r0
 ec8:	0f 90       	pop	r0
 eca:	cf 91       	pop	r28
 ecc:	df 91       	pop	r29
 ece:	1f 91       	pop	r17
 ed0:	0f 91       	pop	r16
 ed2:	08 95       	ret

00000ed4 <APP_voidInit>:

static void APP_CheckPass();


void APP_voidInit()
{
 ed4:	df 93       	push	r29
 ed6:	cf 93       	push	r28
 ed8:	cd b7       	in	r28, 0x3d	; 61
 eda:	de b7       	in	r29, 0x3e	; 62
	DIO_void_Init();
 edc:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_void_Init>
	UART_void_Init();
 ee0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <UART_void_Init>
}
 ee4:	cf 91       	pop	r28
 ee6:	df 91       	pop	r29
 ee8:	08 95       	ret

00000eea <APP_voidStart_Work>:

void APP_voidStart_Work()
{
 eea:	df 93       	push	r29
 eec:	cf 93       	push	r28
 eee:	cd b7       	in	r28, 0x3d	; 61
 ef0:	de b7       	in	r29, 0x3e	; 62
	APP_CheckPass();
 ef2:	0e 94 7e 07 	call	0xefc	; 0xefc <APP_CheckPass>
}
 ef6:	cf 91       	pop	r28
 ef8:	df 91       	pop	r29
 efa:	08 95       	ret

00000efc <APP_CheckPass>:


static void APP_CheckPass()
{
 efc:	df 93       	push	r29
 efe:	cf 93       	push	r28
 f00:	00 d0       	rcall	.+0      	; 0xf02 <APP_CheckPass+0x6>
 f02:	cd b7       	in	r28, 0x3d	; 61
 f04:	de b7       	in	r29, 0x3e	; 62
	u8 state = CORRECT_PASSWORD ;
 f06:	81 e0       	ldi	r24, 0x01	; 1
 f08:	8a 83       	std	Y+2, r24	; 0x02
	UART_void_Receive_String(checkPass);
 f0a:	8c e7       	ldi	r24, 0x7C	; 124
 f0c:	90 e0       	ldi	r25, 0x00	; 0
 f0e:	0e 94 30 07 	call	0xe60	; 0xe60 <UART_void_Receive_String>

	 /*check password*/
	 for(u8 j = 0 ; j<4 ; j++)
 f12:	19 82       	std	Y+1, r1	; 0x01
 f14:	15 c0       	rjmp	.+42     	; 0xf40 <APP_CheckPass+0x44>
	 {
		 if(checkPass[j]!=password[j])
 f16:	89 81       	ldd	r24, Y+1	; 0x01
 f18:	88 2f       	mov	r24, r24
 f1a:	90 e0       	ldi	r25, 0x00	; 0
 f1c:	fc 01       	movw	r30, r24
 f1e:	e4 58       	subi	r30, 0x84	; 132
 f20:	ff 4f       	sbci	r31, 0xFF	; 255
 f22:	20 81       	ld	r18, Z
 f24:	89 81       	ldd	r24, Y+1	; 0x01
 f26:	88 2f       	mov	r24, r24
 f28:	90 e0       	ldi	r25, 0x00	; 0
 f2a:	fc 01       	movw	r30, r24
 f2c:	ee 59       	subi	r30, 0x9E	; 158
 f2e:	ff 4f       	sbci	r31, 0xFF	; 255
 f30:	80 81       	ld	r24, Z
 f32:	28 17       	cp	r18, r24
 f34:	11 f0       	breq	.+4      	; 0xf3a <APP_CheckPass+0x3e>
		 {
			state = WRONG_PASSWORD ;
 f36:	1a 82       	std	Y+2, r1	; 0x02
 f38:	06 c0       	rjmp	.+12     	; 0xf46 <APP_CheckPass+0x4a>
{
	u8 state = CORRECT_PASSWORD ;
	UART_void_Receive_String(checkPass);

	 /*check password*/
	 for(u8 j = 0 ; j<4 ; j++)
 f3a:	89 81       	ldd	r24, Y+1	; 0x01
 f3c:	8f 5f       	subi	r24, 0xFF	; 255
 f3e:	89 83       	std	Y+1, r24	; 0x01
 f40:	89 81       	ldd	r24, Y+1	; 0x01
 f42:	84 30       	cpi	r24, 0x04	; 4
 f44:	40 f3       	brcs	.-48     	; 0xf16 <APP_CheckPass+0x1a>
		 {
			state = WRONG_PASSWORD ;
			break;
		 }
	 }
	 UART_void_Send_Char(state);
 f46:	8a 81       	ldd	r24, Y+2	; 0x02
 f48:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <UART_void_Send_Char>
}
 f4c:	0f 90       	pop	r0
 f4e:	0f 90       	pop	r0
 f50:	cf 91       	pop	r28
 f52:	df 91       	pop	r29
 f54:	08 95       	ret

00000f56 <main>:



#include"app.h"
void main(void)
{
 f56:	df 93       	push	r29
 f58:	cf 93       	push	r28
 f5a:	cd b7       	in	r28, 0x3d	; 61
 f5c:	de b7       	in	r29, 0x3e	; 62
	APP_voidInit();
 f5e:	0e 94 6a 07 	call	0xed4	; 0xed4 <APP_voidInit>
	APP_voidStart_Work();
 f62:	0e 94 75 07 	call	0xeea	; 0xeea <APP_voidStart_Work>
 f66:	ff cf       	rjmp	.-2      	; 0xf66 <main+0x10>

00000f68 <_exit>:
 f68:	f8 94       	cli

00000f6a <__stop_program>:
 f6a:	ff cf       	rjmp	.-2      	; 0xf6a <__stop_program>
