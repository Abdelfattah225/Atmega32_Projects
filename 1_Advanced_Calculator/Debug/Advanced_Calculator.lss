
Advanced_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000362c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  0000362c  000036c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800192  00800192  000037f2  2**0
                  ALLOC
  3 .stab         000024cc  00000000  00000000  000037f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e61  00000000  00000000  00005cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000092be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a644  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b81c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b9dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000bcd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c640  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4e 1a 	call	0x349c	; 0x349c <main>
      8a:	0c 94 14 1b 	jmp	0x3628	; 0x3628 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 98 1a 	jmp	0x3530	; 0x3530 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b4 1a 	jmp	0x3568	; 0x3568 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 98 1a 	jmp	0x3530	; 0x3530 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b4 1a 	jmp	0x3568	; 0x3568 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e7       	ldi	r22, 0x72	; 114
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a8 1a 	jmp	0x3550	; 0x3550 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e6 58       	subi	r30, 0x86	; 134
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <INTIAL_DIR>:
/*****************************************************************************/
/***********************************fucntion**********************************/
/********************************************************************************/

u8 INTIAL_DIR(u8 p0 , u8 p1 , u8 p2 , u8 p3 , u8 p4 , u8 p5 , u8 p6 , u8 p7)
{
     e2e:	af 92       	push	r10
     e30:	cf 92       	push	r12
     e32:	ef 92       	push	r14
     e34:	0f 93       	push	r16
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	29 97       	sbiw	r28, 0x09	; 9
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	8a 83       	std	Y+2, r24	; 0x02
     e4c:	6b 83       	std	Y+3, r22	; 0x03
     e4e:	4c 83       	std	Y+4, r20	; 0x04
     e50:	2d 83       	std	Y+5, r18	; 0x05
     e52:	0e 83       	std	Y+6, r16	; 0x06
     e54:	ef 82       	std	Y+7, r14	; 0x07
     e56:	c8 86       	std	Y+8, r12	; 0x08
     e58:	a9 86       	std	Y+9, r10	; 0x09
	u8 port = 0x00 ;
     e5a:	19 82       	std	Y+1, r1	; 0x01
	Assign_Bit(port,DIO_U8_PIN0,p0);
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	21 f4       	brne	.+8      	; 0xe6a <INTIAL_DIR+0x3c>
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	81 60       	ori	r24, 0x01	; 1
     e66:	89 83       	std	Y+1, r24	; 0x01
     e68:	03 c0       	rjmp	.+6      	; 0xe70 <INTIAL_DIR+0x42>
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	8e 7f       	andi	r24, 0xFE	; 254
     e6e:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN1,p1);
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	21 f4       	brne	.+8      	; 0xe7e <INTIAL_DIR+0x50>
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	82 60       	ori	r24, 0x02	; 2
     e7a:	89 83       	std	Y+1, r24	; 0x01
     e7c:	03 c0       	rjmp	.+6      	; 0xe84 <INTIAL_DIR+0x56>
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	8d 7f       	andi	r24, 0xFD	; 253
     e82:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN2,p2);
     e84:	8c 81       	ldd	r24, Y+4	; 0x04
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	21 f4       	brne	.+8      	; 0xe92 <INTIAL_DIR+0x64>
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	84 60       	ori	r24, 0x04	; 4
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	03 c0       	rjmp	.+6      	; 0xe98 <INTIAL_DIR+0x6a>
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	8b 7f       	andi	r24, 0xFB	; 251
     e96:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN3,p3);
     e98:	8d 81       	ldd	r24, Y+5	; 0x05
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	21 f4       	brne	.+8      	; 0xea6 <INTIAL_DIR+0x78>
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	88 60       	ori	r24, 0x08	; 8
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	03 c0       	rjmp	.+6      	; 0xeac <INTIAL_DIR+0x7e>
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	87 7f       	andi	r24, 0xF7	; 247
     eaa:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN4,p4);
     eac:	8e 81       	ldd	r24, Y+6	; 0x06
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	21 f4       	brne	.+8      	; 0xeba <INTIAL_DIR+0x8c>
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	80 61       	ori	r24, 0x10	; 16
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	03 c0       	rjmp	.+6      	; 0xec0 <INTIAL_DIR+0x92>
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	8f 7e       	andi	r24, 0xEF	; 239
     ebe:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN5,p5);
     ec0:	8f 81       	ldd	r24, Y+7	; 0x07
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	21 f4       	brne	.+8      	; 0xece <INTIAL_DIR+0xa0>
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	80 62       	ori	r24, 0x20	; 32
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	03 c0       	rjmp	.+6      	; 0xed4 <INTIAL_DIR+0xa6>
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	8f 7d       	andi	r24, 0xDF	; 223
     ed2:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN6,p6);
     ed4:	88 85       	ldd	r24, Y+8	; 0x08
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	21 f4       	brne	.+8      	; 0xee2 <INTIAL_DIR+0xb4>
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	80 64       	ori	r24, 0x40	; 64
     ede:	89 83       	std	Y+1, r24	; 0x01
     ee0:	03 c0       	rjmp	.+6      	; 0xee8 <INTIAL_DIR+0xba>
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	8f 7b       	andi	r24, 0xBF	; 191
     ee6:	89 83       	std	Y+1, r24	; 0x01
	Assign_Bit(port,DIO_U8_PIN7,p7);
     ee8:	89 85       	ldd	r24, Y+9	; 0x09
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	21 f4       	brne	.+8      	; 0xef6 <INTIAL_DIR+0xc8>
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	80 68       	ori	r24, 0x80	; 128
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	03 c0       	rjmp	.+6      	; 0xefc <INTIAL_DIR+0xce>
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	8f 77       	andi	r24, 0x7F	; 127
     efa:	89 83       	std	Y+1, r24	; 0x01
	return port;
     efc:	89 81       	ldd	r24, Y+1	; 0x01

}
     efe:	29 96       	adiw	r28, 0x09	; 9
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	0f 91       	pop	r16
     f10:	ef 90       	pop	r14
     f12:	cf 90       	pop	r12
     f14:	af 90       	pop	r10
     f16:	08 95       	ret

00000f18 <DIO_void_Init>:


void DIO_void_Init(void)
{
     f18:	8f 92       	push	r8
     f1a:	9f 92       	push	r9
     f1c:	af 92       	push	r10
     f1e:	cf 92       	push	r12
     f20:	ef 92       	push	r14
     f22:	0f 93       	push	r16
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
	/*direction*/
	DIO_U8_DDRA =INTIAL_DIR(DIO_u8_PA0_INTIAL_DIR,DIO_u8_PA1_INTIAL_DIR,DIO_u8_PA2_INTIAL_DIR,DIO_u8_PA3_INTIAL_DIR,DIO_u8_PA4_INTIAL_DIR,DIO_u8_PA5_INTIAL_DIR,DIO_u8_PA6_INTIAL_DIR,DIO_u8_PA7_INTIAL_DIR);
     f2c:	0f 2e       	mov	r0, r31
     f2e:	fa e3       	ldi	r31, 0x3A	; 58
     f30:	8f 2e       	mov	r8, r31
     f32:	99 24       	eor	r9, r9
     f34:	f0 2d       	mov	r31, r0
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	61 e0       	ldi	r22, 0x01	; 1
     f3a:	41 e0       	ldi	r20, 0x01	; 1
     f3c:	21 e0       	ldi	r18, 0x01	; 1
     f3e:	01 e0       	ldi	r16, 0x01	; 1
     f40:	ee 24       	eor	r14, r14
     f42:	e3 94       	inc	r14
     f44:	cc 24       	eor	r12, r12
     f46:	c3 94       	inc	r12
     f48:	aa 24       	eor	r10, r10
     f4a:	a3 94       	inc	r10
     f4c:	0e 94 17 07 	call	0xe2e	; 0xe2e <INTIAL_DIR>
     f50:	f4 01       	movw	r30, r8
     f52:	80 83       	st	Z, r24
	DIO_U8_DDRB =INTIAL_DIR(DIO_u8_PB0_INTIAL_DIR,DIO_u8_PB1_INTIAL_DIR,DIO_u8_PB2_INTIAL_DIR,DIO_u8_PB3_INTIAL_DIR,DIO_u8_PB4_INTIAL_DIR,DIO_u8_PB5_INTIAL_DIR,DIO_u8_PB6_INTIAL_DIR,DIO_u8_PB7_INTIAL_DIR);
     f54:	0f 2e       	mov	r0, r31
     f56:	f7 e3       	ldi	r31, 0x37	; 55
     f58:	8f 2e       	mov	r8, r31
     f5a:	99 24       	eor	r9, r9
     f5c:	f0 2d       	mov	r31, r0
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	00 e0       	ldi	r16, 0x00	; 0
     f68:	ee 24       	eor	r14, r14
     f6a:	cc 24       	eor	r12, r12
     f6c:	aa 24       	eor	r10, r10
     f6e:	0e 94 17 07 	call	0xe2e	; 0xe2e <INTIAL_DIR>
     f72:	f4 01       	movw	r30, r8
     f74:	80 83       	st	Z, r24
	DIO_U8_DDRC =INTIAL_DIR(DIO_u8_PC0_INTIAL_DIR,DIO_u8_PC1_INTIAL_DIR,DIO_u8_PC2_INTIAL_DIR,DIO_u8_PC3_INTIAL_DIR,DIO_u8_PC4_INTIAL_DIR,DIO_u8_PC5_INTIAL_DIR,DIO_u8_PC6_INTIAL_DIR,DIO_u8_PC7_INTIAL_DIR);
     f76:	0f 2e       	mov	r0, r31
     f78:	f4 e3       	ldi	r31, 0x34	; 52
     f7a:	8f 2e       	mov	r8, r31
     f7c:	99 24       	eor	r9, r9
     f7e:	f0 2d       	mov	r31, r0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	61 e0       	ldi	r22, 0x01	; 1
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	00 e0       	ldi	r16, 0x00	; 0
     f8a:	ee 24       	eor	r14, r14
     f8c:	cc 24       	eor	r12, r12
     f8e:	aa 24       	eor	r10, r10
     f90:	0e 94 17 07 	call	0xe2e	; 0xe2e <INTIAL_DIR>
     f94:	f4 01       	movw	r30, r8
     f96:	80 83       	st	Z, r24
	DIO_U8_DDRD =INTIAL_DIR(DIO_u8_PD0_INTIAL_DIR,DIO_u8_PD1_INTIAL_DIR,DIO_u8_PD2_INTIAL_DIR,DIO_u8_PD3_INTIAL_DIR,DIO_u8_PD4_INTIAL_DIR,DIO_u8_PD5_INTIAL_DIR,DIO_u8_PD6_INTIAL_DIR,DIO_u8_PD7_INTIAL_DIR);
     f98:	0f 2e       	mov	r0, r31
     f9a:	f1 e3       	ldi	r31, 0x31	; 49
     f9c:	8f 2e       	mov	r8, r31
     f9e:	99 24       	eor	r9, r9
     fa0:	f0 2d       	mov	r31, r0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	41 e0       	ldi	r20, 0x01	; 1
     fa8:	21 e0       	ldi	r18, 0x01	; 1
     faa:	00 e0       	ldi	r16, 0x00	; 0
     fac:	ee 24       	eor	r14, r14
     fae:	cc 24       	eor	r12, r12
     fb0:	aa 24       	eor	r10, r10
     fb2:	0e 94 17 07 	call	0xe2e	; 0xe2e <INTIAL_DIR>
     fb6:	f4 01       	movw	r30, r8
     fb8:	80 83       	st	Z, r24
}
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	0f 91       	pop	r16
     fc0:	ef 90       	pop	r14
     fc2:	cf 90       	pop	r12
     fc4:	af 90       	pop	r10
     fc6:	9f 90       	pop	r9
     fc8:	8f 90       	pop	r8
     fca:	08 95       	ret

00000fcc <DIO_U8_Set_Pin_Dir>:

u8 DIO_U8_Set_Pin_Dir(u8 Copy_U8_Port_ID , u8 Copy_U8_Pin_ID , u8 Copy_U8_Pin_Dir)
{
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <DIO_U8_Set_Pin_Dir+0x6>
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <DIO_U8_Set_Pin_Dir+0x8>
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <DIO_U8_Set_Pin_Dir+0xa>
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	6a 83       	std	Y+2, r22	; 0x02
     fde:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	84 30       	cpi	r24, 0x04	; 4
     fe4:	08 f0       	brcs	.+2      	; 0xfe8 <DIO_U8_Set_Pin_Dir+0x1c>
     fe6:	e4 c0       	rjmp	.+456    	; 0x11b0 <DIO_U8_Set_Pin_Dir+0x1e4>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	88 30       	cpi	r24, 0x08	; 8
     fec:	08 f0       	brcs	.+2      	; 0xff0 <DIO_U8_Set_Pin_Dir+0x24>
     fee:	dd c0       	rjmp	.+442    	; 0x11aa <DIO_U8_Set_Pin_Dir+0x1de>
		{
			if((Copy_U8_Pin_Dir==PIN_INPUT)||(Copy_U8_Pin_Dir==PIN_OUTPUT))
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	88 23       	and	r24, r24
     ff4:	21 f0       	breq	.+8      	; 0xffe <DIO_U8_Set_Pin_Dir+0x32>
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	09 f0       	breq	.+2      	; 0xffe <DIO_U8_Set_Pin_Dir+0x32>
     ffc:	d4 c0       	rjmp	.+424    	; 0x11a6 <DIO_U8_Set_Pin_Dir+0x1da>
			{
				switch(Copy_U8_Port_ID)
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	3e 83       	std	Y+6, r19	; 0x06
    1006:	2d 83       	std	Y+5, r18	; 0x05
    1008:	8d 81       	ldd	r24, Y+5	; 0x05
    100a:	9e 81       	ldd	r25, Y+6	; 0x06
    100c:	81 30       	cpi	r24, 0x01	; 1
    100e:	91 05       	cpc	r25, r1
    1010:	09 f4       	brne	.+2      	; 0x1014 <DIO_U8_Set_Pin_Dir+0x48>
    1012:	43 c0       	rjmp	.+134    	; 0x109a <DIO_U8_Set_Pin_Dir+0xce>
    1014:	2d 81       	ldd	r18, Y+5	; 0x05
    1016:	3e 81       	ldd	r19, Y+6	; 0x06
    1018:	22 30       	cpi	r18, 0x02	; 2
    101a:	31 05       	cpc	r19, r1
    101c:	2c f4       	brge	.+10     	; 0x1028 <DIO_U8_Set_Pin_Dir+0x5c>
    101e:	8d 81       	ldd	r24, Y+5	; 0x05
    1020:	9e 81       	ldd	r25, Y+6	; 0x06
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	71 f0       	breq	.+28     	; 0x1042 <DIO_U8_Set_Pin_Dir+0x76>
    1026:	bc c0       	rjmp	.+376    	; 0x11a0 <DIO_U8_Set_Pin_Dir+0x1d4>
    1028:	2d 81       	ldd	r18, Y+5	; 0x05
    102a:	3e 81       	ldd	r19, Y+6	; 0x06
    102c:	22 30       	cpi	r18, 0x02	; 2
    102e:	31 05       	cpc	r19, r1
    1030:	09 f4       	brne	.+2      	; 0x1034 <DIO_U8_Set_Pin_Dir+0x68>
    1032:	5f c0       	rjmp	.+190    	; 0x10f2 <DIO_U8_Set_Pin_Dir+0x126>
    1034:	8d 81       	ldd	r24, Y+5	; 0x05
    1036:	9e 81       	ldd	r25, Y+6	; 0x06
    1038:	83 30       	cpi	r24, 0x03	; 3
    103a:	91 05       	cpc	r25, r1
    103c:	09 f4       	brne	.+2      	; 0x1040 <DIO_U8_Set_Pin_Dir+0x74>
    103e:	85 c0       	rjmp	.+266    	; 0x114a <DIO_U8_Set_Pin_Dir+0x17e>
    1040:	af c0       	rjmp	.+350    	; 0x11a0 <DIO_U8_Set_Pin_Dir+0x1d4>
				{
				case PORTA_ID:
					Assign_Bit(DIO_U8_DDRA,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	a1 f4       	brne	.+40     	; 0x1070 <DIO_U8_Set_Pin_Dir+0xa4>
    1048:	aa e3       	ldi	r26, 0x3A	; 58
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	ea e3       	ldi	r30, 0x3A	; 58
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 2e       	mov	r0, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <DIO_U8_Set_Pin_Dir+0x9a>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <DIO_U8_Set_Pin_Dir+0x96>
    106a:	84 2b       	or	r24, r20
    106c:	8c 93       	st	X, r24
    106e:	98 c0       	rjmp	.+304    	; 0x11a0 <DIO_U8_Set_Pin_Dir+0x1d4>
    1070:	aa e3       	ldi	r26, 0x3A	; 58
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ea e3       	ldi	r30, 0x3A	; 58
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_U8_Set_Pin_Dir+0xc2>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_U8_Set_Pin_Dir+0xbe>
    1092:	80 95       	com	r24
    1094:	84 23       	and	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	83 c0       	rjmp	.+262    	; 0x11a0 <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTB_ID:
					Assign_Bit(DIO_U8_DDRB,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	a1 f4       	brne	.+40     	; 0x10c8 <DIO_U8_Set_Pin_Dir+0xfc>
    10a0:	a7 e3       	ldi	r26, 0x37	; 55
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e7 e3       	ldi	r30, 0x37	; 55
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <DIO_U8_Set_Pin_Dir+0xf2>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <DIO_U8_Set_Pin_Dir+0xee>
    10c2:	84 2b       	or	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	6c c0       	rjmp	.+216    	; 0x11a0 <DIO_U8_Set_Pin_Dir+0x1d4>
    10c8:	a7 e3       	ldi	r26, 0x37	; 55
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e7 e3       	ldi	r30, 0x37	; 55
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_U8_Set_Pin_Dir+0x11a>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_U8_Set_Pin_Dir+0x116>
    10ea:	80 95       	com	r24
    10ec:	84 23       	and	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	57 c0       	rjmp	.+174    	; 0x11a0 <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTC_ID:
					Assign_Bit(DIO_U8_DDRC,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	a1 f4       	brne	.+40     	; 0x1120 <DIO_U8_Set_Pin_Dir+0x154>
    10f8:	a4 e3       	ldi	r26, 0x34	; 52
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e4 e3       	ldi	r30, 0x34	; 52
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	48 2f       	mov	r20, r24
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 2e       	mov	r0, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <DIO_U8_Set_Pin_Dir+0x14a>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <DIO_U8_Set_Pin_Dir+0x146>
    111a:	84 2b       	or	r24, r20
    111c:	8c 93       	st	X, r24
    111e:	40 c0       	rjmp	.+128    	; 0x11a0 <DIO_U8_Set_Pin_Dir+0x1d4>
    1120:	a4 e3       	ldi	r26, 0x34	; 52
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e4 e3       	ldi	r30, 0x34	; 52
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_U8_Set_Pin_Dir+0x172>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_U8_Set_Pin_Dir+0x16e>
    1142:	80 95       	com	r24
    1144:	84 23       	and	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	2b c0       	rjmp	.+86     	; 0x11a0 <DIO_U8_Set_Pin_Dir+0x1d4>
					break;
				case PORTD_ID:
					Assign_Bit(DIO_U8_DDRD,Copy_U8_Pin_ID,Copy_U8_Pin_Dir);
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	a1 f4       	brne	.+40     	; 0x1178 <DIO_U8_Set_Pin_Dir+0x1ac>
    1150:	a1 e3       	ldi	r26, 0x31	; 49
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e1 e3       	ldi	r30, 0x31	; 49
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_U8_Set_Pin_Dir+0x1a2>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_U8_Set_Pin_Dir+0x19e>
    1172:	84 2b       	or	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	14 c0       	rjmp	.+40     	; 0x11a0 <DIO_U8_Set_Pin_Dir+0x1d4>
    1178:	a1 e3       	ldi	r26, 0x31	; 49
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e1 e3       	ldi	r30, 0x31	; 49
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_U8_Set_Pin_Dir+0x1ca>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_U8_Set_Pin_Dir+0x1c6>
    119a:	80 95       	com	r24
    119c:	84 23       	and	r24, r20
    119e:	8c 93       	st	X, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    11a0:	93 e0       	ldi	r25, 0x03	; 3
    11a2:	9c 83       	std	Y+4, r25	; 0x04
    11a4:	07 c0       	rjmp	.+14     	; 0x11b4 <DIO_U8_Set_Pin_Dir+0x1e8>

				}
			}
			else
			{
				return WRONG_PIN_DIR;
    11a6:	1c 82       	std	Y+4, r1	; 0x04
    11a8:	05 c0       	rjmp	.+10     	; 0x11b4 <DIO_U8_Set_Pin_Dir+0x1e8>
			}
		}
		else{
			return WRONG_PIN;
    11aa:	21 e0       	ldi	r18, 0x01	; 1
    11ac:	2c 83       	std	Y+4, r18	; 0x04
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <DIO_U8_Set_Pin_Dir+0x1e8>


	}
	else
	{
		return WRONG_PORT;
    11b0:	32 e0       	ldi	r19, 0x02	; 2
    11b2:	3c 83       	std	Y+4, r19	; 0x04
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    11b6:	26 96       	adiw	r28, 0x06	; 6
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <DIO_U8_Set_Port_Dir>:




u8 DIO_U8_Set_Port_Dir(u8 Copy_U8_Port_ID  , u16 Copy_U8_PORT_Dir)
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <DIO_U8_Set_Port_Dir+0x6>
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <DIO_U8_Set_Port_Dir+0x8>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <DIO_U8_Set_Port_Dir+0xa>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	7b 83       	std	Y+3, r23	; 0x03
    11da:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	84 30       	cpi	r24, 0x04	; 4
    11e0:	08 f0       	brcs	.+2      	; 0x11e4 <DIO_U8_Set_Port_Dir+0x1c>
    11e2:	3d c0       	rjmp	.+122    	; 0x125e <DIO_U8_Set_Port_Dir+0x96>
	{
		if((Copy_U8_PORT_Dir)>=MIN_DIR_OR_VALUE&&(Copy_U8_PORT_Dir)<=MAX_DIR_OR_VALUE)
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	9b 81       	ldd	r25, Y+3	; 0x03
    11e8:	8f 3f       	cpi	r24, 0xFF	; 255
    11ea:	91 05       	cpc	r25, r1
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <DIO_U8_Set_Port_Dir+0x28>
    11ee:	a8 f5       	brcc	.+106    	; 0x125a <DIO_U8_Set_Port_Dir+0x92>
		{
				switch(Copy_U8_Port_ID)
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	3e 83       	std	Y+6, r19	; 0x06
    11f8:	2d 83       	std	Y+5, r18	; 0x05
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	9e 81       	ldd	r25, Y+6	; 0x06
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	91 05       	cpc	r25, r1
    1202:	d1 f0       	breq	.+52     	; 0x1238 <DIO_U8_Set_Port_Dir+0x70>
    1204:	2d 81       	ldd	r18, Y+5	; 0x05
    1206:	3e 81       	ldd	r19, Y+6	; 0x06
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	2c f4       	brge	.+10     	; 0x1218 <DIO_U8_Set_Port_Dir+0x50>
    120e:	8d 81       	ldd	r24, Y+5	; 0x05
    1210:	9e 81       	ldd	r25, Y+6	; 0x06
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	61 f0       	breq	.+24     	; 0x122e <DIO_U8_Set_Port_Dir+0x66>
    1216:	1e c0       	rjmp	.+60     	; 0x1254 <DIO_U8_Set_Port_Dir+0x8c>
    1218:	2d 81       	ldd	r18, Y+5	; 0x05
    121a:	3e 81       	ldd	r19, Y+6	; 0x06
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	81 f0       	breq	.+32     	; 0x1242 <DIO_U8_Set_Port_Dir+0x7a>
    1222:	8d 81       	ldd	r24, Y+5	; 0x05
    1224:	9e 81       	ldd	r25, Y+6	; 0x06
    1226:	83 30       	cpi	r24, 0x03	; 3
    1228:	91 05       	cpc	r25, r1
    122a:	81 f0       	breq	.+32     	; 0x124c <DIO_U8_Set_Port_Dir+0x84>
    122c:	13 c0       	rjmp	.+38     	; 0x1254 <DIO_U8_Set_Port_Dir+0x8c>
				{
				case PORTA_ID:
					DIO_U8_DDRA=Copy_U8_PORT_Dir;
    122e:	ea e3       	ldi	r30, 0x3A	; 58
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	80 83       	st	Z, r24
    1236:	0e c0       	rjmp	.+28     	; 0x1254 <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTB_ID:
					DIO_U8_DDRB=Copy_U8_PORT_Dir;
    1238:	e7 e3       	ldi	r30, 0x37	; 55
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	80 83       	st	Z, r24
    1240:	09 c0       	rjmp	.+18     	; 0x1254 <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTC_ID:
					DIO_U8_DDRC=Copy_U8_PORT_Dir;
    1242:	e4 e3       	ldi	r30, 0x34	; 52
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	80 83       	st	Z, r24
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <DIO_U8_Set_Port_Dir+0x8c>
					break;
				case PORTD_ID:
					DIO_U8_DDRD=Copy_U8_PORT_Dir;
    124c:	e1 e3       	ldi	r30, 0x31	; 49
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	80 83       	st	Z, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    1254:	93 e0       	ldi	r25, 0x03	; 3
    1256:	9c 83       	std	Y+4, r25	; 0x04
    1258:	04 c0       	rjmp	.+8      	; 0x1262 <DIO_U8_Set_Port_Dir+0x9a>

				}
		}
		else
		{
			return WRONG_PORT_DIR;
    125a:	1c 82       	std	Y+4, r1	; 0x04
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <DIO_U8_Set_Port_Dir+0x9a>
		}

	}
	else
	{
		return WRONG_PORT;
    125e:	22 e0       	ldi	r18, 0x02	; 2
    1260:	2c 83       	std	Y+4, r18	; 0x04
    1262:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    1264:	26 96       	adiw	r28, 0x06	; 6
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <DIO_U8_Set_Pin_value>:




u8 DIO_U8_Set_Pin_value(u8 Copy_U8_Port_ID , u8 Copy_U8_Pin_ID , u8 Copy_U8_Pin_value)
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	00 d0       	rcall	.+0      	; 0x127c <DIO_U8_Set_Pin_value+0x6>
    127c:	00 d0       	rcall	.+0      	; 0x127e <DIO_U8_Set_Pin_value+0x8>
    127e:	00 d0       	rcall	.+0      	; 0x1280 <DIO_U8_Set_Pin_value+0xa>
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	6a 83       	std	Y+2, r22	; 0x02
    1288:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	84 30       	cpi	r24, 0x04	; 4
    128e:	08 f0       	brcs	.+2      	; 0x1292 <DIO_U8_Set_Pin_value+0x1c>
    1290:	e4 c0       	rjmp	.+456    	; 0x145a <DIO_U8_Set_Pin_value+0x1e4>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	88 30       	cpi	r24, 0x08	; 8
    1296:	08 f0       	brcs	.+2      	; 0x129a <DIO_U8_Set_Pin_value+0x24>
    1298:	dd c0       	rjmp	.+442    	; 0x1454 <DIO_U8_Set_Pin_value+0x1de>
		{
			if((Copy_U8_Pin_value==PIN_LOW)||(Copy_U8_Pin_value==PIN_HIGH))
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	88 23       	and	r24, r24
    129e:	21 f0       	breq	.+8      	; 0x12a8 <DIO_U8_Set_Pin_value+0x32>
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	09 f0       	breq	.+2      	; 0x12a8 <DIO_U8_Set_Pin_value+0x32>
    12a6:	d4 c0       	rjmp	.+424    	; 0x1450 <DIO_U8_Set_Pin_value+0x1da>
			{
				switch(Copy_U8_Port_ID)
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	3e 83       	std	Y+6, r19	; 0x06
    12b0:	2d 83       	std	Y+5, r18	; 0x05
    12b2:	8d 81       	ldd	r24, Y+5	; 0x05
    12b4:	9e 81       	ldd	r25, Y+6	; 0x06
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	91 05       	cpc	r25, r1
    12ba:	09 f4       	brne	.+2      	; 0x12be <DIO_U8_Set_Pin_value+0x48>
    12bc:	43 c0       	rjmp	.+134    	; 0x1344 <DIO_U8_Set_Pin_value+0xce>
    12be:	2d 81       	ldd	r18, Y+5	; 0x05
    12c0:	3e 81       	ldd	r19, Y+6	; 0x06
    12c2:	22 30       	cpi	r18, 0x02	; 2
    12c4:	31 05       	cpc	r19, r1
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <DIO_U8_Set_Pin_value+0x5c>
    12c8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ca:	9e 81       	ldd	r25, Y+6	; 0x06
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	71 f0       	breq	.+28     	; 0x12ec <DIO_U8_Set_Pin_value+0x76>
    12d0:	bc c0       	rjmp	.+376    	; 0x144a <DIO_U8_Set_Pin_value+0x1d4>
    12d2:	2d 81       	ldd	r18, Y+5	; 0x05
    12d4:	3e 81       	ldd	r19, Y+6	; 0x06
    12d6:	22 30       	cpi	r18, 0x02	; 2
    12d8:	31 05       	cpc	r19, r1
    12da:	09 f4       	brne	.+2      	; 0x12de <DIO_U8_Set_Pin_value+0x68>
    12dc:	5f c0       	rjmp	.+190    	; 0x139c <DIO_U8_Set_Pin_value+0x126>
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	91 05       	cpc	r25, r1
    12e6:	09 f4       	brne	.+2      	; 0x12ea <DIO_U8_Set_Pin_value+0x74>
    12e8:	85 c0       	rjmp	.+266    	; 0x13f4 <DIO_U8_Set_Pin_value+0x17e>
    12ea:	af c0       	rjmp	.+350    	; 0x144a <DIO_U8_Set_Pin_value+0x1d4>
				{
				case PORTA_ID:
					Assign_Bit(DIO_U8_PORTA,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	a1 f4       	brne	.+40     	; 0x131a <DIO_U8_Set_Pin_value+0xa4>
    12f2:	ab e3       	ldi	r26, 0x3B	; 59
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	eb e3       	ldi	r30, 0x3B	; 59
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_U8_Set_Pin_value+0x9a>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_U8_Set_Pin_value+0x96>
    1314:	84 2b       	or	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	98 c0       	rjmp	.+304    	; 0x144a <DIO_U8_Set_Pin_value+0x1d4>
    131a:	ab e3       	ldi	r26, 0x3B	; 59
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	eb e3       	ldi	r30, 0x3B	; 59
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <DIO_U8_Set_Pin_value+0xc2>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <DIO_U8_Set_Pin_value+0xbe>
    133c:	80 95       	com	r24
    133e:	84 23       	and	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	83 c0       	rjmp	.+262    	; 0x144a <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTB_ID:
					Assign_Bit(DIO_U8_PORTB,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	a1 f4       	brne	.+40     	; 0x1372 <DIO_U8_Set_Pin_value+0xfc>
    134a:	a8 e3       	ldi	r26, 0x38	; 56
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e8 e3       	ldi	r30, 0x38	; 56
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_U8_Set_Pin_value+0xf2>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_U8_Set_Pin_value+0xee>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	6c c0       	rjmp	.+216    	; 0x144a <DIO_U8_Set_Pin_value+0x1d4>
    1372:	a8 e3       	ldi	r26, 0x38	; 56
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e8 e3       	ldi	r30, 0x38	; 56
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_U8_Set_Pin_value+0x11a>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_U8_Set_Pin_value+0x116>
    1394:	80 95       	com	r24
    1396:	84 23       	and	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	57 c0       	rjmp	.+174    	; 0x144a <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTC_ID:
					Assign_Bit(DIO_U8_PORTC,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	a1 f4       	brne	.+40     	; 0x13ca <DIO_U8_Set_Pin_value+0x154>
    13a2:	a5 e3       	ldi	r26, 0x35	; 53
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e5 e3       	ldi	r30, 0x35	; 53
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <DIO_U8_Set_Pin_value+0x14a>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <DIO_U8_Set_Pin_value+0x146>
    13c4:	84 2b       	or	r24, r20
    13c6:	8c 93       	st	X, r24
    13c8:	40 c0       	rjmp	.+128    	; 0x144a <DIO_U8_Set_Pin_value+0x1d4>
    13ca:	a5 e3       	ldi	r26, 0x35	; 53
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e5 e3       	ldi	r30, 0x35	; 53
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 2e       	mov	r0, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <DIO_U8_Set_Pin_value+0x172>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <DIO_U8_Set_Pin_value+0x16e>
    13ec:	80 95       	com	r24
    13ee:	84 23       	and	r24, r20
    13f0:	8c 93       	st	X, r24
    13f2:	2b c0       	rjmp	.+86     	; 0x144a <DIO_U8_Set_Pin_value+0x1d4>
					break;
				case PORTD_ID:
					Assign_Bit(DIO_U8_PORTD,Copy_U8_Pin_ID,Copy_U8_Pin_value);
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	a1 f4       	brne	.+40     	; 0x1422 <DIO_U8_Set_Pin_value+0x1ac>
    13fa:	a2 e3       	ldi	r26, 0x32	; 50
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e2 e3       	ldi	r30, 0x32	; 50
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 2e       	mov	r0, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <DIO_U8_Set_Pin_value+0x1a2>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	0a 94       	dec	r0
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <DIO_U8_Set_Pin_value+0x19e>
    141c:	84 2b       	or	r24, r20
    141e:	8c 93       	st	X, r24
    1420:	14 c0       	rjmp	.+40     	; 0x144a <DIO_U8_Set_Pin_value+0x1d4>
    1422:	a2 e3       	ldi	r26, 0x32	; 50
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e2 e3       	ldi	r30, 0x32	; 50
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	48 2f       	mov	r20, r24
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 2e       	mov	r0, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <DIO_U8_Set_Pin_value+0x1ca>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	0a 94       	dec	r0
    1442:	e2 f7       	brpl	.-8      	; 0x143c <DIO_U8_Set_Pin_value+0x1c6>
    1444:	80 95       	com	r24
    1446:	84 23       	and	r24, r20
    1448:	8c 93       	st	X, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    144a:	93 e0       	ldi	r25, 0x03	; 3
    144c:	9c 83       	std	Y+4, r25	; 0x04
    144e:	07 c0       	rjmp	.+14     	; 0x145e <DIO_U8_Set_Pin_value+0x1e8>

				}
			}
			else
			{
				return WRONG_PIN_value;
    1450:	1c 82       	std	Y+4, r1	; 0x04
    1452:	05 c0       	rjmp	.+10     	; 0x145e <DIO_U8_Set_Pin_value+0x1e8>
			}
		}
		else{
			return WRONG_PIN;
    1454:	21 e0       	ldi	r18, 0x01	; 1
    1456:	2c 83       	std	Y+4, r18	; 0x04
    1458:	02 c0       	rjmp	.+4      	; 0x145e <DIO_U8_Set_Pin_value+0x1e8>


	}
	else
	{
		return WRONG_PORT;
    145a:	32 e0       	ldi	r19, 0x02	; 2
    145c:	3c 83       	std	Y+4, r19	; 0x04
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    1460:	26 96       	adiw	r28, 0x06	; 6
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <DIO_U8_Set_Port_Value>:




u8 DIO_U8_Set_Port_Value(u8 Copy_U8_Port_ID  , u16 Copy_U8_PORT_value)
{
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	00 d0       	rcall	.+0      	; 0x1478 <DIO_U8_Set_Port_Value+0x6>
    1478:	00 d0       	rcall	.+0      	; 0x147a <DIO_U8_Set_Port_Value+0x8>
    147a:	00 d0       	rcall	.+0      	; 0x147c <DIO_U8_Set_Port_Value+0xa>
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	7b 83       	std	Y+3, r23	; 0x03
    1484:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_U8_PORT_value>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_PORT_value<=DIO_MAX_U8_PROT_ID))
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	9b 81       	ldd	r25, Y+3	; 0x03
    148a:	84 30       	cpi	r24, 0x04	; 4
    148c:	91 05       	cpc	r25, r1
    148e:	08 f0       	brcs	.+2      	; 0x1492 <DIO_U8_Set_Port_Value+0x20>
    1490:	3d c0       	rjmp	.+122    	; 0x150c <DIO_U8_Set_Port_Value+0x9a>
	{
			if((Copy_U8_PORT_value)>=MIN_DIR_OR_VALUE&&(Copy_U8_PORT_value)<=MAX_DIR_OR_VALUE)
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	9b 81       	ldd	r25, Y+3	; 0x03
    1496:	8f 3f       	cpi	r24, 0xFF	; 255
    1498:	91 05       	cpc	r25, r1
    149a:	09 f0       	breq	.+2      	; 0x149e <DIO_U8_Set_Port_Value+0x2c>
    149c:	a8 f5       	brcc	.+106    	; 0x1508 <DIO_U8_Set_Port_Value+0x96>
			{
				switch(Copy_U8_Port_ID)
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	3e 83       	std	Y+6, r19	; 0x06
    14a6:	2d 83       	std	Y+5, r18	; 0x05
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	9e 81       	ldd	r25, Y+6	; 0x06
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	91 05       	cpc	r25, r1
    14b0:	d1 f0       	breq	.+52     	; 0x14e6 <DIO_U8_Set_Port_Value+0x74>
    14b2:	2d 81       	ldd	r18, Y+5	; 0x05
    14b4:	3e 81       	ldd	r19, Y+6	; 0x06
    14b6:	22 30       	cpi	r18, 0x02	; 2
    14b8:	31 05       	cpc	r19, r1
    14ba:	2c f4       	brge	.+10     	; 0x14c6 <DIO_U8_Set_Port_Value+0x54>
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	61 f0       	breq	.+24     	; 0x14dc <DIO_U8_Set_Port_Value+0x6a>
    14c4:	1e c0       	rjmp	.+60     	; 0x1502 <DIO_U8_Set_Port_Value+0x90>
    14c6:	2d 81       	ldd	r18, Y+5	; 0x05
    14c8:	3e 81       	ldd	r19, Y+6	; 0x06
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	81 f0       	breq	.+32     	; 0x14f0 <DIO_U8_Set_Port_Value+0x7e>
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	83 30       	cpi	r24, 0x03	; 3
    14d6:	91 05       	cpc	r25, r1
    14d8:	81 f0       	breq	.+32     	; 0x14fa <DIO_U8_Set_Port_Value+0x88>
    14da:	13 c0       	rjmp	.+38     	; 0x1502 <DIO_U8_Set_Port_Value+0x90>
				{
				case PORTA_ID:
					DIO_U8_PORTA=Copy_U8_PORT_value;
    14dc:	eb e3       	ldi	r30, 0x3B	; 59
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	80 83       	st	Z, r24
    14e4:	0e c0       	rjmp	.+28     	; 0x1502 <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTB_ID:
					DIO_U8_PORTB=Copy_U8_PORT_value;
    14e6:	e8 e3       	ldi	r30, 0x38	; 56
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	80 83       	st	Z, r24
    14ee:	09 c0       	rjmp	.+18     	; 0x1502 <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTC_ID:
					DIO_U8_PORTC=Copy_U8_PORT_value;
    14f0:	e5 e3       	ldi	r30, 0x35	; 53
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	80 83       	st	Z, r24
    14f8:	04 c0       	rjmp	.+8      	; 0x1502 <DIO_U8_Set_Port_Value+0x90>
					break;
				case PORTD_ID:
					DIO_U8_PORTD=Copy_U8_PORT_value;
    14fa:	e2 e3       	ldi	r30, 0x32	; 50
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	80 83       	st	Z, r24
	else
	{
		return WRONG_PORT;
	}

	return NO_ERRORS;
    1502:	93 e0       	ldi	r25, 0x03	; 3
    1504:	9c 83       	std	Y+4, r25	; 0x04
    1506:	04 c0       	rjmp	.+8      	; 0x1510 <DIO_U8_Set_Port_Value+0x9e>

				}
			}
			else
			{
				return WRONG_PORT_VALUE;
    1508:	1c 82       	std	Y+4, r1	; 0x04
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_U8_Set_Port_Value+0x9e>


	}
	else
	{
		return WRONG_PORT;
    150c:	22 e0       	ldi	r18, 0x02	; 2
    150e:	2c 83       	std	Y+4, r18	; 0x04
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
	}

	return NO_ERRORS;
}
    1512:	26 96       	adiw	r28, 0x06	; 6
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <DIO_U8_Get_pin_value>:




u8 DIO_U8_Get_pin_value(u8 Copy_U8_Port_ID,u8 Copy_U8_Pin_ID , u8 *Copy_U8_Pin_Value)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	28 97       	sbiw	r28, 0x08	; 8
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	6a 83       	std	Y+2, r22	; 0x02
    153c:	5c 83       	std	Y+4, r21	; 0x04
    153e:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_U8_Port_ID>=DIO_MIN_U8_PROT_ID)&&(Copy_U8_Port_ID<=DIO_MAX_U8_PROT_ID))
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	84 30       	cpi	r24, 0x04	; 4
    1544:	08 f0       	brcs	.+2      	; 0x1548 <DIO_U8_Get_pin_value+0x24>
    1546:	78 c0       	rjmp	.+240    	; 0x1638 <DIO_U8_Get_pin_value+0x114>
	{
		if((Copy_U8_Pin_ID>=DIO_MIN_U8_PIN_ID)&&(Copy_U8_Pin_ID<=DIO_MAX_U8_PIN_ID))
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	88 30       	cpi	r24, 0x08	; 8
    154c:	08 f0       	brcs	.+2      	; 0x1550 <DIO_U8_Get_pin_value+0x2c>
    154e:	71 c0       	rjmp	.+226    	; 0x1632 <DIO_U8_Get_pin_value+0x10e>
		{

			switch(Copy_U8_Port_ID)
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	3f 83       	std	Y+7, r19	; 0x07
    1558:	2e 83       	std	Y+6, r18	; 0x06
    155a:	4e 81       	ldd	r20, Y+6	; 0x06
    155c:	5f 81       	ldd	r21, Y+7	; 0x07
    155e:	41 30       	cpi	r20, 0x01	; 1
    1560:	51 05       	cpc	r21, r1
    1562:	59 f1       	breq	.+86     	; 0x15ba <DIO_U8_Get_pin_value+0x96>
    1564:	8e 81       	ldd	r24, Y+6	; 0x06
    1566:	9f 81       	ldd	r25, Y+7	; 0x07
    1568:	82 30       	cpi	r24, 0x02	; 2
    156a:	91 05       	cpc	r25, r1
    156c:	34 f4       	brge	.+12     	; 0x157a <DIO_U8_Get_pin_value+0x56>
    156e:	2e 81       	ldd	r18, Y+6	; 0x06
    1570:	3f 81       	ldd	r19, Y+7	; 0x07
    1572:	21 15       	cp	r18, r1
    1574:	31 05       	cpc	r19, r1
    1576:	69 f0       	breq	.+26     	; 0x1592 <DIO_U8_Get_pin_value+0x6e>
    1578:	5b c0       	rjmp	.+182    	; 0x1630 <DIO_U8_Get_pin_value+0x10c>
    157a:	4e 81       	ldd	r20, Y+6	; 0x06
    157c:	5f 81       	ldd	r21, Y+7	; 0x07
    157e:	42 30       	cpi	r20, 0x02	; 2
    1580:	51 05       	cpc	r21, r1
    1582:	79 f1       	breq	.+94     	; 0x15e2 <DIO_U8_Get_pin_value+0xbe>
    1584:	8e 81       	ldd	r24, Y+6	; 0x06
    1586:	9f 81       	ldd	r25, Y+7	; 0x07
    1588:	83 30       	cpi	r24, 0x03	; 3
    158a:	91 05       	cpc	r25, r1
    158c:	09 f4       	brne	.+2      	; 0x1590 <DIO_U8_Get_pin_value+0x6c>
    158e:	3d c0       	rjmp	.+122    	; 0x160a <DIO_U8_Get_pin_value+0xe6>
    1590:	4f c0       	rjmp	.+158    	; 0x1630 <DIO_U8_Get_pin_value+0x10c>
							{
				case PORTA_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINA,Copy_U8_Pin_ID);
    1592:	e9 e3       	ldi	r30, 0x39	; 57
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	88 2f       	mov	r24, r24
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	a9 01       	movw	r20, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <DIO_U8_Get_pin_value+0x86>
    15a6:	55 95       	asr	r21
    15a8:	47 95       	ror	r20
    15aa:	8a 95       	dec	r24
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <DIO_U8_Get_pin_value+0x82>
    15ae:	ca 01       	movw	r24, r20
    15b0:	81 70       	andi	r24, 0x01	; 1
    15b2:	eb 81       	ldd	r30, Y+3	; 0x03
    15b4:	fc 81       	ldd	r31, Y+4	; 0x04
    15b6:	80 83       	st	Z, r24
    15b8:	3b c0       	rjmp	.+118    	; 0x1630 <DIO_U8_Get_pin_value+0x10c>
					break;
				case PORTB_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINB,Copy_U8_Pin_ID);
    15ba:	e6 e3       	ldi	r30, 0x36	; 54
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	a9 01       	movw	r20, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <DIO_U8_Get_pin_value+0xae>
    15ce:	55 95       	asr	r21
    15d0:	47 95       	ror	r20
    15d2:	8a 95       	dec	r24
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <DIO_U8_Get_pin_value+0xaa>
    15d6:	ca 01       	movw	r24, r20
    15d8:	81 70       	andi	r24, 0x01	; 1
    15da:	eb 81       	ldd	r30, Y+3	; 0x03
    15dc:	fc 81       	ldd	r31, Y+4	; 0x04
    15de:	80 83       	st	Z, r24
    15e0:	27 c0       	rjmp	.+78     	; 0x1630 <DIO_U8_Get_pin_value+0x10c>
					break;
				case PORTC_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PINC,Copy_U8_Pin_ID);
    15e2:	e3 e3       	ldi	r30, 0x33	; 51
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	88 2f       	mov	r24, r24
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a9 01       	movw	r20, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <DIO_U8_Get_pin_value+0xd6>
    15f6:	55 95       	asr	r21
    15f8:	47 95       	ror	r20
    15fa:	8a 95       	dec	r24
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <DIO_U8_Get_pin_value+0xd2>
    15fe:	ca 01       	movw	r24, r20
    1600:	81 70       	andi	r24, 0x01	; 1
    1602:	eb 81       	ldd	r30, Y+3	; 0x03
    1604:	fc 81       	ldd	r31, Y+4	; 0x04
    1606:	80 83       	st	Z, r24
    1608:	13 c0       	rjmp	.+38     	; 0x1630 <DIO_U8_Get_pin_value+0x10c>
					break;
				case PORTD_ID:
					*Copy_U8_Pin_Value = Get_Bit(DIO_U8_PIND,Copy_U8_Pin_ID);
    160a:	e0 e3       	ldi	r30, 0x30	; 48
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	88 2f       	mov	r24, r24
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a9 01       	movw	r20, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <DIO_U8_Get_pin_value+0xfe>
    161e:	55 95       	asr	r21
    1620:	47 95       	ror	r20
    1622:	8a 95       	dec	r24
    1624:	e2 f7       	brpl	.-8      	; 0x161e <DIO_U8_Get_pin_value+0xfa>
    1626:	ca 01       	movw	r24, r20
    1628:	81 70       	andi	r24, 0x01	; 1
    162a:	eb 81       	ldd	r30, Y+3	; 0x03
    162c:	fc 81       	ldd	r31, Y+4	; 0x04
    162e:	80 83       	st	Z, r24
    1630:	07 c0       	rjmp	.+14     	; 0x1640 <DIO_U8_Get_pin_value+0x11c>
					break;
							}
		}
		else
		{
			return WRONG_PIN;
    1632:	51 e0       	ldi	r21, 0x01	; 1
    1634:	5d 83       	std	Y+5, r21	; 0x05
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_U8_Get_pin_value+0x118>
		}
	}
	else
	{
		return WRONG_PORT;
    1638:	82 e0       	ldi	r24, 0x02	; 2
    163a:	8d 83       	std	Y+5, r24	; 0x05
    163c:	9d 81       	ldd	r25, Y+5	; 0x05
    163e:	98 87       	std	Y+8, r25	; 0x08
	}
}
    1640:	88 85       	ldd	r24, Y+8	; 0x08
    1642:	28 96       	adiw	r28, 0x08	; 8
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <KPD_Init>:
/****************************************< GLOABAL FUNCTION DEFINTION >****************************/
/**************************************************************************************/


void KPD_Init()
{
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	00 d0       	rcall	.+0      	; 0x165a <KPD_Init+0x6>
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
	u8 COL_Index , ROW_Index ;

	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    165e:	1a 82       	std	Y+2, r1	; 0x02
    1660:	0f c0       	rjmp	.+30     	; 0x1680 <KPD_Init+0x2c>
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_COLS_PORT  , KPD_AU8_COLS_PINS[COL_Index] , PIN_OUTPUT  ) ;
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	fc 01       	movw	r30, r24
    166a:	e2 58       	subi	r30, 0x82	; 130
    166c:	fe 4f       	sbci	r31, 0xFE	; 254
    166e:	90 81       	ld	r25, Z
    1670:	83 e0       	ldi	r24, 0x03	; 3
    1672:	69 2f       	mov	r22, r25
    1674:	41 e0       	ldi	r20, 0x01	; 1
    1676:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_U8_Set_Pin_Dir>

void KPD_Init()
{
	u8 COL_Index , ROW_Index ;

	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	8f 5f       	subi	r24, 0xFF	; 255
    167e:	8a 83       	std	Y+2, r24	; 0x02
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	84 30       	cpi	r24, 0x04	; 4
    1684:	70 f3       	brcs	.-36     	; 0x1662 <KPD_Init+0xe>
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_COLS_PORT  , KPD_AU8_COLS_PINS[COL_Index] , PIN_OUTPUT  ) ;
	}

	for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    1686:	19 82       	std	Y+1, r1	; 0x01
    1688:	1b c0       	rjmp	.+54     	; 0x16c0 <KPD_Init+0x6c>
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_ROWS_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , PIN_INPUT ) ;
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	88 2f       	mov	r24, r24
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	fc 01       	movw	r30, r24
    1692:	e6 58       	subi	r30, 0x86	; 134
    1694:	fe 4f       	sbci	r31, 0xFE	; 254
    1696:	90 81       	ld	r25, Z
    1698:	83 e0       	ldi	r24, 0x03	; 3
    169a:	69 2f       	mov	r22, r25
    169c:	40 e0       	ldi	r20, 0x00	; 0
    169e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <DIO_U8_Set_Pin_Dir>
		DIO_U8_Set_Pin_value( KPD_U8_ROWS_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , PIN_HIGH ) ;
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	88 2f       	mov	r24, r24
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	fc 01       	movw	r30, r24
    16aa:	e6 58       	subi	r30, 0x86	; 134
    16ac:	fe 4f       	sbci	r31, 0xFE	; 254
    16ae:	90 81       	ld	r25, Z
    16b0:	83 e0       	ldi	r24, 0x03	; 3
    16b2:	69 2f       	mov	r22, r25
    16b4:	41 e0       	ldi	r20, 0x01	; 1
    16b6:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_U8_Set_Pin_value>
	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_COLS_PORT  , KPD_AU8_COLS_PINS[COL_Index] , PIN_OUTPUT  ) ;
	}

	for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	8f 5f       	subi	r24, 0xFF	; 255
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	84 30       	cpi	r24, 0x04	; 4
    16c4:	10 f3       	brcs	.-60     	; 0x168a <KPD_Init+0x36>
	{
		DIO_U8_Set_Pin_Dir( KPD_U8_ROWS_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , PIN_INPUT ) ;
		DIO_U8_Set_Pin_value( KPD_U8_ROWS_PORT  , KPD_AU8_ROWS_PINS[ROW_Index] , PIN_HIGH ) ;
	}
}
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <KPD_Void_GET_Status>:




u8 KPD_Void_GET_Status ( void )
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <KPD_Void_GET_Status+0x6>
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <KPD_Void_GET_Status+0x8>
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
	u8 COL_Index , ROW_Index ;
	u8  KPD_Status , Presskey = KPD_Key_NotPressed ;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	89 83       	std	Y+1, r24	; 0x01
	static u8 KPD_ARR [KPD_ROWS][KPD_COLS] = KPD_KEYS ;
while(1)
{
	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    16e0:	1b 82       	std	Y+3, r1	; 0x03
    16e2:	63 c0       	rjmp	.+198    	; 0x17aa <KPD_Void_GET_Status+0xda>
	{
		DIO_U8_Set_Pin_value( KPD_U8_COLS_PORT , KPD_AU8_COLS_PINS[COL_Index] , PIN_LOW  ) ;
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	88 2f       	mov	r24, r24
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	fc 01       	movw	r30, r24
    16ec:	e2 58       	subi	r30, 0x82	; 130
    16ee:	fe 4f       	sbci	r31, 0xFE	; 254
    16f0:	90 81       	ld	r25, Z
    16f2:	83 e0       	ldi	r24, 0x03	; 3
    16f4:	69 2f       	mov	r22, r25
    16f6:	40 e0       	ldi	r20, 0x00	; 0
    16f8:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_U8_Set_Pin_value>

		for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    16fc:	1a 82       	std	Y+2, r1	; 0x02
    16fe:	42 c0       	rjmp	.+132    	; 0x1784 <KPD_Void_GET_Status+0xb4>
		{
			// Key_Num = COL_Index + ( ROW_Index * KPD_ROWS ) ;
			DIO_U8_Get_pin_value ( KPD_U8_ROWS_PORT , KPD_AU8_ROWS_PINS[ROW_Index] , &KPD_Status ) ;
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	fc 01       	movw	r30, r24
    1708:	e6 58       	subi	r30, 0x86	; 134
    170a:	fe 4f       	sbci	r31, 0xFE	; 254
    170c:	90 81       	ld	r25, Z
    170e:	9e 01       	movw	r18, r28
    1710:	2c 5f       	subi	r18, 0xFC	; 252
    1712:	3f 4f       	sbci	r19, 0xFF	; 255
    1714:	83 e0       	ldi	r24, 0x03	; 3
    1716:	69 2f       	mov	r22, r25
    1718:	a9 01       	movw	r20, r18
    171a:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_U8_Get_pin_value>

			if ( KPD_Status == KPD_Key_Pressed )
    171e:	8c 81       	ldd	r24, Y+4	; 0x04
    1720:	88 23       	and	r24, r24
    1722:	69 f5       	brne	.+90     	; 0x177e <KPD_Void_GET_Status+0xae>
			{
				Presskey = KPD_ARR[ROW_Index][COL_Index] ;
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	48 2f       	mov	r20, r24
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	ca 01       	movw	r24, r20
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	82 0f       	add	r24, r18
    173c:	93 1f       	adc	r25, r19
    173e:	fc 01       	movw	r30, r24
    1740:	ee 57       	subi	r30, 0x7E	; 126
    1742:	fe 4f       	sbci	r31, 0xFE	; 254
    1744:	80 81       	ld	r24, Z
    1746:	89 83       	std	Y+1, r24	; 0x01
    1748:	0f c0       	rjmp	.+30     	; 0x1768 <KPD_Void_GET_Status+0x98>

			while (KPD_Status == KPD_Key_Pressed)
			{
				DIO_U8_Get_pin_value( KPD_U8_ROWS_PORT , KPD_AU8_ROWS_PINS[ROW_Index] , &KPD_Status ) ;
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	88 2f       	mov	r24, r24
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	fc 01       	movw	r30, r24
    1752:	e6 58       	subi	r30, 0x86	; 134
    1754:	fe 4f       	sbci	r31, 0xFE	; 254
    1756:	90 81       	ld	r25, Z
    1758:	9e 01       	movw	r18, r28
    175a:	2c 5f       	subi	r18, 0xFC	; 252
    175c:	3f 4f       	sbci	r19, 0xFF	; 255
    175e:	83 e0       	ldi	r24, 0x03	; 3
    1760:	69 2f       	mov	r22, r25
    1762:	a9 01       	movw	r20, r18
    1764:	0e 94 92 0a 	call	0x1524	; 0x1524 <DIO_U8_Get_pin_value>

			if ( KPD_Status == KPD_Key_Pressed )
			{
				Presskey = KPD_ARR[ROW_Index][COL_Index] ;

			while (KPD_Status == KPD_Key_Pressed)
    1768:	8c 81       	ldd	r24, Y+4	; 0x04
    176a:	88 23       	and	r24, r24
    176c:	71 f3       	breq	.-36     	; 0x174a <KPD_Void_GET_Status+0x7a>
			{
				DIO_U8_Get_pin_value( KPD_U8_ROWS_PORT , KPD_AU8_ROWS_PINS[ROW_Index] , &KPD_Status ) ;
			}
			return Presskey ;
    176e:	89 81       	ldd	r24, Y+1	; 0x01
		}

		DIO_U8_Set_Pin_value( KPD_U8_COLS_PORT , KPD_AU8_COLS_PINS[COL_Index] , PIN_HIGH ) ;
	}
}
}
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret
{
	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
	{
		DIO_U8_Set_Pin_value( KPD_U8_COLS_PORT , KPD_AU8_COLS_PINS[COL_Index] , PIN_LOW  ) ;

		for ( ROW_Index = 0 ; ROW_Index < KPD_ROWS ; ROW_Index ++ )
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	8f 5f       	subi	r24, 0xFF	; 255
    1782:	8a 83       	std	Y+2, r24	; 0x02
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	84 30       	cpi	r24, 0x04	; 4
    1788:	08 f4       	brcc	.+2      	; 0x178c <KPD_Void_GET_Status+0xbc>
    178a:	ba cf       	rjmp	.-140    	; 0x1700 <KPD_Void_GET_Status+0x30>
			return Presskey ;
			}

		}

		DIO_U8_Set_Pin_value( KPD_U8_COLS_PORT , KPD_AU8_COLS_PINS[COL_Index] , PIN_HIGH ) ;
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	88 2f       	mov	r24, r24
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	fc 01       	movw	r30, r24
    1794:	e2 58       	subi	r30, 0x82	; 130
    1796:	fe 4f       	sbci	r31, 0xFE	; 254
    1798:	90 81       	ld	r25, Z
    179a:	83 e0       	ldi	r24, 0x03	; 3
    179c:	69 2f       	mov	r22, r25
    179e:	41 e0       	ldi	r20, 0x01	; 1
    17a0:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_U8_Set_Pin_value>
	u8 COL_Index , ROW_Index ;
	u8  KPD_Status , Presskey = KPD_Key_NotPressed ;
	static u8 KPD_ARR [KPD_ROWS][KPD_COLS] = KPD_KEYS ;
while(1)
{
	for( COL_Index = 0 ; COL_Index < KPD_COLS ; COL_Index ++ )
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	8f 5f       	subi	r24, 0xFF	; 255
    17a8:	8b 83       	std	Y+3, r24	; 0x03
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	84 30       	cpi	r24, 0x04	; 4
    17ae:	08 f4       	brcc	.+2      	; 0x17b2 <KPD_Void_GET_Status+0xe2>
    17b0:	99 cf       	rjmp	.-206    	; 0x16e4 <KPD_Void_GET_Status+0x14>
    17b2:	96 cf       	rjmp	.-212    	; 0x16e0 <KPD_Void_GET_Status+0x10>

000017b4 <LCD_void_Init>:
#include"LCD_private.h"




void LCD_void_Init(void){
    17b4:	0f 93       	push	r16
    17b6:	1f 93       	push	r17
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	cc 54       	subi	r28, 0x4C	; 76
    17c2:	d0 40       	sbci	r29, 0x00	; 0
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	cd bf       	out	0x3d, r28	; 61
    17ce:	fe 01       	movw	r30, r28
    17d0:	e7 5b       	subi	r30, 0xB7	; 183
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	ac e0       	ldi	r26, 0x0C	; 12
    17da:	b2 e4       	ldi	r27, 0x42	; 66
    17dc:	80 83       	st	Z, r24
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	a2 83       	std	Z+2, r26	; 0x02
    17e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e4:	8e 01       	movw	r16, r28
    17e6:	0b 5b       	subi	r16, 0xBB	; 187
    17e8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ea:	fe 01       	movw	r30, r28
    17ec:	e7 5b       	subi	r30, 0xB7	; 183
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	60 81       	ld	r22, Z
    17f2:	71 81       	ldd	r23, Z+1	; 0x01
    17f4:	82 81       	ldd	r24, Z+2	; 0x02
    17f6:	93 81       	ldd	r25, Z+3	; 0x03
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	4a ef       	ldi	r20, 0xFA	; 250
    17fe:	54 e4       	ldi	r21, 0x44	; 68
    1800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	f8 01       	movw	r30, r16
    180a:	80 83       	st	Z, r24
    180c:	91 83       	std	Z+1, r25	; 0x01
    180e:	a2 83       	std	Z+2, r26	; 0x02
    1810:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1812:	fe 01       	movw	r30, r28
    1814:	eb 5b       	subi	r30, 0xBB	; 187
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	60 81       	ld	r22, Z
    181a:	71 81       	ldd	r23, Z+1	; 0x01
    181c:	82 81       	ldd	r24, Z+2	; 0x02
    181e:	93 81       	ldd	r25, Z+3	; 0x03
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e8       	ldi	r20, 0x80	; 128
    1826:	5f e3       	ldi	r21, 0x3F	; 63
    1828:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    182c:	88 23       	and	r24, r24
    182e:	44 f4       	brge	.+16     	; 0x1840 <LCD_void_Init+0x8c>
		__ticks = 1;
    1830:	fe 01       	movw	r30, r28
    1832:	ed 5b       	subi	r30, 0xBD	; 189
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	91 83       	std	Z+1, r25	; 0x01
    183c:	80 83       	st	Z, r24
    183e:	64 c0       	rjmp	.+200    	; 0x1908 <LCD_void_Init+0x154>
	else if (__tmp > 65535)
    1840:	fe 01       	movw	r30, r28
    1842:	eb 5b       	subi	r30, 0xBB	; 187
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	60 81       	ld	r22, Z
    1848:	71 81       	ldd	r23, Z+1	; 0x01
    184a:	82 81       	ldd	r24, Z+2	; 0x02
    184c:	93 81       	ldd	r25, Z+3	; 0x03
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	3f ef       	ldi	r19, 0xFF	; 255
    1852:	4f e7       	ldi	r20, 0x7F	; 127
    1854:	57 e4       	ldi	r21, 0x47	; 71
    1856:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    185a:	18 16       	cp	r1, r24
    185c:	0c f0       	brlt	.+2      	; 0x1860 <LCD_void_Init+0xac>
    185e:	43 c0       	rjmp	.+134    	; 0x18e6 <LCD_void_Init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	fe 01       	movw	r30, r28
    1862:	e7 5b       	subi	r30, 0xB7	; 183
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	60 81       	ld	r22, Z
    1868:	71 81       	ldd	r23, Z+1	; 0x01
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	93 81       	ldd	r25, Z+3	; 0x03
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e2       	ldi	r20, 0x20	; 32
    1874:	51 e4       	ldi	r21, 0x41	; 65
    1876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	8e 01       	movw	r16, r28
    1880:	0d 5b       	subi	r16, 0xBD	; 189
    1882:	1f 4f       	sbci	r17, 0xFF	; 255
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	f8 01       	movw	r30, r16
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
    1896:	1f c0       	rjmp	.+62     	; 0x18d6 <LCD_void_Init+0x122>
    1898:	fe 01       	movw	r30, r28
    189a:	ef 5b       	subi	r30, 0xBF	; 191
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	88 ec       	ldi	r24, 0xC8	; 200
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18a6:	fe 01       	movw	r30, r28
    18a8:	ef 5b       	subi	r30, 0xBF	; 191
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	80 81       	ld	r24, Z
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <LCD_void_Init+0xfc>
    18b4:	fe 01       	movw	r30, r28
    18b6:	ef 5b       	subi	r30, 0xBF	; 191
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	91 83       	std	Z+1, r25	; 0x01
    18bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18be:	de 01       	movw	r26, r28
    18c0:	ad 5b       	subi	r26, 0xBD	; 189
    18c2:	bf 4f       	sbci	r27, 0xFF	; 255
    18c4:	fe 01       	movw	r30, r28
    18c6:	ed 5b       	subi	r30, 0xBD	; 189
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	80 81       	ld	r24, Z
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	11 96       	adiw	r26, 0x01	; 1
    18d2:	9c 93       	st	X, r25
    18d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d6:	fe 01       	movw	r30, r28
    18d8:	ed 5b       	subi	r30, 0xBD	; 189
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	80 81       	ld	r24, Z
    18de:	91 81       	ldd	r25, Z+1	; 0x01
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	d1 f6       	brne	.-76     	; 0x1898 <LCD_void_Init+0xe4>
    18e4:	24 c0       	rjmp	.+72     	; 0x192e <LCD_void_Init+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e6:	8e 01       	movw	r16, r28
    18e8:	0d 5b       	subi	r16, 0xBD	; 189
    18ea:	1f 4f       	sbci	r17, 0xFF	; 255
    18ec:	fe 01       	movw	r30, r28
    18ee:	eb 5b       	subi	r30, 0xBB	; 187
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	60 81       	ld	r22, Z
    18f4:	71 81       	ldd	r23, Z+1	; 0x01
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	93 81       	ldd	r25, Z+3	; 0x03
    18fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	f8 01       	movw	r30, r16
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	80 83       	st	Z, r24
    1908:	fe 01       	movw	r30, r28
    190a:	ed 5b       	subi	r30, 0xBD	; 189
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	80 81       	ld	r24, Z
    1910:	91 81       	ldd	r25, Z+1	; 0x01
    1912:	fe 01       	movw	r30, r28
    1914:	ff 96       	adiw	r30, 0x3f	; 63
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	80 83       	st	Z, r24
    191a:	fe 01       	movw	r30, r28
    191c:	ff 96       	adiw	r30, 0x3f	; 63
    191e:	80 81       	ld	r24, Z
    1920:	91 81       	ldd	r25, Z+1	; 0x01
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <LCD_void_Init+0x16e>
    1926:	fe 01       	movw	r30, r28
    1928:	ff 96       	adiw	r30, 0x3f	; 63
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	80 83       	st	Z, r24
#if LCD_U8_MODE==LCD_U8_8_BIT_MODE
		/*delay more than 30ms*/
		_delay_ms(35);
		/*send function set */
		LCD_void_Write_CMD(LCD_Function_set_8_bit_2_line_mode);
    192e:	88 e3       	ldi	r24, 0x38	; 56
    1930:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_void_Write_CMD>
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	a0 e2       	ldi	r26, 0x20	; 32
    193a:	b2 e4       	ldi	r27, 0x42	; 66
    193c:	8b af       	std	Y+59, r24	; 0x3b
    193e:	9c af       	std	Y+60, r25	; 0x3c
    1940:	ad af       	std	Y+61, r26	; 0x3d
    1942:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1944:	6b ad       	ldd	r22, Y+59	; 0x3b
    1946:	7c ad       	ldd	r23, Y+60	; 0x3c
    1948:	8d ad       	ldd	r24, Y+61	; 0x3d
    194a:	9e ad       	ldd	r25, Y+62	; 0x3e
    194c:	2b ea       	ldi	r18, 0xAB	; 171
    194e:	3a ea       	ldi	r19, 0xAA	; 170
    1950:	4a e2       	ldi	r20, 0x2A	; 42
    1952:	50 e4       	ldi	r21, 0x40	; 64
    1954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	8f ab       	std	Y+55, r24	; 0x37
    195e:	98 af       	std	Y+56, r25	; 0x38
    1960:	a9 af       	std	Y+57, r26	; 0x39
    1962:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1964:	6f a9       	ldd	r22, Y+55	; 0x37
    1966:	78 ad       	ldd	r23, Y+56	; 0x38
    1968:	89 ad       	ldd	r24, Y+57	; 0x39
    196a:	9a ad       	ldd	r25, Y+58	; 0x3a
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e8       	ldi	r20, 0x80	; 128
    1972:	5f e3       	ldi	r21, 0x3F	; 63
    1974:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1978:	88 23       	and	r24, r24
    197a:	1c f4       	brge	.+6      	; 0x1982 <LCD_void_Init+0x1ce>
		__ticks = 1;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	8e ab       	std	Y+54, r24	; 0x36
    1980:	91 c0       	rjmp	.+290    	; 0x1aa4 <LCD_void_Init+0x2f0>
	else if (__tmp > 255)
    1982:	6f a9       	ldd	r22, Y+55	; 0x37
    1984:	78 ad       	ldd	r23, Y+56	; 0x38
    1986:	89 ad       	ldd	r24, Y+57	; 0x39
    1988:	9a ad       	ldd	r25, Y+58	; 0x3a
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	4f e7       	ldi	r20, 0x7F	; 127
    1990:	53 e4       	ldi	r21, 0x43	; 67
    1992:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1996:	18 16       	cp	r1, r24
    1998:	0c f0       	brlt	.+2      	; 0x199c <LCD_void_Init+0x1e8>
    199a:	7b c0       	rjmp	.+246    	; 0x1a92 <LCD_void_Init+0x2de>
	{
		_delay_ms(__us / 1000.0);
    199c:	6b ad       	ldd	r22, Y+59	; 0x3b
    199e:	7c ad       	ldd	r23, Y+60	; 0x3c
    19a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    19a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	4a e7       	ldi	r20, 0x7A	; 122
    19aa:	54 e4       	ldi	r21, 0x44	; 68
    19ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	8a ab       	std	Y+50, r24	; 0x32
    19b6:	9b ab       	std	Y+51, r25	; 0x33
    19b8:	ac ab       	std	Y+52, r26	; 0x34
    19ba:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19bc:	6a a9       	ldd	r22, Y+50	; 0x32
    19be:	7b a9       	ldd	r23, Y+51	; 0x33
    19c0:	8c a9       	ldd	r24, Y+52	; 0x34
    19c2:	9d a9       	ldd	r25, Y+53	; 0x35
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	4a ef       	ldi	r20, 0xFA	; 250
    19ca:	54 e4       	ldi	r21, 0x44	; 68
    19cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	8e a7       	std	Y+46, r24	; 0x2e
    19d6:	9f a7       	std	Y+47, r25	; 0x2f
    19d8:	a8 ab       	std	Y+48, r26	; 0x30
    19da:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    19dc:	6e a5       	ldd	r22, Y+46	; 0x2e
    19de:	7f a5       	ldd	r23, Y+47	; 0x2f
    19e0:	88 a9       	ldd	r24, Y+48	; 0x30
    19e2:	99 a9       	ldd	r25, Y+49	; 0x31
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e8       	ldi	r20, 0x80	; 128
    19ea:	5f e3       	ldi	r21, 0x3F	; 63
    19ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19f0:	88 23       	and	r24, r24
    19f2:	2c f4       	brge	.+10     	; 0x19fe <LCD_void_Init+0x24a>
		__ticks = 1;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	9d a7       	std	Y+45, r25	; 0x2d
    19fa:	8c a7       	std	Y+44, r24	; 0x2c
    19fc:	3f c0       	rjmp	.+126    	; 0x1a7c <LCD_void_Init+0x2c8>
	else if (__tmp > 65535)
    19fe:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a00:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a02:	88 a9       	ldd	r24, Y+48	; 0x30
    1a04:	99 a9       	ldd	r25, Y+49	; 0x31
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	3f ef       	ldi	r19, 0xFF	; 255
    1a0a:	4f e7       	ldi	r20, 0x7F	; 127
    1a0c:	57 e4       	ldi	r21, 0x47	; 71
    1a0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a12:	18 16       	cp	r1, r24
    1a14:	4c f5       	brge	.+82     	; 0x1a68 <LCD_void_Init+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a16:	6a a9       	ldd	r22, Y+50	; 0x32
    1a18:	7b a9       	ldd	r23, Y+51	; 0x33
    1a1a:	8c a9       	ldd	r24, Y+52	; 0x34
    1a1c:	9d a9       	ldd	r25, Y+53	; 0x35
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e2       	ldi	r20, 0x20	; 32
    1a24:	51 e4       	ldi	r21, 0x41	; 65
    1a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	bc 01       	movw	r22, r24
    1a30:	cd 01       	movw	r24, r26
    1a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	9d a7       	std	Y+45, r25	; 0x2d
    1a3c:	8c a7       	std	Y+44, r24	; 0x2c
    1a3e:	0f c0       	rjmp	.+30     	; 0x1a5e <LCD_void_Init+0x2aa>
    1a40:	88 ec       	ldi	r24, 0xC8	; 200
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	9b a7       	std	Y+43, r25	; 0x2b
    1a46:	8a a7       	std	Y+42, r24	; 0x2a
    1a48:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a4a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <LCD_void_Init+0x298>
    1a50:	9b a7       	std	Y+43, r25	; 0x2b
    1a52:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a54:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a56:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	9d a7       	std	Y+45, r25	; 0x2d
    1a5c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a60:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	69 f7       	brne	.-38     	; 0x1a40 <LCD_void_Init+0x28c>
    1a66:	24 c0       	rjmp	.+72     	; 0x1ab0 <LCD_void_Init+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a68:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a6a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a6c:	88 a9       	ldd	r24, Y+48	; 0x30
    1a6e:	99 a9       	ldd	r25, Y+49	; 0x31
    1a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	9d a7       	std	Y+45, r25	; 0x2d
    1a7a:	8c a7       	std	Y+44, r24	; 0x2c
    1a7c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a7e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a80:	99 a7       	std	Y+41, r25	; 0x29
    1a82:	88 a7       	std	Y+40, r24	; 0x28
    1a84:	88 a5       	ldd	r24, Y+40	; 0x28
    1a86:	99 a5       	ldd	r25, Y+41	; 0x29
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <LCD_void_Init+0x2d4>
    1a8c:	99 a7       	std	Y+41, r25	; 0x29
    1a8e:	88 a7       	std	Y+40, r24	; 0x28
    1a90:	0f c0       	rjmp	.+30     	; 0x1ab0 <LCD_void_Init+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a92:	6f a9       	ldd	r22, Y+55	; 0x37
    1a94:	78 ad       	ldd	r23, Y+56	; 0x38
    1a96:	89 ad       	ldd	r24, Y+57	; 0x39
    1a98:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	8e ab       	std	Y+54, r24	; 0x36
    1aa4:	8e a9       	ldd	r24, Y+54	; 0x36
    1aa6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1aa8:	8f a1       	ldd	r24, Y+39	; 0x27
    1aaa:	8a 95       	dec	r24
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <LCD_void_Init+0x2f6>
    1aae:	8f a3       	std	Y+39, r24	; 0x27
		/*delay more than 39us*/
		_delay_us(40);
		/*send cursor mode */
		LCD_void_Write_CMD(LCD_Cursor_OFF);
    1ab0:	8c e0       	ldi	r24, 0x0C	; 12
    1ab2:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_void_Write_CMD>
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	a0 e2       	ldi	r26, 0x20	; 32
    1abc:	b2 e4       	ldi	r27, 0x42	; 66
    1abe:	8b a3       	std	Y+35, r24	; 0x23
    1ac0:	9c a3       	std	Y+36, r25	; 0x24
    1ac2:	ad a3       	std	Y+37, r26	; 0x25
    1ac4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ac6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ac8:	7c a1       	ldd	r23, Y+36	; 0x24
    1aca:	8d a1       	ldd	r24, Y+37	; 0x25
    1acc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ace:	2b ea       	ldi	r18, 0xAB	; 171
    1ad0:	3a ea       	ldi	r19, 0xAA	; 170
    1ad2:	4a e2       	ldi	r20, 0x2A	; 42
    1ad4:	50 e4       	ldi	r21, 0x40	; 64
    1ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	8f 8f       	std	Y+31, r24	; 0x1f
    1ae0:	98 a3       	std	Y+32, r25	; 0x20
    1ae2:	a9 a3       	std	Y+33, r26	; 0x21
    1ae4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1ae6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ae8:	78 a1       	ldd	r23, Y+32	; 0x20
    1aea:	89 a1       	ldd	r24, Y+33	; 0x21
    1aec:	9a a1       	ldd	r25, Y+34	; 0x22
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e8       	ldi	r20, 0x80	; 128
    1af4:	5f e3       	ldi	r21, 0x3F	; 63
    1af6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1afa:	88 23       	and	r24, r24
    1afc:	1c f4       	brge	.+6      	; 0x1b04 <LCD_void_Init+0x350>
		__ticks = 1;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	8e 8f       	std	Y+30, r24	; 0x1e
    1b02:	91 c0       	rjmp	.+290    	; 0x1c26 <LCD_void_Init+0x472>
	else if (__tmp > 255)
    1b04:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b06:	78 a1       	ldd	r23, Y+32	; 0x20
    1b08:	89 a1       	ldd	r24, Y+33	; 0x21
    1b0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	4f e7       	ldi	r20, 0x7F	; 127
    1b12:	53 e4       	ldi	r21, 0x43	; 67
    1b14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b18:	18 16       	cp	r1, r24
    1b1a:	0c f0       	brlt	.+2      	; 0x1b1e <LCD_void_Init+0x36a>
    1b1c:	7b c0       	rjmp	.+246    	; 0x1c14 <LCD_void_Init+0x460>
	{
		_delay_ms(__us / 1000.0);
    1b1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b20:	7c a1       	ldd	r23, Y+36	; 0x24
    1b22:	8d a1       	ldd	r24, Y+37	; 0x25
    1b24:	9e a1       	ldd	r25, Y+38	; 0x26
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	4a e7       	ldi	r20, 0x7A	; 122
    1b2c:	54 e4       	ldi	r21, 0x44	; 68
    1b2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	8a 8f       	std	Y+26, r24	; 0x1a
    1b38:	9b 8f       	std	Y+27, r25	; 0x1b
    1b3a:	ac 8f       	std	Y+28, r26	; 0x1c
    1b3c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b40:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b42:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b44:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	4a ef       	ldi	r20, 0xFA	; 250
    1b4c:	54 e4       	ldi	r21, 0x44	; 68
    1b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	8e 8b       	std	Y+22, r24	; 0x16
    1b58:	9f 8b       	std	Y+23, r25	; 0x17
    1b5a:	a8 8f       	std	Y+24, r26	; 0x18
    1b5c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1b5e:	6e 89       	ldd	r22, Y+22	; 0x16
    1b60:	7f 89       	ldd	r23, Y+23	; 0x17
    1b62:	88 8d       	ldd	r24, Y+24	; 0x18
    1b64:	99 8d       	ldd	r25, Y+25	; 0x19
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 e8       	ldi	r20, 0x80	; 128
    1b6c:	5f e3       	ldi	r21, 0x3F	; 63
    1b6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b72:	88 23       	and	r24, r24
    1b74:	2c f4       	brge	.+10     	; 0x1b80 <LCD_void_Init+0x3cc>
		__ticks = 1;
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	9d 8b       	std	Y+21, r25	; 0x15
    1b7c:	8c 8b       	std	Y+20, r24	; 0x14
    1b7e:	3f c0       	rjmp	.+126    	; 0x1bfe <LCD_void_Init+0x44a>
	else if (__tmp > 65535)
    1b80:	6e 89       	ldd	r22, Y+22	; 0x16
    1b82:	7f 89       	ldd	r23, Y+23	; 0x17
    1b84:	88 8d       	ldd	r24, Y+24	; 0x18
    1b86:	99 8d       	ldd	r25, Y+25	; 0x19
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	3f ef       	ldi	r19, 0xFF	; 255
    1b8c:	4f e7       	ldi	r20, 0x7F	; 127
    1b8e:	57 e4       	ldi	r21, 0x47	; 71
    1b90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b94:	18 16       	cp	r1, r24
    1b96:	4c f5       	brge	.+82     	; 0x1bea <LCD_void_Init+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b98:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b9a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b9c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b9e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e2       	ldi	r20, 0x20	; 32
    1ba6:	51 e4       	ldi	r21, 0x41	; 65
    1ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	9d 8b       	std	Y+21, r25	; 0x15
    1bbe:	8c 8b       	std	Y+20, r24	; 0x14
    1bc0:	0f c0       	rjmp	.+30     	; 0x1be0 <LCD_void_Init+0x42c>
    1bc2:	88 ec       	ldi	r24, 0xC8	; 200
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	9b 8b       	std	Y+19, r25	; 0x13
    1bc8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bca:	8a 89       	ldd	r24, Y+18	; 0x12
    1bcc:	9b 89       	ldd	r25, Y+19	; 0x13
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	f1 f7       	brne	.-4      	; 0x1bce <LCD_void_Init+0x41a>
    1bd2:	9b 8b       	std	Y+19, r25	; 0x13
    1bd4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd6:	8c 89       	ldd	r24, Y+20	; 0x14
    1bd8:	9d 89       	ldd	r25, Y+21	; 0x15
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	9d 8b       	std	Y+21, r25	; 0x15
    1bde:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be0:	8c 89       	ldd	r24, Y+20	; 0x14
    1be2:	9d 89       	ldd	r25, Y+21	; 0x15
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	69 f7       	brne	.-38     	; 0x1bc2 <LCD_void_Init+0x40e>
    1be8:	24 c0       	rjmp	.+72     	; 0x1c32 <LCD_void_Init+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bea:	6e 89       	ldd	r22, Y+22	; 0x16
    1bec:	7f 89       	ldd	r23, Y+23	; 0x17
    1bee:	88 8d       	ldd	r24, Y+24	; 0x18
    1bf0:	99 8d       	ldd	r25, Y+25	; 0x19
    1bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	9d 8b       	std	Y+21, r25	; 0x15
    1bfc:	8c 8b       	std	Y+20, r24	; 0x14
    1bfe:	8c 89       	ldd	r24, Y+20	; 0x14
    1c00:	9d 89       	ldd	r25, Y+21	; 0x15
    1c02:	99 8b       	std	Y+17, r25	; 0x11
    1c04:	88 8b       	std	Y+16, r24	; 0x10
    1c06:	88 89       	ldd	r24, Y+16	; 0x10
    1c08:	99 89       	ldd	r25, Y+17	; 0x11
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <LCD_void_Init+0x456>
    1c0e:	99 8b       	std	Y+17, r25	; 0x11
    1c10:	88 8b       	std	Y+16, r24	; 0x10
    1c12:	0f c0       	rjmp	.+30     	; 0x1c32 <LCD_void_Init+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c14:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c16:	78 a1       	ldd	r23, Y+32	; 0x20
    1c18:	89 a1       	ldd	r24, Y+33	; 0x21
    1c1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	8e 8f       	std	Y+30, r24	; 0x1e
    1c26:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c28:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c2c:	8a 95       	dec	r24
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <LCD_void_Init+0x478>
    1c30:	8f 87       	std	Y+15, r24	; 0x0f
		/*delay more than 39us*/
		_delay_us(40);
		/*send command clear display*/
		LCD_void_Write_CMD(LCD_Clear_Display_Screen);
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_void_Write_CMD>
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	a0 e0       	ldi	r26, 0x00	; 0
    1c3e:	b0 e4       	ldi	r27, 0x40	; 64
    1c40:	8b 87       	std	Y+11, r24	; 0x0b
    1c42:	9c 87       	std	Y+12, r25	; 0x0c
    1c44:	ad 87       	std	Y+13, r26	; 0x0d
    1c46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	4a ef       	ldi	r20, 0xFA	; 250
    1c56:	54 e4       	ldi	r21, 0x44	; 68
    1c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	8f 83       	std	Y+7, r24	; 0x07
    1c62:	98 87       	std	Y+8, r25	; 0x08
    1c64:	a9 87       	std	Y+9, r26	; 0x09
    1c66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c68:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6a:	78 85       	ldd	r23, Y+8	; 0x08
    1c6c:	89 85       	ldd	r24, Y+9	; 0x09
    1c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e8       	ldi	r20, 0x80	; 128
    1c76:	5f e3       	ldi	r21, 0x3F	; 63
    1c78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c7c:	88 23       	and	r24, r24
    1c7e:	2c f4       	brge	.+10     	; 0x1c8a <LCD_void_Init+0x4d6>
		__ticks = 1;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	9e 83       	std	Y+6, r25	; 0x06
    1c86:	8d 83       	std	Y+5, r24	; 0x05
    1c88:	3f c0       	rjmp	.+126    	; 0x1d08 <LCD_void_Init+0x554>
	else if (__tmp > 65535)
    1c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8c:	78 85       	ldd	r23, Y+8	; 0x08
    1c8e:	89 85       	ldd	r24, Y+9	; 0x09
    1c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	3f ef       	ldi	r19, 0xFF	; 255
    1c96:	4f e7       	ldi	r20, 0x7F	; 127
    1c98:	57 e4       	ldi	r21, 0x47	; 71
    1c9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c9e:	18 16       	cp	r1, r24
    1ca0:	4c f5       	brge	.+82     	; 0x1cf4 <LCD_void_Init+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e2       	ldi	r20, 0x20	; 32
    1cb0:	51 e4       	ldi	r21, 0x41	; 65
    1cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	bc 01       	movw	r22, r24
    1cbc:	cd 01       	movw	r24, r26
    1cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	9e 83       	std	Y+6, r25	; 0x06
    1cc8:	8d 83       	std	Y+5, r24	; 0x05
    1cca:	0f c0       	rjmp	.+30     	; 0x1cea <LCD_void_Init+0x536>
    1ccc:	88 ec       	ldi	r24, 0xC8	; 200
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	9c 83       	std	Y+4, r25	; 0x04
    1cd2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <LCD_void_Init+0x524>
    1cdc:	9c 83       	std	Y+4, r25	; 0x04
    1cde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	9e 83       	std	Y+6, r25	; 0x06
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
    1cec:	9e 81       	ldd	r25, Y+6	; 0x06
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	69 f7       	brne	.-38     	; 0x1ccc <LCD_void_Init+0x518>
    1cf2:	14 c0       	rjmp	.+40     	; 0x1d1c <LCD_void_Init+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf6:	78 85       	ldd	r23, Y+8	; 0x08
    1cf8:	89 85       	ldd	r24, Y+9	; 0x09
    1cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	9e 83       	std	Y+6, r25	; 0x06
    1d06:	8d 83       	std	Y+5, r24	; 0x05
    1d08:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0c:	9a 83       	std	Y+2, r25	; 0x02
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	9a 81       	ldd	r25, Y+2	; 0x02
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <LCD_void_Init+0x560>
    1d18:	9a 83       	std	Y+2, r25	; 0x02
    1d1a:	89 83       	std	Y+1, r24	; 0x01
		/*delay more than 1.53ms*/
		_delay_ms(2);
		/*increment cursor*/
		LCD_void_Write_CMD(LCD_Cursor_Increment);
    1d1c:	86 e0       	ldi	r24, 0x06	; 6
    1d1e:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_void_Write_CMD>
#endif




}
    1d22:	c4 5b       	subi	r28, 0xB4	; 180
    1d24:	df 4f       	sbci	r29, 0xFF	; 255
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	de bf       	out	0x3e, r29	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	1f 91       	pop	r17
    1d36:	0f 91       	pop	r16
    1d38:	08 95       	ret

00001d3a <LCD_void_Write_CMD>:

void LCD_void_Write_CMD(u8 Copy_u8_CMD){
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	0f 92       	push	r0
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	89 83       	std	Y+1, r24	; 0x01
	/*RW=0*/
	/*write a command*/
	/*E=1*/
	/*E=0*/
//	DIO_U8_Set_Pin_Dir(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_OUTPUT);
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_LOW);
    1d46:	82 e0       	ldi	r24, 0x02	; 2
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_U8_Set_Pin_value>

	LCD_void_Write(Copy_u8_CMD);
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_void_Write>

}
    1d56:	0f 90       	pop	r0
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <LCD_void_Write>:



void LCD_void_Write(u8 Copy_u8_val){
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	69 97       	sbiw	r28, 0x19	; 25
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	89 8f       	std	Y+25, r24	; 0x19

	/*RW=0*/
		DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,PIN_LOW);
    1d74:	82 e0       	ldi	r24, 0x02	; 2
    1d76:	61 e0       	ldi	r22, 0x01	; 1
    1d78:	40 e0       	ldi	r20, 0x00	; 0
    1d7a:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_U8_Set_Pin_value>

#if LCD_U8_MODE==LCD_U8_8_BIT_MODE

	/*WRITE */
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN0,Get_Bit(Copy_u8_val,DIO_U8_PIN0));
    1d7e:	89 8d       	ldd	r24, Y+25	; 0x19
    1d80:	98 2f       	mov	r25, r24
    1d82:	91 70       	andi	r25, 0x01	; 1
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	49 2f       	mov	r20, r25
    1d8a:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN1,Get_Bit(Copy_u8_val,DIO_U8_PIN1));
    1d8e:	89 8d       	ldd	r24, Y+25	; 0x19
    1d90:	86 95       	lsr	r24
    1d92:	98 2f       	mov	r25, r24
    1d94:	91 70       	andi	r25, 0x01	; 1
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	61 e0       	ldi	r22, 0x01	; 1
    1d9a:	49 2f       	mov	r20, r25
    1d9c:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN2,Get_Bit(Copy_u8_val,DIO_U8_PIN2));
    1da0:	89 8d       	ldd	r24, Y+25	; 0x19
    1da2:	86 95       	lsr	r24
    1da4:	86 95       	lsr	r24
    1da6:	98 2f       	mov	r25, r24
    1da8:	91 70       	andi	r25, 0x01	; 1
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	62 e0       	ldi	r22, 0x02	; 2
    1dae:	49 2f       	mov	r20, r25
    1db0:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN3,Get_Bit(Copy_u8_val,DIO_U8_PIN3));
    1db4:	89 8d       	ldd	r24, Y+25	; 0x19
    1db6:	86 95       	lsr	r24
    1db8:	86 95       	lsr	r24
    1dba:	86 95       	lsr	r24
    1dbc:	98 2f       	mov	r25, r24
    1dbe:	91 70       	andi	r25, 0x01	; 1
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	63 e0       	ldi	r22, 0x03	; 3
    1dc4:	49 2f       	mov	r20, r25
    1dc6:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN4,Get_Bit(Copy_u8_val,DIO_U8_PIN4));
    1dca:	89 8d       	ldd	r24, Y+25	; 0x19
    1dcc:	82 95       	swap	r24
    1dce:	8f 70       	andi	r24, 0x0F	; 15
    1dd0:	98 2f       	mov	r25, r24
    1dd2:	91 70       	andi	r25, 0x01	; 1
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	64 e0       	ldi	r22, 0x04	; 4
    1dd8:	49 2f       	mov	r20, r25
    1dda:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN5,Get_Bit(Copy_u8_val,DIO_U8_PIN5));
    1dde:	89 8d       	ldd	r24, Y+25	; 0x19
    1de0:	82 95       	swap	r24
    1de2:	86 95       	lsr	r24
    1de4:	87 70       	andi	r24, 0x07	; 7
    1de6:	98 2f       	mov	r25, r24
    1de8:	91 70       	andi	r25, 0x01	; 1
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	65 e0       	ldi	r22, 0x05	; 5
    1dee:	49 2f       	mov	r20, r25
    1df0:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN6,Get_Bit(Copy_u8_val,DIO_U8_PIN6));
    1df4:	89 8d       	ldd	r24, Y+25	; 0x19
    1df6:	82 95       	swap	r24
    1df8:	86 95       	lsr	r24
    1dfa:	86 95       	lsr	r24
    1dfc:	83 70       	andi	r24, 0x03	; 3
    1dfe:	98 2f       	mov	r25, r24
    1e00:	91 70       	andi	r25, 0x01	; 1
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	66 e0       	ldi	r22, 0x06	; 6
    1e06:	49 2f       	mov	r20, r25
    1e08:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_U8_Set_Pin_value>
	DIO_U8_Set_Pin_value(LCD_u8_DATA_PORT,LCD_u8_DATA_PIN7,Get_Bit(Copy_u8_val,DIO_U8_PIN7));
    1e0c:	89 8d       	ldd	r24, Y+25	; 0x19
    1e0e:	98 2f       	mov	r25, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	99 27       	eor	r25, r25
    1e14:	99 1f       	adc	r25, r25
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	67 e0       	ldi	r22, 0x07	; 7
    1e1a:	49 2f       	mov	r20, r25
    1e1c:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_U8_Set_Pin_value>
	/*E=1*/
	/*E=0*/
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_HIGH);
    1e20:	82 e0       	ldi	r24, 0x02	; 2
    1e22:	62 e0       	ldi	r22, 0x02	; 2
    1e24:	41 e0       	ldi	r20, 0x01	; 1
    1e26:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_U8_Set_Pin_value>
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	a0 e8       	ldi	r26, 0x80	; 128
    1e30:	bf e3       	ldi	r27, 0x3F	; 63
    1e32:	8d 8b       	std	Y+21, r24	; 0x15
    1e34:	9e 8b       	std	Y+22, r25	; 0x16
    1e36:	af 8b       	std	Y+23, r26	; 0x17
    1e38:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e40:	98 8d       	ldd	r25, Y+24	; 0x18
    1e42:	2b ea       	ldi	r18, 0xAB	; 171
    1e44:	3a ea       	ldi	r19, 0xAA	; 170
    1e46:	4a e2       	ldi	r20, 0x2A	; 42
    1e48:	50 e4       	ldi	r21, 0x40	; 64
    1e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	89 8b       	std	Y+17, r24	; 0x11
    1e54:	9a 8b       	std	Y+18, r25	; 0x12
    1e56:	ab 8b       	std	Y+19, r26	; 0x13
    1e58:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e5a:	69 89       	ldd	r22, Y+17	; 0x11
    1e5c:	7a 89       	ldd	r23, Y+18	; 0x12
    1e5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e60:	9c 89       	ldd	r25, Y+20	; 0x14
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e8       	ldi	r20, 0x80	; 128
    1e68:	5f e3       	ldi	r21, 0x3F	; 63
    1e6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e6e:	88 23       	and	r24, r24
    1e70:	1c f4       	brge	.+6      	; 0x1e78 <LCD_void_Write+0x11a>
		__ticks = 1;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	88 8b       	std	Y+16, r24	; 0x10
    1e76:	91 c0       	rjmp	.+290    	; 0x1f9a <LCD_void_Write+0x23c>
	else if (__tmp > 255)
    1e78:	69 89       	ldd	r22, Y+17	; 0x11
    1e7a:	7a 89       	ldd	r23, Y+18	; 0x12
    1e7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	4f e7       	ldi	r20, 0x7F	; 127
    1e86:	53 e4       	ldi	r21, 0x43	; 67
    1e88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e8c:	18 16       	cp	r1, r24
    1e8e:	0c f0       	brlt	.+2      	; 0x1e92 <LCD_void_Write+0x134>
    1e90:	7b c0       	rjmp	.+246    	; 0x1f88 <LCD_void_Write+0x22a>
	{
		_delay_ms(__us / 1000.0);
    1e92:	6d 89       	ldd	r22, Y+21	; 0x15
    1e94:	7e 89       	ldd	r23, Y+22	; 0x16
    1e96:	8f 89       	ldd	r24, Y+23	; 0x17
    1e98:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	4a e7       	ldi	r20, 0x7A	; 122
    1ea0:	54 e4       	ldi	r21, 0x44	; 68
    1ea2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	8c 87       	std	Y+12, r24	; 0x0c
    1eac:	9d 87       	std	Y+13, r25	; 0x0d
    1eae:	ae 87       	std	Y+14, r26	; 0x0e
    1eb0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1eb4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1eb6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1eb8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	4a ef       	ldi	r20, 0xFA	; 250
    1ec0:	54 e4       	ldi	r21, 0x44	; 68
    1ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	88 87       	std	Y+8, r24	; 0x08
    1ecc:	99 87       	std	Y+9, r25	; 0x09
    1ece:	aa 87       	std	Y+10, r26	; 0x0a
    1ed0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ed2:	68 85       	ldd	r22, Y+8	; 0x08
    1ed4:	79 85       	ldd	r23, Y+9	; 0x09
    1ed6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ed8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e8       	ldi	r20, 0x80	; 128
    1ee0:	5f e3       	ldi	r21, 0x3F	; 63
    1ee2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ee6:	88 23       	and	r24, r24
    1ee8:	2c f4       	brge	.+10     	; 0x1ef4 <LCD_void_Write+0x196>
		__ticks = 1;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9f 83       	std	Y+7, r25	; 0x07
    1ef0:	8e 83       	std	Y+6, r24	; 0x06
    1ef2:	3f c0       	rjmp	.+126    	; 0x1f72 <LCD_void_Write+0x214>
	else if (__tmp > 65535)
    1ef4:	68 85       	ldd	r22, Y+8	; 0x08
    1ef6:	79 85       	ldd	r23, Y+9	; 0x09
    1ef8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1efa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	3f ef       	ldi	r19, 0xFF	; 255
    1f00:	4f e7       	ldi	r20, 0x7F	; 127
    1f02:	57 e4       	ldi	r21, 0x47	; 71
    1f04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f08:	18 16       	cp	r1, r24
    1f0a:	4c f5       	brge	.+82     	; 0x1f5e <LCD_void_Write+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f0e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f10:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f12:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e2       	ldi	r20, 0x20	; 32
    1f1a:	51 e4       	ldi	r21, 0x41	; 65
    1f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	bc 01       	movw	r22, r24
    1f26:	cd 01       	movw	r24, r26
    1f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	9f 83       	std	Y+7, r25	; 0x07
    1f32:	8e 83       	std	Y+6, r24	; 0x06
    1f34:	0f c0       	rjmp	.+30     	; 0x1f54 <LCD_void_Write+0x1f6>
    1f36:	88 ec       	ldi	r24, 0xC8	; 200
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	9d 83       	std	Y+5, r25	; 0x05
    1f3c:	8c 83       	std	Y+4, r24	; 0x04
    1f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f40:	9d 81       	ldd	r25, Y+5	; 0x05
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <LCD_void_Write+0x1e4>
    1f46:	9d 83       	std	Y+5, r25	; 0x05
    1f48:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	9f 83       	std	Y+7, r25	; 0x07
    1f52:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f54:	8e 81       	ldd	r24, Y+6	; 0x06
    1f56:	9f 81       	ldd	r25, Y+7	; 0x07
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	69 f7       	brne	.-38     	; 0x1f36 <LCD_void_Write+0x1d8>
    1f5c:	24 c0       	rjmp	.+72     	; 0x1fa6 <LCD_void_Write+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5e:	68 85       	ldd	r22, Y+8	; 0x08
    1f60:	79 85       	ldd	r23, Y+9	; 0x09
    1f62:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f64:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9f 83       	std	Y+7, r25	; 0x07
    1f70:	8e 83       	std	Y+6, r24	; 0x06
    1f72:	8e 81       	ldd	r24, Y+6	; 0x06
    1f74:	9f 81       	ldd	r25, Y+7	; 0x07
    1f76:	9b 83       	std	Y+3, r25	; 0x03
    1f78:	8a 83       	std	Y+2, r24	; 0x02
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <LCD_void_Write+0x220>
    1f82:	9b 83       	std	Y+3, r25	; 0x03
    1f84:	8a 83       	std	Y+2, r24	; 0x02
    1f86:	0f c0       	rjmp	.+30     	; 0x1fa6 <LCD_void_Write+0x248>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f88:	69 89       	ldd	r22, Y+17	; 0x11
    1f8a:	7a 89       	ldd	r23, Y+18	; 0x12
    1f8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	88 8b       	std	Y+16, r24	; 0x10
    1f9a:	88 89       	ldd	r24, Y+16	; 0x10
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	8a 95       	dec	r24
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <LCD_void_Write+0x242>
    1fa4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_LOW);
    1fa6:	82 e0       	ldi	r24, 0x02	; 2
    1fa8:	62 e0       	ldi	r22, 0x02	; 2
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_U8_Set_Pin_value>
		DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_E_PIN,PIN_LOW);

#endif


}
    1fb0:	69 96       	adiw	r28, 0x19	; 25
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <LCD_void_Write_Data>:


void LCD_void_Write_Data(u8 Copy_u8_char)
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	0f 92       	push	r0
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	89 83       	std	Y+1, r24	; 0x01
	/*steps*/
		/*RS=1*/
//	DIO_U8_Set_Pin_Dir(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_OUTPUT);
	DIO_U8_Set_Pin_value(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_HIGH);
    1fce:	82 e0       	ldi	r24, 0x02	; 2
    1fd0:	60 e0       	ldi	r22, 0x00	; 0
    1fd2:	41 e0       	ldi	r20, 0x01	; 1
    1fd4:	0e 94 3b 09 	call	0x1276	; 0x1276 <DIO_U8_Set_Pin_value>
		/*RW=0*/
		/*write a data*/
		/*E=1*/
		/*E=0*/
	LCD_void_Write(Copy_u8_char);
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_void_Write>
}
    1fde:	0f 90       	pop	r0
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	08 95       	ret

00001fe6 <LCD_void_Write_String>:




void LCD_void_Write_String(u8 *str)
{
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <LCD_void_Write_String+0x6>
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	9a 83       	std	Y+2, r25	; 0x02
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	0a c0       	rjmp	.+20     	; 0x200a <LCD_void_Write_String+0x24>
	while( *str!='\0')
	{
		LCD_void_Write_Data(*str);
    1ff6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff8:	fa 81       	ldd	r31, Y+2	; 0x02
    1ffa:	80 81       	ld	r24, Z
    1ffc:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_void_Write_Data>
		str++;
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	9a 81       	ldd	r25, Y+2	; 0x02
    2004:	01 96       	adiw	r24, 0x01	; 1
    2006:	9a 83       	std	Y+2, r25	; 0x02
    2008:	89 83       	std	Y+1, r24	; 0x01



void LCD_void_Write_String(u8 *str)
{
	while( *str!='\0')
    200a:	e9 81       	ldd	r30, Y+1	; 0x01
    200c:	fa 81       	ldd	r31, Y+2	; 0x02
    200e:	80 81       	ld	r24, Z
    2010:	88 23       	and	r24, r24
    2012:	89 f7       	brne	.-30     	; 0x1ff6 <LCD_void_Write_String+0x10>
	{
		LCD_void_Write_Data(*str);
		str++;
	}
}
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <LCD_void_Write_Numbers>:


void LCD_void_Write_Numbers(u32 Copy_U8_Number)
{
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	6a 97       	sbiw	r28, 0x1a	; 26
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	6f 8b       	std	Y+23, r22	; 0x17
    2034:	78 8f       	std	Y+24, r23	; 0x18
    2036:	89 8f       	std	Y+25, r24	; 0x19
    2038:	9a 8f       	std	Y+26, r25	; 0x1a
	u8 rem ;
	u8 index=0 ;
    203a:	19 82       	std	Y+1, r1	; 0x01
	u8 arr[BITSET_NUMBER];
	if(Copy_U8_Number == 0){
    203c:	8f 89       	ldd	r24, Y+23	; 0x17
    203e:	98 8d       	ldd	r25, Y+24	; 0x18
    2040:	a9 8d       	ldd	r26, Y+25	; 0x19
    2042:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	a1 05       	cpc	r26, r1
    2048:	b1 05       	cpc	r27, r1
    204a:	f1 f5       	brne	.+124    	; 0x20c8 <LCD_void_Write_Numbers+0xaa>
		arr[index]='0';
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	ce 01       	movw	r24, r28
    2054:	03 96       	adiw	r24, 0x03	; 3
    2056:	fc 01       	movw	r30, r24
    2058:	e2 0f       	add	r30, r18
    205a:	f3 1f       	adc	r31, r19
    205c:	80 e3       	ldi	r24, 0x30	; 48
    205e:	80 83       	st	Z, r24
		index++;
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	8f 5f       	subi	r24, 0xFF	; 255
    2064:	89 83       	std	Y+1, r24	; 0x01
    2066:	30 c0       	rjmp	.+96     	; 0x20c8 <LCD_void_Write_Numbers+0xaa>
	}
	while(Copy_U8_Number!=0)
	{
		rem=Copy_U8_Number%10;
    2068:	8f 89       	ldd	r24, Y+23	; 0x17
    206a:	98 8d       	ldd	r25, Y+24	; 0x18
    206c:	a9 8d       	ldd	r26, Y+25	; 0x19
    206e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2070:	2a e0       	ldi	r18, 0x0A	; 10
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e0       	ldi	r20, 0x00	; 0
    2076:	50 e0       	ldi	r21, 0x00	; 0
    2078:	bc 01       	movw	r22, r24
    207a:	cd 01       	movw	r24, r26
    207c:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__udivmodsi4>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	8a 83       	std	Y+2, r24	; 0x02
		arr[index]=rem+'0';
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	28 2f       	mov	r18, r24
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	48 2f       	mov	r20, r24
    2090:	40 5d       	subi	r20, 0xD0	; 208
    2092:	ce 01       	movw	r24, r28
    2094:	03 96       	adiw	r24, 0x03	; 3
    2096:	fc 01       	movw	r30, r24
    2098:	e2 0f       	add	r30, r18
    209a:	f3 1f       	adc	r31, r19
    209c:	40 83       	st	Z, r20
		index++;
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	8f 5f       	subi	r24, 0xFF	; 255
    20a2:	89 83       	std	Y+1, r24	; 0x01
		Copy_U8_Number/=10;
    20a4:	8f 89       	ldd	r24, Y+23	; 0x17
    20a6:	98 8d       	ldd	r25, Y+24	; 0x18
    20a8:	a9 8d       	ldd	r26, Y+25	; 0x19
    20aa:	ba 8d       	ldd	r27, Y+26	; 0x1a
    20ac:	2a e0       	ldi	r18, 0x0A	; 10
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e0       	ldi	r20, 0x00	; 0
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	bc 01       	movw	r22, r24
    20b6:	cd 01       	movw	r24, r26
    20b8:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__udivmodsi4>
    20bc:	da 01       	movw	r26, r20
    20be:	c9 01       	movw	r24, r18
    20c0:	8f 8b       	std	Y+23, r24	; 0x17
    20c2:	98 8f       	std	Y+24, r25	; 0x18
    20c4:	a9 8f       	std	Y+25, r26	; 0x19
    20c6:	ba 8f       	std	Y+26, r27	; 0x1a
	u8 arr[BITSET_NUMBER];
	if(Copy_U8_Number == 0){
		arr[index]='0';
		index++;
	}
	while(Copy_U8_Number!=0)
    20c8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ca:	98 8d       	ldd	r25, Y+24	; 0x18
    20cc:	a9 8d       	ldd	r26, Y+25	; 0x19
    20ce:	ba 8d       	ldd	r27, Y+26	; 0x1a
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	a1 05       	cpc	r26, r1
    20d4:	b1 05       	cpc	r27, r1
    20d6:	41 f6       	brne	.-112    	; 0x2068 <LCD_void_Write_Numbers+0x4a>
		rem=Copy_U8_Number%10;
		arr[index]=rem+'0';
		index++;
		Copy_U8_Number/=10;
	}
	arr[index]='\0';
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	28 2f       	mov	r18, r24
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	ce 01       	movw	r24, r28
    20e0:	03 96       	adiw	r24, 0x03	; 3
    20e2:	fc 01       	movw	r30, r24
    20e4:	e2 0f       	add	r30, r18
    20e6:	f3 1f       	adc	r31, r19
    20e8:	10 82       	st	Z, r1
	reverse(arr,index);
    20ea:	ce 01       	movw	r24, r28
    20ec:	03 96       	adiw	r24, 0x03	; 3
    20ee:	69 81       	ldd	r22, Y+1	; 0x01
    20f0:	0e 94 87 10 	call	0x210e	; 0x210e <reverse>
	LCD_void_Write_String(arr);
    20f4:	ce 01       	movw	r24, r28
    20f6:	03 96       	adiw	r24, 0x03	; 3
    20f8:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_void_Write_String>

}
    20fc:	6a 96       	adiw	r28, 0x1a	; 26
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <reverse>:

void reverse(u8 *ptr , u8 element)
{
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	29 97       	sbiw	r28, 0x09	; 9
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	cd bf       	out	0x3d, r28	; 61
    2122:	98 87       	std	Y+8, r25	; 0x08
    2124:	8f 83       	std	Y+7, r24	; 0x07
    2126:	69 87       	std	Y+9, r22	; 0x09
	u8 start = 0;
    2128:	1e 82       	std	Y+6, r1	; 0x06
	u8 end = element-1;
    212a:	89 85       	ldd	r24, Y+9	; 0x09
    212c:	81 50       	subi	r24, 0x01	; 1
    212e:	8d 83       	std	Y+5, r24	; 0x05
    2130:	33 c0       	rjmp	.+102    	; 0x2198 <reverse+0x8a>
	while(start<end)
	{
		u32 temp = ptr[start];
    2132:	8e 81       	ldd	r24, Y+6	; 0x06
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	8f 81       	ldd	r24, Y+7	; 0x07
    213a:	98 85       	ldd	r25, Y+8	; 0x08
    213c:	fc 01       	movw	r30, r24
    213e:	e2 0f       	add	r30, r18
    2140:	f3 1f       	adc	r31, r19
    2142:	80 81       	ld	r24, Z
    2144:	88 2f       	mov	r24, r24
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	a0 e0       	ldi	r26, 0x00	; 0
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	9a 83       	std	Y+2, r25	; 0x02
    2150:	ab 83       	std	Y+3, r26	; 0x03
    2152:	bc 83       	std	Y+4, r27	; 0x04
		ptr[start]=ptr[end];
    2154:	8e 81       	ldd	r24, Y+6	; 0x06
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	8f 81       	ldd	r24, Y+7	; 0x07
    215c:	98 85       	ldd	r25, Y+8	; 0x08
    215e:	dc 01       	movw	r26, r24
    2160:	a2 0f       	add	r26, r18
    2162:	b3 1f       	adc	r27, r19
    2164:	8d 81       	ldd	r24, Y+5	; 0x05
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	8f 81       	ldd	r24, Y+7	; 0x07
    216c:	98 85       	ldd	r25, Y+8	; 0x08
    216e:	fc 01       	movw	r30, r24
    2170:	e2 0f       	add	r30, r18
    2172:	f3 1f       	adc	r31, r19
    2174:	80 81       	ld	r24, Z
    2176:	8c 93       	st	X, r24
		ptr[end]=temp;
    2178:	8d 81       	ldd	r24, Y+5	; 0x05
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	8f 81       	ldd	r24, Y+7	; 0x07
    2180:	98 85       	ldd	r25, Y+8	; 0x08
    2182:	fc 01       	movw	r30, r24
    2184:	e2 0f       	add	r30, r18
    2186:	f3 1f       	adc	r31, r19
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	80 83       	st	Z, r24
		start++;
    218c:	8e 81       	ldd	r24, Y+6	; 0x06
    218e:	8f 5f       	subi	r24, 0xFF	; 255
    2190:	8e 83       	std	Y+6, r24	; 0x06
		end--;
    2192:	8d 81       	ldd	r24, Y+5	; 0x05
    2194:	81 50       	subi	r24, 0x01	; 1
    2196:	8d 83       	std	Y+5, r24	; 0x05

void reverse(u8 *ptr , u8 element)
{
	u8 start = 0;
	u8 end = element-1;
	while(start<end)
    2198:	9e 81       	ldd	r25, Y+6	; 0x06
    219a:	8d 81       	ldd	r24, Y+5	; 0x05
    219c:	98 17       	cp	r25, r24
    219e:	48 f2       	brcs	.-110    	; 0x2132 <reverse+0x24>
		ptr[end]=temp;
		start++;
		end--;

	}
}
    21a0:	29 96       	adiw	r28, 0x09	; 9
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <LCD_void_DDRAM_Address>:


void LCD_void_DDRAM_Address(u8 Copy_u8_Line , u8 Copy_u8_Location)
{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <LCD_void_DDRAM_Address+0x6>
    21b8:	0f 92       	push	r0
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	8a 83       	std	Y+2, r24	; 0x02
    21c0:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_Address = (Copy_u8_Location+(64*Copy_u8_Line));
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	88 2f       	mov	r24, r24
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	00 24       	eor	r0, r0
    21ca:	96 95       	lsr	r25
    21cc:	87 95       	ror	r24
    21ce:	07 94       	ror	r0
    21d0:	96 95       	lsr	r25
    21d2:	87 95       	ror	r24
    21d4:	07 94       	ror	r0
    21d6:	98 2f       	mov	r25, r24
    21d8:	80 2d       	mov	r24, r0
    21da:	98 2f       	mov	r25, r24
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	89 0f       	add	r24, r25
    21e0:	89 83       	std	Y+1, r24	; 0x01
	DDRAM_Address|=0b10000000;
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	80 68       	ori	r24, 0x80	; 128
    21e6:	89 83       	std	Y+1, r24	; 0x01
	LCD_void_Write_CMD(DDRAM_Address);
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_void_Write_CMD>
}
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <LCD_void_Set_CGRAM_Address>:


void LCD_void_Set_CGRAM_Address(u8 Address , u8 *ptr)
{
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <LCD_void_Set_CGRAM_Address+0x6>
    2200:	00 d0       	rcall	.+0      	; 0x2202 <LCD_void_Set_CGRAM_Address+0x8>
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	8a 83       	std	Y+2, r24	; 0x02
    2208:	7c 83       	std	Y+4, r23	; 0x04
    220a:	6b 83       	std	Y+3, r22	; 0x03
	LCD_void_Write_CMD(Address);
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_void_Write_CMD>
	for(u8 i =0 ; i<8 ; i++)
    2212:	19 82       	std	Y+1, r1	; 0x01
    2214:	0d c0       	rjmp	.+26     	; 0x2230 <LCD_void_Set_CGRAM_Address+0x36>
	{
		LCD_void_Write_Data(*ptr);
    2216:	eb 81       	ldd	r30, Y+3	; 0x03
    2218:	fc 81       	ldd	r31, Y+4	; 0x04
    221a:	80 81       	ld	r24, Z
    221c:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_void_Write_Data>
		ptr++;
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	9c 81       	ldd	r25, Y+4	; 0x04
    2224:	01 96       	adiw	r24, 0x01	; 1
    2226:	9c 83       	std	Y+4, r25	; 0x04
    2228:	8b 83       	std	Y+3, r24	; 0x03


void LCD_void_Set_CGRAM_Address(u8 Address , u8 *ptr)
{
	LCD_void_Write_CMD(Address);
	for(u8 i =0 ; i<8 ; i++)
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	8f 5f       	subi	r24, 0xFF	; 255
    222e:	89 83       	std	Y+1, r24	; 0x01
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	88 30       	cpi	r24, 0x08	; 8
    2234:	80 f3       	brcs	.-32     	; 0x2216 <LCD_void_Set_CGRAM_Address+0x1c>
	{
		LCD_void_Write_Data(*ptr);
		ptr++;
	}

}
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <LCD_void_Clear_Screen>:

void LCD_void_Clear_Screen(void)
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	2e 97       	sbiw	r28, 0x0e	; 14
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
	LCD_void_Write_CMD(LCD_Clear_Display_Screen);
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <LCD_void_Write_CMD>
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	a0 e0       	ldi	r26, 0x00	; 0
    2264:	b0 e4       	ldi	r27, 0x40	; 64
    2266:	8b 87       	std	Y+11, r24	; 0x0b
    2268:	9c 87       	std	Y+12, r25	; 0x0c
    226a:	ad 87       	std	Y+13, r26	; 0x0d
    226c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2270:	7c 85       	ldd	r23, Y+12	; 0x0c
    2272:	8d 85       	ldd	r24, Y+13	; 0x0d
    2274:	9e 85       	ldd	r25, Y+14	; 0x0e
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	4a ef       	ldi	r20, 0xFA	; 250
    227c:	54 e4       	ldi	r21, 0x44	; 68
    227e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	8f 83       	std	Y+7, r24	; 0x07
    2288:	98 87       	std	Y+8, r25	; 0x08
    228a:	a9 87       	std	Y+9, r26	; 0x09
    228c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    228e:	6f 81       	ldd	r22, Y+7	; 0x07
    2290:	78 85       	ldd	r23, Y+8	; 0x08
    2292:	89 85       	ldd	r24, Y+9	; 0x09
    2294:	9a 85       	ldd	r25, Y+10	; 0x0a
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e8       	ldi	r20, 0x80	; 128
    229c:	5f e3       	ldi	r21, 0x3F	; 63
    229e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22a2:	88 23       	and	r24, r24
    22a4:	2c f4       	brge	.+10     	; 0x22b0 <LCD_void_Clear_Screen+0x6c>
		__ticks = 1;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	9e 83       	std	Y+6, r25	; 0x06
    22ac:	8d 83       	std	Y+5, r24	; 0x05
    22ae:	3f c0       	rjmp	.+126    	; 0x232e <LCD_void_Clear_Screen+0xea>
	else if (__tmp > 65535)
    22b0:	6f 81       	ldd	r22, Y+7	; 0x07
    22b2:	78 85       	ldd	r23, Y+8	; 0x08
    22b4:	89 85       	ldd	r24, Y+9	; 0x09
    22b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	3f ef       	ldi	r19, 0xFF	; 255
    22bc:	4f e7       	ldi	r20, 0x7F	; 127
    22be:	57 e4       	ldi	r21, 0x47	; 71
    22c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22c4:	18 16       	cp	r1, r24
    22c6:	4c f5       	brge	.+82     	; 0x231a <LCD_void_Clear_Screen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    22cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9e 83       	std	Y+6, r25	; 0x06
    22ee:	8d 83       	std	Y+5, r24	; 0x05
    22f0:	0f c0       	rjmp	.+30     	; 0x2310 <LCD_void_Clear_Screen+0xcc>
    22f2:	88 ec       	ldi	r24, 0xC8	; 200
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	9c 83       	std	Y+4, r25	; 0x04
    22f8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	9c 81       	ldd	r25, Y+4	; 0x04
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <LCD_void_Clear_Screen+0xba>
    2302:	9c 83       	std	Y+4, r25	; 0x04
    2304:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2306:	8d 81       	ldd	r24, Y+5	; 0x05
    2308:	9e 81       	ldd	r25, Y+6	; 0x06
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	9e 83       	std	Y+6, r25	; 0x06
    230e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2310:	8d 81       	ldd	r24, Y+5	; 0x05
    2312:	9e 81       	ldd	r25, Y+6	; 0x06
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	69 f7       	brne	.-38     	; 0x22f2 <LCD_void_Clear_Screen+0xae>
    2318:	14 c0       	rjmp	.+40     	; 0x2342 <LCD_void_Clear_Screen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231a:	6f 81       	ldd	r22, Y+7	; 0x07
    231c:	78 85       	ldd	r23, Y+8	; 0x08
    231e:	89 85       	ldd	r24, Y+9	; 0x09
    2320:	9a 85       	ldd	r25, Y+10	; 0x0a
    2322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	9e 83       	std	Y+6, r25	; 0x06
    232c:	8d 83       	std	Y+5, r24	; 0x05
    232e:	8d 81       	ldd	r24, Y+5	; 0x05
    2330:	9e 81       	ldd	r25, Y+6	; 0x06
    2332:	9a 83       	std	Y+2, r25	; 0x02
    2334:	89 83       	std	Y+1, r24	; 0x01
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	9a 81       	ldd	r25, Y+2	; 0x02
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <LCD_void_Clear_Screen+0xf6>
    233e:	9a 83       	std	Y+2, r25	; 0x02
    2340:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2342:	2e 96       	adiw	r28, 0x0e	; 14
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	62 97       	sbiw	r28, 0x12	; 18
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	9a 8b       	std	Y+18, r25	; 0x12
    236a:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   /* store the integer number to arr & 10 is for decimal numbering system*/
   itoa(data,arr,10);
    236c:	89 89       	ldd	r24, Y+17	; 0x11
    236e:	9a 89       	ldd	r25, Y+18	; 0x12
    2370:	9e 01       	movw	r18, r28
    2372:	2f 5f       	subi	r18, 0xFF	; 255
    2374:	3f 4f       	sbci	r19, 0xFF	; 255
    2376:	b9 01       	movw	r22, r18
    2378:	4a e0       	ldi	r20, 0x0A	; 10
    237a:	50 e0       	ldi	r21, 0x00	; 0
    237c:	0e 94 cf 1a 	call	0x359e	; 0x359e <itoa>

   LCD_void_Write_String(arr);
    2380:	ce 01       	movw	r24, r28
    2382:	01 96       	adiw	r24, 0x01	; 1
    2384:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_void_Write_String>
}
    2388:	62 96       	adiw	r28, 0x12	; 18
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <APP_voidInit>:
static u32 number4= 0;
static f32 result;
static u8 arr_of_operator[3];


void APP_voidInit(){
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
		DIO_void_Init();
    23a2:	0e 94 8c 07 	call	0xf18	; 0xf18 <DIO_void_Init>
		LCD_void_Init();
    23a6:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCD_void_Init>
		KPD_Init();
    23aa:	0e 94 2a 0b 	call	0x1654	; 0x1654 <KPD_Init>
}
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	08 95       	ret

000023b4 <APP_voidWelcomeScreen>:

void APP_voidWelcomeScreen()
{
    23b4:	df 93       	push	r29
    23b6:	cf 93       	push	r28
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
//	LCD_void_Clear_Screen();
//	LCD_void_Write_String("Adv. Calculator");
//	_delay_ms(LONG_DELAY);
	APP_voidMainMenuScreen();
    23bc:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <APP_voidMainMenuScreen>
}
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <APP_voidMainMenuScreen>:


static void APP_voidMainMenuScreen()
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62

	LCD_void_Clear_Screen();
    23ce:	0e 94 22 11 	call	0x2244	; 0x2244 <LCD_void_Clear_Screen>
	APP_voidTakefristnumber();
    23d2:	0e 94 ee 11 	call	0x23dc	; 0x23dc <APP_voidTakefristnumber>


}
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <APP_voidTakefristnumber>:
static void APP_voidTakefristnumber()
{
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
	 pressedkey = KPD_Void_GET_Status();
    23e4:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <KPD_Void_GET_Status>
    23e8:	80 93 a2 01 	sts	0x01A2, r24
    23ec:	40 c0       	rjmp	.+128    	; 0x246e <APP_voidTakefristnumber+0x92>
		while(pressedkey>='0' && pressedkey<='9')
		{
			number1 *= 10 ;
    23ee:	80 91 92 01 	lds	r24, 0x0192
    23f2:	90 91 93 01 	lds	r25, 0x0193
    23f6:	a0 91 94 01 	lds	r26, 0x0194
    23fa:	b0 91 95 01 	lds	r27, 0x0195
    23fe:	2a e0       	ldi	r18, 0x0A	; 10
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e0       	ldi	r20, 0x00	; 0
    2404:	50 e0       	ldi	r21, 0x00	; 0
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsi3>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	80 93 92 01 	sts	0x0192, r24
    2416:	90 93 93 01 	sts	0x0193, r25
    241a:	a0 93 94 01 	sts	0x0194, r26
    241e:	b0 93 95 01 	sts	0x0195, r27
			number1 += (pressedkey-'0');
    2422:	80 91 a2 01 	lds	r24, 0x01A2
    2426:	88 2f       	mov	r24, r24
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	c0 97       	sbiw	r24, 0x30	; 48
    242c:	9c 01       	movw	r18, r24
    242e:	44 27       	eor	r20, r20
    2430:	37 fd       	sbrc	r19, 7
    2432:	40 95       	com	r20
    2434:	54 2f       	mov	r21, r20
    2436:	80 91 92 01 	lds	r24, 0x0192
    243a:	90 91 93 01 	lds	r25, 0x0193
    243e:	a0 91 94 01 	lds	r26, 0x0194
    2442:	b0 91 95 01 	lds	r27, 0x0195
    2446:	82 0f       	add	r24, r18
    2448:	93 1f       	adc	r25, r19
    244a:	a4 1f       	adc	r26, r20
    244c:	b5 1f       	adc	r27, r21
    244e:	80 93 92 01 	sts	0x0192, r24
    2452:	90 93 93 01 	sts	0x0193, r25
    2456:	a0 93 94 01 	sts	0x0194, r26
    245a:	b0 93 95 01 	sts	0x0195, r27
			LCD_void_Write_Data(pressedkey);
    245e:	80 91 a2 01 	lds	r24, 0x01A2
    2462:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_void_Write_Data>
			pressedkey = KPD_Void_GET_Status();
    2466:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <KPD_Void_GET_Status>
    246a:	80 93 a2 01 	sts	0x01A2, r24

}
static void APP_voidTakefristnumber()
{
	 pressedkey = KPD_Void_GET_Status();
		while(pressedkey>='0' && pressedkey<='9')
    246e:	80 91 a2 01 	lds	r24, 0x01A2
    2472:	80 33       	cpi	r24, 0x30	; 48
    2474:	28 f0       	brcs	.+10     	; 0x2480 <APP_voidTakefristnumber+0xa4>
    2476:	80 91 a2 01 	lds	r24, 0x01A2
    247a:	8a 33       	cpi	r24, 0x3A	; 58
    247c:	08 f4       	brcc	.+2      	; 0x2480 <APP_voidTakefristnumber+0xa4>
    247e:	b7 cf       	rjmp	.-146    	; 0x23ee <APP_voidTakefristnumber+0x12>
			number1 *= 10 ;
			number1 += (pressedkey-'0');
			LCD_void_Write_Data(pressedkey);
			pressedkey = KPD_Void_GET_Status();
		}
		APP_voidTakefirstoperator();
    2480:	0e 94 45 12 	call	0x248a	; 0x248a <APP_voidTakefirstoperator>
}
    2484:	cf 91       	pop	r28
    2486:	df 91       	pop	r29
    2488:	08 95       	ret

0000248a <APP_voidTakefirstoperator>:
static void APP_voidTakefirstoperator()
{
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    2492:	60 97       	sbiw	r28, 0x10	; 16
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	f8 94       	cli
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	cd bf       	out	0x3d, r28	; 61
	switch(pressedkey)
    249e:	80 91 a2 01 	lds	r24, 0x01A2
    24a2:	28 2f       	mov	r18, r24
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	38 8b       	std	Y+16, r19	; 0x10
    24a8:	2f 87       	std	Y+15, r18	; 0x0f
    24aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ac:	98 89       	ldd	r25, Y+16	; 0x10
    24ae:	85 32       	cpi	r24, 0x25	; 37
    24b0:	91 05       	cpc	r25, r1
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <APP_voidTakefirstoperator+0x2c>
    24b4:	97 c0       	rjmp	.+302    	; 0x25e4 <APP_voidTakefirstoperator+0x15a>
    24b6:	2f 85       	ldd	r18, Y+15	; 0x0f
    24b8:	38 89       	ldd	r19, Y+16	; 0x10
    24ba:	2d 33       	cpi	r18, 0x3D	; 61
    24bc:	31 05       	cpc	r19, r1
    24be:	09 f0       	breq	.+2      	; 0x24c2 <APP_voidTakefirstoperator+0x38>
    24c0:	c0 c0       	rjmp	.+384    	; 0x2642 <APP_voidTakefirstoperator+0x1b8>
		{
		case '=' :

			LCD_void_Clear_Screen();
    24c2:	0e 94 22 11 	call	0x2244	; 0x2244 <LCD_void_Clear_Screen>
			LCD_void_DDRAM_Address(0,5);
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	65 e0       	ldi	r22, 0x05	; 5
    24ca:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <LCD_void_DDRAM_Address>
			LCD_void_Write_String("!!Error!!");
    24ce:	80 e6       	ldi	r24, 0x60	; 96
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_void_Write_String>
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	aa e7       	ldi	r26, 0x7A	; 122
    24dc:	b4 e4       	ldi	r27, 0x44	; 68
    24de:	8b 87       	std	Y+11, r24	; 0x0b
    24e0:	9c 87       	std	Y+12, r25	; 0x0c
    24e2:	ad 87       	std	Y+13, r26	; 0x0d
    24e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	4a ef       	ldi	r20, 0xFA	; 250
    24f4:	54 e4       	ldi	r21, 0x44	; 68
    24f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	8f 83       	std	Y+7, r24	; 0x07
    2500:	98 87       	std	Y+8, r25	; 0x08
    2502:	a9 87       	std	Y+9, r26	; 0x09
    2504:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2506:	6f 81       	ldd	r22, Y+7	; 0x07
    2508:	78 85       	ldd	r23, Y+8	; 0x08
    250a:	89 85       	ldd	r24, Y+9	; 0x09
    250c:	9a 85       	ldd	r25, Y+10	; 0x0a
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e8       	ldi	r20, 0x80	; 128
    2514:	5f e3       	ldi	r21, 0x3F	; 63
    2516:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    251a:	88 23       	and	r24, r24
    251c:	2c f4       	brge	.+10     	; 0x2528 <APP_voidTakefirstoperator+0x9e>
		__ticks = 1;
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	9e 83       	std	Y+6, r25	; 0x06
    2524:	8d 83       	std	Y+5, r24	; 0x05
    2526:	3f c0       	rjmp	.+126    	; 0x25a6 <APP_voidTakefirstoperator+0x11c>
	else if (__tmp > 65535)
    2528:	6f 81       	ldd	r22, Y+7	; 0x07
    252a:	78 85       	ldd	r23, Y+8	; 0x08
    252c:	89 85       	ldd	r24, Y+9	; 0x09
    252e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	3f ef       	ldi	r19, 0xFF	; 255
    2534:	4f e7       	ldi	r20, 0x7F	; 127
    2536:	57 e4       	ldi	r21, 0x47	; 71
    2538:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    253c:	18 16       	cp	r1, r24
    253e:	4c f5       	brge	.+82     	; 0x2592 <APP_voidTakefirstoperator+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2540:	6b 85       	ldd	r22, Y+11	; 0x0b
    2542:	7c 85       	ldd	r23, Y+12	; 0x0c
    2544:	8d 85       	ldd	r24, Y+13	; 0x0d
    2546:	9e 85       	ldd	r25, Y+14	; 0x0e
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e2       	ldi	r20, 0x20	; 32
    254e:	51 e4       	ldi	r21, 0x41	; 65
    2550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	bc 01       	movw	r22, r24
    255a:	cd 01       	movw	r24, r26
    255c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	9e 83       	std	Y+6, r25	; 0x06
    2566:	8d 83       	std	Y+5, r24	; 0x05
    2568:	0f c0       	rjmp	.+30     	; 0x2588 <APP_voidTakefirstoperator+0xfe>
    256a:	88 ec       	ldi	r24, 0xC8	; 200
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	9c 83       	std	Y+4, r25	; 0x04
    2570:	8b 83       	std	Y+3, r24	; 0x03
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	9c 81       	ldd	r25, Y+4	; 0x04
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <APP_voidTakefirstoperator+0xec>
    257a:	9c 83       	std	Y+4, r25	; 0x04
    257c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257e:	8d 81       	ldd	r24, Y+5	; 0x05
    2580:	9e 81       	ldd	r25, Y+6	; 0x06
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	9e 83       	std	Y+6, r25	; 0x06
    2586:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2588:	8d 81       	ldd	r24, Y+5	; 0x05
    258a:	9e 81       	ldd	r25, Y+6	; 0x06
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	69 f7       	brne	.-38     	; 0x256a <APP_voidTakefirstoperator+0xe0>
    2590:	14 c0       	rjmp	.+40     	; 0x25ba <APP_voidTakefirstoperator+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2592:	6f 81       	ldd	r22, Y+7	; 0x07
    2594:	78 85       	ldd	r23, Y+8	; 0x08
    2596:	89 85       	ldd	r24, Y+9	; 0x09
    2598:	9a 85       	ldd	r25, Y+10	; 0x0a
    259a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	9e 83       	std	Y+6, r25	; 0x06
    25a4:	8d 83       	std	Y+5, r24	; 0x05
    25a6:	8d 81       	ldd	r24, Y+5	; 0x05
    25a8:	9e 81       	ldd	r25, Y+6	; 0x06
    25aa:	9a 83       	std	Y+2, r25	; 0x02
    25ac:	89 83       	std	Y+1, r24	; 0x01
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	9a 81       	ldd	r25, Y+2	; 0x02
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <APP_voidTakefirstoperator+0x128>
    25b6:	9a 83       	std	Y+2, r25	; 0x02
    25b8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_void_Clear_Screen();
    25ba:	0e 94 22 11 	call	0x2244	; 0x2244 <LCD_void_Clear_Screen>
			LCD_void_Write_Numbers(number1);
    25be:	80 91 92 01 	lds	r24, 0x0192
    25c2:	90 91 93 01 	lds	r25, 0x0193
    25c6:	a0 91 94 01 	lds	r26, 0x0194
    25ca:	b0 91 95 01 	lds	r27, 0x0195
    25ce:	bc 01       	movw	r22, r24
    25d0:	cd 01       	movw	r24, r26
    25d2:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_void_Write_Numbers>
			pressedkey = KPD_Void_GET_Status();
    25d6:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <KPD_Void_GET_Status>
    25da:	80 93 a2 01 	sts	0x01A2, r24
			APP_voidTakefirstoperator();
    25de:	0e 94 45 12 	call	0x248a	; 0x248a <APP_voidTakefirstoperator>
    25e2:	39 c0       	rjmp	.+114    	; 0x2656 <APP_voidTakefirstoperator+0x1cc>

			break;

		case '%' :
			APP_voidWelcomeScreen();
    25e4:	0e 94 da 11 	call	0x23b4	; 0x23b4 <APP_voidWelcomeScreen>
			result=0;
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	a0 e0       	ldi	r26, 0x00	; 0
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	80 93 a3 01 	sts	0x01A3, r24
    25f4:	90 93 a4 01 	sts	0x01A4, r25
    25f8:	a0 93 a5 01 	sts	0x01A5, r26
    25fc:	b0 93 a6 01 	sts	0x01A6, r27
			number1=0;
    2600:	10 92 92 01 	sts	0x0192, r1
    2604:	10 92 93 01 	sts	0x0193, r1
    2608:	10 92 94 01 	sts	0x0194, r1
    260c:	10 92 95 01 	sts	0x0195, r1
			number2=0;
    2610:	10 92 96 01 	sts	0x0196, r1
    2614:	10 92 97 01 	sts	0x0197, r1
    2618:	10 92 98 01 	sts	0x0198, r1
    261c:	10 92 99 01 	sts	0x0199, r1
			number3=0;
    2620:	10 92 9a 01 	sts	0x019A, r1
    2624:	10 92 9b 01 	sts	0x019B, r1
    2628:	10 92 9c 01 	sts	0x019C, r1
    262c:	10 92 9d 01 	sts	0x019D, r1
			number4=0;
    2630:	10 92 9e 01 	sts	0x019E, r1
    2634:	10 92 9f 01 	sts	0x019F, r1
    2638:	10 92 a0 01 	sts	0x01A0, r1
    263c:	10 92 a1 01 	sts	0x01A1, r1
    2640:	0a c0       	rjmp	.+20     	; 0x2656 <APP_voidTakefirstoperator+0x1cc>
			break;
		default:
			LCD_void_Write_Data(pressedkey);
    2642:	80 91 a2 01 	lds	r24, 0x01A2
    2646:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_void_Write_Data>
			arr_of_operator[0]=pressedkey;
    264a:	80 91 a2 01 	lds	r24, 0x01A2
    264e:	80 93 a7 01 	sts	0x01A7, r24
			APP_voidTakeSecondNumber();
    2652:	0e 94 34 13 	call	0x2668	; 0x2668 <APP_voidTakeSecondNumber>
			break;
		}

}
    2656:	60 96       	adiw	r28, 0x10	; 16
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	f8 94       	cli
    265c:	de bf       	out	0x3e, r29	; 62
    265e:	0f be       	out	0x3f, r0	; 63
    2660:	cd bf       	out	0x3d, r28	; 61
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <APP_voidTakeSecondNumber>:

static void APP_voidTakeSecondNumber()
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
	 	 	 pressedkey = KPD_Void_GET_Status();
    2670:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <KPD_Void_GET_Status>
    2674:	80 93 a2 01 	sts	0x01A2, r24
    2678:	40 c0       	rjmp	.+128    	; 0x26fa <APP_voidTakeSecondNumber+0x92>
			while(pressedkey>='0' && pressedkey<='9')
			{
				number2 *= 10 ;
    267a:	80 91 96 01 	lds	r24, 0x0196
    267e:	90 91 97 01 	lds	r25, 0x0197
    2682:	a0 91 98 01 	lds	r26, 0x0198
    2686:	b0 91 99 01 	lds	r27, 0x0199
    268a:	2a e0       	ldi	r18, 0x0A	; 10
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	50 e0       	ldi	r21, 0x00	; 0
    2692:	bc 01       	movw	r22, r24
    2694:	cd 01       	movw	r24, r26
    2696:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsi3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	80 93 96 01 	sts	0x0196, r24
    26a2:	90 93 97 01 	sts	0x0197, r25
    26a6:	a0 93 98 01 	sts	0x0198, r26
    26aa:	b0 93 99 01 	sts	0x0199, r27
				number2 += (pressedkey-'0');
    26ae:	80 91 a2 01 	lds	r24, 0x01A2
    26b2:	88 2f       	mov	r24, r24
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	c0 97       	sbiw	r24, 0x30	; 48
    26b8:	9c 01       	movw	r18, r24
    26ba:	44 27       	eor	r20, r20
    26bc:	37 fd       	sbrc	r19, 7
    26be:	40 95       	com	r20
    26c0:	54 2f       	mov	r21, r20
    26c2:	80 91 96 01 	lds	r24, 0x0196
    26c6:	90 91 97 01 	lds	r25, 0x0197
    26ca:	a0 91 98 01 	lds	r26, 0x0198
    26ce:	b0 91 99 01 	lds	r27, 0x0199
    26d2:	82 0f       	add	r24, r18
    26d4:	93 1f       	adc	r25, r19
    26d6:	a4 1f       	adc	r26, r20
    26d8:	b5 1f       	adc	r27, r21
    26da:	80 93 96 01 	sts	0x0196, r24
    26de:	90 93 97 01 	sts	0x0197, r25
    26e2:	a0 93 98 01 	sts	0x0198, r26
    26e6:	b0 93 99 01 	sts	0x0199, r27
				LCD_void_Write_Data(pressedkey);
    26ea:	80 91 a2 01 	lds	r24, 0x01A2
    26ee:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_void_Write_Data>
				pressedkey = KPD_Void_GET_Status();
    26f2:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <KPD_Void_GET_Status>
    26f6:	80 93 a2 01 	sts	0x01A2, r24
}

static void APP_voidTakeSecondNumber()
{
	 	 	 pressedkey = KPD_Void_GET_Status();
			while(pressedkey>='0' && pressedkey<='9')
    26fa:	80 91 a2 01 	lds	r24, 0x01A2
    26fe:	80 33       	cpi	r24, 0x30	; 48
    2700:	28 f0       	brcs	.+10     	; 0x270c <APP_voidTakeSecondNumber+0xa4>
    2702:	80 91 a2 01 	lds	r24, 0x01A2
    2706:	8a 33       	cpi	r24, 0x3A	; 58
    2708:	08 f4       	brcc	.+2      	; 0x270c <APP_voidTakeSecondNumber+0xa4>
    270a:	b7 cf       	rjmp	.-146    	; 0x267a <APP_voidTakeSecondNumber+0x12>
				number2 *= 10 ;
				number2 += (pressedkey-'0');
				LCD_void_Write_Data(pressedkey);
				pressedkey = KPD_Void_GET_Status();
			}
			APP_voidTakesecondoperator();
    270c:	0e 94 8b 13 	call	0x2716	; 0x2716 <APP_voidTakesecondoperator>
}
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <APP_voidTakesecondoperator>:

static void APP_voidTakesecondoperator()
{
    2716:	ef 92       	push	r14
    2718:	ff 92       	push	r15
    271a:	0f 93       	push	r16
    271c:	1f 93       	push	r17
    271e:	df 93       	push	r29
    2720:	cf 93       	push	r28
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
    2726:	62 97       	sbiw	r28, 0x12	; 18
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
	switch(arr_of_operator[0])
    2732:	80 91 a7 01 	lds	r24, 0x01A7
    2736:	e8 2e       	mov	r14, r24
    2738:	ff 24       	eor	r15, r15
    273a:	fa 8a       	std	Y+18, r15	; 0x12
    273c:	e9 8a       	std	Y+17, r14	; 0x11
    273e:	09 89       	ldd	r16, Y+17	; 0x11
    2740:	1a 89       	ldd	r17, Y+18	; 0x12
    2742:	0b 32       	cpi	r16, 0x2B	; 43
    2744:	11 05       	cpc	r17, r1
    2746:	c1 f0       	breq	.+48     	; 0x2778 <APP_voidTakesecondoperator+0x62>
    2748:	29 89       	ldd	r18, Y+17	; 0x11
    274a:	3a 89       	ldd	r19, Y+18	; 0x12
    274c:	2c 32       	cpi	r18, 0x2C	; 44
    274e:	31 05       	cpc	r19, r1
    2750:	3c f4       	brge	.+14     	; 0x2760 <APP_voidTakesecondoperator+0x4a>
    2752:	89 89       	ldd	r24, Y+17	; 0x11
    2754:	9a 89       	ldd	r25, Y+18	; 0x12
    2756:	8a 32       	cpi	r24, 0x2A	; 42
    2758:	91 05       	cpc	r25, r1
    275a:	09 f4       	brne	.+2      	; 0x275e <APP_voidTakesecondoperator+0x48>
    275c:	7c c0       	rjmp	.+248    	; 0x2856 <APP_voidTakesecondoperator+0x140>
    275e:	9f c0       	rjmp	.+318    	; 0x289e <APP_voidTakesecondoperator+0x188>
    2760:	09 89       	ldd	r16, Y+17	; 0x11
    2762:	1a 89       	ldd	r17, Y+18	; 0x12
    2764:	0d 32       	cpi	r16, 0x2D	; 45
    2766:	11 05       	cpc	r17, r1
    2768:	51 f1       	breq	.+84     	; 0x27be <APP_voidTakesecondoperator+0xa8>
    276a:	29 89       	ldd	r18, Y+17	; 0x11
    276c:	3a 89       	ldd	r19, Y+18	; 0x12
    276e:	2f 32       	cpi	r18, 0x2F	; 47
    2770:	31 05       	cpc	r19, r1
    2772:	09 f4       	brne	.+2      	; 0x2776 <APP_voidTakesecondoperator+0x60>
    2774:	4b c0       	rjmp	.+150    	; 0x280c <APP_voidTakesecondoperator+0xf6>
    2776:	93 c0       	rjmp	.+294    	; 0x289e <APP_voidTakesecondoperator+0x188>
	{
				case '+':
					(result) = (number1+number2);
    2778:	20 91 92 01 	lds	r18, 0x0192
    277c:	30 91 93 01 	lds	r19, 0x0193
    2780:	40 91 94 01 	lds	r20, 0x0194
    2784:	50 91 95 01 	lds	r21, 0x0195
    2788:	80 91 96 01 	lds	r24, 0x0196
    278c:	90 91 97 01 	lds	r25, 0x0197
    2790:	a0 91 98 01 	lds	r26, 0x0198
    2794:	b0 91 99 01 	lds	r27, 0x0199
    2798:	82 0f       	add	r24, r18
    279a:	93 1f       	adc	r25, r19
    279c:	a4 1f       	adc	r26, r20
    279e:	b5 1f       	adc	r27, r21
    27a0:	bc 01       	movw	r22, r24
    27a2:	cd 01       	movw	r24, r26
    27a4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	80 93 a3 01 	sts	0x01A3, r24
    27b0:	90 93 a4 01 	sts	0x01A4, r25
    27b4:	a0 93 a5 01 	sts	0x01A5, r26
    27b8:	b0 93 a6 01 	sts	0x01A6, r27
    27bc:	70 c0       	rjmp	.+224    	; 0x289e <APP_voidTakesecondoperator+0x188>
					break;
				case '-': (result) =number1-number2;
    27be:	20 91 92 01 	lds	r18, 0x0192
    27c2:	30 91 93 01 	lds	r19, 0x0193
    27c6:	40 91 94 01 	lds	r20, 0x0194
    27ca:	50 91 95 01 	lds	r21, 0x0195
    27ce:	80 91 96 01 	lds	r24, 0x0196
    27d2:	90 91 97 01 	lds	r25, 0x0197
    27d6:	a0 91 98 01 	lds	r26, 0x0198
    27da:	b0 91 99 01 	lds	r27, 0x0199
    27de:	79 01       	movw	r14, r18
    27e0:	8a 01       	movw	r16, r20
    27e2:	e8 1a       	sub	r14, r24
    27e4:	f9 0a       	sbc	r15, r25
    27e6:	0a 0b       	sbc	r16, r26
    27e8:	1b 0b       	sbc	r17, r27
    27ea:	d8 01       	movw	r26, r16
    27ec:	c7 01       	movw	r24, r14
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	80 93 a3 01 	sts	0x01A3, r24
    27fe:	90 93 a4 01 	sts	0x01A4, r25
    2802:	a0 93 a5 01 	sts	0x01A5, r26
    2806:	b0 93 a6 01 	sts	0x01A6, r27
    280a:	49 c0       	rjmp	.+146    	; 0x289e <APP_voidTakesecondoperator+0x188>
					break;
				case '/':
					(result) =number1 / number2;
    280c:	80 91 92 01 	lds	r24, 0x0192
    2810:	90 91 93 01 	lds	r25, 0x0193
    2814:	a0 91 94 01 	lds	r26, 0x0194
    2818:	b0 91 95 01 	lds	r27, 0x0195
    281c:	20 91 96 01 	lds	r18, 0x0196
    2820:	30 91 97 01 	lds	r19, 0x0197
    2824:	40 91 98 01 	lds	r20, 0x0198
    2828:	50 91 99 01 	lds	r21, 0x0199
    282c:	bc 01       	movw	r22, r24
    282e:	cd 01       	movw	r24, r26
    2830:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__udivmodsi4>
    2834:	da 01       	movw	r26, r20
    2836:	c9 01       	movw	r24, r18
    2838:	bc 01       	movw	r22, r24
    283a:	cd 01       	movw	r24, r26
    283c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	80 93 a3 01 	sts	0x01A3, r24
    2848:	90 93 a4 01 	sts	0x01A4, r25
    284c:	a0 93 a5 01 	sts	0x01A5, r26
    2850:	b0 93 a6 01 	sts	0x01A6, r27
    2854:	24 c0       	rjmp	.+72     	; 0x289e <APP_voidTakesecondoperator+0x188>
					break;
				case '*':
					(result) =number1*number2;
    2856:	80 91 92 01 	lds	r24, 0x0192
    285a:	90 91 93 01 	lds	r25, 0x0193
    285e:	a0 91 94 01 	lds	r26, 0x0194
    2862:	b0 91 95 01 	lds	r27, 0x0195
    2866:	20 91 96 01 	lds	r18, 0x0196
    286a:	30 91 97 01 	lds	r19, 0x0197
    286e:	40 91 98 01 	lds	r20, 0x0198
    2872:	50 91 99 01 	lds	r21, 0x0199
    2876:	bc 01       	movw	r22, r24
    2878:	cd 01       	movw	r24, r26
    287a:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsi3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	bc 01       	movw	r22, r24
    2884:	cd 01       	movw	r24, r26
    2886:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	80 93 a3 01 	sts	0x01A3, r24
    2892:	90 93 a4 01 	sts	0x01A4, r25
    2896:	a0 93 a5 01 	sts	0x01A5, r26
    289a:	b0 93 a6 01 	sts	0x01A6, r27
					break;
	}

	switch(pressedkey)
    289e:	80 91 a2 01 	lds	r24, 0x01A2
    28a2:	08 2f       	mov	r16, r24
    28a4:	10 e0       	ldi	r17, 0x00	; 0
    28a6:	18 8b       	std	Y+16, r17	; 0x10
    28a8:	0f 87       	std	Y+15, r16	; 0x0f
    28aa:	2f 85       	ldd	r18, Y+15	; 0x0f
    28ac:	38 89       	ldd	r19, Y+16	; 0x10
    28ae:	25 32       	cpi	r18, 0x25	; 37
    28b0:	31 05       	cpc	r19, r1
    28b2:	09 f4       	brne	.+2      	; 0x28b6 <APP_voidTakesecondoperator+0x1a0>
    28b4:	f8 c0       	rjmp	.+496    	; 0x2aa6 <APP_voidTakesecondoperator+0x390>
    28b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28b8:	98 89       	ldd	r25, Y+16	; 0x10
    28ba:	8d 33       	cpi	r24, 0x3D	; 61
    28bc:	91 05       	cpc	r25, r1
    28be:	09 f0       	breq	.+2      	; 0x28c2 <APP_voidTakesecondoperator+0x1ac>
    28c0:	21 c1       	rjmp	.+578    	; 0x2b04 <APP_voidTakesecondoperator+0x3ee>
		{
		case '=' :
			LCD_void_DDRAM_Address(1,0);
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	60 e0       	ldi	r22, 0x00	; 0
    28c6:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <LCD_void_DDRAM_Address>
			LCD_void_Write_String("Answer:");
    28ca:	8a e6       	ldi	r24, 0x6A	; 106
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_void_Write_String>
			LCD_void_Write_Numbers(result);
    28d2:	80 91 a3 01 	lds	r24, 0x01A3
    28d6:	90 91 a4 01 	lds	r25, 0x01A4
    28da:	a0 91 a5 01 	lds	r26, 0x01A5
    28de:	b0 91 a6 01 	lds	r27, 0x01A6
    28e2:	bc 01       	movw	r22, r24
    28e4:	cd 01       	movw	r24, r26
    28e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	bc 01       	movw	r22, r24
    28f0:	cd 01       	movw	r24, r26
    28f2:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_void_Write_Numbers>
			pressedkey = KPD_Void_GET_Status();
    28f6:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <KPD_Void_GET_Status>
    28fa:	80 93 a2 01 	sts	0x01A2, r24
			if(pressedkey=='%')
    28fe:	80 91 a2 01 	lds	r24, 0x01A2
    2902:	85 32       	cpi	r24, 0x25	; 37
    2904:	79 f5       	brne	.+94     	; 0x2964 <APP_voidTakesecondoperator+0x24e>
				{
				result=0;
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	a0 e0       	ldi	r26, 0x00	; 0
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	80 93 a3 01 	sts	0x01A3, r24
    2912:	90 93 a4 01 	sts	0x01A4, r25
    2916:	a0 93 a5 01 	sts	0x01A5, r26
    291a:	b0 93 a6 01 	sts	0x01A6, r27
				number1=0;
    291e:	10 92 92 01 	sts	0x0192, r1
    2922:	10 92 93 01 	sts	0x0193, r1
    2926:	10 92 94 01 	sts	0x0194, r1
    292a:	10 92 95 01 	sts	0x0195, r1
				number2=0;
    292e:	10 92 96 01 	sts	0x0196, r1
    2932:	10 92 97 01 	sts	0x0197, r1
    2936:	10 92 98 01 	sts	0x0198, r1
    293a:	10 92 99 01 	sts	0x0199, r1
				number3=0;
    293e:	10 92 9a 01 	sts	0x019A, r1
    2942:	10 92 9b 01 	sts	0x019B, r1
    2946:	10 92 9c 01 	sts	0x019C, r1
    294a:	10 92 9d 01 	sts	0x019D, r1
				number4=0;
    294e:	10 92 9e 01 	sts	0x019E, r1
    2952:	10 92 9f 01 	sts	0x019F, r1
    2956:	10 92 a0 01 	sts	0x01A0, r1
    295a:	10 92 a1 01 	sts	0x01A1, r1
				APP_voidMainMenuScreen();
    295e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <APP_voidMainMenuScreen>
    2962:	da c0       	rjmp	.+436    	; 0x2b18 <APP_voidTakesecondoperator+0x402>
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	aa ef       	ldi	r26, 0xFA	; 250
    296a:	b3 e4       	ldi	r27, 0x43	; 67
    296c:	8b 87       	std	Y+11, r24	; 0x0b
    296e:	9c 87       	std	Y+12, r25	; 0x0c
    2970:	ad 87       	std	Y+13, r26	; 0x0d
    2972:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2974:	6b 85       	ldd	r22, Y+11	; 0x0b
    2976:	7c 85       	ldd	r23, Y+12	; 0x0c
    2978:	8d 85       	ldd	r24, Y+13	; 0x0d
    297a:	9e 85       	ldd	r25, Y+14	; 0x0e
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	4a ef       	ldi	r20, 0xFA	; 250
    2982:	54 e4       	ldi	r21, 0x44	; 68
    2984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	8f 83       	std	Y+7, r24	; 0x07
    298e:	98 87       	std	Y+8, r25	; 0x08
    2990:	a9 87       	std	Y+9, r26	; 0x09
    2992:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2994:	6f 81       	ldd	r22, Y+7	; 0x07
    2996:	78 85       	ldd	r23, Y+8	; 0x08
    2998:	89 85       	ldd	r24, Y+9	; 0x09
    299a:	9a 85       	ldd	r25, Y+10	; 0x0a
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e8       	ldi	r20, 0x80	; 128
    29a2:	5f e3       	ldi	r21, 0x3F	; 63
    29a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29a8:	88 23       	and	r24, r24
    29aa:	2c f4       	brge	.+10     	; 0x29b6 <APP_voidTakesecondoperator+0x2a0>
		__ticks = 1;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	9e 83       	std	Y+6, r25	; 0x06
    29b2:	8d 83       	std	Y+5, r24	; 0x05
    29b4:	3f c0       	rjmp	.+126    	; 0x2a34 <APP_voidTakesecondoperator+0x31e>
	else if (__tmp > 65535)
    29b6:	6f 81       	ldd	r22, Y+7	; 0x07
    29b8:	78 85       	ldd	r23, Y+8	; 0x08
    29ba:	89 85       	ldd	r24, Y+9	; 0x09
    29bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	3f ef       	ldi	r19, 0xFF	; 255
    29c2:	4f e7       	ldi	r20, 0x7F	; 127
    29c4:	57 e4       	ldi	r21, 0x47	; 71
    29c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29ca:	18 16       	cp	r1, r24
    29cc:	4c f5       	brge	.+82     	; 0x2a20 <APP_voidTakesecondoperator+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e2       	ldi	r20, 0x20	; 32
    29dc:	51 e4       	ldi	r21, 0x41	; 65
    29de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	bc 01       	movw	r22, r24
    29e8:	cd 01       	movw	r24, r26
    29ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
    29f6:	0f c0       	rjmp	.+30     	; 0x2a16 <APP_voidTakesecondoperator+0x300>
    29f8:	88 ec       	ldi	r24, 0xC8	; 200
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	9c 83       	std	Y+4, r25	; 0x04
    29fe:	8b 83       	std	Y+3, r24	; 0x03
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	9c 81       	ldd	r25, Y+4	; 0x04
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <APP_voidTakesecondoperator+0x2ee>
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	9e 83       	std	Y+6, r25	; 0x06
    2a14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a16:	8d 81       	ldd	r24, Y+5	; 0x05
    2a18:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1a:	00 97       	sbiw	r24, 0x00	; 0
    2a1c:	69 f7       	brne	.-38     	; 0x29f8 <APP_voidTakesecondoperator+0x2e2>
    2a1e:	14 c0       	rjmp	.+40     	; 0x2a48 <APP_voidTakesecondoperator+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a20:	6f 81       	ldd	r22, Y+7	; 0x07
    2a22:	78 85       	ldd	r23, Y+8	; 0x08
    2a24:	89 85       	ldd	r24, Y+9	; 0x09
    2a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	9e 83       	std	Y+6, r25	; 0x06
    2a32:	8d 83       	std	Y+5, r24	; 0x05
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
    2a36:	9e 81       	ldd	r25, Y+6	; 0x06
    2a38:	9a 83       	std	Y+2, r25	; 0x02
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <APP_voidTakesecondoperator+0x32a>
    2a44:	9a 83       	std	Y+2, r25	; 0x02
    2a46:	89 83       	std	Y+1, r24	; 0x01
				}
			else
			{
				_delay_ms(500);
				result=0;
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	a0 e0       	ldi	r26, 0x00	; 0
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	80 93 a3 01 	sts	0x01A3, r24
    2a54:	90 93 a4 01 	sts	0x01A4, r25
    2a58:	a0 93 a5 01 	sts	0x01A5, r26
    2a5c:	b0 93 a6 01 	sts	0x01A6, r27
							number1=0;
    2a60:	10 92 92 01 	sts	0x0192, r1
    2a64:	10 92 93 01 	sts	0x0193, r1
    2a68:	10 92 94 01 	sts	0x0194, r1
    2a6c:	10 92 95 01 	sts	0x0195, r1
							number2=0;
    2a70:	10 92 96 01 	sts	0x0196, r1
    2a74:	10 92 97 01 	sts	0x0197, r1
    2a78:	10 92 98 01 	sts	0x0198, r1
    2a7c:	10 92 99 01 	sts	0x0199, r1
							number3=0;
    2a80:	10 92 9a 01 	sts	0x019A, r1
    2a84:	10 92 9b 01 	sts	0x019B, r1
    2a88:	10 92 9c 01 	sts	0x019C, r1
    2a8c:	10 92 9d 01 	sts	0x019D, r1
							number4=0;
    2a90:	10 92 9e 01 	sts	0x019E, r1
    2a94:	10 92 9f 01 	sts	0x019F, r1
    2a98:	10 92 a0 01 	sts	0x01A0, r1
    2a9c:	10 92 a1 01 	sts	0x01A1, r1

				APP_voidMainMenuScreen();
    2aa0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <APP_voidMainMenuScreen>
    2aa4:	39 c0       	rjmp	.+114    	; 0x2b18 <APP_voidTakesecondoperator+0x402>
			}

			break;

		case '%' :
			result=0;
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	a0 e0       	ldi	r26, 0x00	; 0
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	80 93 a3 01 	sts	0x01A3, r24
    2ab2:	90 93 a4 01 	sts	0x01A4, r25
    2ab6:	a0 93 a5 01 	sts	0x01A5, r26
    2aba:	b0 93 a6 01 	sts	0x01A6, r27
						number1=0;
    2abe:	10 92 92 01 	sts	0x0192, r1
    2ac2:	10 92 93 01 	sts	0x0193, r1
    2ac6:	10 92 94 01 	sts	0x0194, r1
    2aca:	10 92 95 01 	sts	0x0195, r1
						number2=0;
    2ace:	10 92 96 01 	sts	0x0196, r1
    2ad2:	10 92 97 01 	sts	0x0197, r1
    2ad6:	10 92 98 01 	sts	0x0198, r1
    2ada:	10 92 99 01 	sts	0x0199, r1
						number3=0;
    2ade:	10 92 9a 01 	sts	0x019A, r1
    2ae2:	10 92 9b 01 	sts	0x019B, r1
    2ae6:	10 92 9c 01 	sts	0x019C, r1
    2aea:	10 92 9d 01 	sts	0x019D, r1
						number4=0;
    2aee:	10 92 9e 01 	sts	0x019E, r1
    2af2:	10 92 9f 01 	sts	0x019F, r1
    2af6:	10 92 a0 01 	sts	0x01A0, r1
    2afa:	10 92 a1 01 	sts	0x01A1, r1
						APP_voidMainMenuScreen();
    2afe:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <APP_voidMainMenuScreen>
    2b02:	0a c0       	rjmp	.+20     	; 0x2b18 <APP_voidTakesecondoperator+0x402>
			break;
		default:
			LCD_void_Write_Data(pressedkey);
    2b04:	80 91 a2 01 	lds	r24, 0x01A2
    2b08:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_void_Write_Data>
			arr_of_operator[1]=pressedkey;
    2b0c:	80 91 a2 01 	lds	r24, 0x01A2
    2b10:	80 93 a8 01 	sts	0x01A8, r24
			APP_voidTakeThirdNumber();
    2b14:	0e 94 99 15 	call	0x2b32	; 0x2b32 <APP_voidTakeThirdNumber>
			break;
		}
}
    2b18:	62 96       	adiw	r28, 0x12	; 18
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	f8 94       	cli
    2b1e:	de bf       	out	0x3e, r29	; 62
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	cd bf       	out	0x3d, r28	; 61
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	1f 91       	pop	r17
    2b2a:	0f 91       	pop	r16
    2b2c:	ff 90       	pop	r15
    2b2e:	ef 90       	pop	r14
    2b30:	08 95       	ret

00002b32 <APP_voidTakeThirdNumber>:


static void APP_voidTakeThirdNumber()
{
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
	 pressedkey = KPD_Void_GET_Status();
    2b3a:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <KPD_Void_GET_Status>
    2b3e:	80 93 a2 01 	sts	0x01A2, r24
    2b42:	40 c0       	rjmp	.+128    	; 0x2bc4 <APP_voidTakeThirdNumber+0x92>
				while(pressedkey>='0' && pressedkey<='9')
				{
					number3 *= 10 ;
    2b44:	80 91 9a 01 	lds	r24, 0x019A
    2b48:	90 91 9b 01 	lds	r25, 0x019B
    2b4c:	a0 91 9c 01 	lds	r26, 0x019C
    2b50:	b0 91 9d 01 	lds	r27, 0x019D
    2b54:	2a e0       	ldi	r18, 0x0A	; 10
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e0       	ldi	r20, 0x00	; 0
    2b5a:	50 e0       	ldi	r21, 0x00	; 0
    2b5c:	bc 01       	movw	r22, r24
    2b5e:	cd 01       	movw	r24, r26
    2b60:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsi3>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	80 93 9a 01 	sts	0x019A, r24
    2b6c:	90 93 9b 01 	sts	0x019B, r25
    2b70:	a0 93 9c 01 	sts	0x019C, r26
    2b74:	b0 93 9d 01 	sts	0x019D, r27
					number3 += (pressedkey-'0');
    2b78:	80 91 a2 01 	lds	r24, 0x01A2
    2b7c:	88 2f       	mov	r24, r24
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	c0 97       	sbiw	r24, 0x30	; 48
    2b82:	9c 01       	movw	r18, r24
    2b84:	44 27       	eor	r20, r20
    2b86:	37 fd       	sbrc	r19, 7
    2b88:	40 95       	com	r20
    2b8a:	54 2f       	mov	r21, r20
    2b8c:	80 91 9a 01 	lds	r24, 0x019A
    2b90:	90 91 9b 01 	lds	r25, 0x019B
    2b94:	a0 91 9c 01 	lds	r26, 0x019C
    2b98:	b0 91 9d 01 	lds	r27, 0x019D
    2b9c:	82 0f       	add	r24, r18
    2b9e:	93 1f       	adc	r25, r19
    2ba0:	a4 1f       	adc	r26, r20
    2ba2:	b5 1f       	adc	r27, r21
    2ba4:	80 93 9a 01 	sts	0x019A, r24
    2ba8:	90 93 9b 01 	sts	0x019B, r25
    2bac:	a0 93 9c 01 	sts	0x019C, r26
    2bb0:	b0 93 9d 01 	sts	0x019D, r27
					LCD_void_Write_Data(pressedkey);
    2bb4:	80 91 a2 01 	lds	r24, 0x01A2
    2bb8:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_void_Write_Data>
					pressedkey = KPD_Void_GET_Status();
    2bbc:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <KPD_Void_GET_Status>
    2bc0:	80 93 a2 01 	sts	0x01A2, r24


static void APP_voidTakeThirdNumber()
{
	 pressedkey = KPD_Void_GET_Status();
				while(pressedkey>='0' && pressedkey<='9')
    2bc4:	80 91 a2 01 	lds	r24, 0x01A2
    2bc8:	80 33       	cpi	r24, 0x30	; 48
    2bca:	28 f0       	brcs	.+10     	; 0x2bd6 <APP_voidTakeThirdNumber+0xa4>
    2bcc:	80 91 a2 01 	lds	r24, 0x01A2
    2bd0:	8a 33       	cpi	r24, 0x3A	; 58
    2bd2:	08 f4       	brcc	.+2      	; 0x2bd6 <APP_voidTakeThirdNumber+0xa4>
    2bd4:	b7 cf       	rjmp	.-146    	; 0x2b44 <APP_voidTakeThirdNumber+0x12>
					number3 *= 10 ;
					number3 += (pressedkey-'0');
					LCD_void_Write_Data(pressedkey);
					pressedkey = KPD_Void_GET_Status();
				}
				APP_voidTakethirdoperator();
    2bd6:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <APP_voidTakethirdoperator>
}
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <APP_voidTakethirdoperator>:


static void APP_voidTakethirdoperator()
{
    2be0:	ef 92       	push	r14
    2be2:	ff 92       	push	r15
    2be4:	0f 93       	push	r16
    2be6:	1f 93       	push	r17
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	62 97       	sbiw	r28, 0x12	; 18
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	cd bf       	out	0x3d, r28	; 61
	switch(arr_of_operator[1]){
    2bfc:	80 91 a8 01 	lds	r24, 0x01A8
    2c00:	28 2f       	mov	r18, r24
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	3a 8b       	std	Y+18, r19	; 0x12
    2c06:	29 8b       	std	Y+17, r18	; 0x11
    2c08:	89 89       	ldd	r24, Y+17	; 0x11
    2c0a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c0c:	8b 32       	cpi	r24, 0x2B	; 43
    2c0e:	91 05       	cpc	r25, r1
    2c10:	c1 f0       	breq	.+48     	; 0x2c42 <APP_voidTakethirdoperator+0x62>
    2c12:	29 89       	ldd	r18, Y+17	; 0x11
    2c14:	3a 89       	ldd	r19, Y+18	; 0x12
    2c16:	2c 32       	cpi	r18, 0x2C	; 44
    2c18:	31 05       	cpc	r19, r1
    2c1a:	3c f4       	brge	.+14     	; 0x2c2a <APP_voidTakethirdoperator+0x4a>
    2c1c:	89 89       	ldd	r24, Y+17	; 0x11
    2c1e:	9a 89       	ldd	r25, Y+18	; 0x12
    2c20:	8a 32       	cpi	r24, 0x2A	; 42
    2c22:	91 05       	cpc	r25, r1
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <APP_voidTakethirdoperator+0x48>
    2c26:	7c c0       	rjmp	.+248    	; 0x2d20 <APP_voidTakethirdoperator+0x140>
    2c28:	9f c0       	rjmp	.+318    	; 0x2d68 <APP_voidTakethirdoperator+0x188>
    2c2a:	29 89       	ldd	r18, Y+17	; 0x11
    2c2c:	3a 89       	ldd	r19, Y+18	; 0x12
    2c2e:	2d 32       	cpi	r18, 0x2D	; 45
    2c30:	31 05       	cpc	r19, r1
    2c32:	61 f1       	breq	.+88     	; 0x2c8c <APP_voidTakethirdoperator+0xac>
    2c34:	89 89       	ldd	r24, Y+17	; 0x11
    2c36:	9a 89       	ldd	r25, Y+18	; 0x12
    2c38:	8f 32       	cpi	r24, 0x2F	; 47
    2c3a:	91 05       	cpc	r25, r1
    2c3c:	09 f4       	brne	.+2      	; 0x2c40 <APP_voidTakethirdoperator+0x60>
    2c3e:	4b c0       	rjmp	.+150    	; 0x2cd6 <APP_voidTakethirdoperator+0xf6>
    2c40:	93 c0       	rjmp	.+294    	; 0x2d68 <APP_voidTakethirdoperator+0x188>
				case '+':
					(result) +=number3;
    2c42:	80 91 9a 01 	lds	r24, 0x019A
    2c46:	90 91 9b 01 	lds	r25, 0x019B
    2c4a:	a0 91 9c 01 	lds	r26, 0x019C
    2c4e:	b0 91 9d 01 	lds	r27, 0x019D
    2c52:	bc 01       	movw	r22, r24
    2c54:	cd 01       	movw	r24, r26
    2c56:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	20 91 a3 01 	lds	r18, 0x01A3
    2c62:	30 91 a4 01 	lds	r19, 0x01A4
    2c66:	40 91 a5 01 	lds	r20, 0x01A5
    2c6a:	50 91 a6 01 	lds	r21, 0x01A6
    2c6e:	bc 01       	movw	r22, r24
    2c70:	cd 01       	movw	r24, r26
    2c72:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	80 93 a3 01 	sts	0x01A3, r24
    2c7e:	90 93 a4 01 	sts	0x01A4, r25
    2c82:	a0 93 a5 01 	sts	0x01A5, r26
    2c86:	b0 93 a6 01 	sts	0x01A6, r27
    2c8a:	6e c0       	rjmp	.+220    	; 0x2d68 <APP_voidTakethirdoperator+0x188>
					break;
				case '-': (result) -=number3;
    2c8c:	e0 90 a3 01 	lds	r14, 0x01A3
    2c90:	f0 90 a4 01 	lds	r15, 0x01A4
    2c94:	00 91 a5 01 	lds	r16, 0x01A5
    2c98:	10 91 a6 01 	lds	r17, 0x01A6
    2c9c:	80 91 9a 01 	lds	r24, 0x019A
    2ca0:	90 91 9b 01 	lds	r25, 0x019B
    2ca4:	a0 91 9c 01 	lds	r26, 0x019C
    2ca8:	b0 91 9d 01 	lds	r27, 0x019D
    2cac:	bc 01       	movw	r22, r24
    2cae:	cd 01       	movw	r24, r26
    2cb0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2cb4:	9b 01       	movw	r18, r22
    2cb6:	ac 01       	movw	r20, r24
    2cb8:	c8 01       	movw	r24, r16
    2cba:	b7 01       	movw	r22, r14
    2cbc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	80 93 a3 01 	sts	0x01A3, r24
    2cc8:	90 93 a4 01 	sts	0x01A4, r25
    2ccc:	a0 93 a5 01 	sts	0x01A5, r26
    2cd0:	b0 93 a6 01 	sts	0x01A6, r27
    2cd4:	49 c0       	rjmp	.+146    	; 0x2d68 <APP_voidTakethirdoperator+0x188>
					break;

				case '/':
					(result) /=number3;
    2cd6:	e0 90 a3 01 	lds	r14, 0x01A3
    2cda:	f0 90 a4 01 	lds	r15, 0x01A4
    2cde:	00 91 a5 01 	lds	r16, 0x01A5
    2ce2:	10 91 a6 01 	lds	r17, 0x01A6
    2ce6:	80 91 9a 01 	lds	r24, 0x019A
    2cea:	90 91 9b 01 	lds	r25, 0x019B
    2cee:	a0 91 9c 01 	lds	r26, 0x019C
    2cf2:	b0 91 9d 01 	lds	r27, 0x019D
    2cf6:	bc 01       	movw	r22, r24
    2cf8:	cd 01       	movw	r24, r26
    2cfa:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2cfe:	9b 01       	movw	r18, r22
    2d00:	ac 01       	movw	r20, r24
    2d02:	c8 01       	movw	r24, r16
    2d04:	b7 01       	movw	r22, r14
    2d06:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	80 93 a3 01 	sts	0x01A3, r24
    2d12:	90 93 a4 01 	sts	0x01A4, r25
    2d16:	a0 93 a5 01 	sts	0x01A5, r26
    2d1a:	b0 93 a6 01 	sts	0x01A6, r27
    2d1e:	24 c0       	rjmp	.+72     	; 0x2d68 <APP_voidTakethirdoperator+0x188>
					break;

				case '*':
					(result) *=number3;
    2d20:	80 91 9a 01 	lds	r24, 0x019A
    2d24:	90 91 9b 01 	lds	r25, 0x019B
    2d28:	a0 91 9c 01 	lds	r26, 0x019C
    2d2c:	b0 91 9d 01 	lds	r27, 0x019D
    2d30:	bc 01       	movw	r22, r24
    2d32:	cd 01       	movw	r24, r26
    2d34:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	20 91 a3 01 	lds	r18, 0x01A3
    2d40:	30 91 a4 01 	lds	r19, 0x01A4
    2d44:	40 91 a5 01 	lds	r20, 0x01A5
    2d48:	50 91 a6 01 	lds	r21, 0x01A6
    2d4c:	bc 01       	movw	r22, r24
    2d4e:	cd 01       	movw	r24, r26
    2d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	80 93 a3 01 	sts	0x01A3, r24
    2d5c:	90 93 a4 01 	sts	0x01A4, r25
    2d60:	a0 93 a5 01 	sts	0x01A5, r26
    2d64:	b0 93 a6 01 	sts	0x01A6, r27
					break;
				}

	switch(pressedkey)
    2d68:	80 91 a2 01 	lds	r24, 0x01A2
    2d6c:	28 2f       	mov	r18, r24
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	38 8b       	std	Y+16, r19	; 0x10
    2d72:	2f 87       	std	Y+15, r18	; 0x0f
    2d74:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d76:	98 89       	ldd	r25, Y+16	; 0x10
    2d78:	85 32       	cpi	r24, 0x25	; 37
    2d7a:	91 05       	cpc	r25, r1
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <APP_voidTakethirdoperator+0x1a0>
    2d7e:	f8 c0       	rjmp	.+496    	; 0x2f70 <APP_voidTakethirdoperator+0x390>
    2d80:	2f 85       	ldd	r18, Y+15	; 0x0f
    2d82:	38 89       	ldd	r19, Y+16	; 0x10
    2d84:	2d 33       	cpi	r18, 0x3D	; 61
    2d86:	31 05       	cpc	r19, r1
    2d88:	09 f0       	breq	.+2      	; 0x2d8c <APP_voidTakethirdoperator+0x1ac>
    2d8a:	21 c1       	rjmp	.+578    	; 0x2fce <APP_voidTakethirdoperator+0x3ee>
		{
		case '=' :
			LCD_void_DDRAM_Address(1,0);
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	60 e0       	ldi	r22, 0x00	; 0
    2d90:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <LCD_void_DDRAM_Address>
			LCD_void_Write_String("Answer:");
    2d94:	8a e6       	ldi	r24, 0x6A	; 106
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_void_Write_String>
			LCD_void_Write_Numbers(result);
    2d9c:	80 91 a3 01 	lds	r24, 0x01A3
    2da0:	90 91 a4 01 	lds	r25, 0x01A4
    2da4:	a0 91 a5 01 	lds	r26, 0x01A5
    2da8:	b0 91 a6 01 	lds	r27, 0x01A6
    2dac:	bc 01       	movw	r22, r24
    2dae:	cd 01       	movw	r24, r26
    2db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	bc 01       	movw	r22, r24
    2dba:	cd 01       	movw	r24, r26
    2dbc:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_void_Write_Numbers>
			pressedkey = KPD_Void_GET_Status();
    2dc0:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <KPD_Void_GET_Status>
    2dc4:	80 93 a2 01 	sts	0x01A2, r24
			if(pressedkey=='%')
    2dc8:	80 91 a2 01 	lds	r24, 0x01A2
    2dcc:	85 32       	cpi	r24, 0x25	; 37
    2dce:	79 f5       	brne	.+94     	; 0x2e2e <APP_voidTakethirdoperator+0x24e>
			{
				result=0;
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	a0 e0       	ldi	r26, 0x00	; 0
    2dd6:	b0 e0       	ldi	r27, 0x00	; 0
    2dd8:	80 93 a3 01 	sts	0x01A3, r24
    2ddc:	90 93 a4 01 	sts	0x01A4, r25
    2de0:	a0 93 a5 01 	sts	0x01A5, r26
    2de4:	b0 93 a6 01 	sts	0x01A6, r27
										number1=0;
    2de8:	10 92 92 01 	sts	0x0192, r1
    2dec:	10 92 93 01 	sts	0x0193, r1
    2df0:	10 92 94 01 	sts	0x0194, r1
    2df4:	10 92 95 01 	sts	0x0195, r1
										number2=0;
    2df8:	10 92 96 01 	sts	0x0196, r1
    2dfc:	10 92 97 01 	sts	0x0197, r1
    2e00:	10 92 98 01 	sts	0x0198, r1
    2e04:	10 92 99 01 	sts	0x0199, r1
										number3=0;
    2e08:	10 92 9a 01 	sts	0x019A, r1
    2e0c:	10 92 9b 01 	sts	0x019B, r1
    2e10:	10 92 9c 01 	sts	0x019C, r1
    2e14:	10 92 9d 01 	sts	0x019D, r1
										number4=0;
    2e18:	10 92 9e 01 	sts	0x019E, r1
    2e1c:	10 92 9f 01 	sts	0x019F, r1
    2e20:	10 92 a0 01 	sts	0x01A0, r1
    2e24:	10 92 a1 01 	sts	0x01A1, r1
										APP_voidMainMenuScreen();
    2e28:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <APP_voidMainMenuScreen>
    2e2c:	da c0       	rjmp	.+436    	; 0x2fe2 <APP_voidTakethirdoperator+0x402>
			}
				else
			{
					result=0;
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	a0 e0       	ldi	r26, 0x00	; 0
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	80 93 a3 01 	sts	0x01A3, r24
    2e3a:	90 93 a4 01 	sts	0x01A4, r25
    2e3e:	a0 93 a5 01 	sts	0x01A5, r26
    2e42:	b0 93 a6 01 	sts	0x01A6, r27
											number1=0;
    2e46:	10 92 92 01 	sts	0x0192, r1
    2e4a:	10 92 93 01 	sts	0x0193, r1
    2e4e:	10 92 94 01 	sts	0x0194, r1
    2e52:	10 92 95 01 	sts	0x0195, r1
											number2=0;
    2e56:	10 92 96 01 	sts	0x0196, r1
    2e5a:	10 92 97 01 	sts	0x0197, r1
    2e5e:	10 92 98 01 	sts	0x0198, r1
    2e62:	10 92 99 01 	sts	0x0199, r1
											number3=0;
    2e66:	10 92 9a 01 	sts	0x019A, r1
    2e6a:	10 92 9b 01 	sts	0x019B, r1
    2e6e:	10 92 9c 01 	sts	0x019C, r1
    2e72:	10 92 9d 01 	sts	0x019D, r1
											number4=0;
    2e76:	10 92 9e 01 	sts	0x019E, r1
    2e7a:	10 92 9f 01 	sts	0x019F, r1
    2e7e:	10 92 a0 01 	sts	0x01A0, r1
    2e82:	10 92 a1 01 	sts	0x01A1, r1
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	aa ef       	ldi	r26, 0xFA	; 250
    2e8c:	b3 e4       	ldi	r27, 0x43	; 67
    2e8e:	8b 87       	std	Y+11, r24	; 0x0b
    2e90:	9c 87       	std	Y+12, r25	; 0x0c
    2e92:	ad 87       	std	Y+13, r26	; 0x0d
    2e94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	4a ef       	ldi	r20, 0xFA	; 250
    2ea4:	54 e4       	ldi	r21, 0x44	; 68
    2ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	8f 83       	std	Y+7, r24	; 0x07
    2eb0:	98 87       	std	Y+8, r25	; 0x08
    2eb2:	a9 87       	std	Y+9, r26	; 0x09
    2eb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb8:	78 85       	ldd	r23, Y+8	; 0x08
    2eba:	89 85       	ldd	r24, Y+9	; 0x09
    2ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	40 e8       	ldi	r20, 0x80	; 128
    2ec4:	5f e3       	ldi	r21, 0x3F	; 63
    2ec6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eca:	88 23       	and	r24, r24
    2ecc:	2c f4       	brge	.+10     	; 0x2ed8 <APP_voidTakethirdoperator+0x2f8>
		__ticks = 1;
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	9e 83       	std	Y+6, r25	; 0x06
    2ed4:	8d 83       	std	Y+5, r24	; 0x05
    2ed6:	3f c0       	rjmp	.+126    	; 0x2f56 <APP_voidTakethirdoperator+0x376>
	else if (__tmp > 65535)
    2ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eda:	78 85       	ldd	r23, Y+8	; 0x08
    2edc:	89 85       	ldd	r24, Y+9	; 0x09
    2ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	3f ef       	ldi	r19, 0xFF	; 255
    2ee4:	4f e7       	ldi	r20, 0x7F	; 127
    2ee6:	57 e4       	ldi	r21, 0x47	; 71
    2ee8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eec:	18 16       	cp	r1, r24
    2eee:	4c f5       	brge	.+82     	; 0x2f42 <APP_voidTakethirdoperator+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	40 e2       	ldi	r20, 0x20	; 32
    2efe:	51 e4       	ldi	r21, 0x41	; 65
    2f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	bc 01       	movw	r22, r24
    2f0a:	cd 01       	movw	r24, r26
    2f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	9e 83       	std	Y+6, r25	; 0x06
    2f16:	8d 83       	std	Y+5, r24	; 0x05
    2f18:	0f c0       	rjmp	.+30     	; 0x2f38 <APP_voidTakethirdoperator+0x358>
    2f1a:	88 ec       	ldi	r24, 0xC8	; 200
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	9c 83       	std	Y+4, r25	; 0x04
    2f20:	8b 83       	std	Y+3, r24	; 0x03
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	9c 81       	ldd	r25, Y+4	; 0x04
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	f1 f7       	brne	.-4      	; 0x2f26 <APP_voidTakethirdoperator+0x346>
    2f2a:	9c 83       	std	Y+4, r25	; 0x04
    2f2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f30:	9e 81       	ldd	r25, Y+6	; 0x06
    2f32:	01 97       	sbiw	r24, 0x01	; 1
    2f34:	9e 83       	std	Y+6, r25	; 0x06
    2f36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f38:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3c:	00 97       	sbiw	r24, 0x00	; 0
    2f3e:	69 f7       	brne	.-38     	; 0x2f1a <APP_voidTakethirdoperator+0x33a>
    2f40:	14 c0       	rjmp	.+40     	; 0x2f6a <APP_voidTakethirdoperator+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f42:	6f 81       	ldd	r22, Y+7	; 0x07
    2f44:	78 85       	ldd	r23, Y+8	; 0x08
    2f46:	89 85       	ldd	r24, Y+9	; 0x09
    2f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	9e 83       	std	Y+6, r25	; 0x06
    2f54:	8d 83       	std	Y+5, r24	; 0x05
    2f56:	8d 81       	ldd	r24, Y+5	; 0x05
    2f58:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5a:	9a 83       	std	Y+2, r25	; 0x02
    2f5c:	89 83       	std	Y+1, r24	; 0x01
    2f5e:	89 81       	ldd	r24, Y+1	; 0x01
    2f60:	9a 81       	ldd	r25, Y+2	; 0x02
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	f1 f7       	brne	.-4      	; 0x2f62 <APP_voidTakethirdoperator+0x382>
    2f66:	9a 83       	std	Y+2, r25	; 0x02
    2f68:	89 83       	std	Y+1, r24	; 0x01
											_delay_ms(500);
				APP_voidMainMenuScreen();
    2f6a:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <APP_voidMainMenuScreen>
    2f6e:	39 c0       	rjmp	.+114    	; 0x2fe2 <APP_voidTakethirdoperator+0x402>
			}

			break;

		case '%' :
			result=0;
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	a0 e0       	ldi	r26, 0x00	; 0
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	80 93 a3 01 	sts	0x01A3, r24
    2f7c:	90 93 a4 01 	sts	0x01A4, r25
    2f80:	a0 93 a5 01 	sts	0x01A5, r26
    2f84:	b0 93 a6 01 	sts	0x01A6, r27
									number1=0;
    2f88:	10 92 92 01 	sts	0x0192, r1
    2f8c:	10 92 93 01 	sts	0x0193, r1
    2f90:	10 92 94 01 	sts	0x0194, r1
    2f94:	10 92 95 01 	sts	0x0195, r1
									number2=0;
    2f98:	10 92 96 01 	sts	0x0196, r1
    2f9c:	10 92 97 01 	sts	0x0197, r1
    2fa0:	10 92 98 01 	sts	0x0198, r1
    2fa4:	10 92 99 01 	sts	0x0199, r1
									number3=0;
    2fa8:	10 92 9a 01 	sts	0x019A, r1
    2fac:	10 92 9b 01 	sts	0x019B, r1
    2fb0:	10 92 9c 01 	sts	0x019C, r1
    2fb4:	10 92 9d 01 	sts	0x019D, r1
									number4=0;
    2fb8:	10 92 9e 01 	sts	0x019E, r1
    2fbc:	10 92 9f 01 	sts	0x019F, r1
    2fc0:	10 92 a0 01 	sts	0x01A0, r1
    2fc4:	10 92 a1 01 	sts	0x01A1, r1
									APP_voidMainMenuScreen();
    2fc8:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <APP_voidMainMenuScreen>
    2fcc:	0a c0       	rjmp	.+20     	; 0x2fe2 <APP_voidTakethirdoperator+0x402>
			break;
		default:
			LCD_void_Write_Data(pressedkey);
    2fce:	80 91 a2 01 	lds	r24, 0x01A2
    2fd2:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_void_Write_Data>
			arr_of_operator[2]=pressedkey;
    2fd6:	80 91 a2 01 	lds	r24, 0x01A2
    2fda:	80 93 a9 01 	sts	0x01A9, r24
			APP_voidTakeFouthNumber();
    2fde:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <APP_voidTakeFouthNumber>
			break;
		}
}
    2fe2:	62 96       	adiw	r28, 0x12	; 18
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	de bf       	out	0x3e, r29	; 62
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	cd bf       	out	0x3d, r28	; 61
    2fee:	cf 91       	pop	r28
    2ff0:	df 91       	pop	r29
    2ff2:	1f 91       	pop	r17
    2ff4:	0f 91       	pop	r16
    2ff6:	ff 90       	pop	r15
    2ff8:	ef 90       	pop	r14
    2ffa:	08 95       	ret

00002ffc <APP_voidTakeFouthNumber>:

static void APP_voidTakeFouthNumber()
{
    2ffc:	df 93       	push	r29
    2ffe:	cf 93       	push	r28
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
	 pressedkey = KPD_Void_GET_Status();
    3004:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <KPD_Void_GET_Status>
    3008:	80 93 a2 01 	sts	0x01A2, r24
    300c:	40 c0       	rjmp	.+128    	; 0x308e <APP_voidTakeFouthNumber+0x92>
					while(pressedkey>='0' && pressedkey<='9')
					{
						number4 *= 10 ;
    300e:	80 91 9e 01 	lds	r24, 0x019E
    3012:	90 91 9f 01 	lds	r25, 0x019F
    3016:	a0 91 a0 01 	lds	r26, 0x01A0
    301a:	b0 91 a1 01 	lds	r27, 0x01A1
    301e:	2a e0       	ldi	r18, 0x0A	; 10
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e0       	ldi	r20, 0x00	; 0
    3024:	50 e0       	ldi	r21, 0x00	; 0
    3026:	bc 01       	movw	r22, r24
    3028:	cd 01       	movw	r24, r26
    302a:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__mulsi3>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	80 93 9e 01 	sts	0x019E, r24
    3036:	90 93 9f 01 	sts	0x019F, r25
    303a:	a0 93 a0 01 	sts	0x01A0, r26
    303e:	b0 93 a1 01 	sts	0x01A1, r27
						number4 += (pressedkey-'0');
    3042:	80 91 a2 01 	lds	r24, 0x01A2
    3046:	88 2f       	mov	r24, r24
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	c0 97       	sbiw	r24, 0x30	; 48
    304c:	9c 01       	movw	r18, r24
    304e:	44 27       	eor	r20, r20
    3050:	37 fd       	sbrc	r19, 7
    3052:	40 95       	com	r20
    3054:	54 2f       	mov	r21, r20
    3056:	80 91 9e 01 	lds	r24, 0x019E
    305a:	90 91 9f 01 	lds	r25, 0x019F
    305e:	a0 91 a0 01 	lds	r26, 0x01A0
    3062:	b0 91 a1 01 	lds	r27, 0x01A1
    3066:	82 0f       	add	r24, r18
    3068:	93 1f       	adc	r25, r19
    306a:	a4 1f       	adc	r26, r20
    306c:	b5 1f       	adc	r27, r21
    306e:	80 93 9e 01 	sts	0x019E, r24
    3072:	90 93 9f 01 	sts	0x019F, r25
    3076:	a0 93 a0 01 	sts	0x01A0, r26
    307a:	b0 93 a1 01 	sts	0x01A1, r27
						LCD_void_Write_Data(pressedkey);
    307e:	80 91 a2 01 	lds	r24, 0x01A2
    3082:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_void_Write_Data>
						pressedkey = KPD_Void_GET_Status();
    3086:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <KPD_Void_GET_Status>
    308a:	80 93 a2 01 	sts	0x01A2, r24
}

static void APP_voidTakeFouthNumber()
{
	 pressedkey = KPD_Void_GET_Status();
					while(pressedkey>='0' && pressedkey<='9')
    308e:	80 91 a2 01 	lds	r24, 0x01A2
    3092:	80 33       	cpi	r24, 0x30	; 48
    3094:	28 f0       	brcs	.+10     	; 0x30a0 <APP_voidTakeFouthNumber+0xa4>
    3096:	80 91 a2 01 	lds	r24, 0x01A2
    309a:	8a 33       	cpi	r24, 0x3A	; 58
    309c:	08 f4       	brcc	.+2      	; 0x30a0 <APP_voidTakeFouthNumber+0xa4>
    309e:	b7 cf       	rjmp	.-146    	; 0x300e <APP_voidTakeFouthNumber+0x12>
						number4 *= 10 ;
						number4 += (pressedkey-'0');
						LCD_void_Write_Data(pressedkey);
						pressedkey = KPD_Void_GET_Status();
					}
					APP_voidTakefourthoperator();
    30a0:	0e 94 55 18 	call	0x30aa	; 0x30aa <APP_voidTakefourthoperator>


}
    30a4:	cf 91       	pop	r28
    30a6:	df 91       	pop	r29
    30a8:	08 95       	ret

000030aa <APP_voidTakefourthoperator>:


static void APP_voidTakefourthoperator()
{
    30aa:	ef 92       	push	r14
    30ac:	ff 92       	push	r15
    30ae:	0f 93       	push	r16
    30b0:	1f 93       	push	r17
    30b2:	df 93       	push	r29
    30b4:	cf 93       	push	r28
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
    30ba:	60 97       	sbiw	r28, 0x10	; 16
    30bc:	0f b6       	in	r0, 0x3f	; 63
    30be:	f8 94       	cli
    30c0:	de bf       	out	0x3e, r29	; 62
    30c2:	0f be       	out	0x3f, r0	; 63
    30c4:	cd bf       	out	0x3d, r28	; 61
	switch(arr_of_operator[2]){
    30c6:	80 91 a9 01 	lds	r24, 0x01A9
    30ca:	28 2f       	mov	r18, r24
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	38 8b       	std	Y+16, r19	; 0x10
    30d0:	2f 87       	std	Y+15, r18	; 0x0f
    30d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    30d4:	98 89       	ldd	r25, Y+16	; 0x10
    30d6:	8b 32       	cpi	r24, 0x2B	; 43
    30d8:	91 05       	cpc	r25, r1
    30da:	c1 f0       	breq	.+48     	; 0x310c <APP_voidTakefourthoperator+0x62>
    30dc:	2f 85       	ldd	r18, Y+15	; 0x0f
    30de:	38 89       	ldd	r19, Y+16	; 0x10
    30e0:	2c 32       	cpi	r18, 0x2C	; 44
    30e2:	31 05       	cpc	r19, r1
    30e4:	3c f4       	brge	.+14     	; 0x30f4 <APP_voidTakefourthoperator+0x4a>
    30e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    30e8:	98 89       	ldd	r25, Y+16	; 0x10
    30ea:	8a 32       	cpi	r24, 0x2A	; 42
    30ec:	91 05       	cpc	r25, r1
    30ee:	09 f4       	brne	.+2      	; 0x30f2 <APP_voidTakefourthoperator+0x48>
    30f0:	7c c0       	rjmp	.+248    	; 0x31ea <APP_voidTakefourthoperator+0x140>
    30f2:	9f c0       	rjmp	.+318    	; 0x3232 <APP_voidTakefourthoperator+0x188>
    30f4:	2f 85       	ldd	r18, Y+15	; 0x0f
    30f6:	38 89       	ldd	r19, Y+16	; 0x10
    30f8:	2d 32       	cpi	r18, 0x2D	; 45
    30fa:	31 05       	cpc	r19, r1
    30fc:	61 f1       	breq	.+88     	; 0x3156 <APP_voidTakefourthoperator+0xac>
    30fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3100:	98 89       	ldd	r25, Y+16	; 0x10
    3102:	8f 32       	cpi	r24, 0x2F	; 47
    3104:	91 05       	cpc	r25, r1
    3106:	09 f4       	brne	.+2      	; 0x310a <APP_voidTakefourthoperator+0x60>
    3108:	4b c0       	rjmp	.+150    	; 0x31a0 <APP_voidTakefourthoperator+0xf6>
    310a:	93 c0       	rjmp	.+294    	; 0x3232 <APP_voidTakefourthoperator+0x188>
				case '+':
					(result) +=number4;
    310c:	80 91 9e 01 	lds	r24, 0x019E
    3110:	90 91 9f 01 	lds	r25, 0x019F
    3114:	a0 91 a0 01 	lds	r26, 0x01A0
    3118:	b0 91 a1 01 	lds	r27, 0x01A1
    311c:	bc 01       	movw	r22, r24
    311e:	cd 01       	movw	r24, r26
    3120:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	20 91 a3 01 	lds	r18, 0x01A3
    312c:	30 91 a4 01 	lds	r19, 0x01A4
    3130:	40 91 a5 01 	lds	r20, 0x01A5
    3134:	50 91 a6 01 	lds	r21, 0x01A6
    3138:	bc 01       	movw	r22, r24
    313a:	cd 01       	movw	r24, r26
    313c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	80 93 a3 01 	sts	0x01A3, r24
    3148:	90 93 a4 01 	sts	0x01A4, r25
    314c:	a0 93 a5 01 	sts	0x01A5, r26
    3150:	b0 93 a6 01 	sts	0x01A6, r27
    3154:	6e c0       	rjmp	.+220    	; 0x3232 <APP_voidTakefourthoperator+0x188>
					break;
				case '-': (result) -=number4;
    3156:	e0 90 a3 01 	lds	r14, 0x01A3
    315a:	f0 90 a4 01 	lds	r15, 0x01A4
    315e:	00 91 a5 01 	lds	r16, 0x01A5
    3162:	10 91 a6 01 	lds	r17, 0x01A6
    3166:	80 91 9e 01 	lds	r24, 0x019E
    316a:	90 91 9f 01 	lds	r25, 0x019F
    316e:	a0 91 a0 01 	lds	r26, 0x01A0
    3172:	b0 91 a1 01 	lds	r27, 0x01A1
    3176:	bc 01       	movw	r22, r24
    3178:	cd 01       	movw	r24, r26
    317a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    317e:	9b 01       	movw	r18, r22
    3180:	ac 01       	movw	r20, r24
    3182:	c8 01       	movw	r24, r16
    3184:	b7 01       	movw	r22, r14
    3186:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	80 93 a3 01 	sts	0x01A3, r24
    3192:	90 93 a4 01 	sts	0x01A4, r25
    3196:	a0 93 a5 01 	sts	0x01A5, r26
    319a:	b0 93 a6 01 	sts	0x01A6, r27
    319e:	49 c0       	rjmp	.+146    	; 0x3232 <APP_voidTakefourthoperator+0x188>
					break;

				case '/':
					(result) /=number4;
    31a0:	e0 90 a3 01 	lds	r14, 0x01A3
    31a4:	f0 90 a4 01 	lds	r15, 0x01A4
    31a8:	00 91 a5 01 	lds	r16, 0x01A5
    31ac:	10 91 a6 01 	lds	r17, 0x01A6
    31b0:	80 91 9e 01 	lds	r24, 0x019E
    31b4:	90 91 9f 01 	lds	r25, 0x019F
    31b8:	a0 91 a0 01 	lds	r26, 0x01A0
    31bc:	b0 91 a1 01 	lds	r27, 0x01A1
    31c0:	bc 01       	movw	r22, r24
    31c2:	cd 01       	movw	r24, r26
    31c4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    31c8:	9b 01       	movw	r18, r22
    31ca:	ac 01       	movw	r20, r24
    31cc:	c8 01       	movw	r24, r16
    31ce:	b7 01       	movw	r22, r14
    31d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	80 93 a3 01 	sts	0x01A3, r24
    31dc:	90 93 a4 01 	sts	0x01A4, r25
    31e0:	a0 93 a5 01 	sts	0x01A5, r26
    31e4:	b0 93 a6 01 	sts	0x01A6, r27
    31e8:	24 c0       	rjmp	.+72     	; 0x3232 <APP_voidTakefourthoperator+0x188>
					break;

				case '*':
					(result) *=number4;
    31ea:	80 91 9e 01 	lds	r24, 0x019E
    31ee:	90 91 9f 01 	lds	r25, 0x019F
    31f2:	a0 91 a0 01 	lds	r26, 0x01A0
    31f6:	b0 91 a1 01 	lds	r27, 0x01A1
    31fa:	bc 01       	movw	r22, r24
    31fc:	cd 01       	movw	r24, r26
    31fe:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	20 91 a3 01 	lds	r18, 0x01A3
    320a:	30 91 a4 01 	lds	r19, 0x01A4
    320e:	40 91 a5 01 	lds	r20, 0x01A5
    3212:	50 91 a6 01 	lds	r21, 0x01A6
    3216:	bc 01       	movw	r22, r24
    3218:	cd 01       	movw	r24, r26
    321a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	80 93 a3 01 	sts	0x01A3, r24
    3226:	90 93 a4 01 	sts	0x01A4, r25
    322a:	a0 93 a5 01 	sts	0x01A5, r26
    322e:	b0 93 a6 01 	sts	0x01A6, r27
					break;
				}

	switch(pressedkey)
    3232:	80 91 a2 01 	lds	r24, 0x01A2
    3236:	88 2f       	mov	r24, r24
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	8d 33       	cpi	r24, 0x3D	; 61
    323c:	91 05       	cpc	r25, r1
    323e:	09 f0       	breq	.+2      	; 0x3242 <APP_voidTakefourthoperator+0x198>
    3240:	f2 c0       	rjmp	.+484    	; 0x3426 <APP_voidTakefourthoperator+0x37c>
		{
		case '=' :
			LCD_void_DDRAM_Address(1,0);
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	60 e0       	ldi	r22, 0x00	; 0
    3246:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <LCD_void_DDRAM_Address>
			LCD_void_Write_String("Answer:");
    324a:	8a e6       	ldi	r24, 0x6A	; 106
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_void_Write_String>
			LCD_void_Write_Numbers(result);
    3252:	80 91 a3 01 	lds	r24, 0x01A3
    3256:	90 91 a4 01 	lds	r25, 0x01A4
    325a:	a0 91 a5 01 	lds	r26, 0x01A5
    325e:	b0 91 a6 01 	lds	r27, 0x01A6
    3262:	bc 01       	movw	r22, r24
    3264:	cd 01       	movw	r24, r26
    3266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	bc 01       	movw	r22, r24
    3270:	cd 01       	movw	r24, r26
    3272:	0e 94 0f 10 	call	0x201e	; 0x201e <LCD_void_Write_Numbers>
			pressedkey = KPD_Void_GET_Status();
    3276:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <KPD_Void_GET_Status>
    327a:	80 93 a2 01 	sts	0x01A2, r24
			if(pressedkey=='%')
    327e:	80 91 a2 01 	lds	r24, 0x01A2
    3282:	85 32       	cpi	r24, 0x25	; 37
    3284:	79 f5       	brne	.+94     	; 0x32e4 <APP_voidTakefourthoperator+0x23a>
				{
				result=0;
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	a0 e0       	ldi	r26, 0x00	; 0
    328c:	b0 e0       	ldi	r27, 0x00	; 0
    328e:	80 93 a3 01 	sts	0x01A3, r24
    3292:	90 93 a4 01 	sts	0x01A4, r25
    3296:	a0 93 a5 01 	sts	0x01A5, r26
    329a:	b0 93 a6 01 	sts	0x01A6, r27
										number1=0;
    329e:	10 92 92 01 	sts	0x0192, r1
    32a2:	10 92 93 01 	sts	0x0193, r1
    32a6:	10 92 94 01 	sts	0x0194, r1
    32aa:	10 92 95 01 	sts	0x0195, r1
										number2=0;
    32ae:	10 92 96 01 	sts	0x0196, r1
    32b2:	10 92 97 01 	sts	0x0197, r1
    32b6:	10 92 98 01 	sts	0x0198, r1
    32ba:	10 92 99 01 	sts	0x0199, r1
										number3=0;
    32be:	10 92 9a 01 	sts	0x019A, r1
    32c2:	10 92 9b 01 	sts	0x019B, r1
    32c6:	10 92 9c 01 	sts	0x019C, r1
    32ca:	10 92 9d 01 	sts	0x019D, r1
										number4=0;
    32ce:	10 92 9e 01 	sts	0x019E, r1
    32d2:	10 92 9f 01 	sts	0x019F, r1
    32d6:	10 92 a0 01 	sts	0x01A0, r1
    32da:	10 92 a1 01 	sts	0x01A1, r1
										APP_voidMainMenuScreen();
    32de:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <APP_voidMainMenuScreen>
    32e2:	cf c0       	rjmp	.+414    	; 0x3482 <APP_voidTakefourthoperator+0x3d8>
				}
			else
			{
				result=0;
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	a0 e0       	ldi	r26, 0x00	; 0
    32ea:	b0 e0       	ldi	r27, 0x00	; 0
    32ec:	80 93 a3 01 	sts	0x01A3, r24
    32f0:	90 93 a4 01 	sts	0x01A4, r25
    32f4:	a0 93 a5 01 	sts	0x01A5, r26
    32f8:	b0 93 a6 01 	sts	0x01A6, r27
										number1=0;
    32fc:	10 92 92 01 	sts	0x0192, r1
    3300:	10 92 93 01 	sts	0x0193, r1
    3304:	10 92 94 01 	sts	0x0194, r1
    3308:	10 92 95 01 	sts	0x0195, r1
										number2=0;
    330c:	10 92 96 01 	sts	0x0196, r1
    3310:	10 92 97 01 	sts	0x0197, r1
    3314:	10 92 98 01 	sts	0x0198, r1
    3318:	10 92 99 01 	sts	0x0199, r1
										number3=0;
    331c:	10 92 9a 01 	sts	0x019A, r1
    3320:	10 92 9b 01 	sts	0x019B, r1
    3324:	10 92 9c 01 	sts	0x019C, r1
    3328:	10 92 9d 01 	sts	0x019D, r1
										number4=0;				_delay_ms(500);
    332c:	10 92 9e 01 	sts	0x019E, r1
    3330:	10 92 9f 01 	sts	0x019F, r1
    3334:	10 92 a0 01 	sts	0x01A0, r1
    3338:	10 92 a1 01 	sts	0x01A1, r1
    333c:	80 e0       	ldi	r24, 0x00	; 0
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	aa ef       	ldi	r26, 0xFA	; 250
    3342:	b3 e4       	ldi	r27, 0x43	; 67
    3344:	8b 87       	std	Y+11, r24	; 0x0b
    3346:	9c 87       	std	Y+12, r25	; 0x0c
    3348:	ad 87       	std	Y+13, r26	; 0x0d
    334a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    334c:	6b 85       	ldd	r22, Y+11	; 0x0b
    334e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3350:	8d 85       	ldd	r24, Y+13	; 0x0d
    3352:	9e 85       	ldd	r25, Y+14	; 0x0e
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	4a ef       	ldi	r20, 0xFA	; 250
    335a:	54 e4       	ldi	r21, 0x44	; 68
    335c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	8f 83       	std	Y+7, r24	; 0x07
    3366:	98 87       	std	Y+8, r25	; 0x08
    3368:	a9 87       	std	Y+9, r26	; 0x09
    336a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    336c:	6f 81       	ldd	r22, Y+7	; 0x07
    336e:	78 85       	ldd	r23, Y+8	; 0x08
    3370:	89 85       	ldd	r24, Y+9	; 0x09
    3372:	9a 85       	ldd	r25, Y+10	; 0x0a
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	40 e8       	ldi	r20, 0x80	; 128
    337a:	5f e3       	ldi	r21, 0x3F	; 63
    337c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3380:	88 23       	and	r24, r24
    3382:	2c f4       	brge	.+10     	; 0x338e <APP_voidTakefourthoperator+0x2e4>
		__ticks = 1;
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	9e 83       	std	Y+6, r25	; 0x06
    338a:	8d 83       	std	Y+5, r24	; 0x05
    338c:	3f c0       	rjmp	.+126    	; 0x340c <APP_voidTakefourthoperator+0x362>
	else if (__tmp > 65535)
    338e:	6f 81       	ldd	r22, Y+7	; 0x07
    3390:	78 85       	ldd	r23, Y+8	; 0x08
    3392:	89 85       	ldd	r24, Y+9	; 0x09
    3394:	9a 85       	ldd	r25, Y+10	; 0x0a
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	3f ef       	ldi	r19, 0xFF	; 255
    339a:	4f e7       	ldi	r20, 0x7F	; 127
    339c:	57 e4       	ldi	r21, 0x47	; 71
    339e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33a2:	18 16       	cp	r1, r24
    33a4:	4c f5       	brge	.+82     	; 0x33f8 <APP_voidTakefourthoperator+0x34e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    33a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    33aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	40 e2       	ldi	r20, 0x20	; 32
    33b4:	51 e4       	ldi	r21, 0x41	; 65
    33b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ba:	dc 01       	movw	r26, r24
    33bc:	cb 01       	movw	r24, r22
    33be:	bc 01       	movw	r22, r24
    33c0:	cd 01       	movw	r24, r26
    33c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	9e 83       	std	Y+6, r25	; 0x06
    33cc:	8d 83       	std	Y+5, r24	; 0x05
    33ce:	0f c0       	rjmp	.+30     	; 0x33ee <APP_voidTakefourthoperator+0x344>
    33d0:	88 ec       	ldi	r24, 0xC8	; 200
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	9c 83       	std	Y+4, r25	; 0x04
    33d6:	8b 83       	std	Y+3, r24	; 0x03
    33d8:	8b 81       	ldd	r24, Y+3	; 0x03
    33da:	9c 81       	ldd	r25, Y+4	; 0x04
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	f1 f7       	brne	.-4      	; 0x33dc <APP_voidTakefourthoperator+0x332>
    33e0:	9c 83       	std	Y+4, r25	; 0x04
    33e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e4:	8d 81       	ldd	r24, Y+5	; 0x05
    33e6:	9e 81       	ldd	r25, Y+6	; 0x06
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	9e 83       	std	Y+6, r25	; 0x06
    33ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ee:	8d 81       	ldd	r24, Y+5	; 0x05
    33f0:	9e 81       	ldd	r25, Y+6	; 0x06
    33f2:	00 97       	sbiw	r24, 0x00	; 0
    33f4:	69 f7       	brne	.-38     	; 0x33d0 <APP_voidTakefourthoperator+0x326>
    33f6:	14 c0       	rjmp	.+40     	; 0x3420 <APP_voidTakefourthoperator+0x376>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f8:	6f 81       	ldd	r22, Y+7	; 0x07
    33fa:	78 85       	ldd	r23, Y+8	; 0x08
    33fc:	89 85       	ldd	r24, Y+9	; 0x09
    33fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	9e 83       	std	Y+6, r25	; 0x06
    340a:	8d 83       	std	Y+5, r24	; 0x05
    340c:	8d 81       	ldd	r24, Y+5	; 0x05
    340e:	9e 81       	ldd	r25, Y+6	; 0x06
    3410:	9a 83       	std	Y+2, r25	; 0x02
    3412:	89 83       	std	Y+1, r24	; 0x01
    3414:	89 81       	ldd	r24, Y+1	; 0x01
    3416:	9a 81       	ldd	r25, Y+2	; 0x02
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	f1 f7       	brne	.-4      	; 0x3418 <APP_voidTakefourthoperator+0x36e>
    341c:	9a 83       	std	Y+2, r25	; 0x02
    341e:	89 83       	std	Y+1, r24	; 0x01
				APP_voidMainMenuScreen();
    3420:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <APP_voidMainMenuScreen>
    3424:	2e c0       	rjmp	.+92     	; 0x3482 <APP_voidTakefourthoperator+0x3d8>
			break;



		default:
			result=0;
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	a0 e0       	ldi	r26, 0x00	; 0
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	80 93 a3 01 	sts	0x01A3, r24
    3432:	90 93 a4 01 	sts	0x01A4, r25
    3436:	a0 93 a5 01 	sts	0x01A5, r26
    343a:	b0 93 a6 01 	sts	0x01A6, r27
			number1=0;
    343e:	10 92 92 01 	sts	0x0192, r1
    3442:	10 92 93 01 	sts	0x0193, r1
    3446:	10 92 94 01 	sts	0x0194, r1
    344a:	10 92 95 01 	sts	0x0195, r1
			number2=0;
    344e:	10 92 96 01 	sts	0x0196, r1
    3452:	10 92 97 01 	sts	0x0197, r1
    3456:	10 92 98 01 	sts	0x0198, r1
    345a:	10 92 99 01 	sts	0x0199, r1
			number3=0;
    345e:	10 92 9a 01 	sts	0x019A, r1
    3462:	10 92 9b 01 	sts	0x019B, r1
    3466:	10 92 9c 01 	sts	0x019C, r1
    346a:	10 92 9d 01 	sts	0x019D, r1
			number4=0;
    346e:	10 92 9e 01 	sts	0x019E, r1
    3472:	10 92 9f 01 	sts	0x019F, r1
    3476:	10 92 a0 01 	sts	0x01A0, r1
    347a:	10 92 a1 01 	sts	0x01A1, r1
									APP_voidMainMenuScreen();
    347e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <APP_voidMainMenuScreen>

			}
}
    3482:	60 96       	adiw	r28, 0x10	; 16
    3484:	0f b6       	in	r0, 0x3f	; 63
    3486:	f8 94       	cli
    3488:	de bf       	out	0x3e, r29	; 62
    348a:	0f be       	out	0x3f, r0	; 63
    348c:	cd bf       	out	0x3d, r28	; 61
    348e:	cf 91       	pop	r28
    3490:	df 91       	pop	r29
    3492:	1f 91       	pop	r17
    3494:	0f 91       	pop	r16
    3496:	ff 90       	pop	r15
    3498:	ef 90       	pop	r14
    349a:	08 95       	ret

0000349c <main>:


#include"app.h"

void main(void)
{
    349c:	df 93       	push	r29
    349e:	cf 93       	push	r28
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
	APP_voidInit();
    34a4:	0e 94 cd 11 	call	0x239a	; 0x239a <APP_voidInit>
	APP_voidWelcomeScreen();
    34a8:	0e 94 da 11 	call	0x23b4	; 0x23b4 <APP_voidWelcomeScreen>
    34ac:	ff cf       	rjmp	.-2      	; 0x34ac <main+0x10>

000034ae <__mulsi3>:
    34ae:	62 9f       	mul	r22, r18
    34b0:	d0 01       	movw	r26, r0
    34b2:	73 9f       	mul	r23, r19
    34b4:	f0 01       	movw	r30, r0
    34b6:	82 9f       	mul	r24, r18
    34b8:	e0 0d       	add	r30, r0
    34ba:	f1 1d       	adc	r31, r1
    34bc:	64 9f       	mul	r22, r20
    34be:	e0 0d       	add	r30, r0
    34c0:	f1 1d       	adc	r31, r1
    34c2:	92 9f       	mul	r25, r18
    34c4:	f0 0d       	add	r31, r0
    34c6:	83 9f       	mul	r24, r19
    34c8:	f0 0d       	add	r31, r0
    34ca:	74 9f       	mul	r23, r20
    34cc:	f0 0d       	add	r31, r0
    34ce:	65 9f       	mul	r22, r21
    34d0:	f0 0d       	add	r31, r0
    34d2:	99 27       	eor	r25, r25
    34d4:	72 9f       	mul	r23, r18
    34d6:	b0 0d       	add	r27, r0
    34d8:	e1 1d       	adc	r30, r1
    34da:	f9 1f       	adc	r31, r25
    34dc:	63 9f       	mul	r22, r19
    34de:	b0 0d       	add	r27, r0
    34e0:	e1 1d       	adc	r30, r1
    34e2:	f9 1f       	adc	r31, r25
    34e4:	bd 01       	movw	r22, r26
    34e6:	cf 01       	movw	r24, r30
    34e8:	11 24       	eor	r1, r1
    34ea:	08 95       	ret

000034ec <__udivmodsi4>:
    34ec:	a1 e2       	ldi	r26, 0x21	; 33
    34ee:	1a 2e       	mov	r1, r26
    34f0:	aa 1b       	sub	r26, r26
    34f2:	bb 1b       	sub	r27, r27
    34f4:	fd 01       	movw	r30, r26
    34f6:	0d c0       	rjmp	.+26     	; 0x3512 <__udivmodsi4_ep>

000034f8 <__udivmodsi4_loop>:
    34f8:	aa 1f       	adc	r26, r26
    34fa:	bb 1f       	adc	r27, r27
    34fc:	ee 1f       	adc	r30, r30
    34fe:	ff 1f       	adc	r31, r31
    3500:	a2 17       	cp	r26, r18
    3502:	b3 07       	cpc	r27, r19
    3504:	e4 07       	cpc	r30, r20
    3506:	f5 07       	cpc	r31, r21
    3508:	20 f0       	brcs	.+8      	; 0x3512 <__udivmodsi4_ep>
    350a:	a2 1b       	sub	r26, r18
    350c:	b3 0b       	sbc	r27, r19
    350e:	e4 0b       	sbc	r30, r20
    3510:	f5 0b       	sbc	r31, r21

00003512 <__udivmodsi4_ep>:
    3512:	66 1f       	adc	r22, r22
    3514:	77 1f       	adc	r23, r23
    3516:	88 1f       	adc	r24, r24
    3518:	99 1f       	adc	r25, r25
    351a:	1a 94       	dec	r1
    351c:	69 f7       	brne	.-38     	; 0x34f8 <__udivmodsi4_loop>
    351e:	60 95       	com	r22
    3520:	70 95       	com	r23
    3522:	80 95       	com	r24
    3524:	90 95       	com	r25
    3526:	9b 01       	movw	r18, r22
    3528:	ac 01       	movw	r20, r24
    352a:	bd 01       	movw	r22, r26
    352c:	cf 01       	movw	r24, r30
    352e:	08 95       	ret

00003530 <__prologue_saves__>:
    3530:	2f 92       	push	r2
    3532:	3f 92       	push	r3
    3534:	4f 92       	push	r4
    3536:	5f 92       	push	r5
    3538:	6f 92       	push	r6
    353a:	7f 92       	push	r7
    353c:	8f 92       	push	r8
    353e:	9f 92       	push	r9
    3540:	af 92       	push	r10
    3542:	bf 92       	push	r11
    3544:	cf 92       	push	r12
    3546:	df 92       	push	r13
    3548:	ef 92       	push	r14
    354a:	ff 92       	push	r15
    354c:	0f 93       	push	r16
    354e:	1f 93       	push	r17
    3550:	cf 93       	push	r28
    3552:	df 93       	push	r29
    3554:	cd b7       	in	r28, 0x3d	; 61
    3556:	de b7       	in	r29, 0x3e	; 62
    3558:	ca 1b       	sub	r28, r26
    355a:	db 0b       	sbc	r29, r27
    355c:	0f b6       	in	r0, 0x3f	; 63
    355e:	f8 94       	cli
    3560:	de bf       	out	0x3e, r29	; 62
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	cd bf       	out	0x3d, r28	; 61
    3566:	09 94       	ijmp

00003568 <__epilogue_restores__>:
    3568:	2a 88       	ldd	r2, Y+18	; 0x12
    356a:	39 88       	ldd	r3, Y+17	; 0x11
    356c:	48 88       	ldd	r4, Y+16	; 0x10
    356e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3570:	6e 84       	ldd	r6, Y+14	; 0x0e
    3572:	7d 84       	ldd	r7, Y+13	; 0x0d
    3574:	8c 84       	ldd	r8, Y+12	; 0x0c
    3576:	9b 84       	ldd	r9, Y+11	; 0x0b
    3578:	aa 84       	ldd	r10, Y+10	; 0x0a
    357a:	b9 84       	ldd	r11, Y+9	; 0x09
    357c:	c8 84       	ldd	r12, Y+8	; 0x08
    357e:	df 80       	ldd	r13, Y+7	; 0x07
    3580:	ee 80       	ldd	r14, Y+6	; 0x06
    3582:	fd 80       	ldd	r15, Y+5	; 0x05
    3584:	0c 81       	ldd	r16, Y+4	; 0x04
    3586:	1b 81       	ldd	r17, Y+3	; 0x03
    3588:	aa 81       	ldd	r26, Y+2	; 0x02
    358a:	b9 81       	ldd	r27, Y+1	; 0x01
    358c:	ce 0f       	add	r28, r30
    358e:	d1 1d       	adc	r29, r1
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	f8 94       	cli
    3594:	de bf       	out	0x3e, r29	; 62
    3596:	0f be       	out	0x3f, r0	; 63
    3598:	cd bf       	out	0x3d, r28	; 61
    359a:	ed 01       	movw	r28, r26
    359c:	08 95       	ret

0000359e <itoa>:
    359e:	fb 01       	movw	r30, r22
    35a0:	9f 01       	movw	r18, r30
    35a2:	e8 94       	clt
    35a4:	42 30       	cpi	r20, 0x02	; 2
    35a6:	c4 f0       	brlt	.+48     	; 0x35d8 <itoa+0x3a>
    35a8:	45 32       	cpi	r20, 0x25	; 37
    35aa:	b4 f4       	brge	.+44     	; 0x35d8 <itoa+0x3a>
    35ac:	4a 30       	cpi	r20, 0x0A	; 10
    35ae:	29 f4       	brne	.+10     	; 0x35ba <itoa+0x1c>
    35b0:	97 fb       	bst	r25, 7
    35b2:	1e f4       	brtc	.+6      	; 0x35ba <itoa+0x1c>
    35b4:	90 95       	com	r25
    35b6:	81 95       	neg	r24
    35b8:	9f 4f       	sbci	r25, 0xFF	; 255
    35ba:	64 2f       	mov	r22, r20
    35bc:	77 27       	eor	r23, r23
    35be:	0e 94 00 1b 	call	0x3600	; 0x3600 <__udivmodhi4>
    35c2:	80 5d       	subi	r24, 0xD0	; 208
    35c4:	8a 33       	cpi	r24, 0x3A	; 58
    35c6:	0c f0       	brlt	.+2      	; 0x35ca <itoa+0x2c>
    35c8:	89 5d       	subi	r24, 0xD9	; 217
    35ca:	81 93       	st	Z+, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	00 97       	sbiw	r24, 0x00	; 0
    35d0:	a1 f7       	brne	.-24     	; 0x35ba <itoa+0x1c>
    35d2:	16 f4       	brtc	.+4      	; 0x35d8 <itoa+0x3a>
    35d4:	5d e2       	ldi	r21, 0x2D	; 45
    35d6:	51 93       	st	Z+, r21
    35d8:	10 82       	st	Z, r1
    35da:	c9 01       	movw	r24, r18
    35dc:	0c 94 f0 1a 	jmp	0x35e0	; 0x35e0 <strrev>

000035e0 <strrev>:
    35e0:	dc 01       	movw	r26, r24
    35e2:	fc 01       	movw	r30, r24
    35e4:	67 2f       	mov	r22, r23
    35e6:	71 91       	ld	r23, Z+
    35e8:	77 23       	and	r23, r23
    35ea:	e1 f7       	brne	.-8      	; 0x35e4 <strrev+0x4>
    35ec:	32 97       	sbiw	r30, 0x02	; 2
    35ee:	04 c0       	rjmp	.+8      	; 0x35f8 <strrev+0x18>
    35f0:	7c 91       	ld	r23, X
    35f2:	6d 93       	st	X+, r22
    35f4:	70 83       	st	Z, r23
    35f6:	62 91       	ld	r22, -Z
    35f8:	ae 17       	cp	r26, r30
    35fa:	bf 07       	cpc	r27, r31
    35fc:	c8 f3       	brcs	.-14     	; 0x35f0 <strrev+0x10>
    35fe:	08 95       	ret

00003600 <__udivmodhi4>:
    3600:	aa 1b       	sub	r26, r26
    3602:	bb 1b       	sub	r27, r27
    3604:	51 e1       	ldi	r21, 0x11	; 17
    3606:	07 c0       	rjmp	.+14     	; 0x3616 <__udivmodhi4_ep>

00003608 <__udivmodhi4_loop>:
    3608:	aa 1f       	adc	r26, r26
    360a:	bb 1f       	adc	r27, r27
    360c:	a6 17       	cp	r26, r22
    360e:	b7 07       	cpc	r27, r23
    3610:	10 f0       	brcs	.+4      	; 0x3616 <__udivmodhi4_ep>
    3612:	a6 1b       	sub	r26, r22
    3614:	b7 0b       	sbc	r27, r23

00003616 <__udivmodhi4_ep>:
    3616:	88 1f       	adc	r24, r24
    3618:	99 1f       	adc	r25, r25
    361a:	5a 95       	dec	r21
    361c:	a9 f7       	brne	.-22     	; 0x3608 <__udivmodhi4_loop>
    361e:	80 95       	com	r24
    3620:	90 95       	com	r25
    3622:	bc 01       	movw	r22, r24
    3624:	cd 01       	movw	r24, r26
    3626:	08 95       	ret

00003628 <_exit>:
    3628:	f8 94       	cli

0000362a <__stop_program>:
    362a:	ff cf       	rjmp	.-2      	; 0x362a <__stop_program>
